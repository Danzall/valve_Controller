
ValveController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f230  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ac8  0800f2f0  0800f2f0  0001f2f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010db8  08010db8  00030080  2**0
                  CONTENTS
  4 .ARM          00000000  08010db8  08010db8  00030080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010db8  08010db8  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010db8  08010db8  00020db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010dbc  08010dbc  00020dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08010dc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000162c  20000080  08010e40  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016ac  08010e40  000316ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c36  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a01  00000000  00000000  00048cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  0004c6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001398  00000000  00000000  0004dc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d1c6  00000000  00000000  0004ef98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ba13  00000000  00000000  0006c15e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a076e  00000000  00000000  00087b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001282df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f5c  00000000  00000000  00128330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800f2d8 	.word	0x0800f2d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	0800f2d8 	.word	0x0800f2d8

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f001 fce1 	bl	8001e18 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 fc31 	bl	8001cc8 <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fcd3 	bl	8001e18 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fcc9 	bl	8001e18 <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fc59 	bl	8001d4c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 fc4f 	bl	8001d4c <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_cfrcmple>:
 80004bc:	4684      	mov	ip, r0
 80004be:	0008      	movs	r0, r1
 80004c0:	4661      	mov	r1, ip
 80004c2:	e7ff      	b.n	80004c4 <__aeabi_cfcmpeq>

080004c4 <__aeabi_cfcmpeq>:
 80004c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c6:	f000 fb6d 	bl	8000ba4 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d401      	bmi.n	80004d2 <__aeabi_cfcmpeq+0xe>
 80004ce:	2100      	movs	r1, #0
 80004d0:	42c8      	cmn	r0, r1
 80004d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d4 <__aeabi_fcmpeq>:
 80004d4:	b510      	push	{r4, lr}
 80004d6:	f000 faf9 	bl	8000acc <__eqsf2>
 80004da:	4240      	negs	r0, r0
 80004dc:	3001      	adds	r0, #1
 80004de:	bd10      	pop	{r4, pc}

080004e0 <__aeabi_fcmplt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fb5f 	bl	8000ba4 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	db01      	blt.n	80004ee <__aeabi_fcmplt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmple>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fb55 	bl	8000ba4 <__lesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dd01      	ble.n	8000502 <__aeabi_fcmple+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpgt>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fb05 	bl	8000b18 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	dc01      	bgt.n	8000516 <__aeabi_fcmpgt+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_fcmpge>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 fafb 	bl	8000b18 <__gesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	da01      	bge.n	800052a <__aeabi_fcmpge+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			; (mov r8, r8)

08000530 <__aeabi_f2uiz>:
 8000530:	219e      	movs	r1, #158	; 0x9e
 8000532:	b510      	push	{r4, lr}
 8000534:	05c9      	lsls	r1, r1, #23
 8000536:	1c04      	adds	r4, r0, #0
 8000538:	f7ff fff0 	bl	800051c <__aeabi_fcmpge>
 800053c:	2800      	cmp	r0, #0
 800053e:	d103      	bne.n	8000548 <__aeabi_f2uiz+0x18>
 8000540:	1c20      	adds	r0, r4, #0
 8000542:	f000 fd21 	bl	8000f88 <__aeabi_f2iz>
 8000546:	bd10      	pop	{r4, pc}
 8000548:	219e      	movs	r1, #158	; 0x9e
 800054a:	1c20      	adds	r0, r4, #0
 800054c:	05c9      	lsls	r1, r1, #23
 800054e:	f000 fb6d 	bl	8000c2c <__aeabi_fsub>
 8000552:	f000 fd19 	bl	8000f88 <__aeabi_f2iz>
 8000556:	2380      	movs	r3, #128	; 0x80
 8000558:	061b      	lsls	r3, r3, #24
 800055a:	469c      	mov	ip, r3
 800055c:	4460      	add	r0, ip
 800055e:	e7f2      	b.n	8000546 <__aeabi_f2uiz+0x16>

08000560 <__aeabi_fadd>:
 8000560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000562:	46c6      	mov	lr, r8
 8000564:	0243      	lsls	r3, r0, #9
 8000566:	0a5b      	lsrs	r3, r3, #9
 8000568:	024e      	lsls	r6, r1, #9
 800056a:	0045      	lsls	r5, r0, #1
 800056c:	004f      	lsls	r7, r1, #1
 800056e:	00da      	lsls	r2, r3, #3
 8000570:	0fc4      	lsrs	r4, r0, #31
 8000572:	469c      	mov	ip, r3
 8000574:	0a70      	lsrs	r0, r6, #9
 8000576:	4690      	mov	r8, r2
 8000578:	b500      	push	{lr}
 800057a:	0e2d      	lsrs	r5, r5, #24
 800057c:	0e3f      	lsrs	r7, r7, #24
 800057e:	0fc9      	lsrs	r1, r1, #31
 8000580:	09b6      	lsrs	r6, r6, #6
 8000582:	428c      	cmp	r4, r1
 8000584:	d04b      	beq.n	800061e <__aeabi_fadd+0xbe>
 8000586:	1bea      	subs	r2, r5, r7
 8000588:	2a00      	cmp	r2, #0
 800058a:	dd36      	ble.n	80005fa <__aeabi_fadd+0x9a>
 800058c:	2f00      	cmp	r7, #0
 800058e:	d061      	beq.n	8000654 <__aeabi_fadd+0xf4>
 8000590:	2dff      	cmp	r5, #255	; 0xff
 8000592:	d100      	bne.n	8000596 <__aeabi_fadd+0x36>
 8000594:	e0ad      	b.n	80006f2 <__aeabi_fadd+0x192>
 8000596:	2380      	movs	r3, #128	; 0x80
 8000598:	04db      	lsls	r3, r3, #19
 800059a:	431e      	orrs	r6, r3
 800059c:	2a1b      	cmp	r2, #27
 800059e:	dc00      	bgt.n	80005a2 <__aeabi_fadd+0x42>
 80005a0:	e0d3      	b.n	800074a <__aeabi_fadd+0x1ea>
 80005a2:	2001      	movs	r0, #1
 80005a4:	4643      	mov	r3, r8
 80005a6:	1a18      	subs	r0, r3, r0
 80005a8:	0143      	lsls	r3, r0, #5
 80005aa:	d400      	bmi.n	80005ae <__aeabi_fadd+0x4e>
 80005ac:	e08c      	b.n	80006c8 <__aeabi_fadd+0x168>
 80005ae:	0180      	lsls	r0, r0, #6
 80005b0:	0987      	lsrs	r7, r0, #6
 80005b2:	0038      	movs	r0, r7
 80005b4:	f002 fb66 	bl	8002c84 <__clzsi2>
 80005b8:	3805      	subs	r0, #5
 80005ba:	4087      	lsls	r7, r0
 80005bc:	4285      	cmp	r5, r0
 80005be:	dc00      	bgt.n	80005c2 <__aeabi_fadd+0x62>
 80005c0:	e0b6      	b.n	8000730 <__aeabi_fadd+0x1d0>
 80005c2:	1a2d      	subs	r5, r5, r0
 80005c4:	48b3      	ldr	r0, [pc, #716]	; (8000894 <__aeabi_fadd+0x334>)
 80005c6:	4038      	ands	r0, r7
 80005c8:	0743      	lsls	r3, r0, #29
 80005ca:	d004      	beq.n	80005d6 <__aeabi_fadd+0x76>
 80005cc:	230f      	movs	r3, #15
 80005ce:	4003      	ands	r3, r0
 80005d0:	2b04      	cmp	r3, #4
 80005d2:	d000      	beq.n	80005d6 <__aeabi_fadd+0x76>
 80005d4:	3004      	adds	r0, #4
 80005d6:	0143      	lsls	r3, r0, #5
 80005d8:	d400      	bmi.n	80005dc <__aeabi_fadd+0x7c>
 80005da:	e078      	b.n	80006ce <__aeabi_fadd+0x16e>
 80005dc:	1c6a      	adds	r2, r5, #1
 80005de:	2dfe      	cmp	r5, #254	; 0xfe
 80005e0:	d065      	beq.n	80006ae <__aeabi_fadd+0x14e>
 80005e2:	0180      	lsls	r0, r0, #6
 80005e4:	0a43      	lsrs	r3, r0, #9
 80005e6:	469c      	mov	ip, r3
 80005e8:	b2d2      	uxtb	r2, r2
 80005ea:	4663      	mov	r3, ip
 80005ec:	05d0      	lsls	r0, r2, #23
 80005ee:	4318      	orrs	r0, r3
 80005f0:	07e4      	lsls	r4, r4, #31
 80005f2:	4320      	orrs	r0, r4
 80005f4:	bc80      	pop	{r7}
 80005f6:	46b8      	mov	r8, r7
 80005f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005fa:	2a00      	cmp	r2, #0
 80005fc:	d035      	beq.n	800066a <__aeabi_fadd+0x10a>
 80005fe:	1b7a      	subs	r2, r7, r5
 8000600:	2d00      	cmp	r5, #0
 8000602:	d000      	beq.n	8000606 <__aeabi_fadd+0xa6>
 8000604:	e0af      	b.n	8000766 <__aeabi_fadd+0x206>
 8000606:	4643      	mov	r3, r8
 8000608:	2b00      	cmp	r3, #0
 800060a:	d100      	bne.n	800060e <__aeabi_fadd+0xae>
 800060c:	e0a7      	b.n	800075e <__aeabi_fadd+0x1fe>
 800060e:	1e53      	subs	r3, r2, #1
 8000610:	2a01      	cmp	r2, #1
 8000612:	d100      	bne.n	8000616 <__aeabi_fadd+0xb6>
 8000614:	e12f      	b.n	8000876 <__aeabi_fadd+0x316>
 8000616:	2aff      	cmp	r2, #255	; 0xff
 8000618:	d069      	beq.n	80006ee <__aeabi_fadd+0x18e>
 800061a:	001a      	movs	r2, r3
 800061c:	e0aa      	b.n	8000774 <__aeabi_fadd+0x214>
 800061e:	1be9      	subs	r1, r5, r7
 8000620:	2900      	cmp	r1, #0
 8000622:	dd70      	ble.n	8000706 <__aeabi_fadd+0x1a6>
 8000624:	2f00      	cmp	r7, #0
 8000626:	d037      	beq.n	8000698 <__aeabi_fadd+0x138>
 8000628:	2dff      	cmp	r5, #255	; 0xff
 800062a:	d062      	beq.n	80006f2 <__aeabi_fadd+0x192>
 800062c:	2380      	movs	r3, #128	; 0x80
 800062e:	04db      	lsls	r3, r3, #19
 8000630:	431e      	orrs	r6, r3
 8000632:	291b      	cmp	r1, #27
 8000634:	dc00      	bgt.n	8000638 <__aeabi_fadd+0xd8>
 8000636:	e0b0      	b.n	800079a <__aeabi_fadd+0x23a>
 8000638:	2001      	movs	r0, #1
 800063a:	4440      	add	r0, r8
 800063c:	0143      	lsls	r3, r0, #5
 800063e:	d543      	bpl.n	80006c8 <__aeabi_fadd+0x168>
 8000640:	3501      	adds	r5, #1
 8000642:	2dff      	cmp	r5, #255	; 0xff
 8000644:	d033      	beq.n	80006ae <__aeabi_fadd+0x14e>
 8000646:	2301      	movs	r3, #1
 8000648:	4a93      	ldr	r2, [pc, #588]	; (8000898 <__aeabi_fadd+0x338>)
 800064a:	4003      	ands	r3, r0
 800064c:	0840      	lsrs	r0, r0, #1
 800064e:	4010      	ands	r0, r2
 8000650:	4318      	orrs	r0, r3
 8000652:	e7b9      	b.n	80005c8 <__aeabi_fadd+0x68>
 8000654:	2e00      	cmp	r6, #0
 8000656:	d100      	bne.n	800065a <__aeabi_fadd+0xfa>
 8000658:	e083      	b.n	8000762 <__aeabi_fadd+0x202>
 800065a:	1e51      	subs	r1, r2, #1
 800065c:	2a01      	cmp	r2, #1
 800065e:	d100      	bne.n	8000662 <__aeabi_fadd+0x102>
 8000660:	e0d8      	b.n	8000814 <__aeabi_fadd+0x2b4>
 8000662:	2aff      	cmp	r2, #255	; 0xff
 8000664:	d045      	beq.n	80006f2 <__aeabi_fadd+0x192>
 8000666:	000a      	movs	r2, r1
 8000668:	e798      	b.n	800059c <__aeabi_fadd+0x3c>
 800066a:	27fe      	movs	r7, #254	; 0xfe
 800066c:	1c6a      	adds	r2, r5, #1
 800066e:	4217      	tst	r7, r2
 8000670:	d000      	beq.n	8000674 <__aeabi_fadd+0x114>
 8000672:	e086      	b.n	8000782 <__aeabi_fadd+0x222>
 8000674:	2d00      	cmp	r5, #0
 8000676:	d000      	beq.n	800067a <__aeabi_fadd+0x11a>
 8000678:	e0b7      	b.n	80007ea <__aeabi_fadd+0x28a>
 800067a:	4643      	mov	r3, r8
 800067c:	2b00      	cmp	r3, #0
 800067e:	d100      	bne.n	8000682 <__aeabi_fadd+0x122>
 8000680:	e0f3      	b.n	800086a <__aeabi_fadd+0x30a>
 8000682:	2200      	movs	r2, #0
 8000684:	2e00      	cmp	r6, #0
 8000686:	d0b0      	beq.n	80005ea <__aeabi_fadd+0x8a>
 8000688:	1b98      	subs	r0, r3, r6
 800068a:	0143      	lsls	r3, r0, #5
 800068c:	d400      	bmi.n	8000690 <__aeabi_fadd+0x130>
 800068e:	e0fa      	b.n	8000886 <__aeabi_fadd+0x326>
 8000690:	4643      	mov	r3, r8
 8000692:	000c      	movs	r4, r1
 8000694:	1af0      	subs	r0, r6, r3
 8000696:	e797      	b.n	80005c8 <__aeabi_fadd+0x68>
 8000698:	2e00      	cmp	r6, #0
 800069a:	d100      	bne.n	800069e <__aeabi_fadd+0x13e>
 800069c:	e0c8      	b.n	8000830 <__aeabi_fadd+0x2d0>
 800069e:	1e4a      	subs	r2, r1, #1
 80006a0:	2901      	cmp	r1, #1
 80006a2:	d100      	bne.n	80006a6 <__aeabi_fadd+0x146>
 80006a4:	e0ae      	b.n	8000804 <__aeabi_fadd+0x2a4>
 80006a6:	29ff      	cmp	r1, #255	; 0xff
 80006a8:	d023      	beq.n	80006f2 <__aeabi_fadd+0x192>
 80006aa:	0011      	movs	r1, r2
 80006ac:	e7c1      	b.n	8000632 <__aeabi_fadd+0xd2>
 80006ae:	2300      	movs	r3, #0
 80006b0:	22ff      	movs	r2, #255	; 0xff
 80006b2:	469c      	mov	ip, r3
 80006b4:	e799      	b.n	80005ea <__aeabi_fadd+0x8a>
 80006b6:	21fe      	movs	r1, #254	; 0xfe
 80006b8:	1c6a      	adds	r2, r5, #1
 80006ba:	4211      	tst	r1, r2
 80006bc:	d077      	beq.n	80007ae <__aeabi_fadd+0x24e>
 80006be:	2aff      	cmp	r2, #255	; 0xff
 80006c0:	d0f5      	beq.n	80006ae <__aeabi_fadd+0x14e>
 80006c2:	0015      	movs	r5, r2
 80006c4:	4446      	add	r6, r8
 80006c6:	0870      	lsrs	r0, r6, #1
 80006c8:	0743      	lsls	r3, r0, #29
 80006ca:	d000      	beq.n	80006ce <__aeabi_fadd+0x16e>
 80006cc:	e77e      	b.n	80005cc <__aeabi_fadd+0x6c>
 80006ce:	08c3      	lsrs	r3, r0, #3
 80006d0:	2dff      	cmp	r5, #255	; 0xff
 80006d2:	d00e      	beq.n	80006f2 <__aeabi_fadd+0x192>
 80006d4:	025b      	lsls	r3, r3, #9
 80006d6:	0a5b      	lsrs	r3, r3, #9
 80006d8:	469c      	mov	ip, r3
 80006da:	b2ea      	uxtb	r2, r5
 80006dc:	e785      	b.n	80005ea <__aeabi_fadd+0x8a>
 80006de:	2e00      	cmp	r6, #0
 80006e0:	d007      	beq.n	80006f2 <__aeabi_fadd+0x192>
 80006e2:	2280      	movs	r2, #128	; 0x80
 80006e4:	03d2      	lsls	r2, r2, #15
 80006e6:	4213      	tst	r3, r2
 80006e8:	d003      	beq.n	80006f2 <__aeabi_fadd+0x192>
 80006ea:	4210      	tst	r0, r2
 80006ec:	d101      	bne.n	80006f2 <__aeabi_fadd+0x192>
 80006ee:	000c      	movs	r4, r1
 80006f0:	0003      	movs	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0db      	beq.n	80006ae <__aeabi_fadd+0x14e>
 80006f6:	2080      	movs	r0, #128	; 0x80
 80006f8:	03c0      	lsls	r0, r0, #15
 80006fa:	4318      	orrs	r0, r3
 80006fc:	0240      	lsls	r0, r0, #9
 80006fe:	0a43      	lsrs	r3, r0, #9
 8000700:	469c      	mov	ip, r3
 8000702:	22ff      	movs	r2, #255	; 0xff
 8000704:	e771      	b.n	80005ea <__aeabi_fadd+0x8a>
 8000706:	2900      	cmp	r1, #0
 8000708:	d0d5      	beq.n	80006b6 <__aeabi_fadd+0x156>
 800070a:	1b7a      	subs	r2, r7, r5
 800070c:	2d00      	cmp	r5, #0
 800070e:	d160      	bne.n	80007d2 <__aeabi_fadd+0x272>
 8000710:	4643      	mov	r3, r8
 8000712:	2b00      	cmp	r3, #0
 8000714:	d024      	beq.n	8000760 <__aeabi_fadd+0x200>
 8000716:	1e53      	subs	r3, r2, #1
 8000718:	2a01      	cmp	r2, #1
 800071a:	d073      	beq.n	8000804 <__aeabi_fadd+0x2a4>
 800071c:	2aff      	cmp	r2, #255	; 0xff
 800071e:	d0e7      	beq.n	80006f0 <__aeabi_fadd+0x190>
 8000720:	001a      	movs	r2, r3
 8000722:	2a1b      	cmp	r2, #27
 8000724:	dc00      	bgt.n	8000728 <__aeabi_fadd+0x1c8>
 8000726:	e085      	b.n	8000834 <__aeabi_fadd+0x2d4>
 8000728:	2001      	movs	r0, #1
 800072a:	003d      	movs	r5, r7
 800072c:	1980      	adds	r0, r0, r6
 800072e:	e785      	b.n	800063c <__aeabi_fadd+0xdc>
 8000730:	2320      	movs	r3, #32
 8000732:	003a      	movs	r2, r7
 8000734:	1b45      	subs	r5, r0, r5
 8000736:	0038      	movs	r0, r7
 8000738:	3501      	adds	r5, #1
 800073a:	40ea      	lsrs	r2, r5
 800073c:	1b5d      	subs	r5, r3, r5
 800073e:	40a8      	lsls	r0, r5
 8000740:	1e43      	subs	r3, r0, #1
 8000742:	4198      	sbcs	r0, r3
 8000744:	2500      	movs	r5, #0
 8000746:	4310      	orrs	r0, r2
 8000748:	e73e      	b.n	80005c8 <__aeabi_fadd+0x68>
 800074a:	2320      	movs	r3, #32
 800074c:	0030      	movs	r0, r6
 800074e:	1a9b      	subs	r3, r3, r2
 8000750:	0031      	movs	r1, r6
 8000752:	4098      	lsls	r0, r3
 8000754:	40d1      	lsrs	r1, r2
 8000756:	1e43      	subs	r3, r0, #1
 8000758:	4198      	sbcs	r0, r3
 800075a:	4308      	orrs	r0, r1
 800075c:	e722      	b.n	80005a4 <__aeabi_fadd+0x44>
 800075e:	000c      	movs	r4, r1
 8000760:	0003      	movs	r3, r0
 8000762:	0015      	movs	r5, r2
 8000764:	e7b4      	b.n	80006d0 <__aeabi_fadd+0x170>
 8000766:	2fff      	cmp	r7, #255	; 0xff
 8000768:	d0c1      	beq.n	80006ee <__aeabi_fadd+0x18e>
 800076a:	2380      	movs	r3, #128	; 0x80
 800076c:	4640      	mov	r0, r8
 800076e:	04db      	lsls	r3, r3, #19
 8000770:	4318      	orrs	r0, r3
 8000772:	4680      	mov	r8, r0
 8000774:	2a1b      	cmp	r2, #27
 8000776:	dd51      	ble.n	800081c <__aeabi_fadd+0x2bc>
 8000778:	2001      	movs	r0, #1
 800077a:	000c      	movs	r4, r1
 800077c:	003d      	movs	r5, r7
 800077e:	1a30      	subs	r0, r6, r0
 8000780:	e712      	b.n	80005a8 <__aeabi_fadd+0x48>
 8000782:	4643      	mov	r3, r8
 8000784:	1b9f      	subs	r7, r3, r6
 8000786:	017b      	lsls	r3, r7, #5
 8000788:	d42b      	bmi.n	80007e2 <__aeabi_fadd+0x282>
 800078a:	2f00      	cmp	r7, #0
 800078c:	d000      	beq.n	8000790 <__aeabi_fadd+0x230>
 800078e:	e710      	b.n	80005b2 <__aeabi_fadd+0x52>
 8000790:	2300      	movs	r3, #0
 8000792:	2400      	movs	r4, #0
 8000794:	2200      	movs	r2, #0
 8000796:	469c      	mov	ip, r3
 8000798:	e727      	b.n	80005ea <__aeabi_fadd+0x8a>
 800079a:	2320      	movs	r3, #32
 800079c:	0032      	movs	r2, r6
 800079e:	0030      	movs	r0, r6
 80007a0:	40ca      	lsrs	r2, r1
 80007a2:	1a59      	subs	r1, r3, r1
 80007a4:	4088      	lsls	r0, r1
 80007a6:	1e43      	subs	r3, r0, #1
 80007a8:	4198      	sbcs	r0, r3
 80007aa:	4310      	orrs	r0, r2
 80007ac:	e745      	b.n	800063a <__aeabi_fadd+0xda>
 80007ae:	2d00      	cmp	r5, #0
 80007b0:	d14a      	bne.n	8000848 <__aeabi_fadd+0x2e8>
 80007b2:	4643      	mov	r3, r8
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d063      	beq.n	8000880 <__aeabi_fadd+0x320>
 80007b8:	2200      	movs	r2, #0
 80007ba:	2e00      	cmp	r6, #0
 80007bc:	d100      	bne.n	80007c0 <__aeabi_fadd+0x260>
 80007be:	e714      	b.n	80005ea <__aeabi_fadd+0x8a>
 80007c0:	0030      	movs	r0, r6
 80007c2:	4440      	add	r0, r8
 80007c4:	0143      	lsls	r3, r0, #5
 80007c6:	d400      	bmi.n	80007ca <__aeabi_fadd+0x26a>
 80007c8:	e77e      	b.n	80006c8 <__aeabi_fadd+0x168>
 80007ca:	4b32      	ldr	r3, [pc, #200]	; (8000894 <__aeabi_fadd+0x334>)
 80007cc:	3501      	adds	r5, #1
 80007ce:	4018      	ands	r0, r3
 80007d0:	e77a      	b.n	80006c8 <__aeabi_fadd+0x168>
 80007d2:	2fff      	cmp	r7, #255	; 0xff
 80007d4:	d08c      	beq.n	80006f0 <__aeabi_fadd+0x190>
 80007d6:	2380      	movs	r3, #128	; 0x80
 80007d8:	4641      	mov	r1, r8
 80007da:	04db      	lsls	r3, r3, #19
 80007dc:	4319      	orrs	r1, r3
 80007de:	4688      	mov	r8, r1
 80007e0:	e79f      	b.n	8000722 <__aeabi_fadd+0x1c2>
 80007e2:	4643      	mov	r3, r8
 80007e4:	000c      	movs	r4, r1
 80007e6:	1af7      	subs	r7, r6, r3
 80007e8:	e6e3      	b.n	80005b2 <__aeabi_fadd+0x52>
 80007ea:	4642      	mov	r2, r8
 80007ec:	2a00      	cmp	r2, #0
 80007ee:	d000      	beq.n	80007f2 <__aeabi_fadd+0x292>
 80007f0:	e775      	b.n	80006de <__aeabi_fadd+0x17e>
 80007f2:	2e00      	cmp	r6, #0
 80007f4:	d000      	beq.n	80007f8 <__aeabi_fadd+0x298>
 80007f6:	e77a      	b.n	80006ee <__aeabi_fadd+0x18e>
 80007f8:	2380      	movs	r3, #128	; 0x80
 80007fa:	03db      	lsls	r3, r3, #15
 80007fc:	2400      	movs	r4, #0
 80007fe:	469c      	mov	ip, r3
 8000800:	22ff      	movs	r2, #255	; 0xff
 8000802:	e6f2      	b.n	80005ea <__aeabi_fadd+0x8a>
 8000804:	0030      	movs	r0, r6
 8000806:	4440      	add	r0, r8
 8000808:	2501      	movs	r5, #1
 800080a:	0143      	lsls	r3, r0, #5
 800080c:	d400      	bmi.n	8000810 <__aeabi_fadd+0x2b0>
 800080e:	e75b      	b.n	80006c8 <__aeabi_fadd+0x168>
 8000810:	2502      	movs	r5, #2
 8000812:	e718      	b.n	8000646 <__aeabi_fadd+0xe6>
 8000814:	4643      	mov	r3, r8
 8000816:	2501      	movs	r5, #1
 8000818:	1b98      	subs	r0, r3, r6
 800081a:	e6c5      	b.n	80005a8 <__aeabi_fadd+0x48>
 800081c:	2320      	movs	r3, #32
 800081e:	4644      	mov	r4, r8
 8000820:	4640      	mov	r0, r8
 8000822:	40d4      	lsrs	r4, r2
 8000824:	1a9a      	subs	r2, r3, r2
 8000826:	4090      	lsls	r0, r2
 8000828:	1e43      	subs	r3, r0, #1
 800082a:	4198      	sbcs	r0, r3
 800082c:	4320      	orrs	r0, r4
 800082e:	e7a4      	b.n	800077a <__aeabi_fadd+0x21a>
 8000830:	000d      	movs	r5, r1
 8000832:	e74d      	b.n	80006d0 <__aeabi_fadd+0x170>
 8000834:	2320      	movs	r3, #32
 8000836:	4641      	mov	r1, r8
 8000838:	4640      	mov	r0, r8
 800083a:	40d1      	lsrs	r1, r2
 800083c:	1a9a      	subs	r2, r3, r2
 800083e:	4090      	lsls	r0, r2
 8000840:	1e43      	subs	r3, r0, #1
 8000842:	4198      	sbcs	r0, r3
 8000844:	4308      	orrs	r0, r1
 8000846:	e770      	b.n	800072a <__aeabi_fadd+0x1ca>
 8000848:	4642      	mov	r2, r8
 800084a:	2a00      	cmp	r2, #0
 800084c:	d100      	bne.n	8000850 <__aeabi_fadd+0x2f0>
 800084e:	e74f      	b.n	80006f0 <__aeabi_fadd+0x190>
 8000850:	2e00      	cmp	r6, #0
 8000852:	d100      	bne.n	8000856 <__aeabi_fadd+0x2f6>
 8000854:	e74d      	b.n	80006f2 <__aeabi_fadd+0x192>
 8000856:	2280      	movs	r2, #128	; 0x80
 8000858:	03d2      	lsls	r2, r2, #15
 800085a:	4213      	tst	r3, r2
 800085c:	d100      	bne.n	8000860 <__aeabi_fadd+0x300>
 800085e:	e748      	b.n	80006f2 <__aeabi_fadd+0x192>
 8000860:	4210      	tst	r0, r2
 8000862:	d000      	beq.n	8000866 <__aeabi_fadd+0x306>
 8000864:	e745      	b.n	80006f2 <__aeabi_fadd+0x192>
 8000866:	0003      	movs	r3, r0
 8000868:	e743      	b.n	80006f2 <__aeabi_fadd+0x192>
 800086a:	2e00      	cmp	r6, #0
 800086c:	d090      	beq.n	8000790 <__aeabi_fadd+0x230>
 800086e:	000c      	movs	r4, r1
 8000870:	4684      	mov	ip, r0
 8000872:	2200      	movs	r2, #0
 8000874:	e6b9      	b.n	80005ea <__aeabi_fadd+0x8a>
 8000876:	4643      	mov	r3, r8
 8000878:	000c      	movs	r4, r1
 800087a:	1af0      	subs	r0, r6, r3
 800087c:	3501      	adds	r5, #1
 800087e:	e693      	b.n	80005a8 <__aeabi_fadd+0x48>
 8000880:	4684      	mov	ip, r0
 8000882:	2200      	movs	r2, #0
 8000884:	e6b1      	b.n	80005ea <__aeabi_fadd+0x8a>
 8000886:	2800      	cmp	r0, #0
 8000888:	d000      	beq.n	800088c <__aeabi_fadd+0x32c>
 800088a:	e71d      	b.n	80006c8 <__aeabi_fadd+0x168>
 800088c:	2300      	movs	r3, #0
 800088e:	2400      	movs	r4, #0
 8000890:	469c      	mov	ip, r3
 8000892:	e6aa      	b.n	80005ea <__aeabi_fadd+0x8a>
 8000894:	fbffffff 	.word	0xfbffffff
 8000898:	7dffffff 	.word	0x7dffffff

0800089c <__aeabi_fdiv>:
 800089c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089e:	464f      	mov	r7, r9
 80008a0:	4646      	mov	r6, r8
 80008a2:	46d6      	mov	lr, sl
 80008a4:	0245      	lsls	r5, r0, #9
 80008a6:	b5c0      	push	{r6, r7, lr}
 80008a8:	0047      	lsls	r7, r0, #1
 80008aa:	1c0c      	adds	r4, r1, #0
 80008ac:	0a6d      	lsrs	r5, r5, #9
 80008ae:	0e3f      	lsrs	r7, r7, #24
 80008b0:	0fc6      	lsrs	r6, r0, #31
 80008b2:	2f00      	cmp	r7, #0
 80008b4:	d100      	bne.n	80008b8 <__aeabi_fdiv+0x1c>
 80008b6:	e070      	b.n	800099a <__aeabi_fdiv+0xfe>
 80008b8:	2fff      	cmp	r7, #255	; 0xff
 80008ba:	d100      	bne.n	80008be <__aeabi_fdiv+0x22>
 80008bc:	e075      	b.n	80009aa <__aeabi_fdiv+0x10e>
 80008be:	00eb      	lsls	r3, r5, #3
 80008c0:	2580      	movs	r5, #128	; 0x80
 80008c2:	04ed      	lsls	r5, r5, #19
 80008c4:	431d      	orrs	r5, r3
 80008c6:	2300      	movs	r3, #0
 80008c8:	4699      	mov	r9, r3
 80008ca:	469a      	mov	sl, r3
 80008cc:	3f7f      	subs	r7, #127	; 0x7f
 80008ce:	0260      	lsls	r0, r4, #9
 80008d0:	0a43      	lsrs	r3, r0, #9
 80008d2:	4698      	mov	r8, r3
 80008d4:	0063      	lsls	r3, r4, #1
 80008d6:	0e1b      	lsrs	r3, r3, #24
 80008d8:	0fe4      	lsrs	r4, r4, #31
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d04e      	beq.n	800097c <__aeabi_fdiv+0xe0>
 80008de:	2bff      	cmp	r3, #255	; 0xff
 80008e0:	d046      	beq.n	8000970 <__aeabi_fdiv+0xd4>
 80008e2:	4642      	mov	r2, r8
 80008e4:	00d0      	lsls	r0, r2, #3
 80008e6:	2280      	movs	r2, #128	; 0x80
 80008e8:	04d2      	lsls	r2, r2, #19
 80008ea:	4302      	orrs	r2, r0
 80008ec:	4690      	mov	r8, r2
 80008ee:	2200      	movs	r2, #0
 80008f0:	3b7f      	subs	r3, #127	; 0x7f
 80008f2:	0031      	movs	r1, r6
 80008f4:	1aff      	subs	r7, r7, r3
 80008f6:	464b      	mov	r3, r9
 80008f8:	4061      	eors	r1, r4
 80008fa:	b2c9      	uxtb	r1, r1
 80008fc:	4313      	orrs	r3, r2
 80008fe:	2b0f      	cmp	r3, #15
 8000900:	d900      	bls.n	8000904 <__aeabi_fdiv+0x68>
 8000902:	e0b5      	b.n	8000a70 <__aeabi_fdiv+0x1d4>
 8000904:	486e      	ldr	r0, [pc, #440]	; (8000ac0 <__aeabi_fdiv+0x224>)
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	58c3      	ldr	r3, [r0, r3]
 800090a:	469f      	mov	pc, r3
 800090c:	2300      	movs	r3, #0
 800090e:	4698      	mov	r8, r3
 8000910:	0026      	movs	r6, r4
 8000912:	4645      	mov	r5, r8
 8000914:	4692      	mov	sl, r2
 8000916:	4653      	mov	r3, sl
 8000918:	2b02      	cmp	r3, #2
 800091a:	d100      	bne.n	800091e <__aeabi_fdiv+0x82>
 800091c:	e089      	b.n	8000a32 <__aeabi_fdiv+0x196>
 800091e:	2b03      	cmp	r3, #3
 8000920:	d100      	bne.n	8000924 <__aeabi_fdiv+0x88>
 8000922:	e09e      	b.n	8000a62 <__aeabi_fdiv+0x1c6>
 8000924:	2b01      	cmp	r3, #1
 8000926:	d018      	beq.n	800095a <__aeabi_fdiv+0xbe>
 8000928:	003b      	movs	r3, r7
 800092a:	337f      	adds	r3, #127	; 0x7f
 800092c:	2b00      	cmp	r3, #0
 800092e:	dd69      	ble.n	8000a04 <__aeabi_fdiv+0x168>
 8000930:	076a      	lsls	r2, r5, #29
 8000932:	d004      	beq.n	800093e <__aeabi_fdiv+0xa2>
 8000934:	220f      	movs	r2, #15
 8000936:	402a      	ands	r2, r5
 8000938:	2a04      	cmp	r2, #4
 800093a:	d000      	beq.n	800093e <__aeabi_fdiv+0xa2>
 800093c:	3504      	adds	r5, #4
 800093e:	012a      	lsls	r2, r5, #4
 8000940:	d503      	bpl.n	800094a <__aeabi_fdiv+0xae>
 8000942:	4b60      	ldr	r3, [pc, #384]	; (8000ac4 <__aeabi_fdiv+0x228>)
 8000944:	401d      	ands	r5, r3
 8000946:	003b      	movs	r3, r7
 8000948:	3380      	adds	r3, #128	; 0x80
 800094a:	2bfe      	cmp	r3, #254	; 0xfe
 800094c:	dd00      	ble.n	8000950 <__aeabi_fdiv+0xb4>
 800094e:	e070      	b.n	8000a32 <__aeabi_fdiv+0x196>
 8000950:	01ad      	lsls	r5, r5, #6
 8000952:	0a6d      	lsrs	r5, r5, #9
 8000954:	b2d8      	uxtb	r0, r3
 8000956:	e002      	b.n	800095e <__aeabi_fdiv+0xc2>
 8000958:	000e      	movs	r6, r1
 800095a:	2000      	movs	r0, #0
 800095c:	2500      	movs	r5, #0
 800095e:	05c0      	lsls	r0, r0, #23
 8000960:	4328      	orrs	r0, r5
 8000962:	07f6      	lsls	r6, r6, #31
 8000964:	4330      	orrs	r0, r6
 8000966:	bce0      	pop	{r5, r6, r7}
 8000968:	46ba      	mov	sl, r7
 800096a:	46b1      	mov	r9, r6
 800096c:	46a8      	mov	r8, r5
 800096e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000970:	4643      	mov	r3, r8
 8000972:	2b00      	cmp	r3, #0
 8000974:	d13f      	bne.n	80009f6 <__aeabi_fdiv+0x15a>
 8000976:	2202      	movs	r2, #2
 8000978:	3fff      	subs	r7, #255	; 0xff
 800097a:	e003      	b.n	8000984 <__aeabi_fdiv+0xe8>
 800097c:	4643      	mov	r3, r8
 800097e:	2b00      	cmp	r3, #0
 8000980:	d12d      	bne.n	80009de <__aeabi_fdiv+0x142>
 8000982:	2201      	movs	r2, #1
 8000984:	0031      	movs	r1, r6
 8000986:	464b      	mov	r3, r9
 8000988:	4061      	eors	r1, r4
 800098a:	b2c9      	uxtb	r1, r1
 800098c:	4313      	orrs	r3, r2
 800098e:	2b0f      	cmp	r3, #15
 8000990:	d834      	bhi.n	80009fc <__aeabi_fdiv+0x160>
 8000992:	484d      	ldr	r0, [pc, #308]	; (8000ac8 <__aeabi_fdiv+0x22c>)
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	58c3      	ldr	r3, [r0, r3]
 8000998:	469f      	mov	pc, r3
 800099a:	2d00      	cmp	r5, #0
 800099c:	d113      	bne.n	80009c6 <__aeabi_fdiv+0x12a>
 800099e:	2304      	movs	r3, #4
 80009a0:	4699      	mov	r9, r3
 80009a2:	3b03      	subs	r3, #3
 80009a4:	2700      	movs	r7, #0
 80009a6:	469a      	mov	sl, r3
 80009a8:	e791      	b.n	80008ce <__aeabi_fdiv+0x32>
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d105      	bne.n	80009ba <__aeabi_fdiv+0x11e>
 80009ae:	2308      	movs	r3, #8
 80009b0:	4699      	mov	r9, r3
 80009b2:	3b06      	subs	r3, #6
 80009b4:	27ff      	movs	r7, #255	; 0xff
 80009b6:	469a      	mov	sl, r3
 80009b8:	e789      	b.n	80008ce <__aeabi_fdiv+0x32>
 80009ba:	230c      	movs	r3, #12
 80009bc:	4699      	mov	r9, r3
 80009be:	3b09      	subs	r3, #9
 80009c0:	27ff      	movs	r7, #255	; 0xff
 80009c2:	469a      	mov	sl, r3
 80009c4:	e783      	b.n	80008ce <__aeabi_fdiv+0x32>
 80009c6:	0028      	movs	r0, r5
 80009c8:	f002 f95c 	bl	8002c84 <__clzsi2>
 80009cc:	2776      	movs	r7, #118	; 0x76
 80009ce:	1f43      	subs	r3, r0, #5
 80009d0:	409d      	lsls	r5, r3
 80009d2:	2300      	movs	r3, #0
 80009d4:	427f      	negs	r7, r7
 80009d6:	4699      	mov	r9, r3
 80009d8:	469a      	mov	sl, r3
 80009da:	1a3f      	subs	r7, r7, r0
 80009dc:	e777      	b.n	80008ce <__aeabi_fdiv+0x32>
 80009de:	4640      	mov	r0, r8
 80009e0:	f002 f950 	bl	8002c84 <__clzsi2>
 80009e4:	4642      	mov	r2, r8
 80009e6:	1f43      	subs	r3, r0, #5
 80009e8:	409a      	lsls	r2, r3
 80009ea:	2376      	movs	r3, #118	; 0x76
 80009ec:	425b      	negs	r3, r3
 80009ee:	4690      	mov	r8, r2
 80009f0:	1a1b      	subs	r3, r3, r0
 80009f2:	2200      	movs	r2, #0
 80009f4:	e77d      	b.n	80008f2 <__aeabi_fdiv+0x56>
 80009f6:	23ff      	movs	r3, #255	; 0xff
 80009f8:	2203      	movs	r2, #3
 80009fa:	e77a      	b.n	80008f2 <__aeabi_fdiv+0x56>
 80009fc:	000e      	movs	r6, r1
 80009fe:	20ff      	movs	r0, #255	; 0xff
 8000a00:	2500      	movs	r5, #0
 8000a02:	e7ac      	b.n	800095e <__aeabi_fdiv+0xc2>
 8000a04:	2001      	movs	r0, #1
 8000a06:	1ac0      	subs	r0, r0, r3
 8000a08:	281b      	cmp	r0, #27
 8000a0a:	dca6      	bgt.n	800095a <__aeabi_fdiv+0xbe>
 8000a0c:	379e      	adds	r7, #158	; 0x9e
 8000a0e:	002a      	movs	r2, r5
 8000a10:	40bd      	lsls	r5, r7
 8000a12:	40c2      	lsrs	r2, r0
 8000a14:	1e6b      	subs	r3, r5, #1
 8000a16:	419d      	sbcs	r5, r3
 8000a18:	4315      	orrs	r5, r2
 8000a1a:	076b      	lsls	r3, r5, #29
 8000a1c:	d004      	beq.n	8000a28 <__aeabi_fdiv+0x18c>
 8000a1e:	230f      	movs	r3, #15
 8000a20:	402b      	ands	r3, r5
 8000a22:	2b04      	cmp	r3, #4
 8000a24:	d000      	beq.n	8000a28 <__aeabi_fdiv+0x18c>
 8000a26:	3504      	adds	r5, #4
 8000a28:	016b      	lsls	r3, r5, #5
 8000a2a:	d544      	bpl.n	8000ab6 <__aeabi_fdiv+0x21a>
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	2500      	movs	r5, #0
 8000a30:	e795      	b.n	800095e <__aeabi_fdiv+0xc2>
 8000a32:	20ff      	movs	r0, #255	; 0xff
 8000a34:	2500      	movs	r5, #0
 8000a36:	e792      	b.n	800095e <__aeabi_fdiv+0xc2>
 8000a38:	2580      	movs	r5, #128	; 0x80
 8000a3a:	2600      	movs	r6, #0
 8000a3c:	20ff      	movs	r0, #255	; 0xff
 8000a3e:	03ed      	lsls	r5, r5, #15
 8000a40:	e78d      	b.n	800095e <__aeabi_fdiv+0xc2>
 8000a42:	2300      	movs	r3, #0
 8000a44:	4698      	mov	r8, r3
 8000a46:	2080      	movs	r0, #128	; 0x80
 8000a48:	03c0      	lsls	r0, r0, #15
 8000a4a:	4205      	tst	r5, r0
 8000a4c:	d009      	beq.n	8000a62 <__aeabi_fdiv+0x1c6>
 8000a4e:	4643      	mov	r3, r8
 8000a50:	4203      	tst	r3, r0
 8000a52:	d106      	bne.n	8000a62 <__aeabi_fdiv+0x1c6>
 8000a54:	4645      	mov	r5, r8
 8000a56:	4305      	orrs	r5, r0
 8000a58:	026d      	lsls	r5, r5, #9
 8000a5a:	0026      	movs	r6, r4
 8000a5c:	20ff      	movs	r0, #255	; 0xff
 8000a5e:	0a6d      	lsrs	r5, r5, #9
 8000a60:	e77d      	b.n	800095e <__aeabi_fdiv+0xc2>
 8000a62:	2080      	movs	r0, #128	; 0x80
 8000a64:	03c0      	lsls	r0, r0, #15
 8000a66:	4305      	orrs	r5, r0
 8000a68:	026d      	lsls	r5, r5, #9
 8000a6a:	20ff      	movs	r0, #255	; 0xff
 8000a6c:	0a6d      	lsrs	r5, r5, #9
 8000a6e:	e776      	b.n	800095e <__aeabi_fdiv+0xc2>
 8000a70:	4642      	mov	r2, r8
 8000a72:	016b      	lsls	r3, r5, #5
 8000a74:	0150      	lsls	r0, r2, #5
 8000a76:	4283      	cmp	r3, r0
 8000a78:	d219      	bcs.n	8000aae <__aeabi_fdiv+0x212>
 8000a7a:	221b      	movs	r2, #27
 8000a7c:	2500      	movs	r5, #0
 8000a7e:	3f01      	subs	r7, #1
 8000a80:	2601      	movs	r6, #1
 8000a82:	001c      	movs	r4, r3
 8000a84:	006d      	lsls	r5, r5, #1
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	2c00      	cmp	r4, #0
 8000a8a:	db01      	blt.n	8000a90 <__aeabi_fdiv+0x1f4>
 8000a8c:	4298      	cmp	r0, r3
 8000a8e:	d801      	bhi.n	8000a94 <__aeabi_fdiv+0x1f8>
 8000a90:	1a1b      	subs	r3, r3, r0
 8000a92:	4335      	orrs	r5, r6
 8000a94:	3a01      	subs	r2, #1
 8000a96:	2a00      	cmp	r2, #0
 8000a98:	d1f3      	bne.n	8000a82 <__aeabi_fdiv+0x1e6>
 8000a9a:	1e5a      	subs	r2, r3, #1
 8000a9c:	4193      	sbcs	r3, r2
 8000a9e:	431d      	orrs	r5, r3
 8000aa0:	003b      	movs	r3, r7
 8000aa2:	337f      	adds	r3, #127	; 0x7f
 8000aa4:	000e      	movs	r6, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	dd00      	ble.n	8000aac <__aeabi_fdiv+0x210>
 8000aaa:	e741      	b.n	8000930 <__aeabi_fdiv+0x94>
 8000aac:	e7aa      	b.n	8000a04 <__aeabi_fdiv+0x168>
 8000aae:	221a      	movs	r2, #26
 8000ab0:	2501      	movs	r5, #1
 8000ab2:	1a1b      	subs	r3, r3, r0
 8000ab4:	e7e4      	b.n	8000a80 <__aeabi_fdiv+0x1e4>
 8000ab6:	01ad      	lsls	r5, r5, #6
 8000ab8:	2000      	movs	r0, #0
 8000aba:	0a6d      	lsrs	r5, r5, #9
 8000abc:	e74f      	b.n	800095e <__aeabi_fdiv+0xc2>
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	08010118 	.word	0x08010118
 8000ac4:	f7ffffff 	.word	0xf7ffffff
 8000ac8:	08010158 	.word	0x08010158

08000acc <__eqsf2>:
 8000acc:	b570      	push	{r4, r5, r6, lr}
 8000ace:	0042      	lsls	r2, r0, #1
 8000ad0:	0245      	lsls	r5, r0, #9
 8000ad2:	024e      	lsls	r6, r1, #9
 8000ad4:	004c      	lsls	r4, r1, #1
 8000ad6:	0fc3      	lsrs	r3, r0, #31
 8000ad8:	0a6d      	lsrs	r5, r5, #9
 8000ada:	2001      	movs	r0, #1
 8000adc:	0e12      	lsrs	r2, r2, #24
 8000ade:	0a76      	lsrs	r6, r6, #9
 8000ae0:	0e24      	lsrs	r4, r4, #24
 8000ae2:	0fc9      	lsrs	r1, r1, #31
 8000ae4:	2aff      	cmp	r2, #255	; 0xff
 8000ae6:	d006      	beq.n	8000af6 <__eqsf2+0x2a>
 8000ae8:	2cff      	cmp	r4, #255	; 0xff
 8000aea:	d003      	beq.n	8000af4 <__eqsf2+0x28>
 8000aec:	42a2      	cmp	r2, r4
 8000aee:	d101      	bne.n	8000af4 <__eqsf2+0x28>
 8000af0:	42b5      	cmp	r5, r6
 8000af2:	d006      	beq.n	8000b02 <__eqsf2+0x36>
 8000af4:	bd70      	pop	{r4, r5, r6, pc}
 8000af6:	2d00      	cmp	r5, #0
 8000af8:	d1fc      	bne.n	8000af4 <__eqsf2+0x28>
 8000afa:	2cff      	cmp	r4, #255	; 0xff
 8000afc:	d1fa      	bne.n	8000af4 <__eqsf2+0x28>
 8000afe:	2e00      	cmp	r6, #0
 8000b00:	d1f8      	bne.n	8000af4 <__eqsf2+0x28>
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d006      	beq.n	8000b14 <__eqsf2+0x48>
 8000b06:	2001      	movs	r0, #1
 8000b08:	2a00      	cmp	r2, #0
 8000b0a:	d1f3      	bne.n	8000af4 <__eqsf2+0x28>
 8000b0c:	0028      	movs	r0, r5
 8000b0e:	1e43      	subs	r3, r0, #1
 8000b10:	4198      	sbcs	r0, r3
 8000b12:	e7ef      	b.n	8000af4 <__eqsf2+0x28>
 8000b14:	2000      	movs	r0, #0
 8000b16:	e7ed      	b.n	8000af4 <__eqsf2+0x28>

08000b18 <__gesf2>:
 8000b18:	b570      	push	{r4, r5, r6, lr}
 8000b1a:	0042      	lsls	r2, r0, #1
 8000b1c:	0245      	lsls	r5, r0, #9
 8000b1e:	024e      	lsls	r6, r1, #9
 8000b20:	004c      	lsls	r4, r1, #1
 8000b22:	0fc3      	lsrs	r3, r0, #31
 8000b24:	0a6d      	lsrs	r5, r5, #9
 8000b26:	0e12      	lsrs	r2, r2, #24
 8000b28:	0a76      	lsrs	r6, r6, #9
 8000b2a:	0e24      	lsrs	r4, r4, #24
 8000b2c:	0fc8      	lsrs	r0, r1, #31
 8000b2e:	2aff      	cmp	r2, #255	; 0xff
 8000b30:	d01b      	beq.n	8000b6a <__gesf2+0x52>
 8000b32:	2cff      	cmp	r4, #255	; 0xff
 8000b34:	d00e      	beq.n	8000b54 <__gesf2+0x3c>
 8000b36:	2a00      	cmp	r2, #0
 8000b38:	d11b      	bne.n	8000b72 <__gesf2+0x5a>
 8000b3a:	2c00      	cmp	r4, #0
 8000b3c:	d101      	bne.n	8000b42 <__gesf2+0x2a>
 8000b3e:	2e00      	cmp	r6, #0
 8000b40:	d01c      	beq.n	8000b7c <__gesf2+0x64>
 8000b42:	2d00      	cmp	r5, #0
 8000b44:	d00c      	beq.n	8000b60 <__gesf2+0x48>
 8000b46:	4283      	cmp	r3, r0
 8000b48:	d01c      	beq.n	8000b84 <__gesf2+0x6c>
 8000b4a:	2102      	movs	r1, #2
 8000b4c:	1e58      	subs	r0, r3, #1
 8000b4e:	4008      	ands	r0, r1
 8000b50:	3801      	subs	r0, #1
 8000b52:	bd70      	pop	{r4, r5, r6, pc}
 8000b54:	2e00      	cmp	r6, #0
 8000b56:	d122      	bne.n	8000b9e <__gesf2+0x86>
 8000b58:	2a00      	cmp	r2, #0
 8000b5a:	d1f4      	bne.n	8000b46 <__gesf2+0x2e>
 8000b5c:	2d00      	cmp	r5, #0
 8000b5e:	d1f2      	bne.n	8000b46 <__gesf2+0x2e>
 8000b60:	2800      	cmp	r0, #0
 8000b62:	d1f6      	bne.n	8000b52 <__gesf2+0x3a>
 8000b64:	2001      	movs	r0, #1
 8000b66:	4240      	negs	r0, r0
 8000b68:	e7f3      	b.n	8000b52 <__gesf2+0x3a>
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d117      	bne.n	8000b9e <__gesf2+0x86>
 8000b6e:	2cff      	cmp	r4, #255	; 0xff
 8000b70:	d0f0      	beq.n	8000b54 <__gesf2+0x3c>
 8000b72:	2c00      	cmp	r4, #0
 8000b74:	d1e7      	bne.n	8000b46 <__gesf2+0x2e>
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d1e5      	bne.n	8000b46 <__gesf2+0x2e>
 8000b7a:	e7e6      	b.n	8000b4a <__gesf2+0x32>
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0e7      	beq.n	8000b52 <__gesf2+0x3a>
 8000b82:	e7e2      	b.n	8000b4a <__gesf2+0x32>
 8000b84:	42a2      	cmp	r2, r4
 8000b86:	dc05      	bgt.n	8000b94 <__gesf2+0x7c>
 8000b88:	dbea      	blt.n	8000b60 <__gesf2+0x48>
 8000b8a:	42b5      	cmp	r5, r6
 8000b8c:	d802      	bhi.n	8000b94 <__gesf2+0x7c>
 8000b8e:	d3e7      	bcc.n	8000b60 <__gesf2+0x48>
 8000b90:	2000      	movs	r0, #0
 8000b92:	e7de      	b.n	8000b52 <__gesf2+0x3a>
 8000b94:	4243      	negs	r3, r0
 8000b96:	4158      	adcs	r0, r3
 8000b98:	0040      	lsls	r0, r0, #1
 8000b9a:	3801      	subs	r0, #1
 8000b9c:	e7d9      	b.n	8000b52 <__gesf2+0x3a>
 8000b9e:	2002      	movs	r0, #2
 8000ba0:	4240      	negs	r0, r0
 8000ba2:	e7d6      	b.n	8000b52 <__gesf2+0x3a>

08000ba4 <__lesf2>:
 8000ba4:	b570      	push	{r4, r5, r6, lr}
 8000ba6:	0042      	lsls	r2, r0, #1
 8000ba8:	0245      	lsls	r5, r0, #9
 8000baa:	024e      	lsls	r6, r1, #9
 8000bac:	004c      	lsls	r4, r1, #1
 8000bae:	0fc3      	lsrs	r3, r0, #31
 8000bb0:	0a6d      	lsrs	r5, r5, #9
 8000bb2:	0e12      	lsrs	r2, r2, #24
 8000bb4:	0a76      	lsrs	r6, r6, #9
 8000bb6:	0e24      	lsrs	r4, r4, #24
 8000bb8:	0fc8      	lsrs	r0, r1, #31
 8000bba:	2aff      	cmp	r2, #255	; 0xff
 8000bbc:	d00b      	beq.n	8000bd6 <__lesf2+0x32>
 8000bbe:	2cff      	cmp	r4, #255	; 0xff
 8000bc0:	d00d      	beq.n	8000bde <__lesf2+0x3a>
 8000bc2:	2a00      	cmp	r2, #0
 8000bc4:	d11f      	bne.n	8000c06 <__lesf2+0x62>
 8000bc6:	2c00      	cmp	r4, #0
 8000bc8:	d116      	bne.n	8000bf8 <__lesf2+0x54>
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	d114      	bne.n	8000bf8 <__lesf2+0x54>
 8000bce:	2000      	movs	r0, #0
 8000bd0:	2d00      	cmp	r5, #0
 8000bd2:	d010      	beq.n	8000bf6 <__lesf2+0x52>
 8000bd4:	e009      	b.n	8000bea <__lesf2+0x46>
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d10c      	bne.n	8000bf4 <__lesf2+0x50>
 8000bda:	2cff      	cmp	r4, #255	; 0xff
 8000bdc:	d113      	bne.n	8000c06 <__lesf2+0x62>
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	d108      	bne.n	8000bf4 <__lesf2+0x50>
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	d008      	beq.n	8000bf8 <__lesf2+0x54>
 8000be6:	4283      	cmp	r3, r0
 8000be8:	d012      	beq.n	8000c10 <__lesf2+0x6c>
 8000bea:	2102      	movs	r1, #2
 8000bec:	1e58      	subs	r0, r3, #1
 8000bee:	4008      	ands	r0, r1
 8000bf0:	3801      	subs	r0, #1
 8000bf2:	e000      	b.n	8000bf6 <__lesf2+0x52>
 8000bf4:	2002      	movs	r0, #2
 8000bf6:	bd70      	pop	{r4, r5, r6, pc}
 8000bf8:	2d00      	cmp	r5, #0
 8000bfa:	d1f4      	bne.n	8000be6 <__lesf2+0x42>
 8000bfc:	2800      	cmp	r0, #0
 8000bfe:	d1fa      	bne.n	8000bf6 <__lesf2+0x52>
 8000c00:	2001      	movs	r0, #1
 8000c02:	4240      	negs	r0, r0
 8000c04:	e7f7      	b.n	8000bf6 <__lesf2+0x52>
 8000c06:	2c00      	cmp	r4, #0
 8000c08:	d1ed      	bne.n	8000be6 <__lesf2+0x42>
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d1eb      	bne.n	8000be6 <__lesf2+0x42>
 8000c0e:	e7ec      	b.n	8000bea <__lesf2+0x46>
 8000c10:	42a2      	cmp	r2, r4
 8000c12:	dc05      	bgt.n	8000c20 <__lesf2+0x7c>
 8000c14:	dbf2      	blt.n	8000bfc <__lesf2+0x58>
 8000c16:	42b5      	cmp	r5, r6
 8000c18:	d802      	bhi.n	8000c20 <__lesf2+0x7c>
 8000c1a:	d3ef      	bcc.n	8000bfc <__lesf2+0x58>
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	e7ea      	b.n	8000bf6 <__lesf2+0x52>
 8000c20:	4243      	negs	r3, r0
 8000c22:	4158      	adcs	r0, r3
 8000c24:	0040      	lsls	r0, r0, #1
 8000c26:	3801      	subs	r0, #1
 8000c28:	e7e5      	b.n	8000bf6 <__lesf2+0x52>
 8000c2a:	46c0      	nop			; (mov r8, r8)

08000c2c <__aeabi_fsub>:
 8000c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c2e:	46ce      	mov	lr, r9
 8000c30:	4647      	mov	r7, r8
 8000c32:	0243      	lsls	r3, r0, #9
 8000c34:	0a5b      	lsrs	r3, r3, #9
 8000c36:	024e      	lsls	r6, r1, #9
 8000c38:	00da      	lsls	r2, r3, #3
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	0a72      	lsrs	r2, r6, #9
 8000c3e:	4691      	mov	r9, r2
 8000c40:	0045      	lsls	r5, r0, #1
 8000c42:	004a      	lsls	r2, r1, #1
 8000c44:	b580      	push	{r7, lr}
 8000c46:	0e2d      	lsrs	r5, r5, #24
 8000c48:	001f      	movs	r7, r3
 8000c4a:	0fc4      	lsrs	r4, r0, #31
 8000c4c:	0e12      	lsrs	r2, r2, #24
 8000c4e:	0fc9      	lsrs	r1, r1, #31
 8000c50:	09b6      	lsrs	r6, r6, #6
 8000c52:	2aff      	cmp	r2, #255	; 0xff
 8000c54:	d05b      	beq.n	8000d0e <__aeabi_fsub+0xe2>
 8000c56:	2001      	movs	r0, #1
 8000c58:	4041      	eors	r1, r0
 8000c5a:	428c      	cmp	r4, r1
 8000c5c:	d039      	beq.n	8000cd2 <__aeabi_fsub+0xa6>
 8000c5e:	1aa8      	subs	r0, r5, r2
 8000c60:	2800      	cmp	r0, #0
 8000c62:	dd5a      	ble.n	8000d1a <__aeabi_fsub+0xee>
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	d06a      	beq.n	8000d3e <__aeabi_fsub+0x112>
 8000c68:	2dff      	cmp	r5, #255	; 0xff
 8000c6a:	d100      	bne.n	8000c6e <__aeabi_fsub+0x42>
 8000c6c:	e0d9      	b.n	8000e22 <__aeabi_fsub+0x1f6>
 8000c6e:	2280      	movs	r2, #128	; 0x80
 8000c70:	04d2      	lsls	r2, r2, #19
 8000c72:	4316      	orrs	r6, r2
 8000c74:	281b      	cmp	r0, #27
 8000c76:	dc00      	bgt.n	8000c7a <__aeabi_fsub+0x4e>
 8000c78:	e0e9      	b.n	8000e4e <__aeabi_fsub+0x222>
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	4663      	mov	r3, ip
 8000c7e:	1a18      	subs	r0, r3, r0
 8000c80:	0143      	lsls	r3, r0, #5
 8000c82:	d400      	bmi.n	8000c86 <__aeabi_fsub+0x5a>
 8000c84:	e0b4      	b.n	8000df0 <__aeabi_fsub+0x1c4>
 8000c86:	0180      	lsls	r0, r0, #6
 8000c88:	0987      	lsrs	r7, r0, #6
 8000c8a:	0038      	movs	r0, r7
 8000c8c:	f001 fffa 	bl	8002c84 <__clzsi2>
 8000c90:	3805      	subs	r0, #5
 8000c92:	4087      	lsls	r7, r0
 8000c94:	4285      	cmp	r5, r0
 8000c96:	dc00      	bgt.n	8000c9a <__aeabi_fsub+0x6e>
 8000c98:	e0cc      	b.n	8000e34 <__aeabi_fsub+0x208>
 8000c9a:	1a2d      	subs	r5, r5, r0
 8000c9c:	48b5      	ldr	r0, [pc, #724]	; (8000f74 <__aeabi_fsub+0x348>)
 8000c9e:	4038      	ands	r0, r7
 8000ca0:	0743      	lsls	r3, r0, #29
 8000ca2:	d004      	beq.n	8000cae <__aeabi_fsub+0x82>
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	4003      	ands	r3, r0
 8000ca8:	2b04      	cmp	r3, #4
 8000caa:	d000      	beq.n	8000cae <__aeabi_fsub+0x82>
 8000cac:	3004      	adds	r0, #4
 8000cae:	0143      	lsls	r3, r0, #5
 8000cb0:	d400      	bmi.n	8000cb4 <__aeabi_fsub+0x88>
 8000cb2:	e0a0      	b.n	8000df6 <__aeabi_fsub+0x1ca>
 8000cb4:	1c6a      	adds	r2, r5, #1
 8000cb6:	2dfe      	cmp	r5, #254	; 0xfe
 8000cb8:	d100      	bne.n	8000cbc <__aeabi_fsub+0x90>
 8000cba:	e08d      	b.n	8000dd8 <__aeabi_fsub+0x1ac>
 8000cbc:	0180      	lsls	r0, r0, #6
 8000cbe:	0a47      	lsrs	r7, r0, #9
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	05d0      	lsls	r0, r2, #23
 8000cc4:	4338      	orrs	r0, r7
 8000cc6:	07e4      	lsls	r4, r4, #31
 8000cc8:	4320      	orrs	r0, r4
 8000cca:	bcc0      	pop	{r6, r7}
 8000ccc:	46b9      	mov	r9, r7
 8000cce:	46b0      	mov	r8, r6
 8000cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cd2:	1aa8      	subs	r0, r5, r2
 8000cd4:	4680      	mov	r8, r0
 8000cd6:	2800      	cmp	r0, #0
 8000cd8:	dd45      	ble.n	8000d66 <__aeabi_fsub+0x13a>
 8000cda:	2a00      	cmp	r2, #0
 8000cdc:	d070      	beq.n	8000dc0 <__aeabi_fsub+0x194>
 8000cde:	2dff      	cmp	r5, #255	; 0xff
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_fsub+0xb8>
 8000ce2:	e09e      	b.n	8000e22 <__aeabi_fsub+0x1f6>
 8000ce4:	2380      	movs	r3, #128	; 0x80
 8000ce6:	04db      	lsls	r3, r3, #19
 8000ce8:	431e      	orrs	r6, r3
 8000cea:	4643      	mov	r3, r8
 8000cec:	2b1b      	cmp	r3, #27
 8000cee:	dc00      	bgt.n	8000cf2 <__aeabi_fsub+0xc6>
 8000cf0:	e0d2      	b.n	8000e98 <__aeabi_fsub+0x26c>
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4460      	add	r0, ip
 8000cf6:	0143      	lsls	r3, r0, #5
 8000cf8:	d57a      	bpl.n	8000df0 <__aeabi_fsub+0x1c4>
 8000cfa:	3501      	adds	r5, #1
 8000cfc:	2dff      	cmp	r5, #255	; 0xff
 8000cfe:	d06b      	beq.n	8000dd8 <__aeabi_fsub+0x1ac>
 8000d00:	2301      	movs	r3, #1
 8000d02:	4a9d      	ldr	r2, [pc, #628]	; (8000f78 <__aeabi_fsub+0x34c>)
 8000d04:	4003      	ands	r3, r0
 8000d06:	0840      	lsrs	r0, r0, #1
 8000d08:	4010      	ands	r0, r2
 8000d0a:	4318      	orrs	r0, r3
 8000d0c:	e7c8      	b.n	8000ca0 <__aeabi_fsub+0x74>
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d020      	beq.n	8000d54 <__aeabi_fsub+0x128>
 8000d12:	428c      	cmp	r4, r1
 8000d14:	d023      	beq.n	8000d5e <__aeabi_fsub+0x132>
 8000d16:	0028      	movs	r0, r5
 8000d18:	38ff      	subs	r0, #255	; 0xff
 8000d1a:	2800      	cmp	r0, #0
 8000d1c:	d039      	beq.n	8000d92 <__aeabi_fsub+0x166>
 8000d1e:	1b57      	subs	r7, r2, r5
 8000d20:	2d00      	cmp	r5, #0
 8000d22:	d000      	beq.n	8000d26 <__aeabi_fsub+0xfa>
 8000d24:	e09d      	b.n	8000e62 <__aeabi_fsub+0x236>
 8000d26:	4663      	mov	r3, ip
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d100      	bne.n	8000d2e <__aeabi_fsub+0x102>
 8000d2c:	e0db      	b.n	8000ee6 <__aeabi_fsub+0x2ba>
 8000d2e:	1e7b      	subs	r3, r7, #1
 8000d30:	2f01      	cmp	r7, #1
 8000d32:	d100      	bne.n	8000d36 <__aeabi_fsub+0x10a>
 8000d34:	e10d      	b.n	8000f52 <__aeabi_fsub+0x326>
 8000d36:	2fff      	cmp	r7, #255	; 0xff
 8000d38:	d071      	beq.n	8000e1e <__aeabi_fsub+0x1f2>
 8000d3a:	001f      	movs	r7, r3
 8000d3c:	e098      	b.n	8000e70 <__aeabi_fsub+0x244>
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d100      	bne.n	8000d44 <__aeabi_fsub+0x118>
 8000d42:	e0a7      	b.n	8000e94 <__aeabi_fsub+0x268>
 8000d44:	1e42      	subs	r2, r0, #1
 8000d46:	2801      	cmp	r0, #1
 8000d48:	d100      	bne.n	8000d4c <__aeabi_fsub+0x120>
 8000d4a:	e0e6      	b.n	8000f1a <__aeabi_fsub+0x2ee>
 8000d4c:	28ff      	cmp	r0, #255	; 0xff
 8000d4e:	d068      	beq.n	8000e22 <__aeabi_fsub+0x1f6>
 8000d50:	0010      	movs	r0, r2
 8000d52:	e78f      	b.n	8000c74 <__aeabi_fsub+0x48>
 8000d54:	2001      	movs	r0, #1
 8000d56:	4041      	eors	r1, r0
 8000d58:	42a1      	cmp	r1, r4
 8000d5a:	d000      	beq.n	8000d5e <__aeabi_fsub+0x132>
 8000d5c:	e77f      	b.n	8000c5e <__aeabi_fsub+0x32>
 8000d5e:	20ff      	movs	r0, #255	; 0xff
 8000d60:	4240      	negs	r0, r0
 8000d62:	4680      	mov	r8, r0
 8000d64:	44a8      	add	r8, r5
 8000d66:	4640      	mov	r0, r8
 8000d68:	2800      	cmp	r0, #0
 8000d6a:	d038      	beq.n	8000dde <__aeabi_fsub+0x1b2>
 8000d6c:	1b51      	subs	r1, r2, r5
 8000d6e:	2d00      	cmp	r5, #0
 8000d70:	d100      	bne.n	8000d74 <__aeabi_fsub+0x148>
 8000d72:	e0ae      	b.n	8000ed2 <__aeabi_fsub+0x2a6>
 8000d74:	2aff      	cmp	r2, #255	; 0xff
 8000d76:	d100      	bne.n	8000d7a <__aeabi_fsub+0x14e>
 8000d78:	e0df      	b.n	8000f3a <__aeabi_fsub+0x30e>
 8000d7a:	2380      	movs	r3, #128	; 0x80
 8000d7c:	4660      	mov	r0, ip
 8000d7e:	04db      	lsls	r3, r3, #19
 8000d80:	4318      	orrs	r0, r3
 8000d82:	4684      	mov	ip, r0
 8000d84:	291b      	cmp	r1, #27
 8000d86:	dc00      	bgt.n	8000d8a <__aeabi_fsub+0x15e>
 8000d88:	e0d9      	b.n	8000f3e <__aeabi_fsub+0x312>
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	0015      	movs	r5, r2
 8000d8e:	1980      	adds	r0, r0, r6
 8000d90:	e7b1      	b.n	8000cf6 <__aeabi_fsub+0xca>
 8000d92:	20fe      	movs	r0, #254	; 0xfe
 8000d94:	1c6a      	adds	r2, r5, #1
 8000d96:	4210      	tst	r0, r2
 8000d98:	d171      	bne.n	8000e7e <__aeabi_fsub+0x252>
 8000d9a:	2d00      	cmp	r5, #0
 8000d9c:	d000      	beq.n	8000da0 <__aeabi_fsub+0x174>
 8000d9e:	e0a6      	b.n	8000eee <__aeabi_fsub+0x2c2>
 8000da0:	4663      	mov	r3, ip
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d100      	bne.n	8000da8 <__aeabi_fsub+0x17c>
 8000da6:	e0d9      	b.n	8000f5c <__aeabi_fsub+0x330>
 8000da8:	2200      	movs	r2, #0
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d100      	bne.n	8000db0 <__aeabi_fsub+0x184>
 8000dae:	e788      	b.n	8000cc2 <__aeabi_fsub+0x96>
 8000db0:	1b98      	subs	r0, r3, r6
 8000db2:	0143      	lsls	r3, r0, #5
 8000db4:	d400      	bmi.n	8000db8 <__aeabi_fsub+0x18c>
 8000db6:	e0e1      	b.n	8000f7c <__aeabi_fsub+0x350>
 8000db8:	4663      	mov	r3, ip
 8000dba:	000c      	movs	r4, r1
 8000dbc:	1af0      	subs	r0, r6, r3
 8000dbe:	e76f      	b.n	8000ca0 <__aeabi_fsub+0x74>
 8000dc0:	2e00      	cmp	r6, #0
 8000dc2:	d100      	bne.n	8000dc6 <__aeabi_fsub+0x19a>
 8000dc4:	e0b7      	b.n	8000f36 <__aeabi_fsub+0x30a>
 8000dc6:	0002      	movs	r2, r0
 8000dc8:	3a01      	subs	r2, #1
 8000dca:	2801      	cmp	r0, #1
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_fsub+0x1a4>
 8000dce:	e09c      	b.n	8000f0a <__aeabi_fsub+0x2de>
 8000dd0:	28ff      	cmp	r0, #255	; 0xff
 8000dd2:	d026      	beq.n	8000e22 <__aeabi_fsub+0x1f6>
 8000dd4:	4690      	mov	r8, r2
 8000dd6:	e788      	b.n	8000cea <__aeabi_fsub+0xbe>
 8000dd8:	22ff      	movs	r2, #255	; 0xff
 8000dda:	2700      	movs	r7, #0
 8000ddc:	e771      	b.n	8000cc2 <__aeabi_fsub+0x96>
 8000dde:	20fe      	movs	r0, #254	; 0xfe
 8000de0:	1c6a      	adds	r2, r5, #1
 8000de2:	4210      	tst	r0, r2
 8000de4:	d064      	beq.n	8000eb0 <__aeabi_fsub+0x284>
 8000de6:	2aff      	cmp	r2, #255	; 0xff
 8000de8:	d0f6      	beq.n	8000dd8 <__aeabi_fsub+0x1ac>
 8000dea:	0015      	movs	r5, r2
 8000dec:	4466      	add	r6, ip
 8000dee:	0870      	lsrs	r0, r6, #1
 8000df0:	0743      	lsls	r3, r0, #29
 8000df2:	d000      	beq.n	8000df6 <__aeabi_fsub+0x1ca>
 8000df4:	e756      	b.n	8000ca4 <__aeabi_fsub+0x78>
 8000df6:	08c3      	lsrs	r3, r0, #3
 8000df8:	2dff      	cmp	r5, #255	; 0xff
 8000dfa:	d012      	beq.n	8000e22 <__aeabi_fsub+0x1f6>
 8000dfc:	025b      	lsls	r3, r3, #9
 8000dfe:	0a5f      	lsrs	r7, r3, #9
 8000e00:	b2ea      	uxtb	r2, r5
 8000e02:	e75e      	b.n	8000cc2 <__aeabi_fsub+0x96>
 8000e04:	4662      	mov	r2, ip
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	d100      	bne.n	8000e0c <__aeabi_fsub+0x1e0>
 8000e0a:	e096      	b.n	8000f3a <__aeabi_fsub+0x30e>
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d008      	beq.n	8000e22 <__aeabi_fsub+0x1f6>
 8000e10:	2280      	movs	r2, #128	; 0x80
 8000e12:	03d2      	lsls	r2, r2, #15
 8000e14:	4213      	tst	r3, r2
 8000e16:	d004      	beq.n	8000e22 <__aeabi_fsub+0x1f6>
 8000e18:	4648      	mov	r0, r9
 8000e1a:	4210      	tst	r0, r2
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fsub+0x1f6>
 8000e1e:	000c      	movs	r4, r1
 8000e20:	464b      	mov	r3, r9
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d0d8      	beq.n	8000dd8 <__aeabi_fsub+0x1ac>
 8000e26:	2780      	movs	r7, #128	; 0x80
 8000e28:	03ff      	lsls	r7, r7, #15
 8000e2a:	431f      	orrs	r7, r3
 8000e2c:	027f      	lsls	r7, r7, #9
 8000e2e:	22ff      	movs	r2, #255	; 0xff
 8000e30:	0a7f      	lsrs	r7, r7, #9
 8000e32:	e746      	b.n	8000cc2 <__aeabi_fsub+0x96>
 8000e34:	2320      	movs	r3, #32
 8000e36:	003a      	movs	r2, r7
 8000e38:	1b45      	subs	r5, r0, r5
 8000e3a:	0038      	movs	r0, r7
 8000e3c:	3501      	adds	r5, #1
 8000e3e:	40ea      	lsrs	r2, r5
 8000e40:	1b5d      	subs	r5, r3, r5
 8000e42:	40a8      	lsls	r0, r5
 8000e44:	1e43      	subs	r3, r0, #1
 8000e46:	4198      	sbcs	r0, r3
 8000e48:	2500      	movs	r5, #0
 8000e4a:	4310      	orrs	r0, r2
 8000e4c:	e728      	b.n	8000ca0 <__aeabi_fsub+0x74>
 8000e4e:	2320      	movs	r3, #32
 8000e50:	1a1b      	subs	r3, r3, r0
 8000e52:	0032      	movs	r2, r6
 8000e54:	409e      	lsls	r6, r3
 8000e56:	40c2      	lsrs	r2, r0
 8000e58:	0030      	movs	r0, r6
 8000e5a:	1e43      	subs	r3, r0, #1
 8000e5c:	4198      	sbcs	r0, r3
 8000e5e:	4310      	orrs	r0, r2
 8000e60:	e70c      	b.n	8000c7c <__aeabi_fsub+0x50>
 8000e62:	2aff      	cmp	r2, #255	; 0xff
 8000e64:	d0db      	beq.n	8000e1e <__aeabi_fsub+0x1f2>
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	4660      	mov	r0, ip
 8000e6a:	04db      	lsls	r3, r3, #19
 8000e6c:	4318      	orrs	r0, r3
 8000e6e:	4684      	mov	ip, r0
 8000e70:	2f1b      	cmp	r7, #27
 8000e72:	dd56      	ble.n	8000f22 <__aeabi_fsub+0x2f6>
 8000e74:	2001      	movs	r0, #1
 8000e76:	000c      	movs	r4, r1
 8000e78:	0015      	movs	r5, r2
 8000e7a:	1a30      	subs	r0, r6, r0
 8000e7c:	e700      	b.n	8000c80 <__aeabi_fsub+0x54>
 8000e7e:	4663      	mov	r3, ip
 8000e80:	1b9f      	subs	r7, r3, r6
 8000e82:	017b      	lsls	r3, r7, #5
 8000e84:	d43d      	bmi.n	8000f02 <__aeabi_fsub+0x2d6>
 8000e86:	2f00      	cmp	r7, #0
 8000e88:	d000      	beq.n	8000e8c <__aeabi_fsub+0x260>
 8000e8a:	e6fe      	b.n	8000c8a <__aeabi_fsub+0x5e>
 8000e8c:	2400      	movs	r4, #0
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2700      	movs	r7, #0
 8000e92:	e716      	b.n	8000cc2 <__aeabi_fsub+0x96>
 8000e94:	0005      	movs	r5, r0
 8000e96:	e7af      	b.n	8000df8 <__aeabi_fsub+0x1cc>
 8000e98:	0032      	movs	r2, r6
 8000e9a:	4643      	mov	r3, r8
 8000e9c:	4641      	mov	r1, r8
 8000e9e:	40da      	lsrs	r2, r3
 8000ea0:	2320      	movs	r3, #32
 8000ea2:	1a5b      	subs	r3, r3, r1
 8000ea4:	409e      	lsls	r6, r3
 8000ea6:	0030      	movs	r0, r6
 8000ea8:	1e43      	subs	r3, r0, #1
 8000eaa:	4198      	sbcs	r0, r3
 8000eac:	4310      	orrs	r0, r2
 8000eae:	e721      	b.n	8000cf4 <__aeabi_fsub+0xc8>
 8000eb0:	2d00      	cmp	r5, #0
 8000eb2:	d1a7      	bne.n	8000e04 <__aeabi_fsub+0x1d8>
 8000eb4:	4663      	mov	r3, ip
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d059      	beq.n	8000f6e <__aeabi_fsub+0x342>
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2e00      	cmp	r6, #0
 8000ebe:	d100      	bne.n	8000ec2 <__aeabi_fsub+0x296>
 8000ec0:	e6ff      	b.n	8000cc2 <__aeabi_fsub+0x96>
 8000ec2:	0030      	movs	r0, r6
 8000ec4:	4460      	add	r0, ip
 8000ec6:	0143      	lsls	r3, r0, #5
 8000ec8:	d592      	bpl.n	8000df0 <__aeabi_fsub+0x1c4>
 8000eca:	4b2a      	ldr	r3, [pc, #168]	; (8000f74 <__aeabi_fsub+0x348>)
 8000ecc:	3501      	adds	r5, #1
 8000ece:	4018      	ands	r0, r3
 8000ed0:	e78e      	b.n	8000df0 <__aeabi_fsub+0x1c4>
 8000ed2:	4663      	mov	r3, ip
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d047      	beq.n	8000f68 <__aeabi_fsub+0x33c>
 8000ed8:	1e4b      	subs	r3, r1, #1
 8000eda:	2901      	cmp	r1, #1
 8000edc:	d015      	beq.n	8000f0a <__aeabi_fsub+0x2de>
 8000ede:	29ff      	cmp	r1, #255	; 0xff
 8000ee0:	d02b      	beq.n	8000f3a <__aeabi_fsub+0x30e>
 8000ee2:	0019      	movs	r1, r3
 8000ee4:	e74e      	b.n	8000d84 <__aeabi_fsub+0x158>
 8000ee6:	000c      	movs	r4, r1
 8000ee8:	464b      	mov	r3, r9
 8000eea:	003d      	movs	r5, r7
 8000eec:	e784      	b.n	8000df8 <__aeabi_fsub+0x1cc>
 8000eee:	4662      	mov	r2, ip
 8000ef0:	2a00      	cmp	r2, #0
 8000ef2:	d18b      	bne.n	8000e0c <__aeabi_fsub+0x1e0>
 8000ef4:	2e00      	cmp	r6, #0
 8000ef6:	d192      	bne.n	8000e1e <__aeabi_fsub+0x1f2>
 8000ef8:	2780      	movs	r7, #128	; 0x80
 8000efa:	2400      	movs	r4, #0
 8000efc:	22ff      	movs	r2, #255	; 0xff
 8000efe:	03ff      	lsls	r7, r7, #15
 8000f00:	e6df      	b.n	8000cc2 <__aeabi_fsub+0x96>
 8000f02:	4663      	mov	r3, ip
 8000f04:	000c      	movs	r4, r1
 8000f06:	1af7      	subs	r7, r6, r3
 8000f08:	e6bf      	b.n	8000c8a <__aeabi_fsub+0x5e>
 8000f0a:	0030      	movs	r0, r6
 8000f0c:	4460      	add	r0, ip
 8000f0e:	2501      	movs	r5, #1
 8000f10:	0143      	lsls	r3, r0, #5
 8000f12:	d400      	bmi.n	8000f16 <__aeabi_fsub+0x2ea>
 8000f14:	e76c      	b.n	8000df0 <__aeabi_fsub+0x1c4>
 8000f16:	2502      	movs	r5, #2
 8000f18:	e6f2      	b.n	8000d00 <__aeabi_fsub+0xd4>
 8000f1a:	4663      	mov	r3, ip
 8000f1c:	2501      	movs	r5, #1
 8000f1e:	1b98      	subs	r0, r3, r6
 8000f20:	e6ae      	b.n	8000c80 <__aeabi_fsub+0x54>
 8000f22:	2320      	movs	r3, #32
 8000f24:	4664      	mov	r4, ip
 8000f26:	4660      	mov	r0, ip
 8000f28:	40fc      	lsrs	r4, r7
 8000f2a:	1bdf      	subs	r7, r3, r7
 8000f2c:	40b8      	lsls	r0, r7
 8000f2e:	1e43      	subs	r3, r0, #1
 8000f30:	4198      	sbcs	r0, r3
 8000f32:	4320      	orrs	r0, r4
 8000f34:	e79f      	b.n	8000e76 <__aeabi_fsub+0x24a>
 8000f36:	0005      	movs	r5, r0
 8000f38:	e75e      	b.n	8000df8 <__aeabi_fsub+0x1cc>
 8000f3a:	464b      	mov	r3, r9
 8000f3c:	e771      	b.n	8000e22 <__aeabi_fsub+0x1f6>
 8000f3e:	2320      	movs	r3, #32
 8000f40:	4665      	mov	r5, ip
 8000f42:	4660      	mov	r0, ip
 8000f44:	40cd      	lsrs	r5, r1
 8000f46:	1a59      	subs	r1, r3, r1
 8000f48:	4088      	lsls	r0, r1
 8000f4a:	1e43      	subs	r3, r0, #1
 8000f4c:	4198      	sbcs	r0, r3
 8000f4e:	4328      	orrs	r0, r5
 8000f50:	e71c      	b.n	8000d8c <__aeabi_fsub+0x160>
 8000f52:	4663      	mov	r3, ip
 8000f54:	000c      	movs	r4, r1
 8000f56:	2501      	movs	r5, #1
 8000f58:	1af0      	subs	r0, r6, r3
 8000f5a:	e691      	b.n	8000c80 <__aeabi_fsub+0x54>
 8000f5c:	2e00      	cmp	r6, #0
 8000f5e:	d095      	beq.n	8000e8c <__aeabi_fsub+0x260>
 8000f60:	000c      	movs	r4, r1
 8000f62:	464f      	mov	r7, r9
 8000f64:	2200      	movs	r2, #0
 8000f66:	e6ac      	b.n	8000cc2 <__aeabi_fsub+0x96>
 8000f68:	464b      	mov	r3, r9
 8000f6a:	000d      	movs	r5, r1
 8000f6c:	e744      	b.n	8000df8 <__aeabi_fsub+0x1cc>
 8000f6e:	464f      	mov	r7, r9
 8000f70:	2200      	movs	r2, #0
 8000f72:	e6a6      	b.n	8000cc2 <__aeabi_fsub+0x96>
 8000f74:	fbffffff 	.word	0xfbffffff
 8000f78:	7dffffff 	.word	0x7dffffff
 8000f7c:	2800      	cmp	r0, #0
 8000f7e:	d000      	beq.n	8000f82 <__aeabi_fsub+0x356>
 8000f80:	e736      	b.n	8000df0 <__aeabi_fsub+0x1c4>
 8000f82:	2400      	movs	r4, #0
 8000f84:	2700      	movs	r7, #0
 8000f86:	e69c      	b.n	8000cc2 <__aeabi_fsub+0x96>

08000f88 <__aeabi_f2iz>:
 8000f88:	0241      	lsls	r1, r0, #9
 8000f8a:	0042      	lsls	r2, r0, #1
 8000f8c:	0fc3      	lsrs	r3, r0, #31
 8000f8e:	0a49      	lsrs	r1, r1, #9
 8000f90:	2000      	movs	r0, #0
 8000f92:	0e12      	lsrs	r2, r2, #24
 8000f94:	2a7e      	cmp	r2, #126	; 0x7e
 8000f96:	dd03      	ble.n	8000fa0 <__aeabi_f2iz+0x18>
 8000f98:	2a9d      	cmp	r2, #157	; 0x9d
 8000f9a:	dd02      	ble.n	8000fa2 <__aeabi_f2iz+0x1a>
 8000f9c:	4a09      	ldr	r2, [pc, #36]	; (8000fc4 <__aeabi_f2iz+0x3c>)
 8000f9e:	1898      	adds	r0, r3, r2
 8000fa0:	4770      	bx	lr
 8000fa2:	2080      	movs	r0, #128	; 0x80
 8000fa4:	0400      	lsls	r0, r0, #16
 8000fa6:	4301      	orrs	r1, r0
 8000fa8:	2a95      	cmp	r2, #149	; 0x95
 8000faa:	dc07      	bgt.n	8000fbc <__aeabi_f2iz+0x34>
 8000fac:	2096      	movs	r0, #150	; 0x96
 8000fae:	1a82      	subs	r2, r0, r2
 8000fb0:	40d1      	lsrs	r1, r2
 8000fb2:	4248      	negs	r0, r1
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d1f3      	bne.n	8000fa0 <__aeabi_f2iz+0x18>
 8000fb8:	0008      	movs	r0, r1
 8000fba:	e7f1      	b.n	8000fa0 <__aeabi_f2iz+0x18>
 8000fbc:	3a96      	subs	r2, #150	; 0x96
 8000fbe:	4091      	lsls	r1, r2
 8000fc0:	e7f7      	b.n	8000fb2 <__aeabi_f2iz+0x2a>
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	7fffffff 	.word	0x7fffffff

08000fc8 <__aeabi_i2f>:
 8000fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fca:	2800      	cmp	r0, #0
 8000fcc:	d013      	beq.n	8000ff6 <__aeabi_i2f+0x2e>
 8000fce:	17c3      	asrs	r3, r0, #31
 8000fd0:	18c6      	adds	r6, r0, r3
 8000fd2:	405e      	eors	r6, r3
 8000fd4:	0fc4      	lsrs	r4, r0, #31
 8000fd6:	0030      	movs	r0, r6
 8000fd8:	f001 fe54 	bl	8002c84 <__clzsi2>
 8000fdc:	239e      	movs	r3, #158	; 0x9e
 8000fde:	0005      	movs	r5, r0
 8000fe0:	1a1b      	subs	r3, r3, r0
 8000fe2:	2b96      	cmp	r3, #150	; 0x96
 8000fe4:	dc0f      	bgt.n	8001006 <__aeabi_i2f+0x3e>
 8000fe6:	2808      	cmp	r0, #8
 8000fe8:	dd01      	ble.n	8000fee <__aeabi_i2f+0x26>
 8000fea:	3d08      	subs	r5, #8
 8000fec:	40ae      	lsls	r6, r5
 8000fee:	0276      	lsls	r6, r6, #9
 8000ff0:	0a76      	lsrs	r6, r6, #9
 8000ff2:	b2d8      	uxtb	r0, r3
 8000ff4:	e002      	b.n	8000ffc <__aeabi_i2f+0x34>
 8000ff6:	2400      	movs	r4, #0
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	2600      	movs	r6, #0
 8000ffc:	05c0      	lsls	r0, r0, #23
 8000ffe:	4330      	orrs	r0, r6
 8001000:	07e4      	lsls	r4, r4, #31
 8001002:	4320      	orrs	r0, r4
 8001004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001006:	2b99      	cmp	r3, #153	; 0x99
 8001008:	dd0c      	ble.n	8001024 <__aeabi_i2f+0x5c>
 800100a:	2205      	movs	r2, #5
 800100c:	0031      	movs	r1, r6
 800100e:	1a12      	subs	r2, r2, r0
 8001010:	40d1      	lsrs	r1, r2
 8001012:	000a      	movs	r2, r1
 8001014:	0001      	movs	r1, r0
 8001016:	0030      	movs	r0, r6
 8001018:	311b      	adds	r1, #27
 800101a:	4088      	lsls	r0, r1
 800101c:	1e41      	subs	r1, r0, #1
 800101e:	4188      	sbcs	r0, r1
 8001020:	4302      	orrs	r2, r0
 8001022:	0016      	movs	r6, r2
 8001024:	2d05      	cmp	r5, #5
 8001026:	dc12      	bgt.n	800104e <__aeabi_i2f+0x86>
 8001028:	0031      	movs	r1, r6
 800102a:	4f0d      	ldr	r7, [pc, #52]	; (8001060 <__aeabi_i2f+0x98>)
 800102c:	4039      	ands	r1, r7
 800102e:	0772      	lsls	r2, r6, #29
 8001030:	d009      	beq.n	8001046 <__aeabi_i2f+0x7e>
 8001032:	200f      	movs	r0, #15
 8001034:	4030      	ands	r0, r6
 8001036:	2804      	cmp	r0, #4
 8001038:	d005      	beq.n	8001046 <__aeabi_i2f+0x7e>
 800103a:	3104      	adds	r1, #4
 800103c:	014a      	lsls	r2, r1, #5
 800103e:	d502      	bpl.n	8001046 <__aeabi_i2f+0x7e>
 8001040:	239f      	movs	r3, #159	; 0x9f
 8001042:	4039      	ands	r1, r7
 8001044:	1b5b      	subs	r3, r3, r5
 8001046:	0189      	lsls	r1, r1, #6
 8001048:	0a4e      	lsrs	r6, r1, #9
 800104a:	b2d8      	uxtb	r0, r3
 800104c:	e7d6      	b.n	8000ffc <__aeabi_i2f+0x34>
 800104e:	1f6a      	subs	r2, r5, #5
 8001050:	4096      	lsls	r6, r2
 8001052:	0031      	movs	r1, r6
 8001054:	4f02      	ldr	r7, [pc, #8]	; (8001060 <__aeabi_i2f+0x98>)
 8001056:	4039      	ands	r1, r7
 8001058:	0772      	lsls	r2, r6, #29
 800105a:	d0f4      	beq.n	8001046 <__aeabi_i2f+0x7e>
 800105c:	e7e9      	b.n	8001032 <__aeabi_i2f+0x6a>
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	fbffffff 	.word	0xfbffffff

08001064 <__aeabi_dadd>:
 8001064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001066:	464f      	mov	r7, r9
 8001068:	4646      	mov	r6, r8
 800106a:	46d6      	mov	lr, sl
 800106c:	000d      	movs	r5, r1
 800106e:	0004      	movs	r4, r0
 8001070:	b5c0      	push	{r6, r7, lr}
 8001072:	001f      	movs	r7, r3
 8001074:	0011      	movs	r1, r2
 8001076:	0328      	lsls	r0, r5, #12
 8001078:	0f62      	lsrs	r2, r4, #29
 800107a:	0a40      	lsrs	r0, r0, #9
 800107c:	4310      	orrs	r0, r2
 800107e:	007a      	lsls	r2, r7, #1
 8001080:	0d52      	lsrs	r2, r2, #21
 8001082:	00e3      	lsls	r3, r4, #3
 8001084:	033c      	lsls	r4, r7, #12
 8001086:	4691      	mov	r9, r2
 8001088:	0a64      	lsrs	r4, r4, #9
 800108a:	0ffa      	lsrs	r2, r7, #31
 800108c:	0f4f      	lsrs	r7, r1, #29
 800108e:	006e      	lsls	r6, r5, #1
 8001090:	4327      	orrs	r7, r4
 8001092:	4692      	mov	sl, r2
 8001094:	46b8      	mov	r8, r7
 8001096:	0d76      	lsrs	r6, r6, #21
 8001098:	0fed      	lsrs	r5, r5, #31
 800109a:	00c9      	lsls	r1, r1, #3
 800109c:	4295      	cmp	r5, r2
 800109e:	d100      	bne.n	80010a2 <__aeabi_dadd+0x3e>
 80010a0:	e099      	b.n	80011d6 <__aeabi_dadd+0x172>
 80010a2:	464c      	mov	r4, r9
 80010a4:	1b34      	subs	r4, r6, r4
 80010a6:	46a4      	mov	ip, r4
 80010a8:	2c00      	cmp	r4, #0
 80010aa:	dc00      	bgt.n	80010ae <__aeabi_dadd+0x4a>
 80010ac:	e07c      	b.n	80011a8 <__aeabi_dadd+0x144>
 80010ae:	464a      	mov	r2, r9
 80010b0:	2a00      	cmp	r2, #0
 80010b2:	d100      	bne.n	80010b6 <__aeabi_dadd+0x52>
 80010b4:	e0b8      	b.n	8001228 <__aeabi_dadd+0x1c4>
 80010b6:	4ac5      	ldr	r2, [pc, #788]	; (80013cc <__aeabi_dadd+0x368>)
 80010b8:	4296      	cmp	r6, r2
 80010ba:	d100      	bne.n	80010be <__aeabi_dadd+0x5a>
 80010bc:	e11c      	b.n	80012f8 <__aeabi_dadd+0x294>
 80010be:	2280      	movs	r2, #128	; 0x80
 80010c0:	003c      	movs	r4, r7
 80010c2:	0412      	lsls	r2, r2, #16
 80010c4:	4314      	orrs	r4, r2
 80010c6:	46a0      	mov	r8, r4
 80010c8:	4662      	mov	r2, ip
 80010ca:	2a38      	cmp	r2, #56	; 0x38
 80010cc:	dd00      	ble.n	80010d0 <__aeabi_dadd+0x6c>
 80010ce:	e161      	b.n	8001394 <__aeabi_dadd+0x330>
 80010d0:	2a1f      	cmp	r2, #31
 80010d2:	dd00      	ble.n	80010d6 <__aeabi_dadd+0x72>
 80010d4:	e1cc      	b.n	8001470 <__aeabi_dadd+0x40c>
 80010d6:	4664      	mov	r4, ip
 80010d8:	2220      	movs	r2, #32
 80010da:	1b12      	subs	r2, r2, r4
 80010dc:	4644      	mov	r4, r8
 80010de:	4094      	lsls	r4, r2
 80010e0:	000f      	movs	r7, r1
 80010e2:	46a1      	mov	r9, r4
 80010e4:	4664      	mov	r4, ip
 80010e6:	4091      	lsls	r1, r2
 80010e8:	40e7      	lsrs	r7, r4
 80010ea:	464c      	mov	r4, r9
 80010ec:	1e4a      	subs	r2, r1, #1
 80010ee:	4191      	sbcs	r1, r2
 80010f0:	433c      	orrs	r4, r7
 80010f2:	4642      	mov	r2, r8
 80010f4:	4321      	orrs	r1, r4
 80010f6:	4664      	mov	r4, ip
 80010f8:	40e2      	lsrs	r2, r4
 80010fa:	1a80      	subs	r0, r0, r2
 80010fc:	1a5c      	subs	r4, r3, r1
 80010fe:	42a3      	cmp	r3, r4
 8001100:	419b      	sbcs	r3, r3
 8001102:	425f      	negs	r7, r3
 8001104:	1bc7      	subs	r7, r0, r7
 8001106:	023b      	lsls	r3, r7, #8
 8001108:	d400      	bmi.n	800110c <__aeabi_dadd+0xa8>
 800110a:	e0d0      	b.n	80012ae <__aeabi_dadd+0x24a>
 800110c:	027f      	lsls	r7, r7, #9
 800110e:	0a7f      	lsrs	r7, r7, #9
 8001110:	2f00      	cmp	r7, #0
 8001112:	d100      	bne.n	8001116 <__aeabi_dadd+0xb2>
 8001114:	e0ff      	b.n	8001316 <__aeabi_dadd+0x2b2>
 8001116:	0038      	movs	r0, r7
 8001118:	f001 fdb4 	bl	8002c84 <__clzsi2>
 800111c:	0001      	movs	r1, r0
 800111e:	3908      	subs	r1, #8
 8001120:	2320      	movs	r3, #32
 8001122:	0022      	movs	r2, r4
 8001124:	1a5b      	subs	r3, r3, r1
 8001126:	408f      	lsls	r7, r1
 8001128:	40da      	lsrs	r2, r3
 800112a:	408c      	lsls	r4, r1
 800112c:	4317      	orrs	r7, r2
 800112e:	42b1      	cmp	r1, r6
 8001130:	da00      	bge.n	8001134 <__aeabi_dadd+0xd0>
 8001132:	e0ff      	b.n	8001334 <__aeabi_dadd+0x2d0>
 8001134:	1b89      	subs	r1, r1, r6
 8001136:	1c4b      	adds	r3, r1, #1
 8001138:	2b1f      	cmp	r3, #31
 800113a:	dd00      	ble.n	800113e <__aeabi_dadd+0xda>
 800113c:	e0a8      	b.n	8001290 <__aeabi_dadd+0x22c>
 800113e:	2220      	movs	r2, #32
 8001140:	0039      	movs	r1, r7
 8001142:	1ad2      	subs	r2, r2, r3
 8001144:	0020      	movs	r0, r4
 8001146:	4094      	lsls	r4, r2
 8001148:	4091      	lsls	r1, r2
 800114a:	40d8      	lsrs	r0, r3
 800114c:	1e62      	subs	r2, r4, #1
 800114e:	4194      	sbcs	r4, r2
 8001150:	40df      	lsrs	r7, r3
 8001152:	2600      	movs	r6, #0
 8001154:	4301      	orrs	r1, r0
 8001156:	430c      	orrs	r4, r1
 8001158:	0763      	lsls	r3, r4, #29
 800115a:	d009      	beq.n	8001170 <__aeabi_dadd+0x10c>
 800115c:	230f      	movs	r3, #15
 800115e:	4023      	ands	r3, r4
 8001160:	2b04      	cmp	r3, #4
 8001162:	d005      	beq.n	8001170 <__aeabi_dadd+0x10c>
 8001164:	1d23      	adds	r3, r4, #4
 8001166:	42a3      	cmp	r3, r4
 8001168:	41a4      	sbcs	r4, r4
 800116a:	4264      	negs	r4, r4
 800116c:	193f      	adds	r7, r7, r4
 800116e:	001c      	movs	r4, r3
 8001170:	023b      	lsls	r3, r7, #8
 8001172:	d400      	bmi.n	8001176 <__aeabi_dadd+0x112>
 8001174:	e09e      	b.n	80012b4 <__aeabi_dadd+0x250>
 8001176:	4b95      	ldr	r3, [pc, #596]	; (80013cc <__aeabi_dadd+0x368>)
 8001178:	3601      	adds	r6, #1
 800117a:	429e      	cmp	r6, r3
 800117c:	d100      	bne.n	8001180 <__aeabi_dadd+0x11c>
 800117e:	e0b7      	b.n	80012f0 <__aeabi_dadd+0x28c>
 8001180:	4a93      	ldr	r2, [pc, #588]	; (80013d0 <__aeabi_dadd+0x36c>)
 8001182:	08e4      	lsrs	r4, r4, #3
 8001184:	4017      	ands	r7, r2
 8001186:	077b      	lsls	r3, r7, #29
 8001188:	0571      	lsls	r1, r6, #21
 800118a:	027f      	lsls	r7, r7, #9
 800118c:	4323      	orrs	r3, r4
 800118e:	0b3f      	lsrs	r7, r7, #12
 8001190:	0d4a      	lsrs	r2, r1, #21
 8001192:	0512      	lsls	r2, r2, #20
 8001194:	433a      	orrs	r2, r7
 8001196:	07ed      	lsls	r5, r5, #31
 8001198:	432a      	orrs	r2, r5
 800119a:	0018      	movs	r0, r3
 800119c:	0011      	movs	r1, r2
 800119e:	bce0      	pop	{r5, r6, r7}
 80011a0:	46ba      	mov	sl, r7
 80011a2:	46b1      	mov	r9, r6
 80011a4:	46a8      	mov	r8, r5
 80011a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a8:	2c00      	cmp	r4, #0
 80011aa:	d04b      	beq.n	8001244 <__aeabi_dadd+0x1e0>
 80011ac:	464c      	mov	r4, r9
 80011ae:	1ba4      	subs	r4, r4, r6
 80011b0:	46a4      	mov	ip, r4
 80011b2:	2e00      	cmp	r6, #0
 80011b4:	d000      	beq.n	80011b8 <__aeabi_dadd+0x154>
 80011b6:	e123      	b.n	8001400 <__aeabi_dadd+0x39c>
 80011b8:	0004      	movs	r4, r0
 80011ba:	431c      	orrs	r4, r3
 80011bc:	d100      	bne.n	80011c0 <__aeabi_dadd+0x15c>
 80011be:	e1af      	b.n	8001520 <__aeabi_dadd+0x4bc>
 80011c0:	4662      	mov	r2, ip
 80011c2:	1e54      	subs	r4, r2, #1
 80011c4:	2a01      	cmp	r2, #1
 80011c6:	d100      	bne.n	80011ca <__aeabi_dadd+0x166>
 80011c8:	e215      	b.n	80015f6 <__aeabi_dadd+0x592>
 80011ca:	4d80      	ldr	r5, [pc, #512]	; (80013cc <__aeabi_dadd+0x368>)
 80011cc:	45ac      	cmp	ip, r5
 80011ce:	d100      	bne.n	80011d2 <__aeabi_dadd+0x16e>
 80011d0:	e1c8      	b.n	8001564 <__aeabi_dadd+0x500>
 80011d2:	46a4      	mov	ip, r4
 80011d4:	e11b      	b.n	800140e <__aeabi_dadd+0x3aa>
 80011d6:	464a      	mov	r2, r9
 80011d8:	1ab2      	subs	r2, r6, r2
 80011da:	4694      	mov	ip, r2
 80011dc:	2a00      	cmp	r2, #0
 80011de:	dc00      	bgt.n	80011e2 <__aeabi_dadd+0x17e>
 80011e0:	e0ac      	b.n	800133c <__aeabi_dadd+0x2d8>
 80011e2:	464a      	mov	r2, r9
 80011e4:	2a00      	cmp	r2, #0
 80011e6:	d043      	beq.n	8001270 <__aeabi_dadd+0x20c>
 80011e8:	4a78      	ldr	r2, [pc, #480]	; (80013cc <__aeabi_dadd+0x368>)
 80011ea:	4296      	cmp	r6, r2
 80011ec:	d100      	bne.n	80011f0 <__aeabi_dadd+0x18c>
 80011ee:	e1af      	b.n	8001550 <__aeabi_dadd+0x4ec>
 80011f0:	2280      	movs	r2, #128	; 0x80
 80011f2:	003c      	movs	r4, r7
 80011f4:	0412      	lsls	r2, r2, #16
 80011f6:	4314      	orrs	r4, r2
 80011f8:	46a0      	mov	r8, r4
 80011fa:	4662      	mov	r2, ip
 80011fc:	2a38      	cmp	r2, #56	; 0x38
 80011fe:	dc67      	bgt.n	80012d0 <__aeabi_dadd+0x26c>
 8001200:	2a1f      	cmp	r2, #31
 8001202:	dc00      	bgt.n	8001206 <__aeabi_dadd+0x1a2>
 8001204:	e15f      	b.n	80014c6 <__aeabi_dadd+0x462>
 8001206:	4647      	mov	r7, r8
 8001208:	3a20      	subs	r2, #32
 800120a:	40d7      	lsrs	r7, r2
 800120c:	4662      	mov	r2, ip
 800120e:	2a20      	cmp	r2, #32
 8001210:	d005      	beq.n	800121e <__aeabi_dadd+0x1ba>
 8001212:	4664      	mov	r4, ip
 8001214:	2240      	movs	r2, #64	; 0x40
 8001216:	1b12      	subs	r2, r2, r4
 8001218:	4644      	mov	r4, r8
 800121a:	4094      	lsls	r4, r2
 800121c:	4321      	orrs	r1, r4
 800121e:	1e4a      	subs	r2, r1, #1
 8001220:	4191      	sbcs	r1, r2
 8001222:	000c      	movs	r4, r1
 8001224:	433c      	orrs	r4, r7
 8001226:	e057      	b.n	80012d8 <__aeabi_dadd+0x274>
 8001228:	003a      	movs	r2, r7
 800122a:	430a      	orrs	r2, r1
 800122c:	d100      	bne.n	8001230 <__aeabi_dadd+0x1cc>
 800122e:	e105      	b.n	800143c <__aeabi_dadd+0x3d8>
 8001230:	0022      	movs	r2, r4
 8001232:	3a01      	subs	r2, #1
 8001234:	2c01      	cmp	r4, #1
 8001236:	d100      	bne.n	800123a <__aeabi_dadd+0x1d6>
 8001238:	e182      	b.n	8001540 <__aeabi_dadd+0x4dc>
 800123a:	4c64      	ldr	r4, [pc, #400]	; (80013cc <__aeabi_dadd+0x368>)
 800123c:	45a4      	cmp	ip, r4
 800123e:	d05b      	beq.n	80012f8 <__aeabi_dadd+0x294>
 8001240:	4694      	mov	ip, r2
 8001242:	e741      	b.n	80010c8 <__aeabi_dadd+0x64>
 8001244:	4c63      	ldr	r4, [pc, #396]	; (80013d4 <__aeabi_dadd+0x370>)
 8001246:	1c77      	adds	r7, r6, #1
 8001248:	4227      	tst	r7, r4
 800124a:	d000      	beq.n	800124e <__aeabi_dadd+0x1ea>
 800124c:	e0c4      	b.n	80013d8 <__aeabi_dadd+0x374>
 800124e:	0004      	movs	r4, r0
 8001250:	431c      	orrs	r4, r3
 8001252:	2e00      	cmp	r6, #0
 8001254:	d000      	beq.n	8001258 <__aeabi_dadd+0x1f4>
 8001256:	e169      	b.n	800152c <__aeabi_dadd+0x4c8>
 8001258:	2c00      	cmp	r4, #0
 800125a:	d100      	bne.n	800125e <__aeabi_dadd+0x1fa>
 800125c:	e1bf      	b.n	80015de <__aeabi_dadd+0x57a>
 800125e:	4644      	mov	r4, r8
 8001260:	430c      	orrs	r4, r1
 8001262:	d000      	beq.n	8001266 <__aeabi_dadd+0x202>
 8001264:	e1d0      	b.n	8001608 <__aeabi_dadd+0x5a4>
 8001266:	0742      	lsls	r2, r0, #29
 8001268:	08db      	lsrs	r3, r3, #3
 800126a:	4313      	orrs	r3, r2
 800126c:	08c0      	lsrs	r0, r0, #3
 800126e:	e029      	b.n	80012c4 <__aeabi_dadd+0x260>
 8001270:	003a      	movs	r2, r7
 8001272:	430a      	orrs	r2, r1
 8001274:	d100      	bne.n	8001278 <__aeabi_dadd+0x214>
 8001276:	e170      	b.n	800155a <__aeabi_dadd+0x4f6>
 8001278:	4662      	mov	r2, ip
 800127a:	4664      	mov	r4, ip
 800127c:	3a01      	subs	r2, #1
 800127e:	2c01      	cmp	r4, #1
 8001280:	d100      	bne.n	8001284 <__aeabi_dadd+0x220>
 8001282:	e0e0      	b.n	8001446 <__aeabi_dadd+0x3e2>
 8001284:	4c51      	ldr	r4, [pc, #324]	; (80013cc <__aeabi_dadd+0x368>)
 8001286:	45a4      	cmp	ip, r4
 8001288:	d100      	bne.n	800128c <__aeabi_dadd+0x228>
 800128a:	e161      	b.n	8001550 <__aeabi_dadd+0x4ec>
 800128c:	4694      	mov	ip, r2
 800128e:	e7b4      	b.n	80011fa <__aeabi_dadd+0x196>
 8001290:	003a      	movs	r2, r7
 8001292:	391f      	subs	r1, #31
 8001294:	40ca      	lsrs	r2, r1
 8001296:	0011      	movs	r1, r2
 8001298:	2b20      	cmp	r3, #32
 800129a:	d003      	beq.n	80012a4 <__aeabi_dadd+0x240>
 800129c:	2240      	movs	r2, #64	; 0x40
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	409f      	lsls	r7, r3
 80012a2:	433c      	orrs	r4, r7
 80012a4:	1e63      	subs	r3, r4, #1
 80012a6:	419c      	sbcs	r4, r3
 80012a8:	2700      	movs	r7, #0
 80012aa:	2600      	movs	r6, #0
 80012ac:	430c      	orrs	r4, r1
 80012ae:	0763      	lsls	r3, r4, #29
 80012b0:	d000      	beq.n	80012b4 <__aeabi_dadd+0x250>
 80012b2:	e753      	b.n	800115c <__aeabi_dadd+0xf8>
 80012b4:	46b4      	mov	ip, r6
 80012b6:	08e4      	lsrs	r4, r4, #3
 80012b8:	077b      	lsls	r3, r7, #29
 80012ba:	4323      	orrs	r3, r4
 80012bc:	08f8      	lsrs	r0, r7, #3
 80012be:	4a43      	ldr	r2, [pc, #268]	; (80013cc <__aeabi_dadd+0x368>)
 80012c0:	4594      	cmp	ip, r2
 80012c2:	d01d      	beq.n	8001300 <__aeabi_dadd+0x29c>
 80012c4:	4662      	mov	r2, ip
 80012c6:	0307      	lsls	r7, r0, #12
 80012c8:	0552      	lsls	r2, r2, #21
 80012ca:	0b3f      	lsrs	r7, r7, #12
 80012cc:	0d52      	lsrs	r2, r2, #21
 80012ce:	e760      	b.n	8001192 <__aeabi_dadd+0x12e>
 80012d0:	4644      	mov	r4, r8
 80012d2:	430c      	orrs	r4, r1
 80012d4:	1e62      	subs	r2, r4, #1
 80012d6:	4194      	sbcs	r4, r2
 80012d8:	18e4      	adds	r4, r4, r3
 80012da:	429c      	cmp	r4, r3
 80012dc:	419b      	sbcs	r3, r3
 80012de:	425f      	negs	r7, r3
 80012e0:	183f      	adds	r7, r7, r0
 80012e2:	023b      	lsls	r3, r7, #8
 80012e4:	d5e3      	bpl.n	80012ae <__aeabi_dadd+0x24a>
 80012e6:	4b39      	ldr	r3, [pc, #228]	; (80013cc <__aeabi_dadd+0x368>)
 80012e8:	3601      	adds	r6, #1
 80012ea:	429e      	cmp	r6, r3
 80012ec:	d000      	beq.n	80012f0 <__aeabi_dadd+0x28c>
 80012ee:	e0b5      	b.n	800145c <__aeabi_dadd+0x3f8>
 80012f0:	0032      	movs	r2, r6
 80012f2:	2700      	movs	r7, #0
 80012f4:	2300      	movs	r3, #0
 80012f6:	e74c      	b.n	8001192 <__aeabi_dadd+0x12e>
 80012f8:	0742      	lsls	r2, r0, #29
 80012fa:	08db      	lsrs	r3, r3, #3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	08c0      	lsrs	r0, r0, #3
 8001300:	001a      	movs	r2, r3
 8001302:	4302      	orrs	r2, r0
 8001304:	d100      	bne.n	8001308 <__aeabi_dadd+0x2a4>
 8001306:	e1e1      	b.n	80016cc <__aeabi_dadd+0x668>
 8001308:	2780      	movs	r7, #128	; 0x80
 800130a:	033f      	lsls	r7, r7, #12
 800130c:	4307      	orrs	r7, r0
 800130e:	033f      	lsls	r7, r7, #12
 8001310:	4a2e      	ldr	r2, [pc, #184]	; (80013cc <__aeabi_dadd+0x368>)
 8001312:	0b3f      	lsrs	r7, r7, #12
 8001314:	e73d      	b.n	8001192 <__aeabi_dadd+0x12e>
 8001316:	0020      	movs	r0, r4
 8001318:	f001 fcb4 	bl	8002c84 <__clzsi2>
 800131c:	0001      	movs	r1, r0
 800131e:	3118      	adds	r1, #24
 8001320:	291f      	cmp	r1, #31
 8001322:	dc00      	bgt.n	8001326 <__aeabi_dadd+0x2c2>
 8001324:	e6fc      	b.n	8001120 <__aeabi_dadd+0xbc>
 8001326:	3808      	subs	r0, #8
 8001328:	4084      	lsls	r4, r0
 800132a:	0027      	movs	r7, r4
 800132c:	2400      	movs	r4, #0
 800132e:	42b1      	cmp	r1, r6
 8001330:	db00      	blt.n	8001334 <__aeabi_dadd+0x2d0>
 8001332:	e6ff      	b.n	8001134 <__aeabi_dadd+0xd0>
 8001334:	4a26      	ldr	r2, [pc, #152]	; (80013d0 <__aeabi_dadd+0x36c>)
 8001336:	1a76      	subs	r6, r6, r1
 8001338:	4017      	ands	r7, r2
 800133a:	e70d      	b.n	8001158 <__aeabi_dadd+0xf4>
 800133c:	2a00      	cmp	r2, #0
 800133e:	d02f      	beq.n	80013a0 <__aeabi_dadd+0x33c>
 8001340:	464a      	mov	r2, r9
 8001342:	1b92      	subs	r2, r2, r6
 8001344:	4694      	mov	ip, r2
 8001346:	2e00      	cmp	r6, #0
 8001348:	d100      	bne.n	800134c <__aeabi_dadd+0x2e8>
 800134a:	e0ad      	b.n	80014a8 <__aeabi_dadd+0x444>
 800134c:	4a1f      	ldr	r2, [pc, #124]	; (80013cc <__aeabi_dadd+0x368>)
 800134e:	4591      	cmp	r9, r2
 8001350:	d100      	bne.n	8001354 <__aeabi_dadd+0x2f0>
 8001352:	e10f      	b.n	8001574 <__aeabi_dadd+0x510>
 8001354:	2280      	movs	r2, #128	; 0x80
 8001356:	0412      	lsls	r2, r2, #16
 8001358:	4310      	orrs	r0, r2
 800135a:	4662      	mov	r2, ip
 800135c:	2a38      	cmp	r2, #56	; 0x38
 800135e:	dd00      	ble.n	8001362 <__aeabi_dadd+0x2fe>
 8001360:	e10f      	b.n	8001582 <__aeabi_dadd+0x51e>
 8001362:	2a1f      	cmp	r2, #31
 8001364:	dd00      	ble.n	8001368 <__aeabi_dadd+0x304>
 8001366:	e180      	b.n	800166a <__aeabi_dadd+0x606>
 8001368:	4664      	mov	r4, ip
 800136a:	2220      	movs	r2, #32
 800136c:	001e      	movs	r6, r3
 800136e:	1b12      	subs	r2, r2, r4
 8001370:	4667      	mov	r7, ip
 8001372:	0004      	movs	r4, r0
 8001374:	4093      	lsls	r3, r2
 8001376:	4094      	lsls	r4, r2
 8001378:	40fe      	lsrs	r6, r7
 800137a:	1e5a      	subs	r2, r3, #1
 800137c:	4193      	sbcs	r3, r2
 800137e:	40f8      	lsrs	r0, r7
 8001380:	4334      	orrs	r4, r6
 8001382:	431c      	orrs	r4, r3
 8001384:	4480      	add	r8, r0
 8001386:	1864      	adds	r4, r4, r1
 8001388:	428c      	cmp	r4, r1
 800138a:	41bf      	sbcs	r7, r7
 800138c:	427f      	negs	r7, r7
 800138e:	464e      	mov	r6, r9
 8001390:	4447      	add	r7, r8
 8001392:	e7a6      	b.n	80012e2 <__aeabi_dadd+0x27e>
 8001394:	4642      	mov	r2, r8
 8001396:	430a      	orrs	r2, r1
 8001398:	0011      	movs	r1, r2
 800139a:	1e4a      	subs	r2, r1, #1
 800139c:	4191      	sbcs	r1, r2
 800139e:	e6ad      	b.n	80010fc <__aeabi_dadd+0x98>
 80013a0:	4c0c      	ldr	r4, [pc, #48]	; (80013d4 <__aeabi_dadd+0x370>)
 80013a2:	1c72      	adds	r2, r6, #1
 80013a4:	4222      	tst	r2, r4
 80013a6:	d000      	beq.n	80013aa <__aeabi_dadd+0x346>
 80013a8:	e0a1      	b.n	80014ee <__aeabi_dadd+0x48a>
 80013aa:	0002      	movs	r2, r0
 80013ac:	431a      	orrs	r2, r3
 80013ae:	2e00      	cmp	r6, #0
 80013b0:	d000      	beq.n	80013b4 <__aeabi_dadd+0x350>
 80013b2:	e0fa      	b.n	80015aa <__aeabi_dadd+0x546>
 80013b4:	2a00      	cmp	r2, #0
 80013b6:	d100      	bne.n	80013ba <__aeabi_dadd+0x356>
 80013b8:	e145      	b.n	8001646 <__aeabi_dadd+0x5e2>
 80013ba:	003a      	movs	r2, r7
 80013bc:	430a      	orrs	r2, r1
 80013be:	d000      	beq.n	80013c2 <__aeabi_dadd+0x35e>
 80013c0:	e146      	b.n	8001650 <__aeabi_dadd+0x5ec>
 80013c2:	0742      	lsls	r2, r0, #29
 80013c4:	08db      	lsrs	r3, r3, #3
 80013c6:	4313      	orrs	r3, r2
 80013c8:	08c0      	lsrs	r0, r0, #3
 80013ca:	e77b      	b.n	80012c4 <__aeabi_dadd+0x260>
 80013cc:	000007ff 	.word	0x000007ff
 80013d0:	ff7fffff 	.word	0xff7fffff
 80013d4:	000007fe 	.word	0x000007fe
 80013d8:	4647      	mov	r7, r8
 80013da:	1a5c      	subs	r4, r3, r1
 80013dc:	1bc2      	subs	r2, r0, r7
 80013de:	42a3      	cmp	r3, r4
 80013e0:	41bf      	sbcs	r7, r7
 80013e2:	427f      	negs	r7, r7
 80013e4:	46b9      	mov	r9, r7
 80013e6:	0017      	movs	r7, r2
 80013e8:	464a      	mov	r2, r9
 80013ea:	1abf      	subs	r7, r7, r2
 80013ec:	023a      	lsls	r2, r7, #8
 80013ee:	d500      	bpl.n	80013f2 <__aeabi_dadd+0x38e>
 80013f0:	e08d      	b.n	800150e <__aeabi_dadd+0x4aa>
 80013f2:	0023      	movs	r3, r4
 80013f4:	433b      	orrs	r3, r7
 80013f6:	d000      	beq.n	80013fa <__aeabi_dadd+0x396>
 80013f8:	e68a      	b.n	8001110 <__aeabi_dadd+0xac>
 80013fa:	2000      	movs	r0, #0
 80013fc:	2500      	movs	r5, #0
 80013fe:	e761      	b.n	80012c4 <__aeabi_dadd+0x260>
 8001400:	4cb4      	ldr	r4, [pc, #720]	; (80016d4 <__aeabi_dadd+0x670>)
 8001402:	45a1      	cmp	r9, r4
 8001404:	d100      	bne.n	8001408 <__aeabi_dadd+0x3a4>
 8001406:	e0ad      	b.n	8001564 <__aeabi_dadd+0x500>
 8001408:	2480      	movs	r4, #128	; 0x80
 800140a:	0424      	lsls	r4, r4, #16
 800140c:	4320      	orrs	r0, r4
 800140e:	4664      	mov	r4, ip
 8001410:	2c38      	cmp	r4, #56	; 0x38
 8001412:	dc3d      	bgt.n	8001490 <__aeabi_dadd+0x42c>
 8001414:	4662      	mov	r2, ip
 8001416:	2c1f      	cmp	r4, #31
 8001418:	dd00      	ble.n	800141c <__aeabi_dadd+0x3b8>
 800141a:	e0b7      	b.n	800158c <__aeabi_dadd+0x528>
 800141c:	2520      	movs	r5, #32
 800141e:	001e      	movs	r6, r3
 8001420:	1b2d      	subs	r5, r5, r4
 8001422:	0004      	movs	r4, r0
 8001424:	40ab      	lsls	r3, r5
 8001426:	40ac      	lsls	r4, r5
 8001428:	40d6      	lsrs	r6, r2
 800142a:	40d0      	lsrs	r0, r2
 800142c:	4642      	mov	r2, r8
 800142e:	1e5d      	subs	r5, r3, #1
 8001430:	41ab      	sbcs	r3, r5
 8001432:	4334      	orrs	r4, r6
 8001434:	1a12      	subs	r2, r2, r0
 8001436:	4690      	mov	r8, r2
 8001438:	4323      	orrs	r3, r4
 800143a:	e02c      	b.n	8001496 <__aeabi_dadd+0x432>
 800143c:	0742      	lsls	r2, r0, #29
 800143e:	08db      	lsrs	r3, r3, #3
 8001440:	4313      	orrs	r3, r2
 8001442:	08c0      	lsrs	r0, r0, #3
 8001444:	e73b      	b.n	80012be <__aeabi_dadd+0x25a>
 8001446:	185c      	adds	r4, r3, r1
 8001448:	429c      	cmp	r4, r3
 800144a:	419b      	sbcs	r3, r3
 800144c:	4440      	add	r0, r8
 800144e:	425b      	negs	r3, r3
 8001450:	18c7      	adds	r7, r0, r3
 8001452:	2601      	movs	r6, #1
 8001454:	023b      	lsls	r3, r7, #8
 8001456:	d400      	bmi.n	800145a <__aeabi_dadd+0x3f6>
 8001458:	e729      	b.n	80012ae <__aeabi_dadd+0x24a>
 800145a:	2602      	movs	r6, #2
 800145c:	4a9e      	ldr	r2, [pc, #632]	; (80016d8 <__aeabi_dadd+0x674>)
 800145e:	0863      	lsrs	r3, r4, #1
 8001460:	4017      	ands	r7, r2
 8001462:	2201      	movs	r2, #1
 8001464:	4014      	ands	r4, r2
 8001466:	431c      	orrs	r4, r3
 8001468:	07fb      	lsls	r3, r7, #31
 800146a:	431c      	orrs	r4, r3
 800146c:	087f      	lsrs	r7, r7, #1
 800146e:	e673      	b.n	8001158 <__aeabi_dadd+0xf4>
 8001470:	4644      	mov	r4, r8
 8001472:	3a20      	subs	r2, #32
 8001474:	40d4      	lsrs	r4, r2
 8001476:	4662      	mov	r2, ip
 8001478:	2a20      	cmp	r2, #32
 800147a:	d005      	beq.n	8001488 <__aeabi_dadd+0x424>
 800147c:	4667      	mov	r7, ip
 800147e:	2240      	movs	r2, #64	; 0x40
 8001480:	1bd2      	subs	r2, r2, r7
 8001482:	4647      	mov	r7, r8
 8001484:	4097      	lsls	r7, r2
 8001486:	4339      	orrs	r1, r7
 8001488:	1e4a      	subs	r2, r1, #1
 800148a:	4191      	sbcs	r1, r2
 800148c:	4321      	orrs	r1, r4
 800148e:	e635      	b.n	80010fc <__aeabi_dadd+0x98>
 8001490:	4303      	orrs	r3, r0
 8001492:	1e58      	subs	r0, r3, #1
 8001494:	4183      	sbcs	r3, r0
 8001496:	1acc      	subs	r4, r1, r3
 8001498:	42a1      	cmp	r1, r4
 800149a:	41bf      	sbcs	r7, r7
 800149c:	4643      	mov	r3, r8
 800149e:	427f      	negs	r7, r7
 80014a0:	4655      	mov	r5, sl
 80014a2:	464e      	mov	r6, r9
 80014a4:	1bdf      	subs	r7, r3, r7
 80014a6:	e62e      	b.n	8001106 <__aeabi_dadd+0xa2>
 80014a8:	0002      	movs	r2, r0
 80014aa:	431a      	orrs	r2, r3
 80014ac:	d100      	bne.n	80014b0 <__aeabi_dadd+0x44c>
 80014ae:	e0bd      	b.n	800162c <__aeabi_dadd+0x5c8>
 80014b0:	4662      	mov	r2, ip
 80014b2:	4664      	mov	r4, ip
 80014b4:	3a01      	subs	r2, #1
 80014b6:	2c01      	cmp	r4, #1
 80014b8:	d100      	bne.n	80014bc <__aeabi_dadd+0x458>
 80014ba:	e0e5      	b.n	8001688 <__aeabi_dadd+0x624>
 80014bc:	4c85      	ldr	r4, [pc, #532]	; (80016d4 <__aeabi_dadd+0x670>)
 80014be:	45a4      	cmp	ip, r4
 80014c0:	d058      	beq.n	8001574 <__aeabi_dadd+0x510>
 80014c2:	4694      	mov	ip, r2
 80014c4:	e749      	b.n	800135a <__aeabi_dadd+0x2f6>
 80014c6:	4664      	mov	r4, ip
 80014c8:	2220      	movs	r2, #32
 80014ca:	1b12      	subs	r2, r2, r4
 80014cc:	4644      	mov	r4, r8
 80014ce:	4094      	lsls	r4, r2
 80014d0:	000f      	movs	r7, r1
 80014d2:	46a1      	mov	r9, r4
 80014d4:	4664      	mov	r4, ip
 80014d6:	4091      	lsls	r1, r2
 80014d8:	40e7      	lsrs	r7, r4
 80014da:	464c      	mov	r4, r9
 80014dc:	1e4a      	subs	r2, r1, #1
 80014de:	4191      	sbcs	r1, r2
 80014e0:	433c      	orrs	r4, r7
 80014e2:	4642      	mov	r2, r8
 80014e4:	430c      	orrs	r4, r1
 80014e6:	4661      	mov	r1, ip
 80014e8:	40ca      	lsrs	r2, r1
 80014ea:	1880      	adds	r0, r0, r2
 80014ec:	e6f4      	b.n	80012d8 <__aeabi_dadd+0x274>
 80014ee:	4c79      	ldr	r4, [pc, #484]	; (80016d4 <__aeabi_dadd+0x670>)
 80014f0:	42a2      	cmp	r2, r4
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dadd+0x492>
 80014f4:	e6fd      	b.n	80012f2 <__aeabi_dadd+0x28e>
 80014f6:	1859      	adds	r1, r3, r1
 80014f8:	4299      	cmp	r1, r3
 80014fa:	419b      	sbcs	r3, r3
 80014fc:	4440      	add	r0, r8
 80014fe:	425f      	negs	r7, r3
 8001500:	19c7      	adds	r7, r0, r7
 8001502:	07fc      	lsls	r4, r7, #31
 8001504:	0849      	lsrs	r1, r1, #1
 8001506:	0016      	movs	r6, r2
 8001508:	430c      	orrs	r4, r1
 800150a:	087f      	lsrs	r7, r7, #1
 800150c:	e6cf      	b.n	80012ae <__aeabi_dadd+0x24a>
 800150e:	1acc      	subs	r4, r1, r3
 8001510:	42a1      	cmp	r1, r4
 8001512:	41bf      	sbcs	r7, r7
 8001514:	4643      	mov	r3, r8
 8001516:	427f      	negs	r7, r7
 8001518:	1a18      	subs	r0, r3, r0
 800151a:	4655      	mov	r5, sl
 800151c:	1bc7      	subs	r7, r0, r7
 800151e:	e5f7      	b.n	8001110 <__aeabi_dadd+0xac>
 8001520:	08c9      	lsrs	r1, r1, #3
 8001522:	077b      	lsls	r3, r7, #29
 8001524:	4655      	mov	r5, sl
 8001526:	430b      	orrs	r3, r1
 8001528:	08f8      	lsrs	r0, r7, #3
 800152a:	e6c8      	b.n	80012be <__aeabi_dadd+0x25a>
 800152c:	2c00      	cmp	r4, #0
 800152e:	d000      	beq.n	8001532 <__aeabi_dadd+0x4ce>
 8001530:	e081      	b.n	8001636 <__aeabi_dadd+0x5d2>
 8001532:	4643      	mov	r3, r8
 8001534:	430b      	orrs	r3, r1
 8001536:	d115      	bne.n	8001564 <__aeabi_dadd+0x500>
 8001538:	2080      	movs	r0, #128	; 0x80
 800153a:	2500      	movs	r5, #0
 800153c:	0300      	lsls	r0, r0, #12
 800153e:	e6e3      	b.n	8001308 <__aeabi_dadd+0x2a4>
 8001540:	1a5c      	subs	r4, r3, r1
 8001542:	42a3      	cmp	r3, r4
 8001544:	419b      	sbcs	r3, r3
 8001546:	1bc7      	subs	r7, r0, r7
 8001548:	425b      	negs	r3, r3
 800154a:	2601      	movs	r6, #1
 800154c:	1aff      	subs	r7, r7, r3
 800154e:	e5da      	b.n	8001106 <__aeabi_dadd+0xa2>
 8001550:	0742      	lsls	r2, r0, #29
 8001552:	08db      	lsrs	r3, r3, #3
 8001554:	4313      	orrs	r3, r2
 8001556:	08c0      	lsrs	r0, r0, #3
 8001558:	e6d2      	b.n	8001300 <__aeabi_dadd+0x29c>
 800155a:	0742      	lsls	r2, r0, #29
 800155c:	08db      	lsrs	r3, r3, #3
 800155e:	4313      	orrs	r3, r2
 8001560:	08c0      	lsrs	r0, r0, #3
 8001562:	e6ac      	b.n	80012be <__aeabi_dadd+0x25a>
 8001564:	4643      	mov	r3, r8
 8001566:	4642      	mov	r2, r8
 8001568:	08c9      	lsrs	r1, r1, #3
 800156a:	075b      	lsls	r3, r3, #29
 800156c:	4655      	mov	r5, sl
 800156e:	430b      	orrs	r3, r1
 8001570:	08d0      	lsrs	r0, r2, #3
 8001572:	e6c5      	b.n	8001300 <__aeabi_dadd+0x29c>
 8001574:	4643      	mov	r3, r8
 8001576:	4642      	mov	r2, r8
 8001578:	075b      	lsls	r3, r3, #29
 800157a:	08c9      	lsrs	r1, r1, #3
 800157c:	430b      	orrs	r3, r1
 800157e:	08d0      	lsrs	r0, r2, #3
 8001580:	e6be      	b.n	8001300 <__aeabi_dadd+0x29c>
 8001582:	4303      	orrs	r3, r0
 8001584:	001c      	movs	r4, r3
 8001586:	1e63      	subs	r3, r4, #1
 8001588:	419c      	sbcs	r4, r3
 800158a:	e6fc      	b.n	8001386 <__aeabi_dadd+0x322>
 800158c:	0002      	movs	r2, r0
 800158e:	3c20      	subs	r4, #32
 8001590:	40e2      	lsrs	r2, r4
 8001592:	0014      	movs	r4, r2
 8001594:	4662      	mov	r2, ip
 8001596:	2a20      	cmp	r2, #32
 8001598:	d003      	beq.n	80015a2 <__aeabi_dadd+0x53e>
 800159a:	2540      	movs	r5, #64	; 0x40
 800159c:	1aad      	subs	r5, r5, r2
 800159e:	40a8      	lsls	r0, r5
 80015a0:	4303      	orrs	r3, r0
 80015a2:	1e58      	subs	r0, r3, #1
 80015a4:	4183      	sbcs	r3, r0
 80015a6:	4323      	orrs	r3, r4
 80015a8:	e775      	b.n	8001496 <__aeabi_dadd+0x432>
 80015aa:	2a00      	cmp	r2, #0
 80015ac:	d0e2      	beq.n	8001574 <__aeabi_dadd+0x510>
 80015ae:	003a      	movs	r2, r7
 80015b0:	430a      	orrs	r2, r1
 80015b2:	d0cd      	beq.n	8001550 <__aeabi_dadd+0x4ec>
 80015b4:	0742      	lsls	r2, r0, #29
 80015b6:	08db      	lsrs	r3, r3, #3
 80015b8:	4313      	orrs	r3, r2
 80015ba:	2280      	movs	r2, #128	; 0x80
 80015bc:	08c0      	lsrs	r0, r0, #3
 80015be:	0312      	lsls	r2, r2, #12
 80015c0:	4210      	tst	r0, r2
 80015c2:	d006      	beq.n	80015d2 <__aeabi_dadd+0x56e>
 80015c4:	08fc      	lsrs	r4, r7, #3
 80015c6:	4214      	tst	r4, r2
 80015c8:	d103      	bne.n	80015d2 <__aeabi_dadd+0x56e>
 80015ca:	0020      	movs	r0, r4
 80015cc:	08cb      	lsrs	r3, r1, #3
 80015ce:	077a      	lsls	r2, r7, #29
 80015d0:	4313      	orrs	r3, r2
 80015d2:	0f5a      	lsrs	r2, r3, #29
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	0752      	lsls	r2, r2, #29
 80015d8:	08db      	lsrs	r3, r3, #3
 80015da:	4313      	orrs	r3, r2
 80015dc:	e690      	b.n	8001300 <__aeabi_dadd+0x29c>
 80015de:	4643      	mov	r3, r8
 80015e0:	430b      	orrs	r3, r1
 80015e2:	d100      	bne.n	80015e6 <__aeabi_dadd+0x582>
 80015e4:	e709      	b.n	80013fa <__aeabi_dadd+0x396>
 80015e6:	4643      	mov	r3, r8
 80015e8:	4642      	mov	r2, r8
 80015ea:	08c9      	lsrs	r1, r1, #3
 80015ec:	075b      	lsls	r3, r3, #29
 80015ee:	4655      	mov	r5, sl
 80015f0:	430b      	orrs	r3, r1
 80015f2:	08d0      	lsrs	r0, r2, #3
 80015f4:	e666      	b.n	80012c4 <__aeabi_dadd+0x260>
 80015f6:	1acc      	subs	r4, r1, r3
 80015f8:	42a1      	cmp	r1, r4
 80015fa:	4189      	sbcs	r1, r1
 80015fc:	1a3f      	subs	r7, r7, r0
 80015fe:	4249      	negs	r1, r1
 8001600:	4655      	mov	r5, sl
 8001602:	2601      	movs	r6, #1
 8001604:	1a7f      	subs	r7, r7, r1
 8001606:	e57e      	b.n	8001106 <__aeabi_dadd+0xa2>
 8001608:	4642      	mov	r2, r8
 800160a:	1a5c      	subs	r4, r3, r1
 800160c:	1a87      	subs	r7, r0, r2
 800160e:	42a3      	cmp	r3, r4
 8001610:	4192      	sbcs	r2, r2
 8001612:	4252      	negs	r2, r2
 8001614:	1abf      	subs	r7, r7, r2
 8001616:	023a      	lsls	r2, r7, #8
 8001618:	d53d      	bpl.n	8001696 <__aeabi_dadd+0x632>
 800161a:	1acc      	subs	r4, r1, r3
 800161c:	42a1      	cmp	r1, r4
 800161e:	4189      	sbcs	r1, r1
 8001620:	4643      	mov	r3, r8
 8001622:	4249      	negs	r1, r1
 8001624:	1a1f      	subs	r7, r3, r0
 8001626:	4655      	mov	r5, sl
 8001628:	1a7f      	subs	r7, r7, r1
 800162a:	e595      	b.n	8001158 <__aeabi_dadd+0xf4>
 800162c:	077b      	lsls	r3, r7, #29
 800162e:	08c9      	lsrs	r1, r1, #3
 8001630:	430b      	orrs	r3, r1
 8001632:	08f8      	lsrs	r0, r7, #3
 8001634:	e643      	b.n	80012be <__aeabi_dadd+0x25a>
 8001636:	4644      	mov	r4, r8
 8001638:	08db      	lsrs	r3, r3, #3
 800163a:	430c      	orrs	r4, r1
 800163c:	d130      	bne.n	80016a0 <__aeabi_dadd+0x63c>
 800163e:	0742      	lsls	r2, r0, #29
 8001640:	4313      	orrs	r3, r2
 8001642:	08c0      	lsrs	r0, r0, #3
 8001644:	e65c      	b.n	8001300 <__aeabi_dadd+0x29c>
 8001646:	077b      	lsls	r3, r7, #29
 8001648:	08c9      	lsrs	r1, r1, #3
 800164a:	430b      	orrs	r3, r1
 800164c:	08f8      	lsrs	r0, r7, #3
 800164e:	e639      	b.n	80012c4 <__aeabi_dadd+0x260>
 8001650:	185c      	adds	r4, r3, r1
 8001652:	429c      	cmp	r4, r3
 8001654:	419b      	sbcs	r3, r3
 8001656:	4440      	add	r0, r8
 8001658:	425b      	negs	r3, r3
 800165a:	18c7      	adds	r7, r0, r3
 800165c:	023b      	lsls	r3, r7, #8
 800165e:	d400      	bmi.n	8001662 <__aeabi_dadd+0x5fe>
 8001660:	e625      	b.n	80012ae <__aeabi_dadd+0x24a>
 8001662:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <__aeabi_dadd+0x674>)
 8001664:	2601      	movs	r6, #1
 8001666:	401f      	ands	r7, r3
 8001668:	e621      	b.n	80012ae <__aeabi_dadd+0x24a>
 800166a:	0004      	movs	r4, r0
 800166c:	3a20      	subs	r2, #32
 800166e:	40d4      	lsrs	r4, r2
 8001670:	4662      	mov	r2, ip
 8001672:	2a20      	cmp	r2, #32
 8001674:	d004      	beq.n	8001680 <__aeabi_dadd+0x61c>
 8001676:	2240      	movs	r2, #64	; 0x40
 8001678:	4666      	mov	r6, ip
 800167a:	1b92      	subs	r2, r2, r6
 800167c:	4090      	lsls	r0, r2
 800167e:	4303      	orrs	r3, r0
 8001680:	1e5a      	subs	r2, r3, #1
 8001682:	4193      	sbcs	r3, r2
 8001684:	431c      	orrs	r4, r3
 8001686:	e67e      	b.n	8001386 <__aeabi_dadd+0x322>
 8001688:	185c      	adds	r4, r3, r1
 800168a:	428c      	cmp	r4, r1
 800168c:	4189      	sbcs	r1, r1
 800168e:	4440      	add	r0, r8
 8001690:	4249      	negs	r1, r1
 8001692:	1847      	adds	r7, r0, r1
 8001694:	e6dd      	b.n	8001452 <__aeabi_dadd+0x3ee>
 8001696:	0023      	movs	r3, r4
 8001698:	433b      	orrs	r3, r7
 800169a:	d100      	bne.n	800169e <__aeabi_dadd+0x63a>
 800169c:	e6ad      	b.n	80013fa <__aeabi_dadd+0x396>
 800169e:	e606      	b.n	80012ae <__aeabi_dadd+0x24a>
 80016a0:	0744      	lsls	r4, r0, #29
 80016a2:	4323      	orrs	r3, r4
 80016a4:	2480      	movs	r4, #128	; 0x80
 80016a6:	08c0      	lsrs	r0, r0, #3
 80016a8:	0324      	lsls	r4, r4, #12
 80016aa:	4220      	tst	r0, r4
 80016ac:	d008      	beq.n	80016c0 <__aeabi_dadd+0x65c>
 80016ae:	4642      	mov	r2, r8
 80016b0:	08d6      	lsrs	r6, r2, #3
 80016b2:	4226      	tst	r6, r4
 80016b4:	d104      	bne.n	80016c0 <__aeabi_dadd+0x65c>
 80016b6:	4655      	mov	r5, sl
 80016b8:	0030      	movs	r0, r6
 80016ba:	08cb      	lsrs	r3, r1, #3
 80016bc:	0751      	lsls	r1, r2, #29
 80016be:	430b      	orrs	r3, r1
 80016c0:	0f5a      	lsrs	r2, r3, #29
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	08db      	lsrs	r3, r3, #3
 80016c6:	0752      	lsls	r2, r2, #29
 80016c8:	4313      	orrs	r3, r2
 80016ca:	e619      	b.n	8001300 <__aeabi_dadd+0x29c>
 80016cc:	2300      	movs	r3, #0
 80016ce:	4a01      	ldr	r2, [pc, #4]	; (80016d4 <__aeabi_dadd+0x670>)
 80016d0:	001f      	movs	r7, r3
 80016d2:	e55e      	b.n	8001192 <__aeabi_dadd+0x12e>
 80016d4:	000007ff 	.word	0x000007ff
 80016d8:	ff7fffff 	.word	0xff7fffff

080016dc <__aeabi_ddiv>:
 80016dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016de:	4657      	mov	r7, sl
 80016e0:	464e      	mov	r6, r9
 80016e2:	4645      	mov	r5, r8
 80016e4:	46de      	mov	lr, fp
 80016e6:	b5e0      	push	{r5, r6, r7, lr}
 80016e8:	4681      	mov	r9, r0
 80016ea:	0005      	movs	r5, r0
 80016ec:	030c      	lsls	r4, r1, #12
 80016ee:	0048      	lsls	r0, r1, #1
 80016f0:	4692      	mov	sl, r2
 80016f2:	001f      	movs	r7, r3
 80016f4:	b085      	sub	sp, #20
 80016f6:	0b24      	lsrs	r4, r4, #12
 80016f8:	0d40      	lsrs	r0, r0, #21
 80016fa:	0fce      	lsrs	r6, r1, #31
 80016fc:	2800      	cmp	r0, #0
 80016fe:	d100      	bne.n	8001702 <__aeabi_ddiv+0x26>
 8001700:	e156      	b.n	80019b0 <__aeabi_ddiv+0x2d4>
 8001702:	4bd4      	ldr	r3, [pc, #848]	; (8001a54 <__aeabi_ddiv+0x378>)
 8001704:	4298      	cmp	r0, r3
 8001706:	d100      	bne.n	800170a <__aeabi_ddiv+0x2e>
 8001708:	e172      	b.n	80019f0 <__aeabi_ddiv+0x314>
 800170a:	0f6b      	lsrs	r3, r5, #29
 800170c:	00e4      	lsls	r4, r4, #3
 800170e:	431c      	orrs	r4, r3
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	041b      	lsls	r3, r3, #16
 8001714:	4323      	orrs	r3, r4
 8001716:	4698      	mov	r8, r3
 8001718:	4bcf      	ldr	r3, [pc, #828]	; (8001a58 <__aeabi_ddiv+0x37c>)
 800171a:	00ed      	lsls	r5, r5, #3
 800171c:	469b      	mov	fp, r3
 800171e:	2300      	movs	r3, #0
 8001720:	4699      	mov	r9, r3
 8001722:	4483      	add	fp, r0
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	033c      	lsls	r4, r7, #12
 8001728:	007b      	lsls	r3, r7, #1
 800172a:	4650      	mov	r0, sl
 800172c:	0b24      	lsrs	r4, r4, #12
 800172e:	0d5b      	lsrs	r3, r3, #21
 8001730:	0fff      	lsrs	r7, r7, #31
 8001732:	2b00      	cmp	r3, #0
 8001734:	d100      	bne.n	8001738 <__aeabi_ddiv+0x5c>
 8001736:	e11f      	b.n	8001978 <__aeabi_ddiv+0x29c>
 8001738:	4ac6      	ldr	r2, [pc, #792]	; (8001a54 <__aeabi_ddiv+0x378>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d100      	bne.n	8001740 <__aeabi_ddiv+0x64>
 800173e:	e162      	b.n	8001a06 <__aeabi_ddiv+0x32a>
 8001740:	49c5      	ldr	r1, [pc, #788]	; (8001a58 <__aeabi_ddiv+0x37c>)
 8001742:	0f42      	lsrs	r2, r0, #29
 8001744:	468c      	mov	ip, r1
 8001746:	00e4      	lsls	r4, r4, #3
 8001748:	4659      	mov	r1, fp
 800174a:	4314      	orrs	r4, r2
 800174c:	2280      	movs	r2, #128	; 0x80
 800174e:	4463      	add	r3, ip
 8001750:	0412      	lsls	r2, r2, #16
 8001752:	1acb      	subs	r3, r1, r3
 8001754:	4314      	orrs	r4, r2
 8001756:	469b      	mov	fp, r3
 8001758:	00c2      	lsls	r2, r0, #3
 800175a:	2000      	movs	r0, #0
 800175c:	0033      	movs	r3, r6
 800175e:	407b      	eors	r3, r7
 8001760:	469a      	mov	sl, r3
 8001762:	464b      	mov	r3, r9
 8001764:	2b0f      	cmp	r3, #15
 8001766:	d827      	bhi.n	80017b8 <__aeabi_ddiv+0xdc>
 8001768:	49bc      	ldr	r1, [pc, #752]	; (8001a5c <__aeabi_ddiv+0x380>)
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	58cb      	ldr	r3, [r1, r3]
 800176e:	469f      	mov	pc, r3
 8001770:	46b2      	mov	sl, r6
 8001772:	9b00      	ldr	r3, [sp, #0]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d016      	beq.n	80017a6 <__aeabi_ddiv+0xca>
 8001778:	2b03      	cmp	r3, #3
 800177a:	d100      	bne.n	800177e <__aeabi_ddiv+0xa2>
 800177c:	e28e      	b.n	8001c9c <__aeabi_ddiv+0x5c0>
 800177e:	2b01      	cmp	r3, #1
 8001780:	d000      	beq.n	8001784 <__aeabi_ddiv+0xa8>
 8001782:	e0d9      	b.n	8001938 <__aeabi_ddiv+0x25c>
 8001784:	2300      	movs	r3, #0
 8001786:	2400      	movs	r4, #0
 8001788:	2500      	movs	r5, #0
 800178a:	4652      	mov	r2, sl
 800178c:	051b      	lsls	r3, r3, #20
 800178e:	4323      	orrs	r3, r4
 8001790:	07d2      	lsls	r2, r2, #31
 8001792:	4313      	orrs	r3, r2
 8001794:	0028      	movs	r0, r5
 8001796:	0019      	movs	r1, r3
 8001798:	b005      	add	sp, #20
 800179a:	bcf0      	pop	{r4, r5, r6, r7}
 800179c:	46bb      	mov	fp, r7
 800179e:	46b2      	mov	sl, r6
 80017a0:	46a9      	mov	r9, r5
 80017a2:	46a0      	mov	r8, r4
 80017a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017a6:	2400      	movs	r4, #0
 80017a8:	2500      	movs	r5, #0
 80017aa:	4baa      	ldr	r3, [pc, #680]	; (8001a54 <__aeabi_ddiv+0x378>)
 80017ac:	e7ed      	b.n	800178a <__aeabi_ddiv+0xae>
 80017ae:	46ba      	mov	sl, r7
 80017b0:	46a0      	mov	r8, r4
 80017b2:	0015      	movs	r5, r2
 80017b4:	9000      	str	r0, [sp, #0]
 80017b6:	e7dc      	b.n	8001772 <__aeabi_ddiv+0x96>
 80017b8:	4544      	cmp	r4, r8
 80017ba:	d200      	bcs.n	80017be <__aeabi_ddiv+0xe2>
 80017bc:	e1c7      	b.n	8001b4e <__aeabi_ddiv+0x472>
 80017be:	d100      	bne.n	80017c2 <__aeabi_ddiv+0xe6>
 80017c0:	e1c2      	b.n	8001b48 <__aeabi_ddiv+0x46c>
 80017c2:	2301      	movs	r3, #1
 80017c4:	425b      	negs	r3, r3
 80017c6:	469c      	mov	ip, r3
 80017c8:	002e      	movs	r6, r5
 80017ca:	4640      	mov	r0, r8
 80017cc:	2500      	movs	r5, #0
 80017ce:	44e3      	add	fp, ip
 80017d0:	0223      	lsls	r3, r4, #8
 80017d2:	0e14      	lsrs	r4, r2, #24
 80017d4:	431c      	orrs	r4, r3
 80017d6:	0c1b      	lsrs	r3, r3, #16
 80017d8:	4699      	mov	r9, r3
 80017da:	0423      	lsls	r3, r4, #16
 80017dc:	0c1f      	lsrs	r7, r3, #16
 80017de:	0212      	lsls	r2, r2, #8
 80017e0:	4649      	mov	r1, r9
 80017e2:	9200      	str	r2, [sp, #0]
 80017e4:	9701      	str	r7, [sp, #4]
 80017e6:	f7fe fd3b 	bl	8000260 <__aeabi_uidivmod>
 80017ea:	0002      	movs	r2, r0
 80017ec:	437a      	muls	r2, r7
 80017ee:	040b      	lsls	r3, r1, #16
 80017f0:	0c31      	lsrs	r1, r6, #16
 80017f2:	4680      	mov	r8, r0
 80017f4:	4319      	orrs	r1, r3
 80017f6:	428a      	cmp	r2, r1
 80017f8:	d907      	bls.n	800180a <__aeabi_ddiv+0x12e>
 80017fa:	2301      	movs	r3, #1
 80017fc:	425b      	negs	r3, r3
 80017fe:	469c      	mov	ip, r3
 8001800:	1909      	adds	r1, r1, r4
 8001802:	44e0      	add	r8, ip
 8001804:	428c      	cmp	r4, r1
 8001806:	d800      	bhi.n	800180a <__aeabi_ddiv+0x12e>
 8001808:	e207      	b.n	8001c1a <__aeabi_ddiv+0x53e>
 800180a:	1a88      	subs	r0, r1, r2
 800180c:	4649      	mov	r1, r9
 800180e:	f7fe fd27 	bl	8000260 <__aeabi_uidivmod>
 8001812:	0409      	lsls	r1, r1, #16
 8001814:	468c      	mov	ip, r1
 8001816:	0431      	lsls	r1, r6, #16
 8001818:	4666      	mov	r6, ip
 800181a:	9a01      	ldr	r2, [sp, #4]
 800181c:	0c09      	lsrs	r1, r1, #16
 800181e:	4342      	muls	r2, r0
 8001820:	0003      	movs	r3, r0
 8001822:	4331      	orrs	r1, r6
 8001824:	428a      	cmp	r2, r1
 8001826:	d904      	bls.n	8001832 <__aeabi_ddiv+0x156>
 8001828:	1909      	adds	r1, r1, r4
 800182a:	3b01      	subs	r3, #1
 800182c:	428c      	cmp	r4, r1
 800182e:	d800      	bhi.n	8001832 <__aeabi_ddiv+0x156>
 8001830:	e1ed      	b.n	8001c0e <__aeabi_ddiv+0x532>
 8001832:	1a88      	subs	r0, r1, r2
 8001834:	4642      	mov	r2, r8
 8001836:	0412      	lsls	r2, r2, #16
 8001838:	431a      	orrs	r2, r3
 800183a:	4690      	mov	r8, r2
 800183c:	4641      	mov	r1, r8
 800183e:	9b00      	ldr	r3, [sp, #0]
 8001840:	040e      	lsls	r6, r1, #16
 8001842:	0c1b      	lsrs	r3, r3, #16
 8001844:	001f      	movs	r7, r3
 8001846:	9302      	str	r3, [sp, #8]
 8001848:	9b00      	ldr	r3, [sp, #0]
 800184a:	0c36      	lsrs	r6, r6, #16
 800184c:	041b      	lsls	r3, r3, #16
 800184e:	0c19      	lsrs	r1, r3, #16
 8001850:	000b      	movs	r3, r1
 8001852:	4373      	muls	r3, r6
 8001854:	0c12      	lsrs	r2, r2, #16
 8001856:	437e      	muls	r6, r7
 8001858:	9103      	str	r1, [sp, #12]
 800185a:	4351      	muls	r1, r2
 800185c:	437a      	muls	r2, r7
 800185e:	0c1f      	lsrs	r7, r3, #16
 8001860:	46bc      	mov	ip, r7
 8001862:	1876      	adds	r6, r6, r1
 8001864:	4466      	add	r6, ip
 8001866:	42b1      	cmp	r1, r6
 8001868:	d903      	bls.n	8001872 <__aeabi_ddiv+0x196>
 800186a:	2180      	movs	r1, #128	; 0x80
 800186c:	0249      	lsls	r1, r1, #9
 800186e:	468c      	mov	ip, r1
 8001870:	4462      	add	r2, ip
 8001872:	0c31      	lsrs	r1, r6, #16
 8001874:	188a      	adds	r2, r1, r2
 8001876:	0431      	lsls	r1, r6, #16
 8001878:	041e      	lsls	r6, r3, #16
 800187a:	0c36      	lsrs	r6, r6, #16
 800187c:	198e      	adds	r6, r1, r6
 800187e:	4290      	cmp	r0, r2
 8001880:	d302      	bcc.n	8001888 <__aeabi_ddiv+0x1ac>
 8001882:	d112      	bne.n	80018aa <__aeabi_ddiv+0x1ce>
 8001884:	42b5      	cmp	r5, r6
 8001886:	d210      	bcs.n	80018aa <__aeabi_ddiv+0x1ce>
 8001888:	4643      	mov	r3, r8
 800188a:	1e59      	subs	r1, r3, #1
 800188c:	9b00      	ldr	r3, [sp, #0]
 800188e:	469c      	mov	ip, r3
 8001890:	4465      	add	r5, ip
 8001892:	001f      	movs	r7, r3
 8001894:	429d      	cmp	r5, r3
 8001896:	419b      	sbcs	r3, r3
 8001898:	425b      	negs	r3, r3
 800189a:	191b      	adds	r3, r3, r4
 800189c:	18c0      	adds	r0, r0, r3
 800189e:	4284      	cmp	r4, r0
 80018a0:	d200      	bcs.n	80018a4 <__aeabi_ddiv+0x1c8>
 80018a2:	e1a0      	b.n	8001be6 <__aeabi_ddiv+0x50a>
 80018a4:	d100      	bne.n	80018a8 <__aeabi_ddiv+0x1cc>
 80018a6:	e19b      	b.n	8001be0 <__aeabi_ddiv+0x504>
 80018a8:	4688      	mov	r8, r1
 80018aa:	1bae      	subs	r6, r5, r6
 80018ac:	42b5      	cmp	r5, r6
 80018ae:	41ad      	sbcs	r5, r5
 80018b0:	1a80      	subs	r0, r0, r2
 80018b2:	426d      	negs	r5, r5
 80018b4:	1b40      	subs	r0, r0, r5
 80018b6:	4284      	cmp	r4, r0
 80018b8:	d100      	bne.n	80018bc <__aeabi_ddiv+0x1e0>
 80018ba:	e1d5      	b.n	8001c68 <__aeabi_ddiv+0x58c>
 80018bc:	4649      	mov	r1, r9
 80018be:	f7fe fccf 	bl	8000260 <__aeabi_uidivmod>
 80018c2:	9a01      	ldr	r2, [sp, #4]
 80018c4:	040b      	lsls	r3, r1, #16
 80018c6:	4342      	muls	r2, r0
 80018c8:	0c31      	lsrs	r1, r6, #16
 80018ca:	0005      	movs	r5, r0
 80018cc:	4319      	orrs	r1, r3
 80018ce:	428a      	cmp	r2, r1
 80018d0:	d900      	bls.n	80018d4 <__aeabi_ddiv+0x1f8>
 80018d2:	e16c      	b.n	8001bae <__aeabi_ddiv+0x4d2>
 80018d4:	1a88      	subs	r0, r1, r2
 80018d6:	4649      	mov	r1, r9
 80018d8:	f7fe fcc2 	bl	8000260 <__aeabi_uidivmod>
 80018dc:	9a01      	ldr	r2, [sp, #4]
 80018de:	0436      	lsls	r6, r6, #16
 80018e0:	4342      	muls	r2, r0
 80018e2:	0409      	lsls	r1, r1, #16
 80018e4:	0c36      	lsrs	r6, r6, #16
 80018e6:	0003      	movs	r3, r0
 80018e8:	430e      	orrs	r6, r1
 80018ea:	42b2      	cmp	r2, r6
 80018ec:	d900      	bls.n	80018f0 <__aeabi_ddiv+0x214>
 80018ee:	e153      	b.n	8001b98 <__aeabi_ddiv+0x4bc>
 80018f0:	9803      	ldr	r0, [sp, #12]
 80018f2:	1ab6      	subs	r6, r6, r2
 80018f4:	0002      	movs	r2, r0
 80018f6:	042d      	lsls	r5, r5, #16
 80018f8:	431d      	orrs	r5, r3
 80018fa:	9f02      	ldr	r7, [sp, #8]
 80018fc:	042b      	lsls	r3, r5, #16
 80018fe:	0c1b      	lsrs	r3, r3, #16
 8001900:	435a      	muls	r2, r3
 8001902:	437b      	muls	r3, r7
 8001904:	469c      	mov	ip, r3
 8001906:	0c29      	lsrs	r1, r5, #16
 8001908:	4348      	muls	r0, r1
 800190a:	0c13      	lsrs	r3, r2, #16
 800190c:	4484      	add	ip, r0
 800190e:	4463      	add	r3, ip
 8001910:	4379      	muls	r1, r7
 8001912:	4298      	cmp	r0, r3
 8001914:	d903      	bls.n	800191e <__aeabi_ddiv+0x242>
 8001916:	2080      	movs	r0, #128	; 0x80
 8001918:	0240      	lsls	r0, r0, #9
 800191a:	4684      	mov	ip, r0
 800191c:	4461      	add	r1, ip
 800191e:	0c18      	lsrs	r0, r3, #16
 8001920:	0412      	lsls	r2, r2, #16
 8001922:	041b      	lsls	r3, r3, #16
 8001924:	0c12      	lsrs	r2, r2, #16
 8001926:	1841      	adds	r1, r0, r1
 8001928:	189b      	adds	r3, r3, r2
 800192a:	428e      	cmp	r6, r1
 800192c:	d200      	bcs.n	8001930 <__aeabi_ddiv+0x254>
 800192e:	e0ff      	b.n	8001b30 <__aeabi_ddiv+0x454>
 8001930:	d100      	bne.n	8001934 <__aeabi_ddiv+0x258>
 8001932:	e0fa      	b.n	8001b2a <__aeabi_ddiv+0x44e>
 8001934:	2301      	movs	r3, #1
 8001936:	431d      	orrs	r5, r3
 8001938:	4a49      	ldr	r2, [pc, #292]	; (8001a60 <__aeabi_ddiv+0x384>)
 800193a:	445a      	add	r2, fp
 800193c:	2a00      	cmp	r2, #0
 800193e:	dc00      	bgt.n	8001942 <__aeabi_ddiv+0x266>
 8001940:	e0aa      	b.n	8001a98 <__aeabi_ddiv+0x3bc>
 8001942:	076b      	lsls	r3, r5, #29
 8001944:	d000      	beq.n	8001948 <__aeabi_ddiv+0x26c>
 8001946:	e13d      	b.n	8001bc4 <__aeabi_ddiv+0x4e8>
 8001948:	08ed      	lsrs	r5, r5, #3
 800194a:	4643      	mov	r3, r8
 800194c:	01db      	lsls	r3, r3, #7
 800194e:	d506      	bpl.n	800195e <__aeabi_ddiv+0x282>
 8001950:	4642      	mov	r2, r8
 8001952:	4b44      	ldr	r3, [pc, #272]	; (8001a64 <__aeabi_ddiv+0x388>)
 8001954:	401a      	ands	r2, r3
 8001956:	4690      	mov	r8, r2
 8001958:	2280      	movs	r2, #128	; 0x80
 800195a:	00d2      	lsls	r2, r2, #3
 800195c:	445a      	add	r2, fp
 800195e:	4b42      	ldr	r3, [pc, #264]	; (8001a68 <__aeabi_ddiv+0x38c>)
 8001960:	429a      	cmp	r2, r3
 8001962:	dd00      	ble.n	8001966 <__aeabi_ddiv+0x28a>
 8001964:	e71f      	b.n	80017a6 <__aeabi_ddiv+0xca>
 8001966:	4643      	mov	r3, r8
 8001968:	075b      	lsls	r3, r3, #29
 800196a:	431d      	orrs	r5, r3
 800196c:	4643      	mov	r3, r8
 800196e:	0552      	lsls	r2, r2, #21
 8001970:	025c      	lsls	r4, r3, #9
 8001972:	0b24      	lsrs	r4, r4, #12
 8001974:	0d53      	lsrs	r3, r2, #21
 8001976:	e708      	b.n	800178a <__aeabi_ddiv+0xae>
 8001978:	4652      	mov	r2, sl
 800197a:	4322      	orrs	r2, r4
 800197c:	d100      	bne.n	8001980 <__aeabi_ddiv+0x2a4>
 800197e:	e07b      	b.n	8001a78 <__aeabi_ddiv+0x39c>
 8001980:	2c00      	cmp	r4, #0
 8001982:	d100      	bne.n	8001986 <__aeabi_ddiv+0x2aa>
 8001984:	e0fa      	b.n	8001b7c <__aeabi_ddiv+0x4a0>
 8001986:	0020      	movs	r0, r4
 8001988:	f001 f97c 	bl	8002c84 <__clzsi2>
 800198c:	0002      	movs	r2, r0
 800198e:	3a0b      	subs	r2, #11
 8001990:	231d      	movs	r3, #29
 8001992:	0001      	movs	r1, r0
 8001994:	1a9b      	subs	r3, r3, r2
 8001996:	4652      	mov	r2, sl
 8001998:	3908      	subs	r1, #8
 800199a:	40da      	lsrs	r2, r3
 800199c:	408c      	lsls	r4, r1
 800199e:	4314      	orrs	r4, r2
 80019a0:	4652      	mov	r2, sl
 80019a2:	408a      	lsls	r2, r1
 80019a4:	4b31      	ldr	r3, [pc, #196]	; (8001a6c <__aeabi_ddiv+0x390>)
 80019a6:	4458      	add	r0, fp
 80019a8:	469b      	mov	fp, r3
 80019aa:	4483      	add	fp, r0
 80019ac:	2000      	movs	r0, #0
 80019ae:	e6d5      	b.n	800175c <__aeabi_ddiv+0x80>
 80019b0:	464b      	mov	r3, r9
 80019b2:	4323      	orrs	r3, r4
 80019b4:	4698      	mov	r8, r3
 80019b6:	d044      	beq.n	8001a42 <__aeabi_ddiv+0x366>
 80019b8:	2c00      	cmp	r4, #0
 80019ba:	d100      	bne.n	80019be <__aeabi_ddiv+0x2e2>
 80019bc:	e0ce      	b.n	8001b5c <__aeabi_ddiv+0x480>
 80019be:	0020      	movs	r0, r4
 80019c0:	f001 f960 	bl	8002c84 <__clzsi2>
 80019c4:	0001      	movs	r1, r0
 80019c6:	0002      	movs	r2, r0
 80019c8:	390b      	subs	r1, #11
 80019ca:	231d      	movs	r3, #29
 80019cc:	1a5b      	subs	r3, r3, r1
 80019ce:	4649      	mov	r1, r9
 80019d0:	0010      	movs	r0, r2
 80019d2:	40d9      	lsrs	r1, r3
 80019d4:	3808      	subs	r0, #8
 80019d6:	4084      	lsls	r4, r0
 80019d8:	000b      	movs	r3, r1
 80019da:	464d      	mov	r5, r9
 80019dc:	4323      	orrs	r3, r4
 80019de:	4698      	mov	r8, r3
 80019e0:	4085      	lsls	r5, r0
 80019e2:	4823      	ldr	r0, [pc, #140]	; (8001a70 <__aeabi_ddiv+0x394>)
 80019e4:	1a83      	subs	r3, r0, r2
 80019e6:	469b      	mov	fp, r3
 80019e8:	2300      	movs	r3, #0
 80019ea:	4699      	mov	r9, r3
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	e69a      	b.n	8001726 <__aeabi_ddiv+0x4a>
 80019f0:	464b      	mov	r3, r9
 80019f2:	4323      	orrs	r3, r4
 80019f4:	4698      	mov	r8, r3
 80019f6:	d11d      	bne.n	8001a34 <__aeabi_ddiv+0x358>
 80019f8:	2308      	movs	r3, #8
 80019fa:	4699      	mov	r9, r3
 80019fc:	3b06      	subs	r3, #6
 80019fe:	2500      	movs	r5, #0
 8001a00:	4683      	mov	fp, r0
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	e68f      	b.n	8001726 <__aeabi_ddiv+0x4a>
 8001a06:	4652      	mov	r2, sl
 8001a08:	4322      	orrs	r2, r4
 8001a0a:	d109      	bne.n	8001a20 <__aeabi_ddiv+0x344>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	4649      	mov	r1, r9
 8001a10:	4319      	orrs	r1, r3
 8001a12:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <__aeabi_ddiv+0x398>)
 8001a14:	4689      	mov	r9, r1
 8001a16:	469c      	mov	ip, r3
 8001a18:	2400      	movs	r4, #0
 8001a1a:	2002      	movs	r0, #2
 8001a1c:	44e3      	add	fp, ip
 8001a1e:	e69d      	b.n	800175c <__aeabi_ddiv+0x80>
 8001a20:	2303      	movs	r3, #3
 8001a22:	464a      	mov	r2, r9
 8001a24:	431a      	orrs	r2, r3
 8001a26:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <__aeabi_ddiv+0x398>)
 8001a28:	4691      	mov	r9, r2
 8001a2a:	469c      	mov	ip, r3
 8001a2c:	4652      	mov	r2, sl
 8001a2e:	2003      	movs	r0, #3
 8001a30:	44e3      	add	fp, ip
 8001a32:	e693      	b.n	800175c <__aeabi_ddiv+0x80>
 8001a34:	230c      	movs	r3, #12
 8001a36:	4699      	mov	r9, r3
 8001a38:	3b09      	subs	r3, #9
 8001a3a:	46a0      	mov	r8, r4
 8001a3c:	4683      	mov	fp, r0
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	e671      	b.n	8001726 <__aeabi_ddiv+0x4a>
 8001a42:	2304      	movs	r3, #4
 8001a44:	4699      	mov	r9, r3
 8001a46:	2300      	movs	r3, #0
 8001a48:	469b      	mov	fp, r3
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	2500      	movs	r5, #0
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	e669      	b.n	8001726 <__aeabi_ddiv+0x4a>
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	000007ff 	.word	0x000007ff
 8001a58:	fffffc01 	.word	0xfffffc01
 8001a5c:	08010198 	.word	0x08010198
 8001a60:	000003ff 	.word	0x000003ff
 8001a64:	feffffff 	.word	0xfeffffff
 8001a68:	000007fe 	.word	0x000007fe
 8001a6c:	000003f3 	.word	0x000003f3
 8001a70:	fffffc0d 	.word	0xfffffc0d
 8001a74:	fffff801 	.word	0xfffff801
 8001a78:	4649      	mov	r1, r9
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	4319      	orrs	r1, r3
 8001a7e:	4689      	mov	r9, r1
 8001a80:	2400      	movs	r4, #0
 8001a82:	2001      	movs	r0, #1
 8001a84:	e66a      	b.n	800175c <__aeabi_ddiv+0x80>
 8001a86:	2300      	movs	r3, #0
 8001a88:	2480      	movs	r4, #128	; 0x80
 8001a8a:	469a      	mov	sl, r3
 8001a8c:	2500      	movs	r5, #0
 8001a8e:	4b8a      	ldr	r3, [pc, #552]	; (8001cb8 <__aeabi_ddiv+0x5dc>)
 8001a90:	0324      	lsls	r4, r4, #12
 8001a92:	e67a      	b.n	800178a <__aeabi_ddiv+0xae>
 8001a94:	2501      	movs	r5, #1
 8001a96:	426d      	negs	r5, r5
 8001a98:	2301      	movs	r3, #1
 8001a9a:	1a9b      	subs	r3, r3, r2
 8001a9c:	2b38      	cmp	r3, #56	; 0x38
 8001a9e:	dd00      	ble.n	8001aa2 <__aeabi_ddiv+0x3c6>
 8001aa0:	e670      	b.n	8001784 <__aeabi_ddiv+0xa8>
 8001aa2:	2b1f      	cmp	r3, #31
 8001aa4:	dc00      	bgt.n	8001aa8 <__aeabi_ddiv+0x3cc>
 8001aa6:	e0bf      	b.n	8001c28 <__aeabi_ddiv+0x54c>
 8001aa8:	211f      	movs	r1, #31
 8001aaa:	4249      	negs	r1, r1
 8001aac:	1a8a      	subs	r2, r1, r2
 8001aae:	4641      	mov	r1, r8
 8001ab0:	40d1      	lsrs	r1, r2
 8001ab2:	000a      	movs	r2, r1
 8001ab4:	2b20      	cmp	r3, #32
 8001ab6:	d004      	beq.n	8001ac2 <__aeabi_ddiv+0x3e6>
 8001ab8:	4641      	mov	r1, r8
 8001aba:	4b80      	ldr	r3, [pc, #512]	; (8001cbc <__aeabi_ddiv+0x5e0>)
 8001abc:	445b      	add	r3, fp
 8001abe:	4099      	lsls	r1, r3
 8001ac0:	430d      	orrs	r5, r1
 8001ac2:	1e6b      	subs	r3, r5, #1
 8001ac4:	419d      	sbcs	r5, r3
 8001ac6:	2307      	movs	r3, #7
 8001ac8:	432a      	orrs	r2, r5
 8001aca:	001d      	movs	r5, r3
 8001acc:	2400      	movs	r4, #0
 8001ace:	4015      	ands	r5, r2
 8001ad0:	4213      	tst	r3, r2
 8001ad2:	d100      	bne.n	8001ad6 <__aeabi_ddiv+0x3fa>
 8001ad4:	e0d4      	b.n	8001c80 <__aeabi_ddiv+0x5a4>
 8001ad6:	210f      	movs	r1, #15
 8001ad8:	2300      	movs	r3, #0
 8001ada:	4011      	ands	r1, r2
 8001adc:	2904      	cmp	r1, #4
 8001ade:	d100      	bne.n	8001ae2 <__aeabi_ddiv+0x406>
 8001ae0:	e0cb      	b.n	8001c7a <__aeabi_ddiv+0x59e>
 8001ae2:	1d11      	adds	r1, r2, #4
 8001ae4:	4291      	cmp	r1, r2
 8001ae6:	4192      	sbcs	r2, r2
 8001ae8:	4252      	negs	r2, r2
 8001aea:	189b      	adds	r3, r3, r2
 8001aec:	000a      	movs	r2, r1
 8001aee:	0219      	lsls	r1, r3, #8
 8001af0:	d400      	bmi.n	8001af4 <__aeabi_ddiv+0x418>
 8001af2:	e0c2      	b.n	8001c7a <__aeabi_ddiv+0x59e>
 8001af4:	2301      	movs	r3, #1
 8001af6:	2400      	movs	r4, #0
 8001af8:	2500      	movs	r5, #0
 8001afa:	e646      	b.n	800178a <__aeabi_ddiv+0xae>
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	4641      	mov	r1, r8
 8001b00:	031b      	lsls	r3, r3, #12
 8001b02:	4219      	tst	r1, r3
 8001b04:	d008      	beq.n	8001b18 <__aeabi_ddiv+0x43c>
 8001b06:	421c      	tst	r4, r3
 8001b08:	d106      	bne.n	8001b18 <__aeabi_ddiv+0x43c>
 8001b0a:	431c      	orrs	r4, r3
 8001b0c:	0324      	lsls	r4, r4, #12
 8001b0e:	46ba      	mov	sl, r7
 8001b10:	0015      	movs	r5, r2
 8001b12:	4b69      	ldr	r3, [pc, #420]	; (8001cb8 <__aeabi_ddiv+0x5dc>)
 8001b14:	0b24      	lsrs	r4, r4, #12
 8001b16:	e638      	b.n	800178a <__aeabi_ddiv+0xae>
 8001b18:	2480      	movs	r4, #128	; 0x80
 8001b1a:	4643      	mov	r3, r8
 8001b1c:	0324      	lsls	r4, r4, #12
 8001b1e:	431c      	orrs	r4, r3
 8001b20:	0324      	lsls	r4, r4, #12
 8001b22:	46b2      	mov	sl, r6
 8001b24:	4b64      	ldr	r3, [pc, #400]	; (8001cb8 <__aeabi_ddiv+0x5dc>)
 8001b26:	0b24      	lsrs	r4, r4, #12
 8001b28:	e62f      	b.n	800178a <__aeabi_ddiv+0xae>
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d100      	bne.n	8001b30 <__aeabi_ddiv+0x454>
 8001b2e:	e703      	b.n	8001938 <__aeabi_ddiv+0x25c>
 8001b30:	19a6      	adds	r6, r4, r6
 8001b32:	1e68      	subs	r0, r5, #1
 8001b34:	42a6      	cmp	r6, r4
 8001b36:	d200      	bcs.n	8001b3a <__aeabi_ddiv+0x45e>
 8001b38:	e08d      	b.n	8001c56 <__aeabi_ddiv+0x57a>
 8001b3a:	428e      	cmp	r6, r1
 8001b3c:	d200      	bcs.n	8001b40 <__aeabi_ddiv+0x464>
 8001b3e:	e0a3      	b.n	8001c88 <__aeabi_ddiv+0x5ac>
 8001b40:	d100      	bne.n	8001b44 <__aeabi_ddiv+0x468>
 8001b42:	e0b3      	b.n	8001cac <__aeabi_ddiv+0x5d0>
 8001b44:	0005      	movs	r5, r0
 8001b46:	e6f5      	b.n	8001934 <__aeabi_ddiv+0x258>
 8001b48:	42aa      	cmp	r2, r5
 8001b4a:	d900      	bls.n	8001b4e <__aeabi_ddiv+0x472>
 8001b4c:	e639      	b.n	80017c2 <__aeabi_ddiv+0xe6>
 8001b4e:	4643      	mov	r3, r8
 8001b50:	07de      	lsls	r6, r3, #31
 8001b52:	0858      	lsrs	r0, r3, #1
 8001b54:	086b      	lsrs	r3, r5, #1
 8001b56:	431e      	orrs	r6, r3
 8001b58:	07ed      	lsls	r5, r5, #31
 8001b5a:	e639      	b.n	80017d0 <__aeabi_ddiv+0xf4>
 8001b5c:	4648      	mov	r0, r9
 8001b5e:	f001 f891 	bl	8002c84 <__clzsi2>
 8001b62:	0001      	movs	r1, r0
 8001b64:	0002      	movs	r2, r0
 8001b66:	3115      	adds	r1, #21
 8001b68:	3220      	adds	r2, #32
 8001b6a:	291c      	cmp	r1, #28
 8001b6c:	dc00      	bgt.n	8001b70 <__aeabi_ddiv+0x494>
 8001b6e:	e72c      	b.n	80019ca <__aeabi_ddiv+0x2ee>
 8001b70:	464b      	mov	r3, r9
 8001b72:	3808      	subs	r0, #8
 8001b74:	4083      	lsls	r3, r0
 8001b76:	2500      	movs	r5, #0
 8001b78:	4698      	mov	r8, r3
 8001b7a:	e732      	b.n	80019e2 <__aeabi_ddiv+0x306>
 8001b7c:	f001 f882 	bl	8002c84 <__clzsi2>
 8001b80:	0003      	movs	r3, r0
 8001b82:	001a      	movs	r2, r3
 8001b84:	3215      	adds	r2, #21
 8001b86:	3020      	adds	r0, #32
 8001b88:	2a1c      	cmp	r2, #28
 8001b8a:	dc00      	bgt.n	8001b8e <__aeabi_ddiv+0x4b2>
 8001b8c:	e700      	b.n	8001990 <__aeabi_ddiv+0x2b4>
 8001b8e:	4654      	mov	r4, sl
 8001b90:	3b08      	subs	r3, #8
 8001b92:	2200      	movs	r2, #0
 8001b94:	409c      	lsls	r4, r3
 8001b96:	e705      	b.n	80019a4 <__aeabi_ddiv+0x2c8>
 8001b98:	1936      	adds	r6, r6, r4
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	42b4      	cmp	r4, r6
 8001b9e:	d900      	bls.n	8001ba2 <__aeabi_ddiv+0x4c6>
 8001ba0:	e6a6      	b.n	80018f0 <__aeabi_ddiv+0x214>
 8001ba2:	42b2      	cmp	r2, r6
 8001ba4:	d800      	bhi.n	8001ba8 <__aeabi_ddiv+0x4cc>
 8001ba6:	e6a3      	b.n	80018f0 <__aeabi_ddiv+0x214>
 8001ba8:	1e83      	subs	r3, r0, #2
 8001baa:	1936      	adds	r6, r6, r4
 8001bac:	e6a0      	b.n	80018f0 <__aeabi_ddiv+0x214>
 8001bae:	1909      	adds	r1, r1, r4
 8001bb0:	3d01      	subs	r5, #1
 8001bb2:	428c      	cmp	r4, r1
 8001bb4:	d900      	bls.n	8001bb8 <__aeabi_ddiv+0x4dc>
 8001bb6:	e68d      	b.n	80018d4 <__aeabi_ddiv+0x1f8>
 8001bb8:	428a      	cmp	r2, r1
 8001bba:	d800      	bhi.n	8001bbe <__aeabi_ddiv+0x4e2>
 8001bbc:	e68a      	b.n	80018d4 <__aeabi_ddiv+0x1f8>
 8001bbe:	1e85      	subs	r5, r0, #2
 8001bc0:	1909      	adds	r1, r1, r4
 8001bc2:	e687      	b.n	80018d4 <__aeabi_ddiv+0x1f8>
 8001bc4:	230f      	movs	r3, #15
 8001bc6:	402b      	ands	r3, r5
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	d100      	bne.n	8001bce <__aeabi_ddiv+0x4f2>
 8001bcc:	e6bc      	b.n	8001948 <__aeabi_ddiv+0x26c>
 8001bce:	2305      	movs	r3, #5
 8001bd0:	425b      	negs	r3, r3
 8001bd2:	42ab      	cmp	r3, r5
 8001bd4:	419b      	sbcs	r3, r3
 8001bd6:	3504      	adds	r5, #4
 8001bd8:	425b      	negs	r3, r3
 8001bda:	08ed      	lsrs	r5, r5, #3
 8001bdc:	4498      	add	r8, r3
 8001bde:	e6b4      	b.n	800194a <__aeabi_ddiv+0x26e>
 8001be0:	42af      	cmp	r7, r5
 8001be2:	d900      	bls.n	8001be6 <__aeabi_ddiv+0x50a>
 8001be4:	e660      	b.n	80018a8 <__aeabi_ddiv+0x1cc>
 8001be6:	4282      	cmp	r2, r0
 8001be8:	d804      	bhi.n	8001bf4 <__aeabi_ddiv+0x518>
 8001bea:	d000      	beq.n	8001bee <__aeabi_ddiv+0x512>
 8001bec:	e65c      	b.n	80018a8 <__aeabi_ddiv+0x1cc>
 8001bee:	42ae      	cmp	r6, r5
 8001bf0:	d800      	bhi.n	8001bf4 <__aeabi_ddiv+0x518>
 8001bf2:	e659      	b.n	80018a8 <__aeabi_ddiv+0x1cc>
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	425b      	negs	r3, r3
 8001bf8:	469c      	mov	ip, r3
 8001bfa:	9b00      	ldr	r3, [sp, #0]
 8001bfc:	44e0      	add	r8, ip
 8001bfe:	469c      	mov	ip, r3
 8001c00:	4465      	add	r5, ip
 8001c02:	429d      	cmp	r5, r3
 8001c04:	419b      	sbcs	r3, r3
 8001c06:	425b      	negs	r3, r3
 8001c08:	191b      	adds	r3, r3, r4
 8001c0a:	18c0      	adds	r0, r0, r3
 8001c0c:	e64d      	b.n	80018aa <__aeabi_ddiv+0x1ce>
 8001c0e:	428a      	cmp	r2, r1
 8001c10:	d800      	bhi.n	8001c14 <__aeabi_ddiv+0x538>
 8001c12:	e60e      	b.n	8001832 <__aeabi_ddiv+0x156>
 8001c14:	1e83      	subs	r3, r0, #2
 8001c16:	1909      	adds	r1, r1, r4
 8001c18:	e60b      	b.n	8001832 <__aeabi_ddiv+0x156>
 8001c1a:	428a      	cmp	r2, r1
 8001c1c:	d800      	bhi.n	8001c20 <__aeabi_ddiv+0x544>
 8001c1e:	e5f4      	b.n	800180a <__aeabi_ddiv+0x12e>
 8001c20:	1e83      	subs	r3, r0, #2
 8001c22:	4698      	mov	r8, r3
 8001c24:	1909      	adds	r1, r1, r4
 8001c26:	e5f0      	b.n	800180a <__aeabi_ddiv+0x12e>
 8001c28:	4925      	ldr	r1, [pc, #148]	; (8001cc0 <__aeabi_ddiv+0x5e4>)
 8001c2a:	0028      	movs	r0, r5
 8001c2c:	4459      	add	r1, fp
 8001c2e:	408d      	lsls	r5, r1
 8001c30:	4642      	mov	r2, r8
 8001c32:	408a      	lsls	r2, r1
 8001c34:	1e69      	subs	r1, r5, #1
 8001c36:	418d      	sbcs	r5, r1
 8001c38:	4641      	mov	r1, r8
 8001c3a:	40d8      	lsrs	r0, r3
 8001c3c:	40d9      	lsrs	r1, r3
 8001c3e:	4302      	orrs	r2, r0
 8001c40:	432a      	orrs	r2, r5
 8001c42:	000b      	movs	r3, r1
 8001c44:	0751      	lsls	r1, r2, #29
 8001c46:	d100      	bne.n	8001c4a <__aeabi_ddiv+0x56e>
 8001c48:	e751      	b.n	8001aee <__aeabi_ddiv+0x412>
 8001c4a:	210f      	movs	r1, #15
 8001c4c:	4011      	ands	r1, r2
 8001c4e:	2904      	cmp	r1, #4
 8001c50:	d000      	beq.n	8001c54 <__aeabi_ddiv+0x578>
 8001c52:	e746      	b.n	8001ae2 <__aeabi_ddiv+0x406>
 8001c54:	e74b      	b.n	8001aee <__aeabi_ddiv+0x412>
 8001c56:	0005      	movs	r5, r0
 8001c58:	428e      	cmp	r6, r1
 8001c5a:	d000      	beq.n	8001c5e <__aeabi_ddiv+0x582>
 8001c5c:	e66a      	b.n	8001934 <__aeabi_ddiv+0x258>
 8001c5e:	9a00      	ldr	r2, [sp, #0]
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d000      	beq.n	8001c66 <__aeabi_ddiv+0x58a>
 8001c64:	e666      	b.n	8001934 <__aeabi_ddiv+0x258>
 8001c66:	e667      	b.n	8001938 <__aeabi_ddiv+0x25c>
 8001c68:	4a16      	ldr	r2, [pc, #88]	; (8001cc4 <__aeabi_ddiv+0x5e8>)
 8001c6a:	445a      	add	r2, fp
 8001c6c:	2a00      	cmp	r2, #0
 8001c6e:	dc00      	bgt.n	8001c72 <__aeabi_ddiv+0x596>
 8001c70:	e710      	b.n	8001a94 <__aeabi_ddiv+0x3b8>
 8001c72:	2301      	movs	r3, #1
 8001c74:	2500      	movs	r5, #0
 8001c76:	4498      	add	r8, r3
 8001c78:	e667      	b.n	800194a <__aeabi_ddiv+0x26e>
 8001c7a:	075d      	lsls	r5, r3, #29
 8001c7c:	025b      	lsls	r3, r3, #9
 8001c7e:	0b1c      	lsrs	r4, r3, #12
 8001c80:	08d2      	lsrs	r2, r2, #3
 8001c82:	2300      	movs	r3, #0
 8001c84:	4315      	orrs	r5, r2
 8001c86:	e580      	b.n	800178a <__aeabi_ddiv+0xae>
 8001c88:	9800      	ldr	r0, [sp, #0]
 8001c8a:	3d02      	subs	r5, #2
 8001c8c:	0042      	lsls	r2, r0, #1
 8001c8e:	4282      	cmp	r2, r0
 8001c90:	41bf      	sbcs	r7, r7
 8001c92:	427f      	negs	r7, r7
 8001c94:	193c      	adds	r4, r7, r4
 8001c96:	1936      	adds	r6, r6, r4
 8001c98:	9200      	str	r2, [sp, #0]
 8001c9a:	e7dd      	b.n	8001c58 <__aeabi_ddiv+0x57c>
 8001c9c:	2480      	movs	r4, #128	; 0x80
 8001c9e:	4643      	mov	r3, r8
 8001ca0:	0324      	lsls	r4, r4, #12
 8001ca2:	431c      	orrs	r4, r3
 8001ca4:	0324      	lsls	r4, r4, #12
 8001ca6:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <__aeabi_ddiv+0x5dc>)
 8001ca8:	0b24      	lsrs	r4, r4, #12
 8001caa:	e56e      	b.n	800178a <__aeabi_ddiv+0xae>
 8001cac:	9a00      	ldr	r2, [sp, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d3ea      	bcc.n	8001c88 <__aeabi_ddiv+0x5ac>
 8001cb2:	0005      	movs	r5, r0
 8001cb4:	e7d3      	b.n	8001c5e <__aeabi_ddiv+0x582>
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	000007ff 	.word	0x000007ff
 8001cbc:	0000043e 	.word	0x0000043e
 8001cc0:	0000041e 	.word	0x0000041e
 8001cc4:	000003ff 	.word	0x000003ff

08001cc8 <__eqdf2>:
 8001cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cca:	464e      	mov	r6, r9
 8001ccc:	4645      	mov	r5, r8
 8001cce:	46de      	mov	lr, fp
 8001cd0:	4657      	mov	r7, sl
 8001cd2:	4690      	mov	r8, r2
 8001cd4:	b5e0      	push	{r5, r6, r7, lr}
 8001cd6:	0017      	movs	r7, r2
 8001cd8:	031a      	lsls	r2, r3, #12
 8001cda:	0b12      	lsrs	r2, r2, #12
 8001cdc:	0005      	movs	r5, r0
 8001cde:	4684      	mov	ip, r0
 8001ce0:	4819      	ldr	r0, [pc, #100]	; (8001d48 <__eqdf2+0x80>)
 8001ce2:	030e      	lsls	r6, r1, #12
 8001ce4:	004c      	lsls	r4, r1, #1
 8001ce6:	4691      	mov	r9, r2
 8001ce8:	005a      	lsls	r2, r3, #1
 8001cea:	0fdb      	lsrs	r3, r3, #31
 8001cec:	469b      	mov	fp, r3
 8001cee:	0b36      	lsrs	r6, r6, #12
 8001cf0:	0d64      	lsrs	r4, r4, #21
 8001cf2:	0fc9      	lsrs	r1, r1, #31
 8001cf4:	0d52      	lsrs	r2, r2, #21
 8001cf6:	4284      	cmp	r4, r0
 8001cf8:	d019      	beq.n	8001d2e <__eqdf2+0x66>
 8001cfa:	4282      	cmp	r2, r0
 8001cfc:	d010      	beq.n	8001d20 <__eqdf2+0x58>
 8001cfe:	2001      	movs	r0, #1
 8001d00:	4294      	cmp	r4, r2
 8001d02:	d10e      	bne.n	8001d22 <__eqdf2+0x5a>
 8001d04:	454e      	cmp	r6, r9
 8001d06:	d10c      	bne.n	8001d22 <__eqdf2+0x5a>
 8001d08:	2001      	movs	r0, #1
 8001d0a:	45c4      	cmp	ip, r8
 8001d0c:	d109      	bne.n	8001d22 <__eqdf2+0x5a>
 8001d0e:	4559      	cmp	r1, fp
 8001d10:	d017      	beq.n	8001d42 <__eqdf2+0x7a>
 8001d12:	2c00      	cmp	r4, #0
 8001d14:	d105      	bne.n	8001d22 <__eqdf2+0x5a>
 8001d16:	0030      	movs	r0, r6
 8001d18:	4328      	orrs	r0, r5
 8001d1a:	1e43      	subs	r3, r0, #1
 8001d1c:	4198      	sbcs	r0, r3
 8001d1e:	e000      	b.n	8001d22 <__eqdf2+0x5a>
 8001d20:	2001      	movs	r0, #1
 8001d22:	bcf0      	pop	{r4, r5, r6, r7}
 8001d24:	46bb      	mov	fp, r7
 8001d26:	46b2      	mov	sl, r6
 8001d28:	46a9      	mov	r9, r5
 8001d2a:	46a0      	mov	r8, r4
 8001d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d2e:	0033      	movs	r3, r6
 8001d30:	2001      	movs	r0, #1
 8001d32:	432b      	orrs	r3, r5
 8001d34:	d1f5      	bne.n	8001d22 <__eqdf2+0x5a>
 8001d36:	42a2      	cmp	r2, r4
 8001d38:	d1f3      	bne.n	8001d22 <__eqdf2+0x5a>
 8001d3a:	464b      	mov	r3, r9
 8001d3c:	433b      	orrs	r3, r7
 8001d3e:	d1f0      	bne.n	8001d22 <__eqdf2+0x5a>
 8001d40:	e7e2      	b.n	8001d08 <__eqdf2+0x40>
 8001d42:	2000      	movs	r0, #0
 8001d44:	e7ed      	b.n	8001d22 <__eqdf2+0x5a>
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	000007ff 	.word	0x000007ff

08001d4c <__gedf2>:
 8001d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d4e:	4647      	mov	r7, r8
 8001d50:	46ce      	mov	lr, r9
 8001d52:	0004      	movs	r4, r0
 8001d54:	0018      	movs	r0, r3
 8001d56:	0016      	movs	r6, r2
 8001d58:	031b      	lsls	r3, r3, #12
 8001d5a:	0b1b      	lsrs	r3, r3, #12
 8001d5c:	4d2d      	ldr	r5, [pc, #180]	; (8001e14 <__gedf2+0xc8>)
 8001d5e:	004a      	lsls	r2, r1, #1
 8001d60:	4699      	mov	r9, r3
 8001d62:	b580      	push	{r7, lr}
 8001d64:	0043      	lsls	r3, r0, #1
 8001d66:	030f      	lsls	r7, r1, #12
 8001d68:	46a4      	mov	ip, r4
 8001d6a:	46b0      	mov	r8, r6
 8001d6c:	0b3f      	lsrs	r7, r7, #12
 8001d6e:	0d52      	lsrs	r2, r2, #21
 8001d70:	0fc9      	lsrs	r1, r1, #31
 8001d72:	0d5b      	lsrs	r3, r3, #21
 8001d74:	0fc0      	lsrs	r0, r0, #31
 8001d76:	42aa      	cmp	r2, r5
 8001d78:	d021      	beq.n	8001dbe <__gedf2+0x72>
 8001d7a:	42ab      	cmp	r3, r5
 8001d7c:	d013      	beq.n	8001da6 <__gedf2+0x5a>
 8001d7e:	2a00      	cmp	r2, #0
 8001d80:	d122      	bne.n	8001dc8 <__gedf2+0x7c>
 8001d82:	433c      	orrs	r4, r7
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d102      	bne.n	8001d8e <__gedf2+0x42>
 8001d88:	464d      	mov	r5, r9
 8001d8a:	432e      	orrs	r6, r5
 8001d8c:	d022      	beq.n	8001dd4 <__gedf2+0x88>
 8001d8e:	2c00      	cmp	r4, #0
 8001d90:	d010      	beq.n	8001db4 <__gedf2+0x68>
 8001d92:	4281      	cmp	r1, r0
 8001d94:	d022      	beq.n	8001ddc <__gedf2+0x90>
 8001d96:	2002      	movs	r0, #2
 8001d98:	3901      	subs	r1, #1
 8001d9a:	4008      	ands	r0, r1
 8001d9c:	3801      	subs	r0, #1
 8001d9e:	bcc0      	pop	{r6, r7}
 8001da0:	46b9      	mov	r9, r7
 8001da2:	46b0      	mov	r8, r6
 8001da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001da6:	464d      	mov	r5, r9
 8001da8:	432e      	orrs	r6, r5
 8001daa:	d129      	bne.n	8001e00 <__gedf2+0xb4>
 8001dac:	2a00      	cmp	r2, #0
 8001dae:	d1f0      	bne.n	8001d92 <__gedf2+0x46>
 8001db0:	433c      	orrs	r4, r7
 8001db2:	d1ee      	bne.n	8001d92 <__gedf2+0x46>
 8001db4:	2800      	cmp	r0, #0
 8001db6:	d1f2      	bne.n	8001d9e <__gedf2+0x52>
 8001db8:	2001      	movs	r0, #1
 8001dba:	4240      	negs	r0, r0
 8001dbc:	e7ef      	b.n	8001d9e <__gedf2+0x52>
 8001dbe:	003d      	movs	r5, r7
 8001dc0:	4325      	orrs	r5, r4
 8001dc2:	d11d      	bne.n	8001e00 <__gedf2+0xb4>
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d0ee      	beq.n	8001da6 <__gedf2+0x5a>
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1e2      	bne.n	8001d92 <__gedf2+0x46>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	4326      	orrs	r6, r4
 8001dd0:	d1df      	bne.n	8001d92 <__gedf2+0x46>
 8001dd2:	e7e0      	b.n	8001d96 <__gedf2+0x4a>
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	2c00      	cmp	r4, #0
 8001dd8:	d0e1      	beq.n	8001d9e <__gedf2+0x52>
 8001dda:	e7dc      	b.n	8001d96 <__gedf2+0x4a>
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	dc0a      	bgt.n	8001df6 <__gedf2+0xaa>
 8001de0:	dbe8      	blt.n	8001db4 <__gedf2+0x68>
 8001de2:	454f      	cmp	r7, r9
 8001de4:	d8d7      	bhi.n	8001d96 <__gedf2+0x4a>
 8001de6:	d00e      	beq.n	8001e06 <__gedf2+0xba>
 8001de8:	2000      	movs	r0, #0
 8001dea:	454f      	cmp	r7, r9
 8001dec:	d2d7      	bcs.n	8001d9e <__gedf2+0x52>
 8001dee:	2900      	cmp	r1, #0
 8001df0:	d0e2      	beq.n	8001db8 <__gedf2+0x6c>
 8001df2:	0008      	movs	r0, r1
 8001df4:	e7d3      	b.n	8001d9e <__gedf2+0x52>
 8001df6:	4243      	negs	r3, r0
 8001df8:	4158      	adcs	r0, r3
 8001dfa:	0040      	lsls	r0, r0, #1
 8001dfc:	3801      	subs	r0, #1
 8001dfe:	e7ce      	b.n	8001d9e <__gedf2+0x52>
 8001e00:	2002      	movs	r0, #2
 8001e02:	4240      	negs	r0, r0
 8001e04:	e7cb      	b.n	8001d9e <__gedf2+0x52>
 8001e06:	45c4      	cmp	ip, r8
 8001e08:	d8c5      	bhi.n	8001d96 <__gedf2+0x4a>
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	45c4      	cmp	ip, r8
 8001e0e:	d2c6      	bcs.n	8001d9e <__gedf2+0x52>
 8001e10:	e7ed      	b.n	8001dee <__gedf2+0xa2>
 8001e12:	46c0      	nop			; (mov r8, r8)
 8001e14:	000007ff 	.word	0x000007ff

08001e18 <__ledf2>:
 8001e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e1a:	4647      	mov	r7, r8
 8001e1c:	46ce      	mov	lr, r9
 8001e1e:	0004      	movs	r4, r0
 8001e20:	0018      	movs	r0, r3
 8001e22:	0016      	movs	r6, r2
 8001e24:	031b      	lsls	r3, r3, #12
 8001e26:	0b1b      	lsrs	r3, r3, #12
 8001e28:	4d2c      	ldr	r5, [pc, #176]	; (8001edc <__ledf2+0xc4>)
 8001e2a:	004a      	lsls	r2, r1, #1
 8001e2c:	4699      	mov	r9, r3
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	0043      	lsls	r3, r0, #1
 8001e32:	030f      	lsls	r7, r1, #12
 8001e34:	46a4      	mov	ip, r4
 8001e36:	46b0      	mov	r8, r6
 8001e38:	0b3f      	lsrs	r7, r7, #12
 8001e3a:	0d52      	lsrs	r2, r2, #21
 8001e3c:	0fc9      	lsrs	r1, r1, #31
 8001e3e:	0d5b      	lsrs	r3, r3, #21
 8001e40:	0fc0      	lsrs	r0, r0, #31
 8001e42:	42aa      	cmp	r2, r5
 8001e44:	d00d      	beq.n	8001e62 <__ledf2+0x4a>
 8001e46:	42ab      	cmp	r3, r5
 8001e48:	d010      	beq.n	8001e6c <__ledf2+0x54>
 8001e4a:	2a00      	cmp	r2, #0
 8001e4c:	d127      	bne.n	8001e9e <__ledf2+0x86>
 8001e4e:	433c      	orrs	r4, r7
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d111      	bne.n	8001e78 <__ledf2+0x60>
 8001e54:	464d      	mov	r5, r9
 8001e56:	432e      	orrs	r6, r5
 8001e58:	d10e      	bne.n	8001e78 <__ledf2+0x60>
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	2c00      	cmp	r4, #0
 8001e5e:	d015      	beq.n	8001e8c <__ledf2+0x74>
 8001e60:	e00e      	b.n	8001e80 <__ledf2+0x68>
 8001e62:	003d      	movs	r5, r7
 8001e64:	4325      	orrs	r5, r4
 8001e66:	d110      	bne.n	8001e8a <__ledf2+0x72>
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d118      	bne.n	8001e9e <__ledf2+0x86>
 8001e6c:	464d      	mov	r5, r9
 8001e6e:	432e      	orrs	r6, r5
 8001e70:	d10b      	bne.n	8001e8a <__ledf2+0x72>
 8001e72:	2a00      	cmp	r2, #0
 8001e74:	d102      	bne.n	8001e7c <__ledf2+0x64>
 8001e76:	433c      	orrs	r4, r7
 8001e78:	2c00      	cmp	r4, #0
 8001e7a:	d00b      	beq.n	8001e94 <__ledf2+0x7c>
 8001e7c:	4281      	cmp	r1, r0
 8001e7e:	d014      	beq.n	8001eaa <__ledf2+0x92>
 8001e80:	2002      	movs	r0, #2
 8001e82:	3901      	subs	r1, #1
 8001e84:	4008      	ands	r0, r1
 8001e86:	3801      	subs	r0, #1
 8001e88:	e000      	b.n	8001e8c <__ledf2+0x74>
 8001e8a:	2002      	movs	r0, #2
 8001e8c:	bcc0      	pop	{r6, r7}
 8001e8e:	46b9      	mov	r9, r7
 8001e90:	46b0      	mov	r8, r6
 8001e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e94:	2800      	cmp	r0, #0
 8001e96:	d1f9      	bne.n	8001e8c <__ledf2+0x74>
 8001e98:	2001      	movs	r0, #1
 8001e9a:	4240      	negs	r0, r0
 8001e9c:	e7f6      	b.n	8001e8c <__ledf2+0x74>
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1ec      	bne.n	8001e7c <__ledf2+0x64>
 8001ea2:	464c      	mov	r4, r9
 8001ea4:	4326      	orrs	r6, r4
 8001ea6:	d1e9      	bne.n	8001e7c <__ledf2+0x64>
 8001ea8:	e7ea      	b.n	8001e80 <__ledf2+0x68>
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	dd04      	ble.n	8001eb8 <__ledf2+0xa0>
 8001eae:	4243      	negs	r3, r0
 8001eb0:	4158      	adcs	r0, r3
 8001eb2:	0040      	lsls	r0, r0, #1
 8001eb4:	3801      	subs	r0, #1
 8001eb6:	e7e9      	b.n	8001e8c <__ledf2+0x74>
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	dbeb      	blt.n	8001e94 <__ledf2+0x7c>
 8001ebc:	454f      	cmp	r7, r9
 8001ebe:	d8df      	bhi.n	8001e80 <__ledf2+0x68>
 8001ec0:	d006      	beq.n	8001ed0 <__ledf2+0xb8>
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	454f      	cmp	r7, r9
 8001ec6:	d2e1      	bcs.n	8001e8c <__ledf2+0x74>
 8001ec8:	2900      	cmp	r1, #0
 8001eca:	d0e5      	beq.n	8001e98 <__ledf2+0x80>
 8001ecc:	0008      	movs	r0, r1
 8001ece:	e7dd      	b.n	8001e8c <__ledf2+0x74>
 8001ed0:	45c4      	cmp	ip, r8
 8001ed2:	d8d5      	bhi.n	8001e80 <__ledf2+0x68>
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	45c4      	cmp	ip, r8
 8001ed8:	d2d8      	bcs.n	8001e8c <__ledf2+0x74>
 8001eda:	e7f5      	b.n	8001ec8 <__ledf2+0xb0>
 8001edc:	000007ff 	.word	0x000007ff

08001ee0 <__aeabi_dmul>:
 8001ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee2:	4657      	mov	r7, sl
 8001ee4:	464e      	mov	r6, r9
 8001ee6:	4645      	mov	r5, r8
 8001ee8:	46de      	mov	lr, fp
 8001eea:	b5e0      	push	{r5, r6, r7, lr}
 8001eec:	4698      	mov	r8, r3
 8001eee:	030c      	lsls	r4, r1, #12
 8001ef0:	004b      	lsls	r3, r1, #1
 8001ef2:	0006      	movs	r6, r0
 8001ef4:	4692      	mov	sl, r2
 8001ef6:	b087      	sub	sp, #28
 8001ef8:	0b24      	lsrs	r4, r4, #12
 8001efa:	0d5b      	lsrs	r3, r3, #21
 8001efc:	0fcf      	lsrs	r7, r1, #31
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d100      	bne.n	8001f04 <__aeabi_dmul+0x24>
 8001f02:	e15c      	b.n	80021be <__aeabi_dmul+0x2de>
 8001f04:	4ad9      	ldr	r2, [pc, #868]	; (800226c <__aeabi_dmul+0x38c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d100      	bne.n	8001f0c <__aeabi_dmul+0x2c>
 8001f0a:	e175      	b.n	80021f8 <__aeabi_dmul+0x318>
 8001f0c:	0f42      	lsrs	r2, r0, #29
 8001f0e:	00e4      	lsls	r4, r4, #3
 8001f10:	4314      	orrs	r4, r2
 8001f12:	2280      	movs	r2, #128	; 0x80
 8001f14:	0412      	lsls	r2, r2, #16
 8001f16:	4314      	orrs	r4, r2
 8001f18:	4ad5      	ldr	r2, [pc, #852]	; (8002270 <__aeabi_dmul+0x390>)
 8001f1a:	00c5      	lsls	r5, r0, #3
 8001f1c:	4694      	mov	ip, r2
 8001f1e:	4463      	add	r3, ip
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	2300      	movs	r3, #0
 8001f24:	4699      	mov	r9, r3
 8001f26:	469b      	mov	fp, r3
 8001f28:	4643      	mov	r3, r8
 8001f2a:	4642      	mov	r2, r8
 8001f2c:	031e      	lsls	r6, r3, #12
 8001f2e:	0fd2      	lsrs	r2, r2, #31
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4650      	mov	r0, sl
 8001f34:	4690      	mov	r8, r2
 8001f36:	0b36      	lsrs	r6, r6, #12
 8001f38:	0d5b      	lsrs	r3, r3, #21
 8001f3a:	d100      	bne.n	8001f3e <__aeabi_dmul+0x5e>
 8001f3c:	e120      	b.n	8002180 <__aeabi_dmul+0x2a0>
 8001f3e:	4acb      	ldr	r2, [pc, #812]	; (800226c <__aeabi_dmul+0x38c>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d100      	bne.n	8001f46 <__aeabi_dmul+0x66>
 8001f44:	e162      	b.n	800220c <__aeabi_dmul+0x32c>
 8001f46:	49ca      	ldr	r1, [pc, #808]	; (8002270 <__aeabi_dmul+0x390>)
 8001f48:	0f42      	lsrs	r2, r0, #29
 8001f4a:	468c      	mov	ip, r1
 8001f4c:	9900      	ldr	r1, [sp, #0]
 8001f4e:	4463      	add	r3, ip
 8001f50:	00f6      	lsls	r6, r6, #3
 8001f52:	468c      	mov	ip, r1
 8001f54:	4316      	orrs	r6, r2
 8001f56:	2280      	movs	r2, #128	; 0x80
 8001f58:	449c      	add	ip, r3
 8001f5a:	0412      	lsls	r2, r2, #16
 8001f5c:	4663      	mov	r3, ip
 8001f5e:	4316      	orrs	r6, r2
 8001f60:	00c2      	lsls	r2, r0, #3
 8001f62:	2000      	movs	r0, #0
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	9900      	ldr	r1, [sp, #0]
 8001f68:	4643      	mov	r3, r8
 8001f6a:	3101      	adds	r1, #1
 8001f6c:	468c      	mov	ip, r1
 8001f6e:	4649      	mov	r1, r9
 8001f70:	407b      	eors	r3, r7
 8001f72:	9301      	str	r3, [sp, #4]
 8001f74:	290f      	cmp	r1, #15
 8001f76:	d826      	bhi.n	8001fc6 <__aeabi_dmul+0xe6>
 8001f78:	4bbe      	ldr	r3, [pc, #760]	; (8002274 <__aeabi_dmul+0x394>)
 8001f7a:	0089      	lsls	r1, r1, #2
 8001f7c:	5859      	ldr	r1, [r3, r1]
 8001f7e:	468f      	mov	pc, r1
 8001f80:	4643      	mov	r3, r8
 8001f82:	9301      	str	r3, [sp, #4]
 8001f84:	0034      	movs	r4, r6
 8001f86:	0015      	movs	r5, r2
 8001f88:	4683      	mov	fp, r0
 8001f8a:	465b      	mov	r3, fp
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d016      	beq.n	8001fbe <__aeabi_dmul+0xde>
 8001f90:	2b03      	cmp	r3, #3
 8001f92:	d100      	bne.n	8001f96 <__aeabi_dmul+0xb6>
 8001f94:	e203      	b.n	800239e <__aeabi_dmul+0x4be>
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d000      	beq.n	8001f9c <__aeabi_dmul+0xbc>
 8001f9a:	e0cd      	b.n	8002138 <__aeabi_dmul+0x258>
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	2400      	movs	r4, #0
 8001fa0:	2500      	movs	r5, #0
 8001fa2:	9b01      	ldr	r3, [sp, #4]
 8001fa4:	0512      	lsls	r2, r2, #20
 8001fa6:	4322      	orrs	r2, r4
 8001fa8:	07db      	lsls	r3, r3, #31
 8001faa:	431a      	orrs	r2, r3
 8001fac:	0028      	movs	r0, r5
 8001fae:	0011      	movs	r1, r2
 8001fb0:	b007      	add	sp, #28
 8001fb2:	bcf0      	pop	{r4, r5, r6, r7}
 8001fb4:	46bb      	mov	fp, r7
 8001fb6:	46b2      	mov	sl, r6
 8001fb8:	46a9      	mov	r9, r5
 8001fba:	46a0      	mov	r8, r4
 8001fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fbe:	2400      	movs	r4, #0
 8001fc0:	2500      	movs	r5, #0
 8001fc2:	4aaa      	ldr	r2, [pc, #680]	; (800226c <__aeabi_dmul+0x38c>)
 8001fc4:	e7ed      	b.n	8001fa2 <__aeabi_dmul+0xc2>
 8001fc6:	0c28      	lsrs	r0, r5, #16
 8001fc8:	042d      	lsls	r5, r5, #16
 8001fca:	0c2d      	lsrs	r5, r5, #16
 8001fcc:	002b      	movs	r3, r5
 8001fce:	0c11      	lsrs	r1, r2, #16
 8001fd0:	0412      	lsls	r2, r2, #16
 8001fd2:	0c12      	lsrs	r2, r2, #16
 8001fd4:	4353      	muls	r3, r2
 8001fd6:	4698      	mov	r8, r3
 8001fd8:	0013      	movs	r3, r2
 8001fda:	002f      	movs	r7, r5
 8001fdc:	4343      	muls	r3, r0
 8001fde:	4699      	mov	r9, r3
 8001fe0:	434f      	muls	r7, r1
 8001fe2:	444f      	add	r7, r9
 8001fe4:	46bb      	mov	fp, r7
 8001fe6:	4647      	mov	r7, r8
 8001fe8:	000b      	movs	r3, r1
 8001fea:	0c3f      	lsrs	r7, r7, #16
 8001fec:	46ba      	mov	sl, r7
 8001fee:	4343      	muls	r3, r0
 8001ff0:	44da      	add	sl, fp
 8001ff2:	9302      	str	r3, [sp, #8]
 8001ff4:	45d1      	cmp	r9, sl
 8001ff6:	d904      	bls.n	8002002 <__aeabi_dmul+0x122>
 8001ff8:	2780      	movs	r7, #128	; 0x80
 8001ffa:	027f      	lsls	r7, r7, #9
 8001ffc:	46b9      	mov	r9, r7
 8001ffe:	444b      	add	r3, r9
 8002000:	9302      	str	r3, [sp, #8]
 8002002:	4653      	mov	r3, sl
 8002004:	0c1b      	lsrs	r3, r3, #16
 8002006:	469b      	mov	fp, r3
 8002008:	4653      	mov	r3, sl
 800200a:	041f      	lsls	r7, r3, #16
 800200c:	4643      	mov	r3, r8
 800200e:	041b      	lsls	r3, r3, #16
 8002010:	0c1b      	lsrs	r3, r3, #16
 8002012:	4698      	mov	r8, r3
 8002014:	003b      	movs	r3, r7
 8002016:	4443      	add	r3, r8
 8002018:	9304      	str	r3, [sp, #16]
 800201a:	0c33      	lsrs	r3, r6, #16
 800201c:	0436      	lsls	r6, r6, #16
 800201e:	0c36      	lsrs	r6, r6, #16
 8002020:	4698      	mov	r8, r3
 8002022:	0033      	movs	r3, r6
 8002024:	4343      	muls	r3, r0
 8002026:	4699      	mov	r9, r3
 8002028:	4643      	mov	r3, r8
 800202a:	4343      	muls	r3, r0
 800202c:	002f      	movs	r7, r5
 800202e:	469a      	mov	sl, r3
 8002030:	4643      	mov	r3, r8
 8002032:	4377      	muls	r7, r6
 8002034:	435d      	muls	r5, r3
 8002036:	0c38      	lsrs	r0, r7, #16
 8002038:	444d      	add	r5, r9
 800203a:	1945      	adds	r5, r0, r5
 800203c:	45a9      	cmp	r9, r5
 800203e:	d903      	bls.n	8002048 <__aeabi_dmul+0x168>
 8002040:	2380      	movs	r3, #128	; 0x80
 8002042:	025b      	lsls	r3, r3, #9
 8002044:	4699      	mov	r9, r3
 8002046:	44ca      	add	sl, r9
 8002048:	043f      	lsls	r7, r7, #16
 800204a:	0c28      	lsrs	r0, r5, #16
 800204c:	0c3f      	lsrs	r7, r7, #16
 800204e:	042d      	lsls	r5, r5, #16
 8002050:	19ed      	adds	r5, r5, r7
 8002052:	0c27      	lsrs	r7, r4, #16
 8002054:	0424      	lsls	r4, r4, #16
 8002056:	0c24      	lsrs	r4, r4, #16
 8002058:	0003      	movs	r3, r0
 800205a:	0020      	movs	r0, r4
 800205c:	4350      	muls	r0, r2
 800205e:	437a      	muls	r2, r7
 8002060:	4691      	mov	r9, r2
 8002062:	003a      	movs	r2, r7
 8002064:	4453      	add	r3, sl
 8002066:	9305      	str	r3, [sp, #20]
 8002068:	0c03      	lsrs	r3, r0, #16
 800206a:	469a      	mov	sl, r3
 800206c:	434a      	muls	r2, r1
 800206e:	4361      	muls	r1, r4
 8002070:	4449      	add	r1, r9
 8002072:	4451      	add	r1, sl
 8002074:	44ab      	add	fp, r5
 8002076:	4589      	cmp	r9, r1
 8002078:	d903      	bls.n	8002082 <__aeabi_dmul+0x1a2>
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	025b      	lsls	r3, r3, #9
 800207e:	4699      	mov	r9, r3
 8002080:	444a      	add	r2, r9
 8002082:	0400      	lsls	r0, r0, #16
 8002084:	0c0b      	lsrs	r3, r1, #16
 8002086:	0c00      	lsrs	r0, r0, #16
 8002088:	0409      	lsls	r1, r1, #16
 800208a:	1809      	adds	r1, r1, r0
 800208c:	0020      	movs	r0, r4
 800208e:	4699      	mov	r9, r3
 8002090:	4643      	mov	r3, r8
 8002092:	4370      	muls	r0, r6
 8002094:	435c      	muls	r4, r3
 8002096:	437e      	muls	r6, r7
 8002098:	435f      	muls	r7, r3
 800209a:	0c03      	lsrs	r3, r0, #16
 800209c:	4698      	mov	r8, r3
 800209e:	19a4      	adds	r4, r4, r6
 80020a0:	4444      	add	r4, r8
 80020a2:	444a      	add	r2, r9
 80020a4:	9703      	str	r7, [sp, #12]
 80020a6:	42a6      	cmp	r6, r4
 80020a8:	d904      	bls.n	80020b4 <__aeabi_dmul+0x1d4>
 80020aa:	2380      	movs	r3, #128	; 0x80
 80020ac:	025b      	lsls	r3, r3, #9
 80020ae:	4698      	mov	r8, r3
 80020b0:	4447      	add	r7, r8
 80020b2:	9703      	str	r7, [sp, #12]
 80020b4:	0423      	lsls	r3, r4, #16
 80020b6:	9e02      	ldr	r6, [sp, #8]
 80020b8:	469a      	mov	sl, r3
 80020ba:	9b05      	ldr	r3, [sp, #20]
 80020bc:	445e      	add	r6, fp
 80020be:	4698      	mov	r8, r3
 80020c0:	42ae      	cmp	r6, r5
 80020c2:	41ad      	sbcs	r5, r5
 80020c4:	1876      	adds	r6, r6, r1
 80020c6:	428e      	cmp	r6, r1
 80020c8:	4189      	sbcs	r1, r1
 80020ca:	0400      	lsls	r0, r0, #16
 80020cc:	0c00      	lsrs	r0, r0, #16
 80020ce:	4450      	add	r0, sl
 80020d0:	4440      	add	r0, r8
 80020d2:	426d      	negs	r5, r5
 80020d4:	1947      	adds	r7, r0, r5
 80020d6:	46b8      	mov	r8, r7
 80020d8:	4693      	mov	fp, r2
 80020da:	4249      	negs	r1, r1
 80020dc:	4689      	mov	r9, r1
 80020de:	44c3      	add	fp, r8
 80020e0:	44d9      	add	r9, fp
 80020e2:	4298      	cmp	r0, r3
 80020e4:	4180      	sbcs	r0, r0
 80020e6:	45a8      	cmp	r8, r5
 80020e8:	41ad      	sbcs	r5, r5
 80020ea:	4593      	cmp	fp, r2
 80020ec:	4192      	sbcs	r2, r2
 80020ee:	4589      	cmp	r9, r1
 80020f0:	4189      	sbcs	r1, r1
 80020f2:	426d      	negs	r5, r5
 80020f4:	4240      	negs	r0, r0
 80020f6:	4328      	orrs	r0, r5
 80020f8:	0c24      	lsrs	r4, r4, #16
 80020fa:	4252      	negs	r2, r2
 80020fc:	4249      	negs	r1, r1
 80020fe:	430a      	orrs	r2, r1
 8002100:	9b03      	ldr	r3, [sp, #12]
 8002102:	1900      	adds	r0, r0, r4
 8002104:	1880      	adds	r0, r0, r2
 8002106:	18c7      	adds	r7, r0, r3
 8002108:	464b      	mov	r3, r9
 800210a:	0ddc      	lsrs	r4, r3, #23
 800210c:	9b04      	ldr	r3, [sp, #16]
 800210e:	0275      	lsls	r5, r6, #9
 8002110:	431d      	orrs	r5, r3
 8002112:	1e6a      	subs	r2, r5, #1
 8002114:	4195      	sbcs	r5, r2
 8002116:	464b      	mov	r3, r9
 8002118:	0df6      	lsrs	r6, r6, #23
 800211a:	027f      	lsls	r7, r7, #9
 800211c:	4335      	orrs	r5, r6
 800211e:	025a      	lsls	r2, r3, #9
 8002120:	433c      	orrs	r4, r7
 8002122:	4315      	orrs	r5, r2
 8002124:	01fb      	lsls	r3, r7, #7
 8002126:	d400      	bmi.n	800212a <__aeabi_dmul+0x24a>
 8002128:	e11c      	b.n	8002364 <__aeabi_dmul+0x484>
 800212a:	2101      	movs	r1, #1
 800212c:	086a      	lsrs	r2, r5, #1
 800212e:	400d      	ands	r5, r1
 8002130:	4315      	orrs	r5, r2
 8002132:	07e2      	lsls	r2, r4, #31
 8002134:	4315      	orrs	r5, r2
 8002136:	0864      	lsrs	r4, r4, #1
 8002138:	494f      	ldr	r1, [pc, #316]	; (8002278 <__aeabi_dmul+0x398>)
 800213a:	4461      	add	r1, ip
 800213c:	2900      	cmp	r1, #0
 800213e:	dc00      	bgt.n	8002142 <__aeabi_dmul+0x262>
 8002140:	e0b0      	b.n	80022a4 <__aeabi_dmul+0x3c4>
 8002142:	076b      	lsls	r3, r5, #29
 8002144:	d009      	beq.n	800215a <__aeabi_dmul+0x27a>
 8002146:	220f      	movs	r2, #15
 8002148:	402a      	ands	r2, r5
 800214a:	2a04      	cmp	r2, #4
 800214c:	d005      	beq.n	800215a <__aeabi_dmul+0x27a>
 800214e:	1d2a      	adds	r2, r5, #4
 8002150:	42aa      	cmp	r2, r5
 8002152:	41ad      	sbcs	r5, r5
 8002154:	426d      	negs	r5, r5
 8002156:	1964      	adds	r4, r4, r5
 8002158:	0015      	movs	r5, r2
 800215a:	01e3      	lsls	r3, r4, #7
 800215c:	d504      	bpl.n	8002168 <__aeabi_dmul+0x288>
 800215e:	2180      	movs	r1, #128	; 0x80
 8002160:	4a46      	ldr	r2, [pc, #280]	; (800227c <__aeabi_dmul+0x39c>)
 8002162:	00c9      	lsls	r1, r1, #3
 8002164:	4014      	ands	r4, r2
 8002166:	4461      	add	r1, ip
 8002168:	4a45      	ldr	r2, [pc, #276]	; (8002280 <__aeabi_dmul+0x3a0>)
 800216a:	4291      	cmp	r1, r2
 800216c:	dd00      	ble.n	8002170 <__aeabi_dmul+0x290>
 800216e:	e726      	b.n	8001fbe <__aeabi_dmul+0xde>
 8002170:	0762      	lsls	r2, r4, #29
 8002172:	08ed      	lsrs	r5, r5, #3
 8002174:	0264      	lsls	r4, r4, #9
 8002176:	0549      	lsls	r1, r1, #21
 8002178:	4315      	orrs	r5, r2
 800217a:	0b24      	lsrs	r4, r4, #12
 800217c:	0d4a      	lsrs	r2, r1, #21
 800217e:	e710      	b.n	8001fa2 <__aeabi_dmul+0xc2>
 8002180:	4652      	mov	r2, sl
 8002182:	4332      	orrs	r2, r6
 8002184:	d100      	bne.n	8002188 <__aeabi_dmul+0x2a8>
 8002186:	e07f      	b.n	8002288 <__aeabi_dmul+0x3a8>
 8002188:	2e00      	cmp	r6, #0
 800218a:	d100      	bne.n	800218e <__aeabi_dmul+0x2ae>
 800218c:	e0dc      	b.n	8002348 <__aeabi_dmul+0x468>
 800218e:	0030      	movs	r0, r6
 8002190:	f000 fd78 	bl	8002c84 <__clzsi2>
 8002194:	0002      	movs	r2, r0
 8002196:	3a0b      	subs	r2, #11
 8002198:	231d      	movs	r3, #29
 800219a:	0001      	movs	r1, r0
 800219c:	1a9b      	subs	r3, r3, r2
 800219e:	4652      	mov	r2, sl
 80021a0:	3908      	subs	r1, #8
 80021a2:	40da      	lsrs	r2, r3
 80021a4:	408e      	lsls	r6, r1
 80021a6:	4316      	orrs	r6, r2
 80021a8:	4652      	mov	r2, sl
 80021aa:	408a      	lsls	r2, r1
 80021ac:	9b00      	ldr	r3, [sp, #0]
 80021ae:	4935      	ldr	r1, [pc, #212]	; (8002284 <__aeabi_dmul+0x3a4>)
 80021b0:	1a18      	subs	r0, r3, r0
 80021b2:	0003      	movs	r3, r0
 80021b4:	468c      	mov	ip, r1
 80021b6:	4463      	add	r3, ip
 80021b8:	2000      	movs	r0, #0
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	e6d3      	b.n	8001f66 <__aeabi_dmul+0x86>
 80021be:	0025      	movs	r5, r4
 80021c0:	4305      	orrs	r5, r0
 80021c2:	d04a      	beq.n	800225a <__aeabi_dmul+0x37a>
 80021c4:	2c00      	cmp	r4, #0
 80021c6:	d100      	bne.n	80021ca <__aeabi_dmul+0x2ea>
 80021c8:	e0b0      	b.n	800232c <__aeabi_dmul+0x44c>
 80021ca:	0020      	movs	r0, r4
 80021cc:	f000 fd5a 	bl	8002c84 <__clzsi2>
 80021d0:	0001      	movs	r1, r0
 80021d2:	0002      	movs	r2, r0
 80021d4:	390b      	subs	r1, #11
 80021d6:	231d      	movs	r3, #29
 80021d8:	0010      	movs	r0, r2
 80021da:	1a5b      	subs	r3, r3, r1
 80021dc:	0031      	movs	r1, r6
 80021de:	0035      	movs	r5, r6
 80021e0:	3808      	subs	r0, #8
 80021e2:	4084      	lsls	r4, r0
 80021e4:	40d9      	lsrs	r1, r3
 80021e6:	4085      	lsls	r5, r0
 80021e8:	430c      	orrs	r4, r1
 80021ea:	4826      	ldr	r0, [pc, #152]	; (8002284 <__aeabi_dmul+0x3a4>)
 80021ec:	1a83      	subs	r3, r0, r2
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	2300      	movs	r3, #0
 80021f2:	4699      	mov	r9, r3
 80021f4:	469b      	mov	fp, r3
 80021f6:	e697      	b.n	8001f28 <__aeabi_dmul+0x48>
 80021f8:	0005      	movs	r5, r0
 80021fa:	4325      	orrs	r5, r4
 80021fc:	d126      	bne.n	800224c <__aeabi_dmul+0x36c>
 80021fe:	2208      	movs	r2, #8
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	2302      	movs	r3, #2
 8002204:	2400      	movs	r4, #0
 8002206:	4691      	mov	r9, r2
 8002208:	469b      	mov	fp, r3
 800220a:	e68d      	b.n	8001f28 <__aeabi_dmul+0x48>
 800220c:	4652      	mov	r2, sl
 800220e:	9b00      	ldr	r3, [sp, #0]
 8002210:	4332      	orrs	r2, r6
 8002212:	d110      	bne.n	8002236 <__aeabi_dmul+0x356>
 8002214:	4915      	ldr	r1, [pc, #84]	; (800226c <__aeabi_dmul+0x38c>)
 8002216:	2600      	movs	r6, #0
 8002218:	468c      	mov	ip, r1
 800221a:	4463      	add	r3, ip
 800221c:	4649      	mov	r1, r9
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	2302      	movs	r3, #2
 8002222:	4319      	orrs	r1, r3
 8002224:	4689      	mov	r9, r1
 8002226:	2002      	movs	r0, #2
 8002228:	e69d      	b.n	8001f66 <__aeabi_dmul+0x86>
 800222a:	465b      	mov	r3, fp
 800222c:	9701      	str	r7, [sp, #4]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d000      	beq.n	8002234 <__aeabi_dmul+0x354>
 8002232:	e6ad      	b.n	8001f90 <__aeabi_dmul+0xb0>
 8002234:	e6c3      	b.n	8001fbe <__aeabi_dmul+0xde>
 8002236:	4a0d      	ldr	r2, [pc, #52]	; (800226c <__aeabi_dmul+0x38c>)
 8002238:	2003      	movs	r0, #3
 800223a:	4694      	mov	ip, r2
 800223c:	4463      	add	r3, ip
 800223e:	464a      	mov	r2, r9
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	2303      	movs	r3, #3
 8002244:	431a      	orrs	r2, r3
 8002246:	4691      	mov	r9, r2
 8002248:	4652      	mov	r2, sl
 800224a:	e68c      	b.n	8001f66 <__aeabi_dmul+0x86>
 800224c:	220c      	movs	r2, #12
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	2303      	movs	r3, #3
 8002252:	0005      	movs	r5, r0
 8002254:	4691      	mov	r9, r2
 8002256:	469b      	mov	fp, r3
 8002258:	e666      	b.n	8001f28 <__aeabi_dmul+0x48>
 800225a:	2304      	movs	r3, #4
 800225c:	4699      	mov	r9, r3
 800225e:	2300      	movs	r3, #0
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	3301      	adds	r3, #1
 8002264:	2400      	movs	r4, #0
 8002266:	469b      	mov	fp, r3
 8002268:	e65e      	b.n	8001f28 <__aeabi_dmul+0x48>
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	000007ff 	.word	0x000007ff
 8002270:	fffffc01 	.word	0xfffffc01
 8002274:	080101d8 	.word	0x080101d8
 8002278:	000003ff 	.word	0x000003ff
 800227c:	feffffff 	.word	0xfeffffff
 8002280:	000007fe 	.word	0x000007fe
 8002284:	fffffc0d 	.word	0xfffffc0d
 8002288:	4649      	mov	r1, r9
 800228a:	2301      	movs	r3, #1
 800228c:	4319      	orrs	r1, r3
 800228e:	4689      	mov	r9, r1
 8002290:	2600      	movs	r6, #0
 8002292:	2001      	movs	r0, #1
 8002294:	e667      	b.n	8001f66 <__aeabi_dmul+0x86>
 8002296:	2300      	movs	r3, #0
 8002298:	2480      	movs	r4, #128	; 0x80
 800229a:	2500      	movs	r5, #0
 800229c:	4a43      	ldr	r2, [pc, #268]	; (80023ac <__aeabi_dmul+0x4cc>)
 800229e:	9301      	str	r3, [sp, #4]
 80022a0:	0324      	lsls	r4, r4, #12
 80022a2:	e67e      	b.n	8001fa2 <__aeabi_dmul+0xc2>
 80022a4:	2001      	movs	r0, #1
 80022a6:	1a40      	subs	r0, r0, r1
 80022a8:	2838      	cmp	r0, #56	; 0x38
 80022aa:	dd00      	ble.n	80022ae <__aeabi_dmul+0x3ce>
 80022ac:	e676      	b.n	8001f9c <__aeabi_dmul+0xbc>
 80022ae:	281f      	cmp	r0, #31
 80022b0:	dd5b      	ble.n	800236a <__aeabi_dmul+0x48a>
 80022b2:	221f      	movs	r2, #31
 80022b4:	0023      	movs	r3, r4
 80022b6:	4252      	negs	r2, r2
 80022b8:	1a51      	subs	r1, r2, r1
 80022ba:	40cb      	lsrs	r3, r1
 80022bc:	0019      	movs	r1, r3
 80022be:	2820      	cmp	r0, #32
 80022c0:	d003      	beq.n	80022ca <__aeabi_dmul+0x3ea>
 80022c2:	4a3b      	ldr	r2, [pc, #236]	; (80023b0 <__aeabi_dmul+0x4d0>)
 80022c4:	4462      	add	r2, ip
 80022c6:	4094      	lsls	r4, r2
 80022c8:	4325      	orrs	r5, r4
 80022ca:	1e6a      	subs	r2, r5, #1
 80022cc:	4195      	sbcs	r5, r2
 80022ce:	002a      	movs	r2, r5
 80022d0:	430a      	orrs	r2, r1
 80022d2:	2107      	movs	r1, #7
 80022d4:	000d      	movs	r5, r1
 80022d6:	2400      	movs	r4, #0
 80022d8:	4015      	ands	r5, r2
 80022da:	4211      	tst	r1, r2
 80022dc:	d05b      	beq.n	8002396 <__aeabi_dmul+0x4b6>
 80022de:	210f      	movs	r1, #15
 80022e0:	2400      	movs	r4, #0
 80022e2:	4011      	ands	r1, r2
 80022e4:	2904      	cmp	r1, #4
 80022e6:	d053      	beq.n	8002390 <__aeabi_dmul+0x4b0>
 80022e8:	1d11      	adds	r1, r2, #4
 80022ea:	4291      	cmp	r1, r2
 80022ec:	4192      	sbcs	r2, r2
 80022ee:	4252      	negs	r2, r2
 80022f0:	18a4      	adds	r4, r4, r2
 80022f2:	000a      	movs	r2, r1
 80022f4:	0223      	lsls	r3, r4, #8
 80022f6:	d54b      	bpl.n	8002390 <__aeabi_dmul+0x4b0>
 80022f8:	2201      	movs	r2, #1
 80022fa:	2400      	movs	r4, #0
 80022fc:	2500      	movs	r5, #0
 80022fe:	e650      	b.n	8001fa2 <__aeabi_dmul+0xc2>
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	031b      	lsls	r3, r3, #12
 8002304:	421c      	tst	r4, r3
 8002306:	d009      	beq.n	800231c <__aeabi_dmul+0x43c>
 8002308:	421e      	tst	r6, r3
 800230a:	d107      	bne.n	800231c <__aeabi_dmul+0x43c>
 800230c:	4333      	orrs	r3, r6
 800230e:	031c      	lsls	r4, r3, #12
 8002310:	4643      	mov	r3, r8
 8002312:	0015      	movs	r5, r2
 8002314:	0b24      	lsrs	r4, r4, #12
 8002316:	4a25      	ldr	r2, [pc, #148]	; (80023ac <__aeabi_dmul+0x4cc>)
 8002318:	9301      	str	r3, [sp, #4]
 800231a:	e642      	b.n	8001fa2 <__aeabi_dmul+0xc2>
 800231c:	2280      	movs	r2, #128	; 0x80
 800231e:	0312      	lsls	r2, r2, #12
 8002320:	4314      	orrs	r4, r2
 8002322:	0324      	lsls	r4, r4, #12
 8002324:	4a21      	ldr	r2, [pc, #132]	; (80023ac <__aeabi_dmul+0x4cc>)
 8002326:	0b24      	lsrs	r4, r4, #12
 8002328:	9701      	str	r7, [sp, #4]
 800232a:	e63a      	b.n	8001fa2 <__aeabi_dmul+0xc2>
 800232c:	f000 fcaa 	bl	8002c84 <__clzsi2>
 8002330:	0001      	movs	r1, r0
 8002332:	0002      	movs	r2, r0
 8002334:	3115      	adds	r1, #21
 8002336:	3220      	adds	r2, #32
 8002338:	291c      	cmp	r1, #28
 800233a:	dc00      	bgt.n	800233e <__aeabi_dmul+0x45e>
 800233c:	e74b      	b.n	80021d6 <__aeabi_dmul+0x2f6>
 800233e:	0034      	movs	r4, r6
 8002340:	3808      	subs	r0, #8
 8002342:	2500      	movs	r5, #0
 8002344:	4084      	lsls	r4, r0
 8002346:	e750      	b.n	80021ea <__aeabi_dmul+0x30a>
 8002348:	f000 fc9c 	bl	8002c84 <__clzsi2>
 800234c:	0003      	movs	r3, r0
 800234e:	001a      	movs	r2, r3
 8002350:	3215      	adds	r2, #21
 8002352:	3020      	adds	r0, #32
 8002354:	2a1c      	cmp	r2, #28
 8002356:	dc00      	bgt.n	800235a <__aeabi_dmul+0x47a>
 8002358:	e71e      	b.n	8002198 <__aeabi_dmul+0x2b8>
 800235a:	4656      	mov	r6, sl
 800235c:	3b08      	subs	r3, #8
 800235e:	2200      	movs	r2, #0
 8002360:	409e      	lsls	r6, r3
 8002362:	e723      	b.n	80021ac <__aeabi_dmul+0x2cc>
 8002364:	9b00      	ldr	r3, [sp, #0]
 8002366:	469c      	mov	ip, r3
 8002368:	e6e6      	b.n	8002138 <__aeabi_dmul+0x258>
 800236a:	4912      	ldr	r1, [pc, #72]	; (80023b4 <__aeabi_dmul+0x4d4>)
 800236c:	0022      	movs	r2, r4
 800236e:	4461      	add	r1, ip
 8002370:	002e      	movs	r6, r5
 8002372:	408d      	lsls	r5, r1
 8002374:	408a      	lsls	r2, r1
 8002376:	40c6      	lsrs	r6, r0
 8002378:	1e69      	subs	r1, r5, #1
 800237a:	418d      	sbcs	r5, r1
 800237c:	4332      	orrs	r2, r6
 800237e:	432a      	orrs	r2, r5
 8002380:	40c4      	lsrs	r4, r0
 8002382:	0753      	lsls	r3, r2, #29
 8002384:	d0b6      	beq.n	80022f4 <__aeabi_dmul+0x414>
 8002386:	210f      	movs	r1, #15
 8002388:	4011      	ands	r1, r2
 800238a:	2904      	cmp	r1, #4
 800238c:	d1ac      	bne.n	80022e8 <__aeabi_dmul+0x408>
 800238e:	e7b1      	b.n	80022f4 <__aeabi_dmul+0x414>
 8002390:	0765      	lsls	r5, r4, #29
 8002392:	0264      	lsls	r4, r4, #9
 8002394:	0b24      	lsrs	r4, r4, #12
 8002396:	08d2      	lsrs	r2, r2, #3
 8002398:	4315      	orrs	r5, r2
 800239a:	2200      	movs	r2, #0
 800239c:	e601      	b.n	8001fa2 <__aeabi_dmul+0xc2>
 800239e:	2280      	movs	r2, #128	; 0x80
 80023a0:	0312      	lsls	r2, r2, #12
 80023a2:	4314      	orrs	r4, r2
 80023a4:	0324      	lsls	r4, r4, #12
 80023a6:	4a01      	ldr	r2, [pc, #4]	; (80023ac <__aeabi_dmul+0x4cc>)
 80023a8:	0b24      	lsrs	r4, r4, #12
 80023aa:	e5fa      	b.n	8001fa2 <__aeabi_dmul+0xc2>
 80023ac:	000007ff 	.word	0x000007ff
 80023b0:	0000043e 	.word	0x0000043e
 80023b4:	0000041e 	.word	0x0000041e

080023b8 <__aeabi_dsub>:
 80023b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ba:	4657      	mov	r7, sl
 80023bc:	464e      	mov	r6, r9
 80023be:	4645      	mov	r5, r8
 80023c0:	46de      	mov	lr, fp
 80023c2:	b5e0      	push	{r5, r6, r7, lr}
 80023c4:	001e      	movs	r6, r3
 80023c6:	0017      	movs	r7, r2
 80023c8:	004a      	lsls	r2, r1, #1
 80023ca:	030b      	lsls	r3, r1, #12
 80023cc:	0d52      	lsrs	r2, r2, #21
 80023ce:	0a5b      	lsrs	r3, r3, #9
 80023d0:	4690      	mov	r8, r2
 80023d2:	0f42      	lsrs	r2, r0, #29
 80023d4:	431a      	orrs	r2, r3
 80023d6:	0fcd      	lsrs	r5, r1, #31
 80023d8:	4ccd      	ldr	r4, [pc, #820]	; (8002710 <__aeabi_dsub+0x358>)
 80023da:	0331      	lsls	r1, r6, #12
 80023dc:	00c3      	lsls	r3, r0, #3
 80023de:	4694      	mov	ip, r2
 80023e0:	0070      	lsls	r0, r6, #1
 80023e2:	0f7a      	lsrs	r2, r7, #29
 80023e4:	0a49      	lsrs	r1, r1, #9
 80023e6:	00ff      	lsls	r7, r7, #3
 80023e8:	469a      	mov	sl, r3
 80023ea:	46b9      	mov	r9, r7
 80023ec:	0d40      	lsrs	r0, r0, #21
 80023ee:	0ff6      	lsrs	r6, r6, #31
 80023f0:	4311      	orrs	r1, r2
 80023f2:	42a0      	cmp	r0, r4
 80023f4:	d100      	bne.n	80023f8 <__aeabi_dsub+0x40>
 80023f6:	e0b1      	b.n	800255c <__aeabi_dsub+0x1a4>
 80023f8:	2201      	movs	r2, #1
 80023fa:	4056      	eors	r6, r2
 80023fc:	46b3      	mov	fp, r6
 80023fe:	42b5      	cmp	r5, r6
 8002400:	d100      	bne.n	8002404 <__aeabi_dsub+0x4c>
 8002402:	e088      	b.n	8002516 <__aeabi_dsub+0x15e>
 8002404:	4642      	mov	r2, r8
 8002406:	1a12      	subs	r2, r2, r0
 8002408:	2a00      	cmp	r2, #0
 800240a:	dc00      	bgt.n	800240e <__aeabi_dsub+0x56>
 800240c:	e0ae      	b.n	800256c <__aeabi_dsub+0x1b4>
 800240e:	2800      	cmp	r0, #0
 8002410:	d100      	bne.n	8002414 <__aeabi_dsub+0x5c>
 8002412:	e0c1      	b.n	8002598 <__aeabi_dsub+0x1e0>
 8002414:	48be      	ldr	r0, [pc, #760]	; (8002710 <__aeabi_dsub+0x358>)
 8002416:	4580      	cmp	r8, r0
 8002418:	d100      	bne.n	800241c <__aeabi_dsub+0x64>
 800241a:	e151      	b.n	80026c0 <__aeabi_dsub+0x308>
 800241c:	2080      	movs	r0, #128	; 0x80
 800241e:	0400      	lsls	r0, r0, #16
 8002420:	4301      	orrs	r1, r0
 8002422:	2a38      	cmp	r2, #56	; 0x38
 8002424:	dd00      	ble.n	8002428 <__aeabi_dsub+0x70>
 8002426:	e17b      	b.n	8002720 <__aeabi_dsub+0x368>
 8002428:	2a1f      	cmp	r2, #31
 800242a:	dd00      	ble.n	800242e <__aeabi_dsub+0x76>
 800242c:	e1ee      	b.n	800280c <__aeabi_dsub+0x454>
 800242e:	2020      	movs	r0, #32
 8002430:	003e      	movs	r6, r7
 8002432:	1a80      	subs	r0, r0, r2
 8002434:	000c      	movs	r4, r1
 8002436:	40d6      	lsrs	r6, r2
 8002438:	40d1      	lsrs	r1, r2
 800243a:	4087      	lsls	r7, r0
 800243c:	4662      	mov	r2, ip
 800243e:	4084      	lsls	r4, r0
 8002440:	1a52      	subs	r2, r2, r1
 8002442:	1e78      	subs	r0, r7, #1
 8002444:	4187      	sbcs	r7, r0
 8002446:	4694      	mov	ip, r2
 8002448:	4334      	orrs	r4, r6
 800244a:	4327      	orrs	r7, r4
 800244c:	1bdc      	subs	r4, r3, r7
 800244e:	42a3      	cmp	r3, r4
 8002450:	419b      	sbcs	r3, r3
 8002452:	4662      	mov	r2, ip
 8002454:	425b      	negs	r3, r3
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	4699      	mov	r9, r3
 800245a:	464b      	mov	r3, r9
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	d400      	bmi.n	8002462 <__aeabi_dsub+0xaa>
 8002460:	e118      	b.n	8002694 <__aeabi_dsub+0x2dc>
 8002462:	464b      	mov	r3, r9
 8002464:	0258      	lsls	r0, r3, #9
 8002466:	0a43      	lsrs	r3, r0, #9
 8002468:	4699      	mov	r9, r3
 800246a:	464b      	mov	r3, r9
 800246c:	2b00      	cmp	r3, #0
 800246e:	d100      	bne.n	8002472 <__aeabi_dsub+0xba>
 8002470:	e137      	b.n	80026e2 <__aeabi_dsub+0x32a>
 8002472:	4648      	mov	r0, r9
 8002474:	f000 fc06 	bl	8002c84 <__clzsi2>
 8002478:	0001      	movs	r1, r0
 800247a:	3908      	subs	r1, #8
 800247c:	2320      	movs	r3, #32
 800247e:	0022      	movs	r2, r4
 8002480:	4648      	mov	r0, r9
 8002482:	1a5b      	subs	r3, r3, r1
 8002484:	40da      	lsrs	r2, r3
 8002486:	4088      	lsls	r0, r1
 8002488:	408c      	lsls	r4, r1
 800248a:	4643      	mov	r3, r8
 800248c:	4310      	orrs	r0, r2
 800248e:	4588      	cmp	r8, r1
 8002490:	dd00      	ble.n	8002494 <__aeabi_dsub+0xdc>
 8002492:	e136      	b.n	8002702 <__aeabi_dsub+0x34a>
 8002494:	1ac9      	subs	r1, r1, r3
 8002496:	1c4b      	adds	r3, r1, #1
 8002498:	2b1f      	cmp	r3, #31
 800249a:	dd00      	ble.n	800249e <__aeabi_dsub+0xe6>
 800249c:	e0ea      	b.n	8002674 <__aeabi_dsub+0x2bc>
 800249e:	2220      	movs	r2, #32
 80024a0:	0026      	movs	r6, r4
 80024a2:	1ad2      	subs	r2, r2, r3
 80024a4:	0001      	movs	r1, r0
 80024a6:	4094      	lsls	r4, r2
 80024a8:	40de      	lsrs	r6, r3
 80024aa:	40d8      	lsrs	r0, r3
 80024ac:	2300      	movs	r3, #0
 80024ae:	4091      	lsls	r1, r2
 80024b0:	1e62      	subs	r2, r4, #1
 80024b2:	4194      	sbcs	r4, r2
 80024b4:	4681      	mov	r9, r0
 80024b6:	4698      	mov	r8, r3
 80024b8:	4331      	orrs	r1, r6
 80024ba:	430c      	orrs	r4, r1
 80024bc:	0763      	lsls	r3, r4, #29
 80024be:	d009      	beq.n	80024d4 <__aeabi_dsub+0x11c>
 80024c0:	230f      	movs	r3, #15
 80024c2:	4023      	ands	r3, r4
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d005      	beq.n	80024d4 <__aeabi_dsub+0x11c>
 80024c8:	1d23      	adds	r3, r4, #4
 80024ca:	42a3      	cmp	r3, r4
 80024cc:	41a4      	sbcs	r4, r4
 80024ce:	4264      	negs	r4, r4
 80024d0:	44a1      	add	r9, r4
 80024d2:	001c      	movs	r4, r3
 80024d4:	464b      	mov	r3, r9
 80024d6:	021b      	lsls	r3, r3, #8
 80024d8:	d400      	bmi.n	80024dc <__aeabi_dsub+0x124>
 80024da:	e0de      	b.n	800269a <__aeabi_dsub+0x2e2>
 80024dc:	4641      	mov	r1, r8
 80024de:	4b8c      	ldr	r3, [pc, #560]	; (8002710 <__aeabi_dsub+0x358>)
 80024e0:	3101      	adds	r1, #1
 80024e2:	4299      	cmp	r1, r3
 80024e4:	d100      	bne.n	80024e8 <__aeabi_dsub+0x130>
 80024e6:	e0e7      	b.n	80026b8 <__aeabi_dsub+0x300>
 80024e8:	464b      	mov	r3, r9
 80024ea:	488a      	ldr	r0, [pc, #552]	; (8002714 <__aeabi_dsub+0x35c>)
 80024ec:	08e4      	lsrs	r4, r4, #3
 80024ee:	4003      	ands	r3, r0
 80024f0:	0018      	movs	r0, r3
 80024f2:	0549      	lsls	r1, r1, #21
 80024f4:	075b      	lsls	r3, r3, #29
 80024f6:	0240      	lsls	r0, r0, #9
 80024f8:	4323      	orrs	r3, r4
 80024fa:	0d4a      	lsrs	r2, r1, #21
 80024fc:	0b04      	lsrs	r4, r0, #12
 80024fe:	0512      	lsls	r2, r2, #20
 8002500:	07ed      	lsls	r5, r5, #31
 8002502:	4322      	orrs	r2, r4
 8002504:	432a      	orrs	r2, r5
 8002506:	0018      	movs	r0, r3
 8002508:	0011      	movs	r1, r2
 800250a:	bcf0      	pop	{r4, r5, r6, r7}
 800250c:	46bb      	mov	fp, r7
 800250e:	46b2      	mov	sl, r6
 8002510:	46a9      	mov	r9, r5
 8002512:	46a0      	mov	r8, r4
 8002514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002516:	4642      	mov	r2, r8
 8002518:	1a12      	subs	r2, r2, r0
 800251a:	2a00      	cmp	r2, #0
 800251c:	dd52      	ble.n	80025c4 <__aeabi_dsub+0x20c>
 800251e:	2800      	cmp	r0, #0
 8002520:	d100      	bne.n	8002524 <__aeabi_dsub+0x16c>
 8002522:	e09c      	b.n	800265e <__aeabi_dsub+0x2a6>
 8002524:	45a0      	cmp	r8, r4
 8002526:	d100      	bne.n	800252a <__aeabi_dsub+0x172>
 8002528:	e0ca      	b.n	80026c0 <__aeabi_dsub+0x308>
 800252a:	2080      	movs	r0, #128	; 0x80
 800252c:	0400      	lsls	r0, r0, #16
 800252e:	4301      	orrs	r1, r0
 8002530:	2a38      	cmp	r2, #56	; 0x38
 8002532:	dd00      	ble.n	8002536 <__aeabi_dsub+0x17e>
 8002534:	e149      	b.n	80027ca <__aeabi_dsub+0x412>
 8002536:	2a1f      	cmp	r2, #31
 8002538:	dc00      	bgt.n	800253c <__aeabi_dsub+0x184>
 800253a:	e197      	b.n	800286c <__aeabi_dsub+0x4b4>
 800253c:	0010      	movs	r0, r2
 800253e:	000e      	movs	r6, r1
 8002540:	3820      	subs	r0, #32
 8002542:	40c6      	lsrs	r6, r0
 8002544:	2a20      	cmp	r2, #32
 8002546:	d004      	beq.n	8002552 <__aeabi_dsub+0x19a>
 8002548:	2040      	movs	r0, #64	; 0x40
 800254a:	1a82      	subs	r2, r0, r2
 800254c:	4091      	lsls	r1, r2
 800254e:	430f      	orrs	r7, r1
 8002550:	46b9      	mov	r9, r7
 8002552:	464c      	mov	r4, r9
 8002554:	1e62      	subs	r2, r4, #1
 8002556:	4194      	sbcs	r4, r2
 8002558:	4334      	orrs	r4, r6
 800255a:	e13a      	b.n	80027d2 <__aeabi_dsub+0x41a>
 800255c:	000a      	movs	r2, r1
 800255e:	433a      	orrs	r2, r7
 8002560:	d028      	beq.n	80025b4 <__aeabi_dsub+0x1fc>
 8002562:	46b3      	mov	fp, r6
 8002564:	42b5      	cmp	r5, r6
 8002566:	d02b      	beq.n	80025c0 <__aeabi_dsub+0x208>
 8002568:	4a6b      	ldr	r2, [pc, #428]	; (8002718 <__aeabi_dsub+0x360>)
 800256a:	4442      	add	r2, r8
 800256c:	2a00      	cmp	r2, #0
 800256e:	d05d      	beq.n	800262c <__aeabi_dsub+0x274>
 8002570:	4642      	mov	r2, r8
 8002572:	4644      	mov	r4, r8
 8002574:	1a82      	subs	r2, r0, r2
 8002576:	2c00      	cmp	r4, #0
 8002578:	d000      	beq.n	800257c <__aeabi_dsub+0x1c4>
 800257a:	e0f5      	b.n	8002768 <__aeabi_dsub+0x3b0>
 800257c:	4665      	mov	r5, ip
 800257e:	431d      	orrs	r5, r3
 8002580:	d100      	bne.n	8002584 <__aeabi_dsub+0x1cc>
 8002582:	e19c      	b.n	80028be <__aeabi_dsub+0x506>
 8002584:	1e55      	subs	r5, r2, #1
 8002586:	2a01      	cmp	r2, #1
 8002588:	d100      	bne.n	800258c <__aeabi_dsub+0x1d4>
 800258a:	e1fb      	b.n	8002984 <__aeabi_dsub+0x5cc>
 800258c:	4c60      	ldr	r4, [pc, #384]	; (8002710 <__aeabi_dsub+0x358>)
 800258e:	42a2      	cmp	r2, r4
 8002590:	d100      	bne.n	8002594 <__aeabi_dsub+0x1dc>
 8002592:	e1bd      	b.n	8002910 <__aeabi_dsub+0x558>
 8002594:	002a      	movs	r2, r5
 8002596:	e0f0      	b.n	800277a <__aeabi_dsub+0x3c2>
 8002598:	0008      	movs	r0, r1
 800259a:	4338      	orrs	r0, r7
 800259c:	d100      	bne.n	80025a0 <__aeabi_dsub+0x1e8>
 800259e:	e0c3      	b.n	8002728 <__aeabi_dsub+0x370>
 80025a0:	1e50      	subs	r0, r2, #1
 80025a2:	2a01      	cmp	r2, #1
 80025a4:	d100      	bne.n	80025a8 <__aeabi_dsub+0x1f0>
 80025a6:	e1a8      	b.n	80028fa <__aeabi_dsub+0x542>
 80025a8:	4c59      	ldr	r4, [pc, #356]	; (8002710 <__aeabi_dsub+0x358>)
 80025aa:	42a2      	cmp	r2, r4
 80025ac:	d100      	bne.n	80025b0 <__aeabi_dsub+0x1f8>
 80025ae:	e087      	b.n	80026c0 <__aeabi_dsub+0x308>
 80025b0:	0002      	movs	r2, r0
 80025b2:	e736      	b.n	8002422 <__aeabi_dsub+0x6a>
 80025b4:	2201      	movs	r2, #1
 80025b6:	4056      	eors	r6, r2
 80025b8:	46b3      	mov	fp, r6
 80025ba:	42b5      	cmp	r5, r6
 80025bc:	d000      	beq.n	80025c0 <__aeabi_dsub+0x208>
 80025be:	e721      	b.n	8002404 <__aeabi_dsub+0x4c>
 80025c0:	4a55      	ldr	r2, [pc, #340]	; (8002718 <__aeabi_dsub+0x360>)
 80025c2:	4442      	add	r2, r8
 80025c4:	2a00      	cmp	r2, #0
 80025c6:	d100      	bne.n	80025ca <__aeabi_dsub+0x212>
 80025c8:	e0b5      	b.n	8002736 <__aeabi_dsub+0x37e>
 80025ca:	4642      	mov	r2, r8
 80025cc:	4644      	mov	r4, r8
 80025ce:	1a82      	subs	r2, r0, r2
 80025d0:	2c00      	cmp	r4, #0
 80025d2:	d100      	bne.n	80025d6 <__aeabi_dsub+0x21e>
 80025d4:	e138      	b.n	8002848 <__aeabi_dsub+0x490>
 80025d6:	4e4e      	ldr	r6, [pc, #312]	; (8002710 <__aeabi_dsub+0x358>)
 80025d8:	42b0      	cmp	r0, r6
 80025da:	d100      	bne.n	80025de <__aeabi_dsub+0x226>
 80025dc:	e1de      	b.n	800299c <__aeabi_dsub+0x5e4>
 80025de:	2680      	movs	r6, #128	; 0x80
 80025e0:	4664      	mov	r4, ip
 80025e2:	0436      	lsls	r6, r6, #16
 80025e4:	4334      	orrs	r4, r6
 80025e6:	46a4      	mov	ip, r4
 80025e8:	2a38      	cmp	r2, #56	; 0x38
 80025ea:	dd00      	ble.n	80025ee <__aeabi_dsub+0x236>
 80025ec:	e196      	b.n	800291c <__aeabi_dsub+0x564>
 80025ee:	2a1f      	cmp	r2, #31
 80025f0:	dd00      	ble.n	80025f4 <__aeabi_dsub+0x23c>
 80025f2:	e224      	b.n	8002a3e <__aeabi_dsub+0x686>
 80025f4:	2620      	movs	r6, #32
 80025f6:	1ab4      	subs	r4, r6, r2
 80025f8:	46a2      	mov	sl, r4
 80025fa:	4664      	mov	r4, ip
 80025fc:	4656      	mov	r6, sl
 80025fe:	40b4      	lsls	r4, r6
 8002600:	46a1      	mov	r9, r4
 8002602:	001c      	movs	r4, r3
 8002604:	464e      	mov	r6, r9
 8002606:	40d4      	lsrs	r4, r2
 8002608:	4326      	orrs	r6, r4
 800260a:	0034      	movs	r4, r6
 800260c:	4656      	mov	r6, sl
 800260e:	40b3      	lsls	r3, r6
 8002610:	1e5e      	subs	r6, r3, #1
 8002612:	41b3      	sbcs	r3, r6
 8002614:	431c      	orrs	r4, r3
 8002616:	4663      	mov	r3, ip
 8002618:	40d3      	lsrs	r3, r2
 800261a:	18c9      	adds	r1, r1, r3
 800261c:	19e4      	adds	r4, r4, r7
 800261e:	42bc      	cmp	r4, r7
 8002620:	41bf      	sbcs	r7, r7
 8002622:	427f      	negs	r7, r7
 8002624:	46b9      	mov	r9, r7
 8002626:	4680      	mov	r8, r0
 8002628:	4489      	add	r9, r1
 800262a:	e0d8      	b.n	80027de <__aeabi_dsub+0x426>
 800262c:	4640      	mov	r0, r8
 800262e:	4c3b      	ldr	r4, [pc, #236]	; (800271c <__aeabi_dsub+0x364>)
 8002630:	3001      	adds	r0, #1
 8002632:	4220      	tst	r0, r4
 8002634:	d000      	beq.n	8002638 <__aeabi_dsub+0x280>
 8002636:	e0b4      	b.n	80027a2 <__aeabi_dsub+0x3ea>
 8002638:	4640      	mov	r0, r8
 800263a:	2800      	cmp	r0, #0
 800263c:	d000      	beq.n	8002640 <__aeabi_dsub+0x288>
 800263e:	e144      	b.n	80028ca <__aeabi_dsub+0x512>
 8002640:	4660      	mov	r0, ip
 8002642:	4318      	orrs	r0, r3
 8002644:	d100      	bne.n	8002648 <__aeabi_dsub+0x290>
 8002646:	e190      	b.n	800296a <__aeabi_dsub+0x5b2>
 8002648:	0008      	movs	r0, r1
 800264a:	4338      	orrs	r0, r7
 800264c:	d000      	beq.n	8002650 <__aeabi_dsub+0x298>
 800264e:	e1aa      	b.n	80029a6 <__aeabi_dsub+0x5ee>
 8002650:	4661      	mov	r1, ip
 8002652:	08db      	lsrs	r3, r3, #3
 8002654:	0749      	lsls	r1, r1, #29
 8002656:	430b      	orrs	r3, r1
 8002658:	4661      	mov	r1, ip
 800265a:	08cc      	lsrs	r4, r1, #3
 800265c:	e027      	b.n	80026ae <__aeabi_dsub+0x2f6>
 800265e:	0008      	movs	r0, r1
 8002660:	4338      	orrs	r0, r7
 8002662:	d061      	beq.n	8002728 <__aeabi_dsub+0x370>
 8002664:	1e50      	subs	r0, r2, #1
 8002666:	2a01      	cmp	r2, #1
 8002668:	d100      	bne.n	800266c <__aeabi_dsub+0x2b4>
 800266a:	e139      	b.n	80028e0 <__aeabi_dsub+0x528>
 800266c:	42a2      	cmp	r2, r4
 800266e:	d027      	beq.n	80026c0 <__aeabi_dsub+0x308>
 8002670:	0002      	movs	r2, r0
 8002672:	e75d      	b.n	8002530 <__aeabi_dsub+0x178>
 8002674:	0002      	movs	r2, r0
 8002676:	391f      	subs	r1, #31
 8002678:	40ca      	lsrs	r2, r1
 800267a:	0011      	movs	r1, r2
 800267c:	2b20      	cmp	r3, #32
 800267e:	d003      	beq.n	8002688 <__aeabi_dsub+0x2d0>
 8002680:	2240      	movs	r2, #64	; 0x40
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	4098      	lsls	r0, r3
 8002686:	4304      	orrs	r4, r0
 8002688:	1e63      	subs	r3, r4, #1
 800268a:	419c      	sbcs	r4, r3
 800268c:	2300      	movs	r3, #0
 800268e:	4699      	mov	r9, r3
 8002690:	4698      	mov	r8, r3
 8002692:	430c      	orrs	r4, r1
 8002694:	0763      	lsls	r3, r4, #29
 8002696:	d000      	beq.n	800269a <__aeabi_dsub+0x2e2>
 8002698:	e712      	b.n	80024c0 <__aeabi_dsub+0x108>
 800269a:	464b      	mov	r3, r9
 800269c:	464a      	mov	r2, r9
 800269e:	08e4      	lsrs	r4, r4, #3
 80026a0:	075b      	lsls	r3, r3, #29
 80026a2:	4323      	orrs	r3, r4
 80026a4:	08d4      	lsrs	r4, r2, #3
 80026a6:	4642      	mov	r2, r8
 80026a8:	4919      	ldr	r1, [pc, #100]	; (8002710 <__aeabi_dsub+0x358>)
 80026aa:	428a      	cmp	r2, r1
 80026ac:	d00e      	beq.n	80026cc <__aeabi_dsub+0x314>
 80026ae:	0324      	lsls	r4, r4, #12
 80026b0:	0552      	lsls	r2, r2, #21
 80026b2:	0b24      	lsrs	r4, r4, #12
 80026b4:	0d52      	lsrs	r2, r2, #21
 80026b6:	e722      	b.n	80024fe <__aeabi_dsub+0x146>
 80026b8:	000a      	movs	r2, r1
 80026ba:	2400      	movs	r4, #0
 80026bc:	2300      	movs	r3, #0
 80026be:	e71e      	b.n	80024fe <__aeabi_dsub+0x146>
 80026c0:	08db      	lsrs	r3, r3, #3
 80026c2:	4662      	mov	r2, ip
 80026c4:	0752      	lsls	r2, r2, #29
 80026c6:	4313      	orrs	r3, r2
 80026c8:	4662      	mov	r2, ip
 80026ca:	08d4      	lsrs	r4, r2, #3
 80026cc:	001a      	movs	r2, r3
 80026ce:	4322      	orrs	r2, r4
 80026d0:	d100      	bne.n	80026d4 <__aeabi_dsub+0x31c>
 80026d2:	e1fc      	b.n	8002ace <__aeabi_dsub+0x716>
 80026d4:	2280      	movs	r2, #128	; 0x80
 80026d6:	0312      	lsls	r2, r2, #12
 80026d8:	4314      	orrs	r4, r2
 80026da:	0324      	lsls	r4, r4, #12
 80026dc:	4a0c      	ldr	r2, [pc, #48]	; (8002710 <__aeabi_dsub+0x358>)
 80026de:	0b24      	lsrs	r4, r4, #12
 80026e0:	e70d      	b.n	80024fe <__aeabi_dsub+0x146>
 80026e2:	0020      	movs	r0, r4
 80026e4:	f000 face 	bl	8002c84 <__clzsi2>
 80026e8:	0001      	movs	r1, r0
 80026ea:	3118      	adds	r1, #24
 80026ec:	291f      	cmp	r1, #31
 80026ee:	dc00      	bgt.n	80026f2 <__aeabi_dsub+0x33a>
 80026f0:	e6c4      	b.n	800247c <__aeabi_dsub+0xc4>
 80026f2:	3808      	subs	r0, #8
 80026f4:	4084      	lsls	r4, r0
 80026f6:	4643      	mov	r3, r8
 80026f8:	0020      	movs	r0, r4
 80026fa:	2400      	movs	r4, #0
 80026fc:	4588      	cmp	r8, r1
 80026fe:	dc00      	bgt.n	8002702 <__aeabi_dsub+0x34a>
 8002700:	e6c8      	b.n	8002494 <__aeabi_dsub+0xdc>
 8002702:	4a04      	ldr	r2, [pc, #16]	; (8002714 <__aeabi_dsub+0x35c>)
 8002704:	1a5b      	subs	r3, r3, r1
 8002706:	4010      	ands	r0, r2
 8002708:	4698      	mov	r8, r3
 800270a:	4681      	mov	r9, r0
 800270c:	e6d6      	b.n	80024bc <__aeabi_dsub+0x104>
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	000007ff 	.word	0x000007ff
 8002714:	ff7fffff 	.word	0xff7fffff
 8002718:	fffff801 	.word	0xfffff801
 800271c:	000007fe 	.word	0x000007fe
 8002720:	430f      	orrs	r7, r1
 8002722:	1e7a      	subs	r2, r7, #1
 8002724:	4197      	sbcs	r7, r2
 8002726:	e691      	b.n	800244c <__aeabi_dsub+0x94>
 8002728:	4661      	mov	r1, ip
 800272a:	08db      	lsrs	r3, r3, #3
 800272c:	0749      	lsls	r1, r1, #29
 800272e:	430b      	orrs	r3, r1
 8002730:	4661      	mov	r1, ip
 8002732:	08cc      	lsrs	r4, r1, #3
 8002734:	e7b8      	b.n	80026a8 <__aeabi_dsub+0x2f0>
 8002736:	4640      	mov	r0, r8
 8002738:	4cd3      	ldr	r4, [pc, #844]	; (8002a88 <__aeabi_dsub+0x6d0>)
 800273a:	3001      	adds	r0, #1
 800273c:	4220      	tst	r0, r4
 800273e:	d000      	beq.n	8002742 <__aeabi_dsub+0x38a>
 8002740:	e0a2      	b.n	8002888 <__aeabi_dsub+0x4d0>
 8002742:	4640      	mov	r0, r8
 8002744:	2800      	cmp	r0, #0
 8002746:	d000      	beq.n	800274a <__aeabi_dsub+0x392>
 8002748:	e101      	b.n	800294e <__aeabi_dsub+0x596>
 800274a:	4660      	mov	r0, ip
 800274c:	4318      	orrs	r0, r3
 800274e:	d100      	bne.n	8002752 <__aeabi_dsub+0x39a>
 8002750:	e15e      	b.n	8002a10 <__aeabi_dsub+0x658>
 8002752:	0008      	movs	r0, r1
 8002754:	4338      	orrs	r0, r7
 8002756:	d000      	beq.n	800275a <__aeabi_dsub+0x3a2>
 8002758:	e15f      	b.n	8002a1a <__aeabi_dsub+0x662>
 800275a:	4661      	mov	r1, ip
 800275c:	08db      	lsrs	r3, r3, #3
 800275e:	0749      	lsls	r1, r1, #29
 8002760:	430b      	orrs	r3, r1
 8002762:	4661      	mov	r1, ip
 8002764:	08cc      	lsrs	r4, r1, #3
 8002766:	e7a2      	b.n	80026ae <__aeabi_dsub+0x2f6>
 8002768:	4dc8      	ldr	r5, [pc, #800]	; (8002a8c <__aeabi_dsub+0x6d4>)
 800276a:	42a8      	cmp	r0, r5
 800276c:	d100      	bne.n	8002770 <__aeabi_dsub+0x3b8>
 800276e:	e0cf      	b.n	8002910 <__aeabi_dsub+0x558>
 8002770:	2580      	movs	r5, #128	; 0x80
 8002772:	4664      	mov	r4, ip
 8002774:	042d      	lsls	r5, r5, #16
 8002776:	432c      	orrs	r4, r5
 8002778:	46a4      	mov	ip, r4
 800277a:	2a38      	cmp	r2, #56	; 0x38
 800277c:	dc56      	bgt.n	800282c <__aeabi_dsub+0x474>
 800277e:	2a1f      	cmp	r2, #31
 8002780:	dd00      	ble.n	8002784 <__aeabi_dsub+0x3cc>
 8002782:	e0d1      	b.n	8002928 <__aeabi_dsub+0x570>
 8002784:	2520      	movs	r5, #32
 8002786:	001e      	movs	r6, r3
 8002788:	1aad      	subs	r5, r5, r2
 800278a:	4664      	mov	r4, ip
 800278c:	40ab      	lsls	r3, r5
 800278e:	40ac      	lsls	r4, r5
 8002790:	40d6      	lsrs	r6, r2
 8002792:	1e5d      	subs	r5, r3, #1
 8002794:	41ab      	sbcs	r3, r5
 8002796:	4334      	orrs	r4, r6
 8002798:	4323      	orrs	r3, r4
 800279a:	4664      	mov	r4, ip
 800279c:	40d4      	lsrs	r4, r2
 800279e:	1b09      	subs	r1, r1, r4
 80027a0:	e049      	b.n	8002836 <__aeabi_dsub+0x47e>
 80027a2:	4660      	mov	r0, ip
 80027a4:	1bdc      	subs	r4, r3, r7
 80027a6:	1a46      	subs	r6, r0, r1
 80027a8:	42a3      	cmp	r3, r4
 80027aa:	4180      	sbcs	r0, r0
 80027ac:	4240      	negs	r0, r0
 80027ae:	4681      	mov	r9, r0
 80027b0:	0030      	movs	r0, r6
 80027b2:	464e      	mov	r6, r9
 80027b4:	1b80      	subs	r0, r0, r6
 80027b6:	4681      	mov	r9, r0
 80027b8:	0200      	lsls	r0, r0, #8
 80027ba:	d476      	bmi.n	80028aa <__aeabi_dsub+0x4f2>
 80027bc:	464b      	mov	r3, r9
 80027be:	4323      	orrs	r3, r4
 80027c0:	d000      	beq.n	80027c4 <__aeabi_dsub+0x40c>
 80027c2:	e652      	b.n	800246a <__aeabi_dsub+0xb2>
 80027c4:	2400      	movs	r4, #0
 80027c6:	2500      	movs	r5, #0
 80027c8:	e771      	b.n	80026ae <__aeabi_dsub+0x2f6>
 80027ca:	4339      	orrs	r1, r7
 80027cc:	000c      	movs	r4, r1
 80027ce:	1e62      	subs	r2, r4, #1
 80027d0:	4194      	sbcs	r4, r2
 80027d2:	18e4      	adds	r4, r4, r3
 80027d4:	429c      	cmp	r4, r3
 80027d6:	419b      	sbcs	r3, r3
 80027d8:	425b      	negs	r3, r3
 80027da:	4463      	add	r3, ip
 80027dc:	4699      	mov	r9, r3
 80027de:	464b      	mov	r3, r9
 80027e0:	021b      	lsls	r3, r3, #8
 80027e2:	d400      	bmi.n	80027e6 <__aeabi_dsub+0x42e>
 80027e4:	e756      	b.n	8002694 <__aeabi_dsub+0x2dc>
 80027e6:	2301      	movs	r3, #1
 80027e8:	469c      	mov	ip, r3
 80027ea:	4ba8      	ldr	r3, [pc, #672]	; (8002a8c <__aeabi_dsub+0x6d4>)
 80027ec:	44e0      	add	r8, ip
 80027ee:	4598      	cmp	r8, r3
 80027f0:	d038      	beq.n	8002864 <__aeabi_dsub+0x4ac>
 80027f2:	464b      	mov	r3, r9
 80027f4:	48a6      	ldr	r0, [pc, #664]	; (8002a90 <__aeabi_dsub+0x6d8>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	4003      	ands	r3, r0
 80027fa:	0018      	movs	r0, r3
 80027fc:	0863      	lsrs	r3, r4, #1
 80027fe:	4014      	ands	r4, r2
 8002800:	431c      	orrs	r4, r3
 8002802:	07c3      	lsls	r3, r0, #31
 8002804:	431c      	orrs	r4, r3
 8002806:	0843      	lsrs	r3, r0, #1
 8002808:	4699      	mov	r9, r3
 800280a:	e657      	b.n	80024bc <__aeabi_dsub+0x104>
 800280c:	0010      	movs	r0, r2
 800280e:	000e      	movs	r6, r1
 8002810:	3820      	subs	r0, #32
 8002812:	40c6      	lsrs	r6, r0
 8002814:	2a20      	cmp	r2, #32
 8002816:	d004      	beq.n	8002822 <__aeabi_dsub+0x46a>
 8002818:	2040      	movs	r0, #64	; 0x40
 800281a:	1a82      	subs	r2, r0, r2
 800281c:	4091      	lsls	r1, r2
 800281e:	430f      	orrs	r7, r1
 8002820:	46b9      	mov	r9, r7
 8002822:	464f      	mov	r7, r9
 8002824:	1e7a      	subs	r2, r7, #1
 8002826:	4197      	sbcs	r7, r2
 8002828:	4337      	orrs	r7, r6
 800282a:	e60f      	b.n	800244c <__aeabi_dsub+0x94>
 800282c:	4662      	mov	r2, ip
 800282e:	431a      	orrs	r2, r3
 8002830:	0013      	movs	r3, r2
 8002832:	1e5a      	subs	r2, r3, #1
 8002834:	4193      	sbcs	r3, r2
 8002836:	1afc      	subs	r4, r7, r3
 8002838:	42a7      	cmp	r7, r4
 800283a:	41bf      	sbcs	r7, r7
 800283c:	427f      	negs	r7, r7
 800283e:	1bcb      	subs	r3, r1, r7
 8002840:	4699      	mov	r9, r3
 8002842:	465d      	mov	r5, fp
 8002844:	4680      	mov	r8, r0
 8002846:	e608      	b.n	800245a <__aeabi_dsub+0xa2>
 8002848:	4666      	mov	r6, ip
 800284a:	431e      	orrs	r6, r3
 800284c:	d100      	bne.n	8002850 <__aeabi_dsub+0x498>
 800284e:	e0be      	b.n	80029ce <__aeabi_dsub+0x616>
 8002850:	1e56      	subs	r6, r2, #1
 8002852:	2a01      	cmp	r2, #1
 8002854:	d100      	bne.n	8002858 <__aeabi_dsub+0x4a0>
 8002856:	e109      	b.n	8002a6c <__aeabi_dsub+0x6b4>
 8002858:	4c8c      	ldr	r4, [pc, #560]	; (8002a8c <__aeabi_dsub+0x6d4>)
 800285a:	42a2      	cmp	r2, r4
 800285c:	d100      	bne.n	8002860 <__aeabi_dsub+0x4a8>
 800285e:	e119      	b.n	8002a94 <__aeabi_dsub+0x6dc>
 8002860:	0032      	movs	r2, r6
 8002862:	e6c1      	b.n	80025e8 <__aeabi_dsub+0x230>
 8002864:	4642      	mov	r2, r8
 8002866:	2400      	movs	r4, #0
 8002868:	2300      	movs	r3, #0
 800286a:	e648      	b.n	80024fe <__aeabi_dsub+0x146>
 800286c:	2020      	movs	r0, #32
 800286e:	000c      	movs	r4, r1
 8002870:	1a80      	subs	r0, r0, r2
 8002872:	003e      	movs	r6, r7
 8002874:	4087      	lsls	r7, r0
 8002876:	4084      	lsls	r4, r0
 8002878:	40d6      	lsrs	r6, r2
 800287a:	1e78      	subs	r0, r7, #1
 800287c:	4187      	sbcs	r7, r0
 800287e:	40d1      	lsrs	r1, r2
 8002880:	4334      	orrs	r4, r6
 8002882:	433c      	orrs	r4, r7
 8002884:	448c      	add	ip, r1
 8002886:	e7a4      	b.n	80027d2 <__aeabi_dsub+0x41a>
 8002888:	4a80      	ldr	r2, [pc, #512]	; (8002a8c <__aeabi_dsub+0x6d4>)
 800288a:	4290      	cmp	r0, r2
 800288c:	d100      	bne.n	8002890 <__aeabi_dsub+0x4d8>
 800288e:	e0e9      	b.n	8002a64 <__aeabi_dsub+0x6ac>
 8002890:	19df      	adds	r7, r3, r7
 8002892:	429f      	cmp	r7, r3
 8002894:	419b      	sbcs	r3, r3
 8002896:	4461      	add	r1, ip
 8002898:	425b      	negs	r3, r3
 800289a:	18c9      	adds	r1, r1, r3
 800289c:	07cc      	lsls	r4, r1, #31
 800289e:	087f      	lsrs	r7, r7, #1
 80028a0:	084b      	lsrs	r3, r1, #1
 80028a2:	4699      	mov	r9, r3
 80028a4:	4680      	mov	r8, r0
 80028a6:	433c      	orrs	r4, r7
 80028a8:	e6f4      	b.n	8002694 <__aeabi_dsub+0x2dc>
 80028aa:	1afc      	subs	r4, r7, r3
 80028ac:	42a7      	cmp	r7, r4
 80028ae:	41bf      	sbcs	r7, r7
 80028b0:	4663      	mov	r3, ip
 80028b2:	427f      	negs	r7, r7
 80028b4:	1ac9      	subs	r1, r1, r3
 80028b6:	1bcb      	subs	r3, r1, r7
 80028b8:	4699      	mov	r9, r3
 80028ba:	465d      	mov	r5, fp
 80028bc:	e5d5      	b.n	800246a <__aeabi_dsub+0xb2>
 80028be:	08ff      	lsrs	r7, r7, #3
 80028c0:	074b      	lsls	r3, r1, #29
 80028c2:	465d      	mov	r5, fp
 80028c4:	433b      	orrs	r3, r7
 80028c6:	08cc      	lsrs	r4, r1, #3
 80028c8:	e6ee      	b.n	80026a8 <__aeabi_dsub+0x2f0>
 80028ca:	4662      	mov	r2, ip
 80028cc:	431a      	orrs	r2, r3
 80028ce:	d000      	beq.n	80028d2 <__aeabi_dsub+0x51a>
 80028d0:	e082      	b.n	80029d8 <__aeabi_dsub+0x620>
 80028d2:	000b      	movs	r3, r1
 80028d4:	433b      	orrs	r3, r7
 80028d6:	d11b      	bne.n	8002910 <__aeabi_dsub+0x558>
 80028d8:	2480      	movs	r4, #128	; 0x80
 80028da:	2500      	movs	r5, #0
 80028dc:	0324      	lsls	r4, r4, #12
 80028de:	e6f9      	b.n	80026d4 <__aeabi_dsub+0x31c>
 80028e0:	19dc      	adds	r4, r3, r7
 80028e2:	429c      	cmp	r4, r3
 80028e4:	419b      	sbcs	r3, r3
 80028e6:	4461      	add	r1, ip
 80028e8:	4689      	mov	r9, r1
 80028ea:	425b      	negs	r3, r3
 80028ec:	4499      	add	r9, r3
 80028ee:	464b      	mov	r3, r9
 80028f0:	021b      	lsls	r3, r3, #8
 80028f2:	d444      	bmi.n	800297e <__aeabi_dsub+0x5c6>
 80028f4:	2301      	movs	r3, #1
 80028f6:	4698      	mov	r8, r3
 80028f8:	e6cc      	b.n	8002694 <__aeabi_dsub+0x2dc>
 80028fa:	1bdc      	subs	r4, r3, r7
 80028fc:	4662      	mov	r2, ip
 80028fe:	42a3      	cmp	r3, r4
 8002900:	419b      	sbcs	r3, r3
 8002902:	1a51      	subs	r1, r2, r1
 8002904:	425b      	negs	r3, r3
 8002906:	1acb      	subs	r3, r1, r3
 8002908:	4699      	mov	r9, r3
 800290a:	2301      	movs	r3, #1
 800290c:	4698      	mov	r8, r3
 800290e:	e5a4      	b.n	800245a <__aeabi_dsub+0xa2>
 8002910:	08ff      	lsrs	r7, r7, #3
 8002912:	074b      	lsls	r3, r1, #29
 8002914:	465d      	mov	r5, fp
 8002916:	433b      	orrs	r3, r7
 8002918:	08cc      	lsrs	r4, r1, #3
 800291a:	e6d7      	b.n	80026cc <__aeabi_dsub+0x314>
 800291c:	4662      	mov	r2, ip
 800291e:	431a      	orrs	r2, r3
 8002920:	0014      	movs	r4, r2
 8002922:	1e63      	subs	r3, r4, #1
 8002924:	419c      	sbcs	r4, r3
 8002926:	e679      	b.n	800261c <__aeabi_dsub+0x264>
 8002928:	0015      	movs	r5, r2
 800292a:	4664      	mov	r4, ip
 800292c:	3d20      	subs	r5, #32
 800292e:	40ec      	lsrs	r4, r5
 8002930:	46a0      	mov	r8, r4
 8002932:	2a20      	cmp	r2, #32
 8002934:	d005      	beq.n	8002942 <__aeabi_dsub+0x58a>
 8002936:	2540      	movs	r5, #64	; 0x40
 8002938:	4664      	mov	r4, ip
 800293a:	1aaa      	subs	r2, r5, r2
 800293c:	4094      	lsls	r4, r2
 800293e:	4323      	orrs	r3, r4
 8002940:	469a      	mov	sl, r3
 8002942:	4654      	mov	r4, sl
 8002944:	1e63      	subs	r3, r4, #1
 8002946:	419c      	sbcs	r4, r3
 8002948:	4643      	mov	r3, r8
 800294a:	4323      	orrs	r3, r4
 800294c:	e773      	b.n	8002836 <__aeabi_dsub+0x47e>
 800294e:	4662      	mov	r2, ip
 8002950:	431a      	orrs	r2, r3
 8002952:	d023      	beq.n	800299c <__aeabi_dsub+0x5e4>
 8002954:	000a      	movs	r2, r1
 8002956:	433a      	orrs	r2, r7
 8002958:	d000      	beq.n	800295c <__aeabi_dsub+0x5a4>
 800295a:	e0a0      	b.n	8002a9e <__aeabi_dsub+0x6e6>
 800295c:	4662      	mov	r2, ip
 800295e:	08db      	lsrs	r3, r3, #3
 8002960:	0752      	lsls	r2, r2, #29
 8002962:	4313      	orrs	r3, r2
 8002964:	4662      	mov	r2, ip
 8002966:	08d4      	lsrs	r4, r2, #3
 8002968:	e6b0      	b.n	80026cc <__aeabi_dsub+0x314>
 800296a:	000b      	movs	r3, r1
 800296c:	433b      	orrs	r3, r7
 800296e:	d100      	bne.n	8002972 <__aeabi_dsub+0x5ba>
 8002970:	e728      	b.n	80027c4 <__aeabi_dsub+0x40c>
 8002972:	08ff      	lsrs	r7, r7, #3
 8002974:	074b      	lsls	r3, r1, #29
 8002976:	465d      	mov	r5, fp
 8002978:	433b      	orrs	r3, r7
 800297a:	08cc      	lsrs	r4, r1, #3
 800297c:	e697      	b.n	80026ae <__aeabi_dsub+0x2f6>
 800297e:	2302      	movs	r3, #2
 8002980:	4698      	mov	r8, r3
 8002982:	e736      	b.n	80027f2 <__aeabi_dsub+0x43a>
 8002984:	1afc      	subs	r4, r7, r3
 8002986:	42a7      	cmp	r7, r4
 8002988:	41bf      	sbcs	r7, r7
 800298a:	4663      	mov	r3, ip
 800298c:	427f      	negs	r7, r7
 800298e:	1ac9      	subs	r1, r1, r3
 8002990:	1bcb      	subs	r3, r1, r7
 8002992:	4699      	mov	r9, r3
 8002994:	2301      	movs	r3, #1
 8002996:	465d      	mov	r5, fp
 8002998:	4698      	mov	r8, r3
 800299a:	e55e      	b.n	800245a <__aeabi_dsub+0xa2>
 800299c:	074b      	lsls	r3, r1, #29
 800299e:	08ff      	lsrs	r7, r7, #3
 80029a0:	433b      	orrs	r3, r7
 80029a2:	08cc      	lsrs	r4, r1, #3
 80029a4:	e692      	b.n	80026cc <__aeabi_dsub+0x314>
 80029a6:	1bdc      	subs	r4, r3, r7
 80029a8:	4660      	mov	r0, ip
 80029aa:	42a3      	cmp	r3, r4
 80029ac:	41b6      	sbcs	r6, r6
 80029ae:	1a40      	subs	r0, r0, r1
 80029b0:	4276      	negs	r6, r6
 80029b2:	1b80      	subs	r0, r0, r6
 80029b4:	4681      	mov	r9, r0
 80029b6:	0200      	lsls	r0, r0, #8
 80029b8:	d560      	bpl.n	8002a7c <__aeabi_dsub+0x6c4>
 80029ba:	1afc      	subs	r4, r7, r3
 80029bc:	42a7      	cmp	r7, r4
 80029be:	41bf      	sbcs	r7, r7
 80029c0:	4663      	mov	r3, ip
 80029c2:	427f      	negs	r7, r7
 80029c4:	1ac9      	subs	r1, r1, r3
 80029c6:	1bcb      	subs	r3, r1, r7
 80029c8:	4699      	mov	r9, r3
 80029ca:	465d      	mov	r5, fp
 80029cc:	e576      	b.n	80024bc <__aeabi_dsub+0x104>
 80029ce:	08ff      	lsrs	r7, r7, #3
 80029d0:	074b      	lsls	r3, r1, #29
 80029d2:	433b      	orrs	r3, r7
 80029d4:	08cc      	lsrs	r4, r1, #3
 80029d6:	e667      	b.n	80026a8 <__aeabi_dsub+0x2f0>
 80029d8:	000a      	movs	r2, r1
 80029da:	08db      	lsrs	r3, r3, #3
 80029dc:	433a      	orrs	r2, r7
 80029de:	d100      	bne.n	80029e2 <__aeabi_dsub+0x62a>
 80029e0:	e66f      	b.n	80026c2 <__aeabi_dsub+0x30a>
 80029e2:	4662      	mov	r2, ip
 80029e4:	0752      	lsls	r2, r2, #29
 80029e6:	4313      	orrs	r3, r2
 80029e8:	4662      	mov	r2, ip
 80029ea:	08d4      	lsrs	r4, r2, #3
 80029ec:	2280      	movs	r2, #128	; 0x80
 80029ee:	0312      	lsls	r2, r2, #12
 80029f0:	4214      	tst	r4, r2
 80029f2:	d007      	beq.n	8002a04 <__aeabi_dsub+0x64c>
 80029f4:	08c8      	lsrs	r0, r1, #3
 80029f6:	4210      	tst	r0, r2
 80029f8:	d104      	bne.n	8002a04 <__aeabi_dsub+0x64c>
 80029fa:	465d      	mov	r5, fp
 80029fc:	0004      	movs	r4, r0
 80029fe:	08fb      	lsrs	r3, r7, #3
 8002a00:	0749      	lsls	r1, r1, #29
 8002a02:	430b      	orrs	r3, r1
 8002a04:	0f5a      	lsrs	r2, r3, #29
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	08db      	lsrs	r3, r3, #3
 8002a0a:	0752      	lsls	r2, r2, #29
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	e65d      	b.n	80026cc <__aeabi_dsub+0x314>
 8002a10:	074b      	lsls	r3, r1, #29
 8002a12:	08ff      	lsrs	r7, r7, #3
 8002a14:	433b      	orrs	r3, r7
 8002a16:	08cc      	lsrs	r4, r1, #3
 8002a18:	e649      	b.n	80026ae <__aeabi_dsub+0x2f6>
 8002a1a:	19dc      	adds	r4, r3, r7
 8002a1c:	429c      	cmp	r4, r3
 8002a1e:	419b      	sbcs	r3, r3
 8002a20:	4461      	add	r1, ip
 8002a22:	4689      	mov	r9, r1
 8002a24:	425b      	negs	r3, r3
 8002a26:	4499      	add	r9, r3
 8002a28:	464b      	mov	r3, r9
 8002a2a:	021b      	lsls	r3, r3, #8
 8002a2c:	d400      	bmi.n	8002a30 <__aeabi_dsub+0x678>
 8002a2e:	e631      	b.n	8002694 <__aeabi_dsub+0x2dc>
 8002a30:	464a      	mov	r2, r9
 8002a32:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <__aeabi_dsub+0x6d8>)
 8002a34:	401a      	ands	r2, r3
 8002a36:	2301      	movs	r3, #1
 8002a38:	4691      	mov	r9, r2
 8002a3a:	4698      	mov	r8, r3
 8002a3c:	e62a      	b.n	8002694 <__aeabi_dsub+0x2dc>
 8002a3e:	0016      	movs	r6, r2
 8002a40:	4664      	mov	r4, ip
 8002a42:	3e20      	subs	r6, #32
 8002a44:	40f4      	lsrs	r4, r6
 8002a46:	46a0      	mov	r8, r4
 8002a48:	2a20      	cmp	r2, #32
 8002a4a:	d005      	beq.n	8002a58 <__aeabi_dsub+0x6a0>
 8002a4c:	2640      	movs	r6, #64	; 0x40
 8002a4e:	4664      	mov	r4, ip
 8002a50:	1ab2      	subs	r2, r6, r2
 8002a52:	4094      	lsls	r4, r2
 8002a54:	4323      	orrs	r3, r4
 8002a56:	469a      	mov	sl, r3
 8002a58:	4654      	mov	r4, sl
 8002a5a:	1e63      	subs	r3, r4, #1
 8002a5c:	419c      	sbcs	r4, r3
 8002a5e:	4643      	mov	r3, r8
 8002a60:	431c      	orrs	r4, r3
 8002a62:	e5db      	b.n	800261c <__aeabi_dsub+0x264>
 8002a64:	0002      	movs	r2, r0
 8002a66:	2400      	movs	r4, #0
 8002a68:	2300      	movs	r3, #0
 8002a6a:	e548      	b.n	80024fe <__aeabi_dsub+0x146>
 8002a6c:	19dc      	adds	r4, r3, r7
 8002a6e:	42bc      	cmp	r4, r7
 8002a70:	41bf      	sbcs	r7, r7
 8002a72:	4461      	add	r1, ip
 8002a74:	4689      	mov	r9, r1
 8002a76:	427f      	negs	r7, r7
 8002a78:	44b9      	add	r9, r7
 8002a7a:	e738      	b.n	80028ee <__aeabi_dsub+0x536>
 8002a7c:	464b      	mov	r3, r9
 8002a7e:	4323      	orrs	r3, r4
 8002a80:	d100      	bne.n	8002a84 <__aeabi_dsub+0x6cc>
 8002a82:	e69f      	b.n	80027c4 <__aeabi_dsub+0x40c>
 8002a84:	e606      	b.n	8002694 <__aeabi_dsub+0x2dc>
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	000007fe 	.word	0x000007fe
 8002a8c:	000007ff 	.word	0x000007ff
 8002a90:	ff7fffff 	.word	0xff7fffff
 8002a94:	08ff      	lsrs	r7, r7, #3
 8002a96:	074b      	lsls	r3, r1, #29
 8002a98:	433b      	orrs	r3, r7
 8002a9a:	08cc      	lsrs	r4, r1, #3
 8002a9c:	e616      	b.n	80026cc <__aeabi_dsub+0x314>
 8002a9e:	4662      	mov	r2, ip
 8002aa0:	08db      	lsrs	r3, r3, #3
 8002aa2:	0752      	lsls	r2, r2, #29
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	4662      	mov	r2, ip
 8002aa8:	08d4      	lsrs	r4, r2, #3
 8002aaa:	2280      	movs	r2, #128	; 0x80
 8002aac:	0312      	lsls	r2, r2, #12
 8002aae:	4214      	tst	r4, r2
 8002ab0:	d007      	beq.n	8002ac2 <__aeabi_dsub+0x70a>
 8002ab2:	08c8      	lsrs	r0, r1, #3
 8002ab4:	4210      	tst	r0, r2
 8002ab6:	d104      	bne.n	8002ac2 <__aeabi_dsub+0x70a>
 8002ab8:	465d      	mov	r5, fp
 8002aba:	0004      	movs	r4, r0
 8002abc:	08fb      	lsrs	r3, r7, #3
 8002abe:	0749      	lsls	r1, r1, #29
 8002ac0:	430b      	orrs	r3, r1
 8002ac2:	0f5a      	lsrs	r2, r3, #29
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	0752      	lsls	r2, r2, #29
 8002ac8:	08db      	lsrs	r3, r3, #3
 8002aca:	4313      	orrs	r3, r2
 8002acc:	e5fe      	b.n	80026cc <__aeabi_dsub+0x314>
 8002ace:	2300      	movs	r3, #0
 8002ad0:	4a01      	ldr	r2, [pc, #4]	; (8002ad8 <__aeabi_dsub+0x720>)
 8002ad2:	001c      	movs	r4, r3
 8002ad4:	e513      	b.n	80024fe <__aeabi_dsub+0x146>
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	000007ff 	.word	0x000007ff

08002adc <__aeabi_d2iz>:
 8002adc:	000a      	movs	r2, r1
 8002ade:	b530      	push	{r4, r5, lr}
 8002ae0:	4c13      	ldr	r4, [pc, #76]	; (8002b30 <__aeabi_d2iz+0x54>)
 8002ae2:	0053      	lsls	r3, r2, #1
 8002ae4:	0309      	lsls	r1, r1, #12
 8002ae6:	0005      	movs	r5, r0
 8002ae8:	0b09      	lsrs	r1, r1, #12
 8002aea:	2000      	movs	r0, #0
 8002aec:	0d5b      	lsrs	r3, r3, #21
 8002aee:	0fd2      	lsrs	r2, r2, #31
 8002af0:	42a3      	cmp	r3, r4
 8002af2:	dd04      	ble.n	8002afe <__aeabi_d2iz+0x22>
 8002af4:	480f      	ldr	r0, [pc, #60]	; (8002b34 <__aeabi_d2iz+0x58>)
 8002af6:	4283      	cmp	r3, r0
 8002af8:	dd02      	ble.n	8002b00 <__aeabi_d2iz+0x24>
 8002afa:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <__aeabi_d2iz+0x5c>)
 8002afc:	18d0      	adds	r0, r2, r3
 8002afe:	bd30      	pop	{r4, r5, pc}
 8002b00:	2080      	movs	r0, #128	; 0x80
 8002b02:	0340      	lsls	r0, r0, #13
 8002b04:	4301      	orrs	r1, r0
 8002b06:	480d      	ldr	r0, [pc, #52]	; (8002b3c <__aeabi_d2iz+0x60>)
 8002b08:	1ac0      	subs	r0, r0, r3
 8002b0a:	281f      	cmp	r0, #31
 8002b0c:	dd08      	ble.n	8002b20 <__aeabi_d2iz+0x44>
 8002b0e:	480c      	ldr	r0, [pc, #48]	; (8002b40 <__aeabi_d2iz+0x64>)
 8002b10:	1ac3      	subs	r3, r0, r3
 8002b12:	40d9      	lsrs	r1, r3
 8002b14:	000b      	movs	r3, r1
 8002b16:	4258      	negs	r0, r3
 8002b18:	2a00      	cmp	r2, #0
 8002b1a:	d1f0      	bne.n	8002afe <__aeabi_d2iz+0x22>
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	e7ee      	b.n	8002afe <__aeabi_d2iz+0x22>
 8002b20:	4c08      	ldr	r4, [pc, #32]	; (8002b44 <__aeabi_d2iz+0x68>)
 8002b22:	40c5      	lsrs	r5, r0
 8002b24:	46a4      	mov	ip, r4
 8002b26:	4463      	add	r3, ip
 8002b28:	4099      	lsls	r1, r3
 8002b2a:	000b      	movs	r3, r1
 8002b2c:	432b      	orrs	r3, r5
 8002b2e:	e7f2      	b.n	8002b16 <__aeabi_d2iz+0x3a>
 8002b30:	000003fe 	.word	0x000003fe
 8002b34:	0000041d 	.word	0x0000041d
 8002b38:	7fffffff 	.word	0x7fffffff
 8002b3c:	00000433 	.word	0x00000433
 8002b40:	00000413 	.word	0x00000413
 8002b44:	fffffbed 	.word	0xfffffbed

08002b48 <__aeabi_i2d>:
 8002b48:	b570      	push	{r4, r5, r6, lr}
 8002b4a:	2800      	cmp	r0, #0
 8002b4c:	d016      	beq.n	8002b7c <__aeabi_i2d+0x34>
 8002b4e:	17c3      	asrs	r3, r0, #31
 8002b50:	18c5      	adds	r5, r0, r3
 8002b52:	405d      	eors	r5, r3
 8002b54:	0fc4      	lsrs	r4, r0, #31
 8002b56:	0028      	movs	r0, r5
 8002b58:	f000 f894 	bl	8002c84 <__clzsi2>
 8002b5c:	4a11      	ldr	r2, [pc, #68]	; (8002ba4 <__aeabi_i2d+0x5c>)
 8002b5e:	1a12      	subs	r2, r2, r0
 8002b60:	280a      	cmp	r0, #10
 8002b62:	dc16      	bgt.n	8002b92 <__aeabi_i2d+0x4a>
 8002b64:	0003      	movs	r3, r0
 8002b66:	002e      	movs	r6, r5
 8002b68:	3315      	adds	r3, #21
 8002b6a:	409e      	lsls	r6, r3
 8002b6c:	230b      	movs	r3, #11
 8002b6e:	1a18      	subs	r0, r3, r0
 8002b70:	40c5      	lsrs	r5, r0
 8002b72:	0552      	lsls	r2, r2, #21
 8002b74:	032d      	lsls	r5, r5, #12
 8002b76:	0b2d      	lsrs	r5, r5, #12
 8002b78:	0d53      	lsrs	r3, r2, #21
 8002b7a:	e003      	b.n	8002b84 <__aeabi_i2d+0x3c>
 8002b7c:	2400      	movs	r4, #0
 8002b7e:	2300      	movs	r3, #0
 8002b80:	2500      	movs	r5, #0
 8002b82:	2600      	movs	r6, #0
 8002b84:	051b      	lsls	r3, r3, #20
 8002b86:	432b      	orrs	r3, r5
 8002b88:	07e4      	lsls	r4, r4, #31
 8002b8a:	4323      	orrs	r3, r4
 8002b8c:	0030      	movs	r0, r6
 8002b8e:	0019      	movs	r1, r3
 8002b90:	bd70      	pop	{r4, r5, r6, pc}
 8002b92:	380b      	subs	r0, #11
 8002b94:	4085      	lsls	r5, r0
 8002b96:	0552      	lsls	r2, r2, #21
 8002b98:	032d      	lsls	r5, r5, #12
 8002b9a:	2600      	movs	r6, #0
 8002b9c:	0b2d      	lsrs	r5, r5, #12
 8002b9e:	0d53      	lsrs	r3, r2, #21
 8002ba0:	e7f0      	b.n	8002b84 <__aeabi_i2d+0x3c>
 8002ba2:	46c0      	nop			; (mov r8, r8)
 8002ba4:	0000041e 	.word	0x0000041e

08002ba8 <__aeabi_ui2d>:
 8002ba8:	b510      	push	{r4, lr}
 8002baa:	1e04      	subs	r4, r0, #0
 8002bac:	d010      	beq.n	8002bd0 <__aeabi_ui2d+0x28>
 8002bae:	f000 f869 	bl	8002c84 <__clzsi2>
 8002bb2:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <__aeabi_ui2d+0x48>)
 8002bb4:	1a1b      	subs	r3, r3, r0
 8002bb6:	280a      	cmp	r0, #10
 8002bb8:	dc11      	bgt.n	8002bde <__aeabi_ui2d+0x36>
 8002bba:	220b      	movs	r2, #11
 8002bbc:	0021      	movs	r1, r4
 8002bbe:	1a12      	subs	r2, r2, r0
 8002bc0:	40d1      	lsrs	r1, r2
 8002bc2:	3015      	adds	r0, #21
 8002bc4:	030a      	lsls	r2, r1, #12
 8002bc6:	055b      	lsls	r3, r3, #21
 8002bc8:	4084      	lsls	r4, r0
 8002bca:	0b12      	lsrs	r2, r2, #12
 8002bcc:	0d5b      	lsrs	r3, r3, #21
 8002bce:	e001      	b.n	8002bd4 <__aeabi_ui2d+0x2c>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	051b      	lsls	r3, r3, #20
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	0020      	movs	r0, r4
 8002bda:	0019      	movs	r1, r3
 8002bdc:	bd10      	pop	{r4, pc}
 8002bde:	0022      	movs	r2, r4
 8002be0:	380b      	subs	r0, #11
 8002be2:	4082      	lsls	r2, r0
 8002be4:	055b      	lsls	r3, r3, #21
 8002be6:	0312      	lsls	r2, r2, #12
 8002be8:	2400      	movs	r4, #0
 8002bea:	0b12      	lsrs	r2, r2, #12
 8002bec:	0d5b      	lsrs	r3, r3, #21
 8002bee:	e7f1      	b.n	8002bd4 <__aeabi_ui2d+0x2c>
 8002bf0:	0000041e 	.word	0x0000041e

08002bf4 <__aeabi_f2d>:
 8002bf4:	b570      	push	{r4, r5, r6, lr}
 8002bf6:	0043      	lsls	r3, r0, #1
 8002bf8:	0246      	lsls	r6, r0, #9
 8002bfa:	0fc4      	lsrs	r4, r0, #31
 8002bfc:	20fe      	movs	r0, #254	; 0xfe
 8002bfe:	0e1b      	lsrs	r3, r3, #24
 8002c00:	1c59      	adds	r1, r3, #1
 8002c02:	0a75      	lsrs	r5, r6, #9
 8002c04:	4208      	tst	r0, r1
 8002c06:	d00c      	beq.n	8002c22 <__aeabi_f2d+0x2e>
 8002c08:	22e0      	movs	r2, #224	; 0xe0
 8002c0a:	0092      	lsls	r2, r2, #2
 8002c0c:	4694      	mov	ip, r2
 8002c0e:	076d      	lsls	r5, r5, #29
 8002c10:	0b36      	lsrs	r6, r6, #12
 8002c12:	4463      	add	r3, ip
 8002c14:	051b      	lsls	r3, r3, #20
 8002c16:	4333      	orrs	r3, r6
 8002c18:	07e4      	lsls	r4, r4, #31
 8002c1a:	4323      	orrs	r3, r4
 8002c1c:	0028      	movs	r0, r5
 8002c1e:	0019      	movs	r1, r3
 8002c20:	bd70      	pop	{r4, r5, r6, pc}
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d114      	bne.n	8002c50 <__aeabi_f2d+0x5c>
 8002c26:	2d00      	cmp	r5, #0
 8002c28:	d01b      	beq.n	8002c62 <__aeabi_f2d+0x6e>
 8002c2a:	0028      	movs	r0, r5
 8002c2c:	f000 f82a 	bl	8002c84 <__clzsi2>
 8002c30:	280a      	cmp	r0, #10
 8002c32:	dc1c      	bgt.n	8002c6e <__aeabi_f2d+0x7a>
 8002c34:	230b      	movs	r3, #11
 8002c36:	002e      	movs	r6, r5
 8002c38:	1a1b      	subs	r3, r3, r0
 8002c3a:	40de      	lsrs	r6, r3
 8002c3c:	0003      	movs	r3, r0
 8002c3e:	3315      	adds	r3, #21
 8002c40:	409d      	lsls	r5, r3
 8002c42:	4a0e      	ldr	r2, [pc, #56]	; (8002c7c <__aeabi_f2d+0x88>)
 8002c44:	0336      	lsls	r6, r6, #12
 8002c46:	1a12      	subs	r2, r2, r0
 8002c48:	0552      	lsls	r2, r2, #21
 8002c4a:	0b36      	lsrs	r6, r6, #12
 8002c4c:	0d53      	lsrs	r3, r2, #21
 8002c4e:	e7e1      	b.n	8002c14 <__aeabi_f2d+0x20>
 8002c50:	2d00      	cmp	r5, #0
 8002c52:	d009      	beq.n	8002c68 <__aeabi_f2d+0x74>
 8002c54:	2280      	movs	r2, #128	; 0x80
 8002c56:	0b36      	lsrs	r6, r6, #12
 8002c58:	0312      	lsls	r2, r2, #12
 8002c5a:	4b09      	ldr	r3, [pc, #36]	; (8002c80 <__aeabi_f2d+0x8c>)
 8002c5c:	076d      	lsls	r5, r5, #29
 8002c5e:	4316      	orrs	r6, r2
 8002c60:	e7d8      	b.n	8002c14 <__aeabi_f2d+0x20>
 8002c62:	2300      	movs	r3, #0
 8002c64:	2600      	movs	r6, #0
 8002c66:	e7d5      	b.n	8002c14 <__aeabi_f2d+0x20>
 8002c68:	2600      	movs	r6, #0
 8002c6a:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <__aeabi_f2d+0x8c>)
 8002c6c:	e7d2      	b.n	8002c14 <__aeabi_f2d+0x20>
 8002c6e:	0003      	movs	r3, r0
 8002c70:	3b0b      	subs	r3, #11
 8002c72:	409d      	lsls	r5, r3
 8002c74:	002e      	movs	r6, r5
 8002c76:	2500      	movs	r5, #0
 8002c78:	e7e3      	b.n	8002c42 <__aeabi_f2d+0x4e>
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	00000389 	.word	0x00000389
 8002c80:	000007ff 	.word	0x000007ff

08002c84 <__clzsi2>:
 8002c84:	211c      	movs	r1, #28
 8002c86:	2301      	movs	r3, #1
 8002c88:	041b      	lsls	r3, r3, #16
 8002c8a:	4298      	cmp	r0, r3
 8002c8c:	d301      	bcc.n	8002c92 <__clzsi2+0xe>
 8002c8e:	0c00      	lsrs	r0, r0, #16
 8002c90:	3910      	subs	r1, #16
 8002c92:	0a1b      	lsrs	r3, r3, #8
 8002c94:	4298      	cmp	r0, r3
 8002c96:	d301      	bcc.n	8002c9c <__clzsi2+0x18>
 8002c98:	0a00      	lsrs	r0, r0, #8
 8002c9a:	3908      	subs	r1, #8
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	4298      	cmp	r0, r3
 8002ca0:	d301      	bcc.n	8002ca6 <__clzsi2+0x22>
 8002ca2:	0900      	lsrs	r0, r0, #4
 8002ca4:	3904      	subs	r1, #4
 8002ca6:	a202      	add	r2, pc, #8	; (adr r2, 8002cb0 <__clzsi2+0x2c>)
 8002ca8:	5c10      	ldrb	r0, [r2, r0]
 8002caa:	1840      	adds	r0, r0, r1
 8002cac:	4770      	bx	lr
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	02020304 	.word	0x02020304
 8002cb4:	01010101 	.word	0x01010101
	...

08002cc0 <ADC_Service>:
uint32_t Vin;
uint32_t Vsys;
char temp2[90];
extern valveData valve;

void ADC_Service(){
 8002cc0:	b590      	push	{r4, r7, lr}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af02      	add	r7, sp, #8
	//Debug_Send("ADCR start\r\n");
	HAL_ADC_Start_DMA(&hadc, adc, 3);
 8002cc6:	490b      	ldr	r1, [pc, #44]	; (8002cf4 <ADC_Service+0x34>)
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <ADC_Service+0x38>)
 8002cca:	2203      	movs	r2, #3
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f004 fa0b 	bl	80070e8 <HAL_ADC_Start_DMA>
	//HAL_DMA_Start_IT(&hadc.*DMA_Handle, (uint32_t)&hadc.*Instance.DR, adc, 6);
	//HAL_DMA_PollForTransfer(&hadc.DMA_Handle, 1, 100);

	char temp1[10];
	//sprintf(temp2, "1:%i  2:%i  3:%i  4:%i  5:%i  6:%i  7:%i  8:%i  9:%i\r\n",adc[0],adc[1],adc[2],adc[3],adc[4],adc[ValveLimit],adc[6],adc[7],adc[8]);
	sprintf(temp2, "1:%i  2:%i  3:%i\r\n",adc[Pressure],adc[Vsupply],adc[ValveLimit]);
 8002cd2:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <ADC_Service+0x34>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	4b07      	ldr	r3, [pc, #28]	; (8002cf4 <ADC_Service+0x34>)
 8002cd8:	685c      	ldr	r4, [r3, #4]
 8002cda:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <ADC_Service+0x34>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	4907      	ldr	r1, [pc, #28]	; (8002cfc <ADC_Service+0x3c>)
 8002ce0:	4807      	ldr	r0, [pc, #28]	; (8002d00 <ADC_Service+0x40>)
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	0023      	movs	r3, r4
 8002ce6:	f009 fc47 	bl	800c578 <siprintf>
	}
	else{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
		//Debug_Send("AC voltage on\r\n");
	}*/
}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	46bd      	mov	sp, r7
 8002cee:	b005      	add	sp, #20
 8002cf0:	bd90      	pop	{r4, r7, pc}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	2000009c 	.word	0x2000009c
 8002cf8:	20000ae0 	.word	0x20000ae0
 8002cfc:	0800f2f0 	.word	0x0800f2f0
 8002d00:	200000f0 	.word	0x200000f0

08002d04 <GetADC>:

uint32_t GetADC(){
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
	return AC_I_real;
 8002d08:	4b02      	ldr	r3, [pc, #8]	; (8002d14 <GetADC+0x10>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
	return adc;
}
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	200000ec 	.word	0x200000ec

08002d18 <GetADC1>:

uint32_t* GetADC1(){
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
	return &adc;
 8002d1c:	4b01      	ldr	r3, [pc, #4]	; (8002d24 <GetADC1+0xc>)
}
 8002d1e:	0018      	movs	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	2000009c 	.word	0x2000009c

08002d28 <GSM_Init>:
	//sendData("\r\n",UART0);
	//return pec;
}


void GSM_Init(){
 8002d28:	b5b0      	push	{r4, r5, r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
	//gsmState = AutoBaud;
	Debug_Send("GSM Init\r\n");
 8002d2c:	4b29      	ldr	r3, [pc, #164]	; (8002dd4 <GSM_Init+0xac>)
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f000 fa54 	bl	80031dc <Debug_Send>
	gsmInfo.GPRSinterval = 70;
 8002d34:	4a28      	ldr	r2, [pc, #160]	; (8002dd8 <GSM_Init+0xb0>)
 8002d36:	23a0      	movs	r3, #160	; 0xa0
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	2146      	movs	r1, #70	; 0x46
 8002d3c:	50d1      	str	r1, [r2, r3]
	strcpy(gsmInfo.urlport,"5008");
 8002d3e:	4a27      	ldr	r2, [pc, #156]	; (8002ddc <GSM_Init+0xb4>)
 8002d40:	4b27      	ldr	r3, [pc, #156]	; (8002de0 <GSM_Init+0xb8>)
 8002d42:	0010      	movs	r0, r2
 8002d44:	0019      	movs	r1, r3
 8002d46:	2305      	movs	r3, #5
 8002d48:	001a      	movs	r2, r3
 8002d4a:	f009 fc03 	bl	800c554 <memcpy>
	//strcpy(gsmInfo.urlport,"80");
	strcpy(gsmInfo.url,"escorsocket.ddns.net");
 8002d4e:	4b22      	ldr	r3, [pc, #136]	; (8002dd8 <GSM_Init+0xb0>)
 8002d50:	4a24      	ldr	r2, [pc, #144]	; (8002de4 <GSM_Init+0xbc>)
 8002d52:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002d54:	c313      	stmia	r3!, {r0, r1, r4}
 8002d56:	ca03      	ldmia	r2!, {r0, r1}
 8002d58:	c303      	stmia	r3!, {r0, r1}
 8002d5a:	7812      	ldrb	r2, [r2, #0]
 8002d5c:	701a      	strb	r2, [r3, #0]
	strcpy(gsmInfo.url,"196.40.108.169");
 8002d5e:	4b1e      	ldr	r3, [pc, #120]	; (8002dd8 <GSM_Init+0xb0>)
 8002d60:	4a21      	ldr	r2, [pc, #132]	; (8002de8 <GSM_Init+0xc0>)
 8002d62:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002d64:	c313      	stmia	r3!, {r0, r1, r4}
 8002d66:	8811      	ldrh	r1, [r2, #0]
 8002d68:	8019      	strh	r1, [r3, #0]
 8002d6a:	7892      	ldrb	r2, [r2, #2]
 8002d6c:	709a      	strb	r2, [r3, #2]
	//strcpy(gsmInfo.url,"197.94.242.65");
	//strcpy(gsmInfo.url,"102.129.99.123");
	restartTimer = 0;
 8002d6e:	4b1f      	ldr	r3, [pc, #124]	; (8002dec <GSM_Init+0xc4>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
	onTimer = 0;
 8002d74:	4b1e      	ldr	r3, [pc, #120]	; (8002df0 <GSM_Init+0xc8>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	801a      	strh	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, temp1, 20);
 8002d7a:	491e      	ldr	r1, [pc, #120]	; (8002df4 <GSM_Init+0xcc>)
 8002d7c:	4b1e      	ldr	r3, [pc, #120]	; (8002df8 <GSM_Init+0xd0>)
 8002d7e:	2214      	movs	r2, #20
 8002d80:	0018      	movs	r0, r3
 8002d82:	f008 f909 	bl	800af98 <HAL_UART_Receive_IT>
	//SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
	SET_BIT(huart2.Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002d86:	4b1c      	ldr	r3, [pc, #112]	; (8002df8 <GSM_Init+0xd0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	4b1a      	ldr	r3, [pc, #104]	; (8002df8 <GSM_Init+0xd0>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2190      	movs	r1, #144	; 0x90
 8002d92:	0049      	lsls	r1, r1, #1
 8002d94:	430a      	orrs	r2, r1
 8002d96:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, GSMtemp, 50);
 8002d98:	4918      	ldr	r1, [pc, #96]	; (8002dfc <GSM_Init+0xd4>)
 8002d9a:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <GSM_Init+0xd8>)
 8002d9c:	2232      	movs	r2, #50	; 0x32
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f008 f8fa 	bl	800af98 <HAL_UART_Receive_IT>
	//HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
	smsFlags.gprsActive = 0;
 8002da4:	4b17      	ldr	r3, [pc, #92]	; (8002e04 <GSM_Init+0xdc>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	61da      	str	r2, [r3, #28]
	gsmInfo.socket = 0;
 8002daa:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <GSM_Init+0xb0>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	679a      	str	r2, [r3, #120]	; 0x78
	//HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
	gsmTimer = 0;
 8002db0:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <GSM_Init+0xe0>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
	gsmState = Search;	//Simcom 800 mod
 8002db6:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <GSM_Init+0xe4>)
 8002db8:	2204      	movs	r2, #4
 8002dba:	701a      	strb	r2, [r3, #0]
	gsmState = GSM_Enable;
 8002dbc:	4b13      	ldr	r3, [pc, #76]	; (8002e0c <GSM_Init+0xe4>)
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	701a      	strb	r2, [r3, #0]
	gsmState = GSM_On;
 8002dc2:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <GSM_Init+0xe4>)
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	701a      	strb	r2, [r3, #0]
	gsmState = GSM_Off;
 8002dc8:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <GSM_Init+0xe4>)
 8002dca:	2201      	movs	r2, #1
 8002dcc:	701a      	strb	r2, [r3, #0]
}
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bdb0      	pop	{r4, r5, r7, pc}
 8002dd4:	0800f318 	.word	0x0800f318
 8002dd8:	20000318 	.word	0x20000318
 8002ddc:	20000336 	.word	0x20000336
 8002de0:	0800f324 	.word	0x0800f324
 8002de4:	0800f32c 	.word	0x0800f32c
 8002de8:	0800f344 	.word	0x0800f344
 8002dec:	200007f8 	.word	0x200007f8
 8002df0:	2000014a 	.word	0x2000014a
 8002df4:	20000730 	.word	0x20000730
 8002df8:	20000d18 	.word	0x20000d18
 8002dfc:	200006cc 	.word	0x200006cc
 8002e00:	20000c90 	.word	0x20000c90
 8002e04:	2000014c 	.word	0x2000014c
 8002e08:	200007f0 	.word	0x200007f0
 8002e0c:	20000000 	.word	0x20000000

08002e10 <setEmail>:
	gsmInfo.mqttPub = 1;
	gsmState = MQTT_PubTopic;
	Debug_Send("publish\r\n");
}

void setEmail(event* log, int length, float ave){
 8002e10:	b590      	push	{r4, r7, lr}
 8002e12:	b08b      	sub	sp, #44	; 0x2c
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
	strcpy(emailBody,"Water volume test is complete\r\n");
 8002e1c:	4bcf      	ldr	r3, [pc, #828]	; (800315c <setEmail+0x34c>)
 8002e1e:	4ad0      	ldr	r2, [pc, #832]	; (8003160 <setEmail+0x350>)
 8002e20:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002e22:	c313      	stmia	r3!, {r0, r1, r4}
 8002e24:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002e26:	c313      	stmia	r3!, {r0, r1, r4}
 8002e28:	ca03      	ldmia	r2!, {r0, r1}
 8002e2a:	c303      	stmia	r3!, {r0, r1}
	strcat(emailBody,"GPM is ");
 8002e2c:	4bcb      	ldr	r3, [pc, #812]	; (800315c <setEmail+0x34c>)
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f7fd f974 	bl	800011c <strlen>
 8002e34:	0003      	movs	r3, r0
 8002e36:	001a      	movs	r2, r3
 8002e38:	4bc8      	ldr	r3, [pc, #800]	; (800315c <setEmail+0x34c>)
 8002e3a:	18d2      	adds	r2, r2, r3
 8002e3c:	4bc9      	ldr	r3, [pc, #804]	; (8003164 <setEmail+0x354>)
 8002e3e:	0010      	movs	r0, r2
 8002e40:	0019      	movs	r1, r3
 8002e42:	2308      	movs	r3, #8
 8002e44:	001a      	movs	r2, r3
 8002e46:	f009 fb85 	bl	800c554 <memcpy>
	gcvt(gpmAverage1, 4, temp1);
 8002e4a:	4bc7      	ldr	r3, [pc, #796]	; (8003168 <setEmail+0x358>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	1c18      	adds	r0, r3, #0
 8002e50:	f7ff fed0 	bl	8002bf4 <__aeabi_f2d>
 8002e54:	4bc5      	ldr	r3, [pc, #788]	; (800316c <setEmail+0x35c>)
 8002e56:	2204      	movs	r2, #4
 8002e58:	f009 fb2c 	bl	800c4b4 <gcvt>
	strcat(emailBody,temp1);
 8002e5c:	4ac3      	ldr	r2, [pc, #780]	; (800316c <setEmail+0x35c>)
 8002e5e:	4bbf      	ldr	r3, [pc, #764]	; (800315c <setEmail+0x34c>)
 8002e60:	0011      	movs	r1, r2
 8002e62:	0018      	movs	r0, r3
 8002e64:	f009 fba8 	bl	800c5b8 <strcat>
	strcat(emailBody,"\r\n");
 8002e68:	4bbc      	ldr	r3, [pc, #752]	; (800315c <setEmail+0x34c>)
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f7fd f956 	bl	800011c <strlen>
 8002e70:	0003      	movs	r3, r0
 8002e72:	001a      	movs	r2, r3
 8002e74:	4bb9      	ldr	r3, [pc, #740]	; (800315c <setEmail+0x34c>)
 8002e76:	18d2      	adds	r2, r2, r3
 8002e78:	4bbd      	ldr	r3, [pc, #756]	; (8003170 <setEmail+0x360>)
 8002e7a:	0010      	movs	r0, r2
 8002e7c:	0019      	movs	r1, r3
 8002e7e:	2303      	movs	r3, #3
 8002e80:	001a      	movs	r2, r3
 8002e82:	f009 fb67 	bl	800c554 <memcpy>
	char temp1[20];
	int i;
	strcat(emailBody,"Event\tDate\t\tTime\t\tGPM\r\n");
 8002e86:	4bb5      	ldr	r3, [pc, #724]	; (800315c <setEmail+0x34c>)
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f7fd f947 	bl	800011c <strlen>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	001a      	movs	r2, r3
 8002e92:	4bb2      	ldr	r3, [pc, #712]	; (800315c <setEmail+0x34c>)
 8002e94:	18d2      	adds	r2, r2, r3
 8002e96:	4bb7      	ldr	r3, [pc, #732]	; (8003174 <setEmail+0x364>)
 8002e98:	0010      	movs	r0, r2
 8002e9a:	0019      	movs	r1, r3
 8002e9c:	2318      	movs	r3, #24
 8002e9e:	001a      	movs	r2, r3
 8002ea0:	f009 fb58 	bl	800c554 <memcpy>
	for (i = 1; i < length + 1; i++){
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea8:	e129      	b.n	80030fe <setEmail+0x2ee>
		//log->days

		myLongStr(log[i].eventNum,temp1,10,10);
 8002eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eac:	0013      	movs	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	189b      	adds	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	001a      	movs	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	189b      	adds	r3, r3, r2
 8002eba:	6818      	ldr	r0, [r3, #0]
 8002ebc:	2410      	movs	r4, #16
 8002ebe:	1939      	adds	r1, r7, r4
 8002ec0:	230a      	movs	r3, #10
 8002ec2:	220a      	movs	r2, #10
 8002ec4:	f002 ff3c 	bl	8005d40 <myLongStr>
		strcat(emailBody,temp1);
 8002ec8:	193a      	adds	r2, r7, r4
 8002eca:	4ba4      	ldr	r3, [pc, #656]	; (800315c <setEmail+0x34c>)
 8002ecc:	0011      	movs	r1, r2
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f009 fb72 	bl	800c5b8 <strcat>
		strcat(emailBody,"\t\t");
 8002ed4:	4ba1      	ldr	r3, [pc, #644]	; (800315c <setEmail+0x34c>)
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f7fd f920 	bl	800011c <strlen>
 8002edc:	0003      	movs	r3, r0
 8002ede:	001a      	movs	r2, r3
 8002ee0:	4b9e      	ldr	r3, [pc, #632]	; (800315c <setEmail+0x34c>)
 8002ee2:	18d2      	adds	r2, r2, r3
 8002ee4:	4ba4      	ldr	r3, [pc, #656]	; (8003178 <setEmail+0x368>)
 8002ee6:	0010      	movs	r0, r2
 8002ee8:	0019      	movs	r1, r3
 8002eea:	2303      	movs	r3, #3
 8002eec:	001a      	movs	r2, r3
 8002eee:	f009 fb31 	bl	800c554 <memcpy>
		myLongStr(log[i].timestamp.months,temp1,10,10);
 8002ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef4:	0013      	movs	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	189b      	adds	r3, r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	001a      	movs	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	189b      	adds	r3, r3, r2
 8002f02:	6898      	ldr	r0, [r3, #8]
 8002f04:	1939      	adds	r1, r7, r4
 8002f06:	230a      	movs	r3, #10
 8002f08:	220a      	movs	r2, #10
 8002f0a:	f002 ff19 	bl	8005d40 <myLongStr>
		strcat(emailBody,temp1);
 8002f0e:	193a      	adds	r2, r7, r4
 8002f10:	4b92      	ldr	r3, [pc, #584]	; (800315c <setEmail+0x34c>)
 8002f12:	0011      	movs	r1, r2
 8002f14:	0018      	movs	r0, r3
 8002f16:	f009 fb4f 	bl	800c5b8 <strcat>
		strcat(emailBody,"/");
 8002f1a:	4b90      	ldr	r3, [pc, #576]	; (800315c <setEmail+0x34c>)
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	f7fd f8fd 	bl	800011c <strlen>
 8002f22:	0003      	movs	r3, r0
 8002f24:	001a      	movs	r2, r3
 8002f26:	4b8d      	ldr	r3, [pc, #564]	; (800315c <setEmail+0x34c>)
 8002f28:	18d2      	adds	r2, r2, r3
 8002f2a:	4b94      	ldr	r3, [pc, #592]	; (800317c <setEmail+0x36c>)
 8002f2c:	0010      	movs	r0, r2
 8002f2e:	0019      	movs	r1, r3
 8002f30:	2302      	movs	r3, #2
 8002f32:	001a      	movs	r2, r3
 8002f34:	f009 fb0e 	bl	800c554 <memcpy>
		myLongStr(log[i].timestamp.days,temp1,10,10);
 8002f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f3a:	0013      	movs	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	189b      	adds	r3, r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	001a      	movs	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	189b      	adds	r3, r3, r2
 8002f48:	6918      	ldr	r0, [r3, #16]
 8002f4a:	1939      	adds	r1, r7, r4
 8002f4c:	230a      	movs	r3, #10
 8002f4e:	220a      	movs	r2, #10
 8002f50:	f002 fef6 	bl	8005d40 <myLongStr>
		strcat(emailBody,temp1);
 8002f54:	193a      	adds	r2, r7, r4
 8002f56:	4b81      	ldr	r3, [pc, #516]	; (800315c <setEmail+0x34c>)
 8002f58:	0011      	movs	r1, r2
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f009 fb2c 	bl	800c5b8 <strcat>
		strcat(emailBody,"/");
 8002f60:	4b7e      	ldr	r3, [pc, #504]	; (800315c <setEmail+0x34c>)
 8002f62:	0018      	movs	r0, r3
 8002f64:	f7fd f8da 	bl	800011c <strlen>
 8002f68:	0003      	movs	r3, r0
 8002f6a:	001a      	movs	r2, r3
 8002f6c:	4b7b      	ldr	r3, [pc, #492]	; (800315c <setEmail+0x34c>)
 8002f6e:	18d2      	adds	r2, r2, r3
 8002f70:	4b82      	ldr	r3, [pc, #520]	; (800317c <setEmail+0x36c>)
 8002f72:	0010      	movs	r0, r2
 8002f74:	0019      	movs	r1, r3
 8002f76:	2302      	movs	r3, #2
 8002f78:	001a      	movs	r2, r3
 8002f7a:	f009 faeb 	bl	800c554 <memcpy>
		myLongStr(log[i].timestamp.years,temp1,10,10);
 8002f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f80:	0013      	movs	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	189b      	adds	r3, r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	001a      	movs	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	189b      	adds	r3, r3, r2
 8002f8e:	6858      	ldr	r0, [r3, #4]
 8002f90:	1939      	adds	r1, r7, r4
 8002f92:	230a      	movs	r3, #10
 8002f94:	220a      	movs	r2, #10
 8002f96:	f002 fed3 	bl	8005d40 <myLongStr>
		strcat(emailBody,temp1);
 8002f9a:	193a      	adds	r2, r7, r4
 8002f9c:	4b6f      	ldr	r3, [pc, #444]	; (800315c <setEmail+0x34c>)
 8002f9e:	0011      	movs	r1, r2
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f009 fb09 	bl	800c5b8 <strcat>
		strcat(emailBody,"\t");
 8002fa6:	4b6d      	ldr	r3, [pc, #436]	; (800315c <setEmail+0x34c>)
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f7fd f8b7 	bl	800011c <strlen>
 8002fae:	0003      	movs	r3, r0
 8002fb0:	001a      	movs	r2, r3
 8002fb2:	4b6a      	ldr	r3, [pc, #424]	; (800315c <setEmail+0x34c>)
 8002fb4:	18d2      	adds	r2, r2, r3
 8002fb6:	4b72      	ldr	r3, [pc, #456]	; (8003180 <setEmail+0x370>)
 8002fb8:	0010      	movs	r0, r2
 8002fba:	0019      	movs	r1, r3
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	001a      	movs	r2, r3
 8002fc0:	f009 fac8 	bl	800c554 <memcpy>

		myLongStr(log[i].timestamp.hours,temp1,10,10);
 8002fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc6:	0013      	movs	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	189b      	adds	r3, r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	001a      	movs	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	189b      	adds	r3, r3, r2
 8002fd4:	6958      	ldr	r0, [r3, #20]
 8002fd6:	1939      	adds	r1, r7, r4
 8002fd8:	230a      	movs	r3, #10
 8002fda:	220a      	movs	r2, #10
 8002fdc:	f002 feb0 	bl	8005d40 <myLongStr>
		strcat(emailBody,temp1);
 8002fe0:	193a      	adds	r2, r7, r4
 8002fe2:	4b5e      	ldr	r3, [pc, #376]	; (800315c <setEmail+0x34c>)
 8002fe4:	0011      	movs	r1, r2
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f009 fae6 	bl	800c5b8 <strcat>
		strcat(emailBody,":");
 8002fec:	4b5b      	ldr	r3, [pc, #364]	; (800315c <setEmail+0x34c>)
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f7fd f894 	bl	800011c <strlen>
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	001a      	movs	r2, r3
 8002ff8:	4b58      	ldr	r3, [pc, #352]	; (800315c <setEmail+0x34c>)
 8002ffa:	18d2      	adds	r2, r2, r3
 8002ffc:	4b61      	ldr	r3, [pc, #388]	; (8003184 <setEmail+0x374>)
 8002ffe:	0010      	movs	r0, r2
 8003000:	0019      	movs	r1, r3
 8003002:	2302      	movs	r3, #2
 8003004:	001a      	movs	r2, r3
 8003006:	f009 faa5 	bl	800c554 <memcpy>
		myLongStr(log[i].timestamp.minutes,temp1,10,10);
 800300a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300c:	0013      	movs	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	189b      	adds	r3, r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	001a      	movs	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	189b      	adds	r3, r3, r2
 800301a:	6998      	ldr	r0, [r3, #24]
 800301c:	1939      	adds	r1, r7, r4
 800301e:	230a      	movs	r3, #10
 8003020:	220a      	movs	r2, #10
 8003022:	f002 fe8d 	bl	8005d40 <myLongStr>
		strcat(emailBody,temp1);
 8003026:	193a      	adds	r2, r7, r4
 8003028:	4b4c      	ldr	r3, [pc, #304]	; (800315c <setEmail+0x34c>)
 800302a:	0011      	movs	r1, r2
 800302c:	0018      	movs	r0, r3
 800302e:	f009 fac3 	bl	800c5b8 <strcat>
		strcat(emailBody,":");
 8003032:	4b4a      	ldr	r3, [pc, #296]	; (800315c <setEmail+0x34c>)
 8003034:	0018      	movs	r0, r3
 8003036:	f7fd f871 	bl	800011c <strlen>
 800303a:	0003      	movs	r3, r0
 800303c:	001a      	movs	r2, r3
 800303e:	4b47      	ldr	r3, [pc, #284]	; (800315c <setEmail+0x34c>)
 8003040:	18d2      	adds	r2, r2, r3
 8003042:	4b50      	ldr	r3, [pc, #320]	; (8003184 <setEmail+0x374>)
 8003044:	0010      	movs	r0, r2
 8003046:	0019      	movs	r1, r3
 8003048:	2302      	movs	r3, #2
 800304a:	001a      	movs	r2, r3
 800304c:	f009 fa82 	bl	800c554 <memcpy>
		myLongStr(log[i].timestamp.seconds,temp1,10,10);
 8003050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003052:	0013      	movs	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	189b      	adds	r3, r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	001a      	movs	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	189b      	adds	r3, r3, r2
 8003060:	69d8      	ldr	r0, [r3, #28]
 8003062:	1939      	adds	r1, r7, r4
 8003064:	230a      	movs	r3, #10
 8003066:	220a      	movs	r2, #10
 8003068:	f002 fe6a 	bl	8005d40 <myLongStr>
		strcat(emailBody,temp1);
 800306c:	193a      	adds	r2, r7, r4
 800306e:	4b3b      	ldr	r3, [pc, #236]	; (800315c <setEmail+0x34c>)
 8003070:	0011      	movs	r1, r2
 8003072:	0018      	movs	r0, r3
 8003074:	f009 faa0 	bl	800c5b8 <strcat>
		strcat(emailBody,"\t\t");
 8003078:	4b38      	ldr	r3, [pc, #224]	; (800315c <setEmail+0x34c>)
 800307a:	0018      	movs	r0, r3
 800307c:	f7fd f84e 	bl	800011c <strlen>
 8003080:	0003      	movs	r3, r0
 8003082:	001a      	movs	r2, r3
 8003084:	4b35      	ldr	r3, [pc, #212]	; (800315c <setEmail+0x34c>)
 8003086:	18d2      	adds	r2, r2, r3
 8003088:	4b3b      	ldr	r3, [pc, #236]	; (8003178 <setEmail+0x368>)
 800308a:	0010      	movs	r0, r2
 800308c:	0019      	movs	r1, r3
 800308e:	2303      	movs	r3, #3
 8003090:	001a      	movs	r2, r3
 8003092:	f009 fa5f 	bl	800c554 <memcpy>

		//myLongStr(log[i].gallons,temp1,10,10);
		gcvt(log[i].gallons, 4, temp1);
 8003096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003098:	0013      	movs	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	189b      	adds	r3, r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	001a      	movs	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	189b      	adds	r3, r3, r2
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	1c18      	adds	r0, r3, #0
 80030aa:	f7ff fda3 	bl	8002bf4 <__aeabi_f2d>
 80030ae:	193b      	adds	r3, r7, r4
 80030b0:	2204      	movs	r2, #4
 80030b2:	f009 f9ff 	bl	800c4b4 <gcvt>
		strcat(emailBody,temp1);
 80030b6:	193a      	adds	r2, r7, r4
 80030b8:	4b28      	ldr	r3, [pc, #160]	; (800315c <setEmail+0x34c>)
 80030ba:	0011      	movs	r1, r2
 80030bc:	0018      	movs	r0, r3
 80030be:	f009 fa7b 	bl	800c5b8 <strcat>

		myLongStr(i,temp1,10,10);
 80030c2:	1939      	adds	r1, r7, r4
 80030c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030c6:	230a      	movs	r3, #10
 80030c8:	220a      	movs	r2, #10
 80030ca:	f002 fe39 	bl	8005d40 <myLongStr>
		strcat(emailBody,temp1);
 80030ce:	193a      	adds	r2, r7, r4
 80030d0:	4b22      	ldr	r3, [pc, #136]	; (800315c <setEmail+0x34c>)
 80030d2:	0011      	movs	r1, r2
 80030d4:	0018      	movs	r0, r3
 80030d6:	f009 fa6f 	bl	800c5b8 <strcat>
		strcat(emailBody,"\r\n");
 80030da:	4b20      	ldr	r3, [pc, #128]	; (800315c <setEmail+0x34c>)
 80030dc:	0018      	movs	r0, r3
 80030de:	f7fd f81d 	bl	800011c <strlen>
 80030e2:	0003      	movs	r3, r0
 80030e4:	001a      	movs	r2, r3
 80030e6:	4b1d      	ldr	r3, [pc, #116]	; (800315c <setEmail+0x34c>)
 80030e8:	18d2      	adds	r2, r2, r3
 80030ea:	4b21      	ldr	r3, [pc, #132]	; (8003170 <setEmail+0x360>)
 80030ec:	0010      	movs	r0, r2
 80030ee:	0019      	movs	r1, r3
 80030f0:	2303      	movs	r3, #3
 80030f2:	001a      	movs	r2, r3
 80030f4:	f009 fa2e 	bl	800c554 <memcpy>
	for (i = 1; i < length + 1; i++){
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	3301      	adds	r3, #1
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	429a      	cmp	r2, r3
 8003104:	db00      	blt.n	8003108 <setEmail+0x2f8>
 8003106:	e6d0      	b.n	8002eaa <setEmail+0x9a>

	}
	gsmInfo.email = 1;
 8003108:	4a1f      	ldr	r2, [pc, #124]	; (8003188 <setEmail+0x378>)
 800310a:	2382      	movs	r3, #130	; 0x82
 800310c:	33ff      	adds	r3, #255	; 0xff
 800310e:	2101      	movs	r1, #1
 8003110:	54d1      	strb	r1, [r2, r3]
	//strcpy(emailBody,"This is a test");
	Debug_Send(emailBody);
 8003112:	4b12      	ldr	r3, [pc, #72]	; (800315c <setEmail+0x34c>)
 8003114:	0018      	movs	r0, r3
 8003116:	f000 f861 	bl	80031dc <Debug_Send>
	emailSize = strlen(emailBody);
 800311a:	4b10      	ldr	r3, [pc, #64]	; (800315c <setEmail+0x34c>)
 800311c:	0018      	movs	r0, r3
 800311e:	f7fc fffd 	bl	800011c <strlen>
 8003122:	0003      	movs	r3, r0
 8003124:	001a      	movs	r2, r3
 8003126:	4b19      	ldr	r3, [pc, #100]	; (800318c <setEmail+0x37c>)
 8003128:	601a      	str	r2, [r3, #0]
	myLongStr(emailSize,temp1,10,10);
 800312a:	4b18      	ldr	r3, [pc, #96]	; (800318c <setEmail+0x37c>)
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	2410      	movs	r4, #16
 8003130:	1939      	adds	r1, r7, r4
 8003132:	230a      	movs	r3, #10
 8003134:	220a      	movs	r2, #10
 8003136:	f002 fe03 	bl	8005d40 <myLongStr>
	Debug_Send("Email body size: ");
 800313a:	4b15      	ldr	r3, [pc, #84]	; (8003190 <setEmail+0x380>)
 800313c:	0018      	movs	r0, r3
 800313e:	f000 f84d 	bl	80031dc <Debug_Send>
	Debug_Send(temp1);
 8003142:	193b      	adds	r3, r7, r4
 8003144:	0018      	movs	r0, r3
 8003146:	f000 f849 	bl	80031dc <Debug_Send>
	Debug_Send("\r\n");
 800314a:	4b09      	ldr	r3, [pc, #36]	; (8003170 <setEmail+0x360>)
 800314c:	0018      	movs	r0, r3
 800314e:	f000 f845 	bl	80031dc <Debug_Send>
}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	46bd      	mov	sp, r7
 8003156:	b00b      	add	sp, #44	; 0x2c
 8003158:	bd90      	pop	{r4, r7, pc}
 800315a:	46c0      	nop			; (mov r8, r8)
 800315c:	20000804 	.word	0x20000804
 8003160:	0800f86c 	.word	0x0800f86c
 8003164:	0800f88c 	.word	0x0800f88c
 8003168:	20001240 	.word	0x20001240
 800316c:	20000730 	.word	0x20000730
 8003170:	0800f4c0 	.word	0x0800f4c0
 8003174:	0800f894 	.word	0x0800f894
 8003178:	0800f8ac 	.word	0x0800f8ac
 800317c:	0800f8b0 	.word	0x0800f8b0
 8003180:	0800f8b4 	.word	0x0800f8b4
 8003184:	0800f8b8 	.word	0x0800f8b8
 8003188:	20000318 	.word	0x20000318
 800318c:	20000ac0 	.word	0x20000ac0
 8003190:	0800f8bc 	.word	0x0800f8bc

08003194 <GSM_Send>:

void GSM_Send(char* data){
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
	int size;
	int timeout = 5;
 800319c:	2305      	movs	r3, #5
 800319e:	60fb      	str	r3, [r7, #12]
	size = strlen(data);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	0018      	movs	r0, r3
 80031a4:	f7fc ffba 	bl	800011c <strlen>
 80031a8:	0003      	movs	r3, r0
 80031aa:	60bb      	str	r3, [r7, #8]
	//HAL_UART_Transmit(&huart2, (uint8_t*)data, size, timeout);

	HAL_UART_Transmit_IT(&huart2, data, size);
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	4b07      	ldr	r3, [pc, #28]	; (80031d0 <GSM_Send+0x3c>)
 80031b4:	0018      	movs	r0, r3
 80031b6:	f007 fe7f 	bl	800aeb8 <HAL_UART_Transmit_IT>
	//HAL_UART_Receive_IT(&huart2, (uint8_t *) dummy, 50);
	gsmTimeout = 0;
 80031ba:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <GSM_Send+0x40>)
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]
	gsmSend = 1;
 80031c0:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <GSM_Send+0x44>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	601a      	str	r2, [r3, #0]
}
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	46bd      	mov	sp, r7
 80031ca:	b004      	add	sp, #16
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	20000d18 	.word	0x20000d18
 80031d4:	200007fc 	.word	0x200007fc
 80031d8:	20000800 	.word	0x20000800

080031dc <Debug_Send>:

void Debug_Send(char* data){
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
	int size;
	int timeout = 5;
 80031e4:	2305      	movs	r3, #5
 80031e6:	60fb      	str	r3, [r7, #12]
	size = strlen(data);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	0018      	movs	r0, r3
 80031ec:	f7fc ff96 	bl	800011c <strlen>
 80031f0:	0003      	movs	r3, r0
 80031f2:	60bb      	str	r3, [r7, #8]
	HAL_UART_Transmit(&huart1, (uint8_t*)data, size, timeout);
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	4803      	ldr	r0, [pc, #12]	; (800320c <Debug_Send+0x30>)
 80031fe:	f007 fdbb 	bl	800ad78 <HAL_UART_Transmit>
	//HAL_UART_Transmit_IT(&huart1, data, size);
}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	46bd      	mov	sp, r7
 8003206:	b004      	add	sp, #16
 8003208:	bd80      	pop	{r7, pc}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	20000c90 	.word	0x20000c90

08003210 <recData>:
	  }
	huart1.Instance->TDR = (data & (uint8_t)0xFFU);

}

void recData(){
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
		gsmInfo.Prompt = 0;
		Debug_Send("got prompt2\r\n");
		if (gsmInfo.socket == 1) gsmState = GPRS_Write;
		else gsmState = SMS_Text;
	}*/
		if (recBuffPointerWrite != recBuffPointerRead){
 8003214:	4b4f      	ldr	r3, [pc, #316]	; (8003354 <recData+0x144>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	4b4f      	ldr	r3, [pc, #316]	; (8003358 <recData+0x148>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	429a      	cmp	r2, r3
 800321e:	d100      	bne.n	8003222 <recData+0x12>
 8003220:	e095      	b.n	800334e <recData+0x13e>
			gsmSend = 0;
 8003222:	4b4e      	ldr	r3, [pc, #312]	; (800335c <recData+0x14c>)
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
			//if (recBuff[recBuffPointerRead] != 0x0A){
			procBuff[procBuffpointer] = recBuff[recBuffPointerRead];
 8003228:	4b4b      	ldr	r3, [pc, #300]	; (8003358 <recData+0x148>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	4b4c      	ldr	r3, [pc, #304]	; (8003360 <recData+0x150>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	494c      	ldr	r1, [pc, #304]	; (8003364 <recData+0x154>)
 8003232:	5c89      	ldrb	r1, [r1, r2]
 8003234:	4a4c      	ldr	r2, [pc, #304]	; (8003368 <recData+0x158>)
 8003236:	54d1      	strb	r1, [r2, r3]
			//HAL_UART_Transmit(&huart1, procBuff[procBuffpointer], 1, 10);
			/*if (recBuff[recBuffPointerRead] != 0x0A)*/ //SendChar(procBuff[procBuffpointer]);
			recBuffPointerRead++;
 8003238:	4b47      	ldr	r3, [pc, #284]	; (8003358 <recData+0x148>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	4b46      	ldr	r3, [pc, #280]	; (8003358 <recData+0x148>)
 8003240:	601a      	str	r2, [r3, #0]
			if (recBuffPointerRead >= recBuffSize) recBuffPointerRead = 0;
 8003242:	4b45      	ldr	r3, [pc, #276]	; (8003358 <recData+0x148>)
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	2396      	movs	r3, #150	; 0x96
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	429a      	cmp	r2, r3
 800324c:	db02      	blt.n	8003254 <recData+0x44>
 800324e:	4b42      	ldr	r3, [pc, #264]	; (8003358 <recData+0x148>)
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]


			procBuffpointer++;
 8003254:	4b42      	ldr	r3, [pc, #264]	; (8003360 <recData+0x150>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	1c5a      	adds	r2, r3, #1
 800325a:	4b41      	ldr	r3, [pc, #260]	; (8003360 <recData+0x150>)
 800325c:	601a      	str	r2, [r3, #0]
			if (procBuffpointer > procBuffSize) procBuffpointer = 0;
 800325e:	4b40      	ldr	r3, [pc, #256]	; (8003360 <recData+0x150>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2be6      	cmp	r3, #230	; 0xe6
 8003264:	dd02      	ble.n	800326c <recData+0x5c>
 8003266:	4b3e      	ldr	r3, [pc, #248]	; (8003360 <recData+0x150>)
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]
			//}

			//if (procBuff[procBuffpointer - 1] == '>'){
			if (procBuff[procBuffpointer - 1] == 62){
 800326c:	4b3c      	ldr	r3, [pc, #240]	; (8003360 <recData+0x150>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	3b01      	subs	r3, #1
 8003272:	4a3d      	ldr	r2, [pc, #244]	; (8003368 <recData+0x158>)
 8003274:	5cd3      	ldrb	r3, [r2, r3]
 8003276:	2b3e      	cmp	r3, #62	; 0x3e
 8003278:	d147      	bne.n	800330a <recData+0xfa>
			//if (procBuff[procBuffpointer] == '>'){
				//Debug_Send("got prompt\r\n");
				if (gsmInfo.socket == 1) gsmState = GPRS_Write;
 800327a:	4b3c      	ldr	r3, [pc, #240]	; (800336c <recData+0x15c>)
 800327c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800327e:	2b01      	cmp	r3, #1
 8003280:	d103      	bne.n	800328a <recData+0x7a>
 8003282:	4b3b      	ldr	r3, [pc, #236]	; (8003370 <recData+0x160>)
 8003284:	2221      	movs	r2, #33	; 0x21
 8003286:	701a      	strb	r2, [r3, #0]
 8003288:	e03f      	b.n	800330a <recData+0xfa>
				else if(gsmInfo.mqtt == 1){
 800328a:	4a38      	ldr	r2, [pc, #224]	; (800336c <recData+0x15c>)
 800328c:	23c2      	movs	r3, #194	; 0xc2
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	58d3      	ldr	r3, [r2, r3]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d10d      	bne.n	80032b2 <recData+0xa2>
					Debug_Send("Set topic\r\n");
 8003296:	4b37      	ldr	r3, [pc, #220]	; (8003374 <recData+0x164>)
 8003298:	0018      	movs	r0, r3
 800329a:	f7ff ff9f 	bl	80031dc <Debug_Send>
					GSM_Send("house\r\n");
 800329e:	4b36      	ldr	r3, [pc, #216]	; (8003378 <recData+0x168>)
 80032a0:	0018      	movs	r0, r3
 80032a2:	f7ff ff77 	bl	8003194 <GSM_Send>
					gsmInfo.mqtt = 0;
 80032a6:	4a31      	ldr	r2, [pc, #196]	; (800336c <recData+0x15c>)
 80032a8:	23c2      	movs	r3, #194	; 0xc2
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	2100      	movs	r1, #0
 80032ae:	50d1      	str	r1, [r2, r3]
 80032b0:	e02b      	b.n	800330a <recData+0xfa>
				}
				else if(gsmInfo.mqttPub == 1){	//topic
 80032b2:	4a2e      	ldr	r2, [pc, #184]	; (800336c <recData+0x15c>)
 80032b4:	23c8      	movs	r3, #200	; 0xc8
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	58d3      	ldr	r3, [r2, r3]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d10b      	bne.n	80032d6 <recData+0xc6>

					gsmState = MQTT_PubPayload;
 80032be:	4b2c      	ldr	r3, [pc, #176]	; (8003370 <recData+0x160>)
 80032c0:	223a      	movs	r2, #58	; 0x3a
 80032c2:	701a      	strb	r2, [r3, #0]
					Debug_Send("send topic\r\n");
 80032c4:	4b2d      	ldr	r3, [pc, #180]	; (800337c <recData+0x16c>)
 80032c6:	0018      	movs	r0, r3
 80032c8:	f7ff ff88 	bl	80031dc <Debug_Send>
					GSM_Send("house\r\n");
 80032cc:	4b2a      	ldr	r3, [pc, #168]	; (8003378 <recData+0x168>)
 80032ce:	0018      	movs	r0, r3
 80032d0:	f7ff ff60 	bl	8003194 <GSM_Send>
 80032d4:	e019      	b.n	800330a <recData+0xfa>
				}
				else if(gsmInfo.mqttPub == 2){	//payload
 80032d6:	4a25      	ldr	r2, [pc, #148]	; (800336c <recData+0x15c>)
 80032d8:	23c8      	movs	r3, #200	; 0xc8
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	58d3      	ldr	r3, [r2, r3]
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d110      	bne.n	8003304 <recData+0xf4>
					gsmInfo.mqttPub = 0;
 80032e2:	4a22      	ldr	r2, [pc, #136]	; (800336c <recData+0x15c>)
 80032e4:	23c8      	movs	r3, #200	; 0xc8
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	2100      	movs	r1, #0
 80032ea:	50d1      	str	r1, [r2, r3]
					gsmState = MQTT_PubPayload;
 80032ec:	4b20      	ldr	r3, [pc, #128]	; (8003370 <recData+0x160>)
 80032ee:	223a      	movs	r2, #58	; 0x3a
 80032f0:	701a      	strb	r2, [r3, #0]
					Debug_Send("send payload\r\n");
 80032f2:	4b23      	ldr	r3, [pc, #140]	; (8003380 <recData+0x170>)
 80032f4:	0018      	movs	r0, r3
 80032f6:	f7ff ff71 	bl	80031dc <Debug_Send>
					GSM_Send(temp1);
 80032fa:	4b22      	ldr	r3, [pc, #136]	; (8003384 <recData+0x174>)
 80032fc:	0018      	movs	r0, r3
 80032fe:	f7ff ff49 	bl	8003194 <GSM_Send>
 8003302:	e002      	b.n	800330a <recData+0xfa>
				}
				else gsmState = SMS_Text;
 8003304:	4b1a      	ldr	r3, [pc, #104]	; (8003370 <recData+0x160>)
 8003306:	2212      	movs	r2, #18
 8003308:	701a      	strb	r2, [r3, #0]
			}

			if (procBuff[procBuffpointer - 1] == 0x0A){
 800330a:	4b15      	ldr	r3, [pc, #84]	; (8003360 <recData+0x150>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	3b01      	subs	r3, #1
 8003310:	4a15      	ldr	r2, [pc, #84]	; (8003368 <recData+0x158>)
 8003312:	5cd3      	ldrb	r3, [r2, r3]
 8003314:	2b0a      	cmp	r3, #10
 8003316:	d108      	bne.n	800332a <recData+0x11a>
				procBuff[procBuffpointer - 1] = 0;
 8003318:	4b11      	ldr	r3, [pc, #68]	; (8003360 <recData+0x150>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	3b01      	subs	r3, #1
 800331e:	4a12      	ldr	r2, [pc, #72]	; (8003368 <recData+0x158>)
 8003320:	2100      	movs	r1, #0
 8003322:	54d1      	strb	r1, [r2, r3]
				procBuffpointer = 0;
 8003324:	4b0e      	ldr	r3, [pc, #56]	; (8003360 <recData+0x150>)
 8003326:	2200      	movs	r2, #0
 8003328:	601a      	str	r2, [r3, #0]
				//sendData(procBuff,UART0);
				//sendData("\r\n",UART0);
				//Debug_Send("A");
			}
			if (procBuff[procBuffpointer - 1] == 0x0D){
 800332a:	4b0d      	ldr	r3, [pc, #52]	; (8003360 <recData+0x150>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	3b01      	subs	r3, #1
 8003330:	4a0d      	ldr	r2, [pc, #52]	; (8003368 <recData+0x158>)
 8003332:	5cd3      	ldrb	r3, [r2, r3]
 8003334:	2b0d      	cmp	r3, #13
 8003336:	d10a      	bne.n	800334e <recData+0x13e>
				procBuff[procBuffpointer - 1] = 0;
 8003338:	4b09      	ldr	r3, [pc, #36]	; (8003360 <recData+0x150>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	3b01      	subs	r3, #1
 800333e:	4a0a      	ldr	r2, [pc, #40]	; (8003368 <recData+0x158>)
 8003340:	2100      	movs	r1, #0
 8003342:	54d1      	strb	r1, [r2, r3]
				procBuffpointer = 0;
 8003344:	4b06      	ldr	r3, [pc, #24]	; (8003360 <recData+0x150>)
 8003346:	2200      	movs	r2, #0
 8003348:	601a      	str	r2, [r3, #0]
				//Debug_Send(procBuff);
				//Debug_Send("\r\n");
				//Debug_Send("D");
				procData();
 800334a:	f000 f81d 	bl	8003388 <procData>
				//("0x0D\r\n");

			}
		}
	//}
}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	200006c0 	.word	0x200006c0
 8003358:	200006c4 	.word	0x200006c4
 800335c:	20000800 	.word	0x20000800
 8003360:	200006c8 	.word	0x200006c8
 8003364:	200004ac 	.word	0x200004ac
 8003368:	200005d8 	.word	0x200005d8
 800336c:	20000318 	.word	0x20000318
 8003370:	20000000 	.word	0x20000000
 8003374:	0800f8d0 	.word	0x0800f8d0
 8003378:	0800f8dc 	.word	0x0800f8dc
 800337c:	0800f8e4 	.word	0x0800f8e4
 8003380:	0800f8f4 	.word	0x0800f8f4
 8003384:	20000730 	.word	0x20000730

08003388 <procData>:

void procData(){		//process line
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af02      	add	r7, sp, #8
	//Debug_Send("Rx:");
	//Debug_Send(procBuff);
	//Debug_Send("\r\n");
	strcpy(GSMtemp,"Rx:");
 800338e:	4bc9      	ldr	r3, [pc, #804]	; (80036b4 <procData+0x32c>)
 8003390:	4ac9      	ldr	r2, [pc, #804]	; (80036b8 <procData+0x330>)
 8003392:	601a      	str	r2, [r3, #0]
	strcat(GSMtemp,procBuff);
 8003394:	4ac9      	ldr	r2, [pc, #804]	; (80036bc <procData+0x334>)
 8003396:	4bc7      	ldr	r3, [pc, #796]	; (80036b4 <procData+0x32c>)
 8003398:	0011      	movs	r1, r2
 800339a:	0018      	movs	r0, r3
 800339c:	f009 f90c 	bl	800c5b8 <strcat>
	strcat(GSMtemp,"\r\n");
 80033a0:	4bc4      	ldr	r3, [pc, #784]	; (80036b4 <procData+0x32c>)
 80033a2:	0018      	movs	r0, r3
 80033a4:	f7fc feba 	bl	800011c <strlen>
 80033a8:	0003      	movs	r3, r0
 80033aa:	001a      	movs	r2, r3
 80033ac:	4bc1      	ldr	r3, [pc, #772]	; (80036b4 <procData+0x32c>)
 80033ae:	18d2      	adds	r2, r2, r3
 80033b0:	4bc3      	ldr	r3, [pc, #780]	; (80036c0 <procData+0x338>)
 80033b2:	0010      	movs	r0, r2
 80033b4:	0019      	movs	r1, r3
 80033b6:	2303      	movs	r3, #3
 80033b8:	001a      	movs	r2, r3
 80033ba:	f009 f8cb 	bl	800c554 <memcpy>
	Debug_Send(GSMtemp);
 80033be:	4bbd      	ldr	r3, [pc, #756]	; (80036b4 <procData+0x32c>)
 80033c0:	0018      	movs	r0, r3
 80033c2:	f7ff ff0b 	bl	80031dc <Debug_Send>
	if (gsmInfo.mqttPaytload == 1){
 80033c6:	4abf      	ldr	r2, [pc, #764]	; (80036c4 <procData+0x33c>)
 80033c8:	23c4      	movs	r3, #196	; 0xc4
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	58d3      	ldr	r3, [r2, r3]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d10d      	bne.n	80033ee <procData+0x66>
		gsmInfo.mqttPaytload = 0;
 80033d2:	4abc      	ldr	r2, [pc, #752]	; (80036c4 <procData+0x33c>)
 80033d4:	23c4      	movs	r3, #196	; 0xc4
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	2100      	movs	r1, #0
 80033da:	50d1      	str	r1, [r2, r3]
		if(strncmp((char*)procBuff,"1",1)==0) pulseTim(200);
 80033dc:	4bb7      	ldr	r3, [pc, #732]	; (80036bc <procData+0x334>)
 80033de:	781a      	ldrb	r2, [r3, #0]
 80033e0:	4bb9      	ldr	r3, [pc, #740]	; (80036c8 <procData+0x340>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	d102      	bne.n	80033ee <procData+0x66>
 80033e8:	20c8      	movs	r0, #200	; 0xc8
 80033ea:	f001 f965 	bl	80046b8 <pulseTim>
		//else if(strncmp((char*)procBuff,"0",1)==0) HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,GPIO_PIN_SET);
		//else if(strncmp((char*)procBuff,"s",1)==0) publish("test1");
	}
	if (smsFlags.content == 1){
 80033ee:	4bb7      	ldr	r3, [pc, #732]	; (80036cc <procData+0x344>)
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d10f      	bne.n	8003416 <procData+0x8e>
		smsFlags.content = 0;
 80033f6:	4bb5      	ldr	r3, [pc, #724]	; (80036cc <procData+0x344>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	611a      	str	r2, [r3, #16]
		smsFlags.del = 1;
 80033fc:	4bb3      	ldr	r3, [pc, #716]	; (80036cc <procData+0x344>)
 80033fe:	2201      	movs	r2, #1
 8003400:	621a      	str	r2, [r3, #32]
		//if(strncmp((char*)smsInfo.index,"1",2)==0){
			//sendData("Got index: ",UART0);
			//sendData(smsInfo.index,UART0);
			//sendData("\r\n",UART0);
			strcpy(smsInfo.content1,procBuff);	//store SMS content
 8003402:	4aae      	ldr	r2, [pc, #696]	; (80036bc <procData+0x334>)
 8003404:	4bb2      	ldr	r3, [pc, #712]	; (80036d0 <procData+0x348>)
 8003406:	0011      	movs	r1, r2
 8003408:	0018      	movs	r0, r3
 800340a:	f009 f8e2 	bl	800c5d2 <strcpy>
		}*/
		//sendData("SMS conent:",UART0);
		//sendData(smsInfo.content,UART0);
		//sendData("\r\n",UART0);
		//sendData("Got SMS content\r\n",UART0);
			Debug_Send("SMS Process Done\r\n");
 800340e:	4bb1      	ldr	r3, [pc, #708]	; (80036d4 <procData+0x34c>)
 8003410:	0018      	movs	r0, r3
 8003412:	f7ff fee3 	bl	80031dc <Debug_Send>
	}
	if (gsmInfo.imeiFlag == 1)getIMEI();
 8003416:	4aab      	ldr	r2, [pc, #684]	; (80036c4 <procData+0x33c>)
 8003418:	23a8      	movs	r3, #168	; 0xa8
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	58d3      	ldr	r3, [r2, r3]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d102      	bne.n	8003428 <procData+0xa0>
 8003422:	f000 faa3 	bl	800396c <getIMEI>


	//sendData(procBuff,UART0);
	//sendData("\r\n",UART0);
	//else if(strncmp((char*)procBuff,"+SIM READY1",8)==0);		//unsolicited
}
 8003426:	e271      	b.n	800390c <procData+0x584>
	else if (gsmInfo.imeiFlag > 1){
 8003428:	4aa6      	ldr	r2, [pc, #664]	; (80036c4 <procData+0x33c>)
 800342a:	23a8      	movs	r3, #168	; 0xa8
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	58d3      	ldr	r3, [r2, r3]
 8003430:	2b01      	cmp	r3, #1
 8003432:	dd09      	ble.n	8003448 <procData+0xc0>
		gsmInfo.imeiFlag--;
 8003434:	4aa3      	ldr	r2, [pc, #652]	; (80036c4 <procData+0x33c>)
 8003436:	23a8      	movs	r3, #168	; 0xa8
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	58d3      	ldr	r3, [r2, r3]
 800343c:	1e59      	subs	r1, r3, #1
 800343e:	4aa1      	ldr	r2, [pc, #644]	; (80036c4 <procData+0x33c>)
 8003440:	23a8      	movs	r3, #168	; 0xa8
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	50d1      	str	r1, [r2, r3]
}
 8003446:	e261      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"AT+CGSN",7)==0){
 8003448:	49a3      	ldr	r1, [pc, #652]	; (80036d8 <procData+0x350>)
 800344a:	4b9c      	ldr	r3, [pc, #624]	; (80036bc <procData+0x334>)
 800344c:	2207      	movs	r2, #7
 800344e:	0018      	movs	r0, r3
 8003450:	f009 f8c7 	bl	800c5e2 <strncmp>
 8003454:	1e03      	subs	r3, r0, #0
 8003456:	d105      	bne.n	8003464 <procData+0xdc>
			gsmInfo.imeiFlag = 1;
 8003458:	4a9a      	ldr	r2, [pc, #616]	; (80036c4 <procData+0x33c>)
 800345a:	23a8      	movs	r3, #168	; 0xa8
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	2101      	movs	r1, #1
 8003460:	50d1      	str	r1, [r2, r3]
}
 8003462:	e253      	b.n	800390c <procData+0x584>
	else if (gsmInfo.GPRS_Rec == 1){
 8003464:	4a97      	ldr	r2, [pc, #604]	; (80036c4 <procData+0x33c>)
 8003466:	23ac      	movs	r3, #172	; 0xac
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	58d3      	ldr	r3, [r2, r3]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d102      	bne.n	8003476 <procData+0xee>
		DataDecrypt();
 8003470:	f000 fd44 	bl	8003efc <DataDecrypt>
}
 8003474:	e24a      	b.n	800390c <procData+0x584>
	else if (gsmInfo.GPRS_Rec > 1) gsmInfo.GPRS_Rec--;
 8003476:	4a93      	ldr	r2, [pc, #588]	; (80036c4 <procData+0x33c>)
 8003478:	23ac      	movs	r3, #172	; 0xac
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	58d3      	ldr	r3, [r2, r3]
 800347e:	2b01      	cmp	r3, #1
 8003480:	dd09      	ble.n	8003496 <procData+0x10e>
 8003482:	4a90      	ldr	r2, [pc, #576]	; (80036c4 <procData+0x33c>)
 8003484:	23ac      	movs	r3, #172	; 0xac
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	58d3      	ldr	r3, [r2, r3]
 800348a:	1e59      	subs	r1, r3, #1
 800348c:	4a8d      	ldr	r2, [pc, #564]	; (80036c4 <procData+0x33c>)
 800348e:	23ac      	movs	r3, #172	; 0xac
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	50d1      	str	r1, [r2, r3]
}
 8003494:	e23a      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"+CREG: 0,1",10)==0)gsmState = SMSconfig;
 8003496:	4991      	ldr	r1, [pc, #580]	; (80036dc <procData+0x354>)
 8003498:	4b88      	ldr	r3, [pc, #544]	; (80036bc <procData+0x334>)
 800349a:	220a      	movs	r2, #10
 800349c:	0018      	movs	r0, r3
 800349e:	f009 f8a0 	bl	800c5e2 <strncmp>
 80034a2:	1e03      	subs	r3, r0, #0
 80034a4:	d103      	bne.n	80034ae <procData+0x126>
 80034a6:	4b8e      	ldr	r3, [pc, #568]	; (80036e0 <procData+0x358>)
 80034a8:	2208      	movs	r2, #8
 80034aa:	701a      	strb	r2, [r3, #0]
}
 80034ac:	e22e      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"+CREG: 0,5",10)==0)gsmState = SMSconfig;
 80034ae:	498d      	ldr	r1, [pc, #564]	; (80036e4 <procData+0x35c>)
 80034b0:	4b82      	ldr	r3, [pc, #520]	; (80036bc <procData+0x334>)
 80034b2:	220a      	movs	r2, #10
 80034b4:	0018      	movs	r0, r3
 80034b6:	f009 f894 	bl	800c5e2 <strncmp>
 80034ba:	1e03      	subs	r3, r0, #0
 80034bc:	d103      	bne.n	80034c6 <procData+0x13e>
 80034be:	4b88      	ldr	r3, [pc, #544]	; (80036e0 <procData+0x358>)
 80034c0:	2208      	movs	r2, #8
 80034c2:	701a      	strb	r2, [r3, #0]
}
 80034c4:	e222      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"+CREG: 1",8)==0)gsmState = SMSconfig;
 80034c6:	4988      	ldr	r1, [pc, #544]	; (80036e8 <procData+0x360>)
 80034c8:	4b7c      	ldr	r3, [pc, #496]	; (80036bc <procData+0x334>)
 80034ca:	2208      	movs	r2, #8
 80034cc:	0018      	movs	r0, r3
 80034ce:	f009 f888 	bl	800c5e2 <strncmp>
 80034d2:	1e03      	subs	r3, r0, #0
 80034d4:	d103      	bne.n	80034de <procData+0x156>
 80034d6:	4b82      	ldr	r3, [pc, #520]	; (80036e0 <procData+0x358>)
 80034d8:	2208      	movs	r2, #8
 80034da:	701a      	strb	r2, [r3, #0]
}
 80034dc:	e216      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"+CGREG: 1",9)==0) Debug_Send("GOT GPRS!!!!!!!\r\n");
 80034de:	4983      	ldr	r1, [pc, #524]	; (80036ec <procData+0x364>)
 80034e0:	4b76      	ldr	r3, [pc, #472]	; (80036bc <procData+0x334>)
 80034e2:	2209      	movs	r2, #9
 80034e4:	0018      	movs	r0, r3
 80034e6:	f009 f87c 	bl	800c5e2 <strncmp>
 80034ea:	1e03      	subs	r3, r0, #0
 80034ec:	d104      	bne.n	80034f8 <procData+0x170>
 80034ee:	4b80      	ldr	r3, [pc, #512]	; (80036f0 <procData+0x368>)
 80034f0:	0018      	movs	r0, r3
 80034f2:	f7ff fe73 	bl	80031dc <Debug_Send>
}
 80034f6:	e209      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"+CSQ",4)==0)getSignal();
 80034f8:	497e      	ldr	r1, [pc, #504]	; (80036f4 <procData+0x36c>)
 80034fa:	4b70      	ldr	r3, [pc, #448]	; (80036bc <procData+0x334>)
 80034fc:	2204      	movs	r2, #4
 80034fe:	0018      	movs	r0, r3
 8003500:	f009 f86f 	bl	800c5e2 <strncmp>
 8003504:	1e03      	subs	r3, r0, #0
 8003506:	d102      	bne.n	800350e <procData+0x186>
 8003508:	f000 fa78 	bl	80039fc <getSignal>
}
 800350c:	e1fe      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"+CMGS:",6)==0)smsFlags.send = 0;
 800350e:	497a      	ldr	r1, [pc, #488]	; (80036f8 <procData+0x370>)
 8003510:	4b6a      	ldr	r3, [pc, #424]	; (80036bc <procData+0x334>)
 8003512:	2206      	movs	r2, #6
 8003514:	0018      	movs	r0, r3
 8003516:	f009 f864 	bl	800c5e2 <strncmp>
 800351a:	1e03      	subs	r3, r0, #0
 800351c:	d103      	bne.n	8003526 <procData+0x19e>
 800351e:	4b6b      	ldr	r3, [pc, #428]	; (80036cc <procData+0x344>)
 8003520:	2200      	movs	r2, #0
 8003522:	609a      	str	r2, [r3, #8]
}
 8003524:	e1f2      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"+CCID:",6)==0)getCCID();
 8003526:	4975      	ldr	r1, [pc, #468]	; (80036fc <procData+0x374>)
 8003528:	4b64      	ldr	r3, [pc, #400]	; (80036bc <procData+0x334>)
 800352a:	2206      	movs	r2, #6
 800352c:	0018      	movs	r0, r3
 800352e:	f009 f858 	bl	800c5e2 <strncmp>
 8003532:	1e03      	subs	r3, r0, #0
 8003534:	d102      	bne.n	800353c <procData+0x1b4>
 8003536:	f000 fa4f 	bl	80039d8 <getCCID>
}
 800353a:	e1e7      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"OK",3)==0)	OK();
 800353c:	4a70      	ldr	r2, [pc, #448]	; (8003700 <procData+0x378>)
 800353e:	4b5f      	ldr	r3, [pc, #380]	; (80036bc <procData+0x334>)
 8003540:	0011      	movs	r1, r2
 8003542:	0018      	movs	r0, r3
 8003544:	f7fc fde0 	bl	8000108 <strcmp>
 8003548:	1e03      	subs	r3, r0, #0
 800354a:	d102      	bne.n	8003552 <procData+0x1ca>
 800354c:	f000 fc8c 	bl	8003e68 <OK>
}
 8003550:	e1dc      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"+CGPADDR",8)==0)Context();
 8003552:	496c      	ldr	r1, [pc, #432]	; (8003704 <procData+0x37c>)
 8003554:	4b59      	ldr	r3, [pc, #356]	; (80036bc <procData+0x334>)
 8003556:	2208      	movs	r2, #8
 8003558:	0018      	movs	r0, r3
 800355a:	f009 f842 	bl	800c5e2 <strncmp>
 800355e:	1e03      	subs	r3, r0, #0
 8003560:	d102      	bne.n	8003568 <procData+0x1e0>
 8003562:	f000 fc13 	bl	8003d8c <Context>
}
 8003566:	e1d1      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"CONNECT",6)==0){
 8003568:	4967      	ldr	r1, [pc, #412]	; (8003708 <procData+0x380>)
 800356a:	4b54      	ldr	r3, [pc, #336]	; (80036bc <procData+0x334>)
 800356c:	2206      	movs	r2, #6
 800356e:	0018      	movs	r0, r3
 8003570:	f009 f837 	bl	800c5e2 <strncmp>
 8003574:	1e03      	subs	r3, r0, #0
 8003576:	d10a      	bne.n	800358e <procData+0x206>
		gsmInfo.gprsDataPending = 0;
 8003578:	4b52      	ldr	r3, [pc, #328]	; (80036c4 <procData+0x33c>)
 800357a:	2280      	movs	r2, #128	; 0x80
 800357c:	2100      	movs	r1, #0
 800357e:	5099      	str	r1, [r3, r2]
		gsmInfo.socket = 1;
 8003580:	4b50      	ldr	r3, [pc, #320]	; (80036c4 <procData+0x33c>)
 8003582:	2201      	movs	r2, #1
 8003584:	679a      	str	r2, [r3, #120]	; 0x78
		gsmState = GPRS_Send;
 8003586:	4b56      	ldr	r3, [pc, #344]	; (80036e0 <procData+0x358>)
 8003588:	2222      	movs	r2, #34	; 0x22
 800358a:	701a      	strb	r2, [r3, #0]
}
 800358c:	e1be      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"ALREADY CONNECT",15)==0){
 800358e:	495f      	ldr	r1, [pc, #380]	; (800370c <procData+0x384>)
 8003590:	4b4a      	ldr	r3, [pc, #296]	; (80036bc <procData+0x334>)
 8003592:	220f      	movs	r2, #15
 8003594:	0018      	movs	r0, r3
 8003596:	f009 f824 	bl	800c5e2 <strncmp>
 800359a:	1e03      	subs	r3, r0, #0
 800359c:	d106      	bne.n	80035ac <procData+0x224>
		gsmState = SocketClose;
 800359e:	4b50      	ldr	r3, [pc, #320]	; (80036e0 <procData+0x358>)
 80035a0:	221b      	movs	r2, #27
 80035a2:	701a      	strb	r2, [r3, #0]
		gsmInfo.socket = 0;
 80035a4:	4b47      	ldr	r3, [pc, #284]	; (80036c4 <procData+0x33c>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	679a      	str	r2, [r3, #120]	; 0x78
}
 80035aa:	e1af      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"CONNECT FAIL",13)==0){
 80035ac:	4a58      	ldr	r2, [pc, #352]	; (8003710 <procData+0x388>)
 80035ae:	4b43      	ldr	r3, [pc, #268]	; (80036bc <procData+0x334>)
 80035b0:	0011      	movs	r1, r2
 80035b2:	0018      	movs	r0, r3
 80035b4:	f7fc fda8 	bl	8000108 <strcmp>
 80035b8:	1e03      	subs	r3, r0, #0
 80035ba:	d103      	bne.n	80035c4 <procData+0x23c>
		gsmState = GPRS_Off;
 80035bc:	4b48      	ldr	r3, [pc, #288]	; (80036e0 <procData+0x358>)
 80035be:	2218      	movs	r2, #24
 80035c0:	701a      	strb	r2, [r3, #0]
}
 80035c2:	e1a3      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"SEND OK",7)==0){	//data sent
 80035c4:	4953      	ldr	r1, [pc, #332]	; (8003714 <procData+0x38c>)
 80035c6:	4b3d      	ldr	r3, [pc, #244]	; (80036bc <procData+0x334>)
 80035c8:	2207      	movs	r2, #7
 80035ca:	0018      	movs	r0, r3
 80035cc:	f009 f809 	bl	800c5e2 <strncmp>
 80035d0:	1e03      	subs	r3, r0, #0
 80035d2:	d100      	bne.n	80035d6 <procData+0x24e>
 80035d4:	e19a      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"CLOSED",7)==0){	//socket closed by remote
 80035d6:	4a50      	ldr	r2, [pc, #320]	; (8003718 <procData+0x390>)
 80035d8:	4b38      	ldr	r3, [pc, #224]	; (80036bc <procData+0x334>)
 80035da:	0011      	movs	r1, r2
 80035dc:	0018      	movs	r0, r3
 80035de:	f7fc fd93 	bl	8000108 <strcmp>
 80035e2:	1e03      	subs	r3, r0, #0
 80035e4:	d110      	bne.n	8003608 <procData+0x280>
		gsmInfo.socket = 0;
 80035e6:	4b37      	ldr	r3, [pc, #220]	; (80036c4 <procData+0x33c>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	679a      	str	r2, [r3, #120]	; 0x78
		gsmTimer = 0;
 80035ec:	4b4b      	ldr	r3, [pc, #300]	; (800371c <procData+0x394>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]
		Debug_Send("Socket closed\r\n");
 80035f2:	4b4b      	ldr	r3, [pc, #300]	; (8003720 <procData+0x398>)
 80035f4:	0018      	movs	r0, r3
 80035f6:	f7ff fdf1 	bl	80031dc <Debug_Send>
		gsmState = GPRS_Off;
 80035fa:	4b39      	ldr	r3, [pc, #228]	; (80036e0 <procData+0x358>)
 80035fc:	2218      	movs	r2, #24
 80035fe:	701a      	strb	r2, [r3, #0]
		gsmState = 0;
 8003600:	4b37      	ldr	r3, [pc, #220]	; (80036e0 <procData+0x358>)
 8003602:	2200      	movs	r2, #0
 8003604:	701a      	strb	r2, [r3, #0]
}
 8003606:	e181      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"CLOSE OK",8)==0){
 8003608:	4946      	ldr	r1, [pc, #280]	; (8003724 <procData+0x39c>)
 800360a:	4b2c      	ldr	r3, [pc, #176]	; (80036bc <procData+0x334>)
 800360c:	2208      	movs	r2, #8
 800360e:	0018      	movs	r0, r3
 8003610:	f008 ffe7 	bl	800c5e2 <strncmp>
 8003614:	1e03      	subs	r3, r0, #0
 8003616:	d110      	bne.n	800363a <procData+0x2b2>
		gsmInfo.socket = 0;
 8003618:	4b2a      	ldr	r3, [pc, #168]	; (80036c4 <procData+0x33c>)
 800361a:	2200      	movs	r2, #0
 800361c:	679a      	str	r2, [r3, #120]	; 0x78
		gsmTimer = 0;
 800361e:	4b3f      	ldr	r3, [pc, #252]	; (800371c <procData+0x394>)
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
		Debug_Send("Socket forced closed\r\n");
 8003624:	4b40      	ldr	r3, [pc, #256]	; (8003728 <procData+0x3a0>)
 8003626:	0018      	movs	r0, r3
 8003628:	f7ff fdd8 	bl	80031dc <Debug_Send>
		gsmState = GPRS_Off;
 800362c:	4b2c      	ldr	r3, [pc, #176]	; (80036e0 <procData+0x358>)
 800362e:	2218      	movs	r2, #24
 8003630:	701a      	strb	r2, [r3, #0]
		gsmState = 0;
 8003632:	4b2b      	ldr	r3, [pc, #172]	; (80036e0 <procData+0x358>)
 8003634:	2200      	movs	r2, #0
 8003636:	701a      	strb	r2, [r3, #0]
}
 8003638:	e168      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"+MIPCLOSE",9)==0)gsmState = GPRS_Off;
 800363a:	493c      	ldr	r1, [pc, #240]	; (800372c <procData+0x3a4>)
 800363c:	4b1f      	ldr	r3, [pc, #124]	; (80036bc <procData+0x334>)
 800363e:	2209      	movs	r2, #9
 8003640:	0018      	movs	r0, r3
 8003642:	f008 ffce 	bl	800c5e2 <strncmp>
 8003646:	1e03      	subs	r3, r0, #0
 8003648:	d103      	bne.n	8003652 <procData+0x2ca>
 800364a:	4b25      	ldr	r3, [pc, #148]	; (80036e0 <procData+0x358>)
 800364c:	2218      	movs	r2, #24
 800364e:	701a      	strb	r2, [r3, #0]
}
 8003650:	e15c      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"SEND FAIL",8)==0)gsmState = GPRS_Off;
 8003652:	4937      	ldr	r1, [pc, #220]	; (8003730 <procData+0x3a8>)
 8003654:	4b19      	ldr	r3, [pc, #100]	; (80036bc <procData+0x334>)
 8003656:	2208      	movs	r2, #8
 8003658:	0018      	movs	r0, r3
 800365a:	f008 ffc2 	bl	800c5e2 <strncmp>
 800365e:	1e03      	subs	r3, r0, #0
 8003660:	d103      	bne.n	800366a <procData+0x2e2>
 8003662:	4b1f      	ldr	r3, [pc, #124]	; (80036e0 <procData+0x358>)
 8003664:	2218      	movs	r2, #24
 8003666:	701a      	strb	r2, [r3, #0]
}
 8003668:	e150      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"+CMGL",5)==0) GotSMS();
 800366a:	4932      	ldr	r1, [pc, #200]	; (8003734 <procData+0x3ac>)
 800366c:	4b13      	ldr	r3, [pc, #76]	; (80036bc <procData+0x334>)
 800366e:	2205      	movs	r2, #5
 8003670:	0018      	movs	r0, r3
 8003672:	f008 ffb6 	bl	800c5e2 <strncmp>
 8003676:	1e03      	subs	r3, r0, #0
 8003678:	d102      	bne.n	8003680 <procData+0x2f8>
 800367a:	f000 fbc5 	bl	8003e08 <GotSMS>
}
 800367e:	e145      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"+CPIN: NOT READY",16)==0){
 8003680:	492d      	ldr	r1, [pc, #180]	; (8003738 <procData+0x3b0>)
 8003682:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <procData+0x334>)
 8003684:	2210      	movs	r2, #16
 8003686:	0018      	movs	r0, r3
 8003688:	f008 ffab 	bl	800c5e2 <strncmp>
 800368c:	1e03      	subs	r3, r0, #0
 800368e:	d102      	bne.n	8003696 <procData+0x30e>
		GSM_Init();
 8003690:	f7ff fb4a 	bl	8002d28 <GSM_Init>
}
 8003694:	e13a      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"*PSUTTZ:",7)==0){
 8003696:	4929      	ldr	r1, [pc, #164]	; (800373c <procData+0x3b4>)
 8003698:	4b08      	ldr	r3, [pc, #32]	; (80036bc <procData+0x334>)
 800369a:	2207      	movs	r2, #7
 800369c:	0018      	movs	r0, r3
 800369e:	f008 ffa0 	bl	800c5e2 <strncmp>
 80036a2:	1e03      	subs	r3, r0, #0
 80036a4:	d14c      	bne.n	8003740 <procData+0x3b8>
		gsmInfo.clock = 1;
 80036a6:	4a07      	ldr	r2, [pc, #28]	; (80036c4 <procData+0x33c>)
 80036a8:	23b2      	movs	r3, #178	; 0xb2
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	2101      	movs	r1, #1
 80036ae:	50d1      	str	r1, [r2, r3]
}
 80036b0:	e12c      	b.n	800390c <procData+0x584>
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	200006cc 	.word	0x200006cc
 80036b8:	003a7852 	.word	0x003a7852
 80036bc:	200005d8 	.word	0x200005d8
 80036c0:	0800f4c0 	.word	0x0800f4c0
 80036c4:	20000318 	.word	0x20000318
 80036c8:	0800f904 	.word	0x0800f904
 80036cc:	2000014c 	.word	0x2000014c
 80036d0:	200001a0 	.word	0x200001a0
 80036d4:	0800f908 	.word	0x0800f908
 80036d8:	0800f91c 	.word	0x0800f91c
 80036dc:	0800f924 	.word	0x0800f924
 80036e0:	20000000 	.word	0x20000000
 80036e4:	0800f930 	.word	0x0800f930
 80036e8:	0800f93c 	.word	0x0800f93c
 80036ec:	0800f948 	.word	0x0800f948
 80036f0:	0800f954 	.word	0x0800f954
 80036f4:	0800f968 	.word	0x0800f968
 80036f8:	0800f970 	.word	0x0800f970
 80036fc:	0800f978 	.word	0x0800f978
 8003700:	0800f980 	.word	0x0800f980
 8003704:	0800f984 	.word	0x0800f984
 8003708:	0800f990 	.word	0x0800f990
 800370c:	0800f998 	.word	0x0800f998
 8003710:	0800f9a8 	.word	0x0800f9a8
 8003714:	0800f9b8 	.word	0x0800f9b8
 8003718:	0800f9c0 	.word	0x0800f9c0
 800371c:	200007f0 	.word	0x200007f0
 8003720:	0800f9c8 	.word	0x0800f9c8
 8003724:	0800f9d8 	.word	0x0800f9d8
 8003728:	0800f9e4 	.word	0x0800f9e4
 800372c:	0800f9fc 	.word	0x0800f9fc
 8003730:	0800fa08 	.word	0x0800fa08
 8003734:	0800fa14 	.word	0x0800fa14
 8003738:	0800fa1c 	.word	0x0800fa1c
 800373c:	0800fa30 	.word	0x0800fa30
	else if(strncmp((char*)procBuff,"DOWNLOAD",8)==0){
 8003740:	4974      	ldr	r1, [pc, #464]	; (8003914 <procData+0x58c>)
 8003742:	4b75      	ldr	r3, [pc, #468]	; (8003918 <procData+0x590>)
 8003744:	2208      	movs	r2, #8
 8003746:	0018      	movs	r0, r3
 8003748:	f008 ff4b 	bl	800c5e2 <strncmp>
 800374c:	1e03      	subs	r3, r0, #0
 800374e:	d103      	bne.n	8003758 <procData+0x3d0>
		gsmState = SMTP_Body;
 8003750:	4b72      	ldr	r3, [pc, #456]	; (800391c <procData+0x594>)
 8003752:	2230      	movs	r2, #48	; 0x30
 8003754:	701a      	strb	r2, [r3, #0]
}
 8003756:	e0d9      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"+SAPBR: 1,1",11)==0){
 8003758:	4971      	ldr	r1, [pc, #452]	; (8003920 <procData+0x598>)
 800375a:	4b6f      	ldr	r3, [pc, #444]	; (8003918 <procData+0x590>)
 800375c:	220b      	movs	r2, #11
 800375e:	0018      	movs	r0, r3
 8003760:	f008 ff3f 	bl	800c5e2 <strncmp>
 8003764:	1e03      	subs	r3, r0, #0
 8003766:	d103      	bne.n	8003770 <procData+0x3e8>
		gsmState = EmailCid;
 8003768:	4b6c      	ldr	r3, [pc, #432]	; (800391c <procData+0x594>)
 800376a:	2228      	movs	r2, #40	; 0x28
 800376c:	701a      	strb	r2, [r3, #0]
}
 800376e:	e0cd      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"+CCLK:",6)==0){
 8003770:	496c      	ldr	r1, [pc, #432]	; (8003924 <procData+0x59c>)
 8003772:	4b69      	ldr	r3, [pc, #420]	; (8003918 <procData+0x590>)
 8003774:	2206      	movs	r2, #6
 8003776:	0018      	movs	r0, r3
 8003778:	f008 ff33 	bl	800c5e2 <strncmp>
 800377c:	1e03      	subs	r3, r0, #0
 800377e:	d126      	bne.n	80037ce <procData+0x446>
		myStrSection(procBuff, GSMtemp,25,'"',1);
 8003780:	4969      	ldr	r1, [pc, #420]	; (8003928 <procData+0x5a0>)
 8003782:	4865      	ldr	r0, [pc, #404]	; (8003918 <procData+0x590>)
 8003784:	2301      	movs	r3, #1
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	2322      	movs	r3, #34	; 0x22
 800378a:	2219      	movs	r2, #25
 800378c:	f002 fa44 	bl	8005c18 <myStrSection>
		updateTime(GSMtemp);
 8003790:	4b65      	ldr	r3, [pc, #404]	; (8003928 <procData+0x5a0>)
 8003792:	0018      	movs	r0, r3
 8003794:	f000 fee0 	bl	8004558 <updateTime>
		myStrSection(GSMtemp, gsmInfo.date,15,',',0);
 8003798:	4964      	ldr	r1, [pc, #400]	; (800392c <procData+0x5a4>)
 800379a:	4863      	ldr	r0, [pc, #396]	; (8003928 <procData+0x5a0>)
 800379c:	2300      	movs	r3, #0
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	232c      	movs	r3, #44	; 0x2c
 80037a2:	220f      	movs	r2, #15
 80037a4:	f002 fa38 	bl	8005c18 <myStrSection>
		myStrSection(GSMtemp, gsmInfo.time,15,',',1);
 80037a8:	4961      	ldr	r1, [pc, #388]	; (8003930 <procData+0x5a8>)
 80037aa:	485f      	ldr	r0, [pc, #380]	; (8003928 <procData+0x5a0>)
 80037ac:	2301      	movs	r3, #1
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	232c      	movs	r3, #44	; 0x2c
 80037b2:	220f      	movs	r2, #15
 80037b4:	f002 fa30 	bl	8005c18 <myStrSection>
		if (gsmInfo.date[0] == 0x30){
 80037b8:	4a5e      	ldr	r2, [pc, #376]	; (8003934 <procData+0x5ac>)
 80037ba:	23b4      	movs	r3, #180	; 0xb4
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	5cd3      	ldrb	r3, [r2, r3]
 80037c0:	2b30      	cmp	r3, #48	; 0x30
 80037c2:	d000      	beq.n	80037c6 <procData+0x43e>
 80037c4:	e0a2      	b.n	800390c <procData+0x584>
			gsmState = EmailCid;
 80037c6:	4b55      	ldr	r3, [pc, #340]	; (800391c <procData+0x594>)
 80037c8:	2228      	movs	r2, #40	; 0x28
 80037ca:	701a      	strb	r2, [r3, #0]
}
 80037cc:	e09e      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"+CGACT: 1,1",11)==0){
 80037ce:	495a      	ldr	r1, [pc, #360]	; (8003938 <procData+0x5b0>)
 80037d0:	4b51      	ldr	r3, [pc, #324]	; (8003918 <procData+0x590>)
 80037d2:	220b      	movs	r2, #11
 80037d4:	0018      	movs	r0, r3
 80037d6:	f008 ff04 	bl	800c5e2 <strncmp>
 80037da:	1e03      	subs	r3, r0, #0
 80037dc:	d103      	bne.n	80037e6 <procData+0x45e>
		smsFlags.gprsPending = 0;
 80037de:	4b57      	ldr	r3, [pc, #348]	; (800393c <procData+0x5b4>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	619a      	str	r2, [r3, #24]
}
 80037e4:	e092      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"ERROR",5)==0){
 80037e6:	4956      	ldr	r1, [pc, #344]	; (8003940 <procData+0x5b8>)
 80037e8:	4b4b      	ldr	r3, [pc, #300]	; (8003918 <procData+0x590>)
 80037ea:	2205      	movs	r2, #5
 80037ec:	0018      	movs	r0, r3
 80037ee:	f008 fef8 	bl	800c5e2 <strncmp>
 80037f2:	1e03      	subs	r3, r0, #0
 80037f4:	d118      	bne.n	8003828 <procData+0x4a0>
		onTimer = 0;
 80037f6:	4b53      	ldr	r3, [pc, #332]	; (8003944 <procData+0x5bc>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	801a      	strh	r2, [r3, #0]
		smsFlags.config = 0;
 80037fc:	4b4f      	ldr	r3, [pc, #316]	; (800393c <procData+0x5b4>)
 80037fe:	2200      	movs	r2, #0
 8003800:	605a      	str	r2, [r3, #4]
		smsFlags.gprsActive = 0;
 8003802:	4b4e      	ldr	r3, [pc, #312]	; (800393c <procData+0x5b4>)
 8003804:	2200      	movs	r2, #0
 8003806:	61da      	str	r2, [r3, #28]
		if (gsmInfo.balancePending == 1){
 8003808:	4a4a      	ldr	r2, [pc, #296]	; (8003934 <procData+0x5ac>)
 800380a:	239c      	movs	r3, #156	; 0x9c
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	58d3      	ldr	r3, [r2, r3]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d000      	beq.n	8003816 <procData+0x48e>
 8003814:	e07a      	b.n	800390c <procData+0x584>
			gsmInfo.balancePending = 0;
 8003816:	4a47      	ldr	r2, [pc, #284]	; (8003934 <procData+0x5ac>)
 8003818:	239c      	movs	r3, #156	; 0x9c
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	2100      	movs	r1, #0
 800381e:	50d1      	str	r1, [r2, r3]
			gsmState = 0;
 8003820:	4b3e      	ldr	r3, [pc, #248]	; (800391c <procData+0x594>)
 8003822:	2200      	movs	r2, #0
 8003824:	701a      	strb	r2, [r3, #0]
}
 8003826:	e071      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"+NETOPEN: 0",11)==0){
 8003828:	4947      	ldr	r1, [pc, #284]	; (8003948 <procData+0x5c0>)
 800382a:	4b3b      	ldr	r3, [pc, #236]	; (8003918 <procData+0x590>)
 800382c:	220b      	movs	r2, #11
 800382e:	0018      	movs	r0, r3
 8003830:	f008 fed7 	bl	800c5e2 <strncmp>
 8003834:	1e03      	subs	r3, r0, #0
 8003836:	d103      	bne.n	8003840 <procData+0x4b8>
		gsmState = SocketOpen;
 8003838:	4b38      	ldr	r3, [pc, #224]	; (800391c <procData+0x594>)
 800383a:	221a      	movs	r2, #26
 800383c:	701a      	strb	r2, [r3, #0]
}
 800383e:	e065      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"+CMQTTSTART",11)==0){
 8003840:	4942      	ldr	r1, [pc, #264]	; (800394c <procData+0x5c4>)
 8003842:	4b35      	ldr	r3, [pc, #212]	; (8003918 <procData+0x590>)
 8003844:	220b      	movs	r2, #11
 8003846:	0018      	movs	r0, r3
 8003848:	f008 fecb 	bl	800c5e2 <strncmp>
 800384c:	1e03      	subs	r3, r0, #0
 800384e:	d103      	bne.n	8003858 <procData+0x4d0>
		gsmState = MQTT_Acquire;
 8003850:	4b32      	ldr	r3, [pc, #200]	; (800391c <procData+0x594>)
 8003852:	2236      	movs	r2, #54	; 0x36
 8003854:	701a      	strb	r2, [r3, #0]
}
 8003856:	e059      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"+CMQTTCONNECT: 0,0",18)==0){
 8003858:	493d      	ldr	r1, [pc, #244]	; (8003950 <procData+0x5c8>)
 800385a:	4b2f      	ldr	r3, [pc, #188]	; (8003918 <procData+0x590>)
 800385c:	2212      	movs	r2, #18
 800385e:	0018      	movs	r0, r3
 8003860:	f008 febf 	bl	800c5e2 <strncmp>
 8003864:	1e03      	subs	r3, r0, #0
 8003866:	d103      	bne.n	8003870 <procData+0x4e8>
		gsmState = MQTT_SubTopic;
 8003868:	4b2c      	ldr	r3, [pc, #176]	; (800391c <procData+0x594>)
 800386a:	2238      	movs	r2, #56	; 0x38
 800386c:	701a      	strb	r2, [r3, #0]
}
 800386e:	e04d      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"+CMQTTSUB: 0,0",18)==0){
 8003870:	4a38      	ldr	r2, [pc, #224]	; (8003954 <procData+0x5cc>)
 8003872:	4b29      	ldr	r3, [pc, #164]	; (8003918 <procData+0x590>)
 8003874:	0011      	movs	r1, r2
 8003876:	0018      	movs	r0, r3
 8003878:	f7fc fc46 	bl	8000108 <strcmp>
 800387c:	1e03      	subs	r3, r0, #0
 800387e:	d107      	bne.n	8003890 <procData+0x508>
		Debug_Send("Topic subscribed!\r\n");
 8003880:	4b35      	ldr	r3, [pc, #212]	; (8003958 <procData+0x5d0>)
 8003882:	0018      	movs	r0, r3
 8003884:	f7ff fcaa 	bl	80031dc <Debug_Send>
		gsmState = MQTT_PubTopic;
 8003888:	4b24      	ldr	r3, [pc, #144]	; (800391c <procData+0x594>)
 800388a:	2239      	movs	r2, #57	; 0x39
 800388c:	701a      	strb	r2, [r3, #0]
}
 800388e:	e03d      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"+CMQTTRXPAYLOAD: 0",18)==0){
 8003890:	4932      	ldr	r1, [pc, #200]	; (800395c <procData+0x5d4>)
 8003892:	4b21      	ldr	r3, [pc, #132]	; (8003918 <procData+0x590>)
 8003894:	2212      	movs	r2, #18
 8003896:	0018      	movs	r0, r3
 8003898:	f008 fea3 	bl	800c5e2 <strncmp>
 800389c:	1e03      	subs	r3, r0, #0
 800389e:	d105      	bne.n	80038ac <procData+0x524>
		gsmInfo.mqttPaytload = 1;
 80038a0:	4a24      	ldr	r2, [pc, #144]	; (8003934 <procData+0x5ac>)
 80038a2:	23c4      	movs	r3, #196	; 0xc4
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	2101      	movs	r1, #1
 80038a8:	50d1      	str	r1, [r2, r3]
}
 80038aa:	e02f      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"+CMQTTCONNLOST: 0,1",18)==0){
 80038ac:	492c      	ldr	r1, [pc, #176]	; (8003960 <procData+0x5d8>)
 80038ae:	4b1a      	ldr	r3, [pc, #104]	; (8003918 <procData+0x590>)
 80038b0:	2212      	movs	r2, #18
 80038b2:	0018      	movs	r0, r3
 80038b4:	f008 fe95 	bl	800c5e2 <strncmp>
 80038b8:	1e03      	subs	r3, r0, #0
 80038ba:	d10e      	bne.n	80038da <procData+0x552>
		gsmState = MQTT_Start;
 80038bc:	4b17      	ldr	r3, [pc, #92]	; (800391c <procData+0x594>)
 80038be:	2235      	movs	r2, #53	; 0x35
 80038c0:	701a      	strb	r2, [r3, #0]
		if (smsFlags.config == 1) gsmState = MQTT_Release;
 80038c2:	4b1e      	ldr	r3, [pc, #120]	; (800393c <procData+0x5b4>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d103      	bne.n	80038d2 <procData+0x54a>
 80038ca:	4b14      	ldr	r3, [pc, #80]	; (800391c <procData+0x594>)
 80038cc:	223e      	movs	r2, #62	; 0x3e
 80038ce:	701a      	strb	r2, [r3, #0]
}
 80038d0:	e01c      	b.n	800390c <procData+0x584>
		else gsmState = GPRS_Search;
 80038d2:	4b12      	ldr	r3, [pc, #72]	; (800391c <procData+0x594>)
 80038d4:	2205      	movs	r2, #5
 80038d6:	701a      	strb	r2, [r3, #0]
}
 80038d8:	e018      	b.n	800390c <procData+0x584>
	else if(strncmp((char*)procBuff,"+CGEV: NW PDN DEACT 1",21)==0){
 80038da:	4922      	ldr	r1, [pc, #136]	; (8003964 <procData+0x5dc>)
 80038dc:	4b0e      	ldr	r3, [pc, #56]	; (8003918 <procData+0x590>)
 80038de:	2215      	movs	r2, #21
 80038e0:	0018      	movs	r0, r3
 80038e2:	f008 fe7e 	bl	800c5e2 <strncmp>
 80038e6:	1e03      	subs	r3, r0, #0
 80038e8:	d106      	bne.n	80038f8 <procData+0x570>
		gsmState = GPRS_Search;
 80038ea:	4b0c      	ldr	r3, [pc, #48]	; (800391c <procData+0x594>)
 80038ec:	2205      	movs	r2, #5
 80038ee:	701a      	strb	r2, [r3, #0]
		smsFlags.config = 0;
 80038f0:	4b12      	ldr	r3, [pc, #72]	; (800393c <procData+0x5b4>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	605a      	str	r2, [r3, #4]
}
 80038f6:	e009      	b.n	800390c <procData+0x584>
	else if (gsmInfo.GPRS_Rec == 1){
 80038f8:	4a0e      	ldr	r2, [pc, #56]	; (8003934 <procData+0x5ac>)
 80038fa:	23ac      	movs	r3, #172	; 0xac
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	58d3      	ldr	r3, [r2, r3]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d103      	bne.n	800390c <procData+0x584>
		Debug_Send("Socket forced closed\r\n");
 8003904:	4b18      	ldr	r3, [pc, #96]	; (8003968 <procData+0x5e0>)
 8003906:	0018      	movs	r0, r3
 8003908:	f7ff fc68 	bl	80031dc <Debug_Send>
}
 800390c:	46c0      	nop			; (mov r8, r8)
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	46c0      	nop			; (mov r8, r8)
 8003914:	0800fa3c 	.word	0x0800fa3c
 8003918:	200005d8 	.word	0x200005d8
 800391c:	20000000 	.word	0x20000000
 8003920:	0800fa48 	.word	0x0800fa48
 8003924:	0800fa54 	.word	0x0800fa54
 8003928:	200006cc 	.word	0x200006cc
 800392c:	20000480 	.word	0x20000480
 8003930:	2000048a 	.word	0x2000048a
 8003934:	20000318 	.word	0x20000318
 8003938:	0800fa5c 	.word	0x0800fa5c
 800393c:	2000014c 	.word	0x2000014c
 8003940:	0800fa68 	.word	0x0800fa68
 8003944:	2000014a 	.word	0x2000014a
 8003948:	0800fa70 	.word	0x0800fa70
 800394c:	0800fa7c 	.word	0x0800fa7c
 8003950:	0800fa88 	.word	0x0800fa88
 8003954:	0800fa9c 	.word	0x0800fa9c
 8003958:	0800faac 	.word	0x0800faac
 800395c:	0800fac0 	.word	0x0800fac0
 8003960:	0800fad4 	.word	0x0800fad4
 8003964:	0800fae8 	.word	0x0800fae8
 8003968:	0800f9e4 	.word	0x0800f9e4

0800396c <getIMEI>:
		errorCounter = 0;
		gsmState = 20;
	}
}*/

void getIMEI(){
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
	//myStrSection(procBuff, gsmInfo.imei,30,'"',1);
	/*Debug_Send("Procbuff:");
	Debug_Send(procBuff);
	Debug_Send("\r\n");*/
	strcpy(gsmInfo.imei,procBuff);
 8003970:	4a12      	ldr	r2, [pc, #72]	; (80039bc <getIMEI+0x50>)
 8003972:	4b13      	ldr	r3, [pc, #76]	; (80039c0 <getIMEI+0x54>)
 8003974:	0011      	movs	r1, r2
 8003976:	0018      	movs	r0, r3
 8003978:	f008 fe2b 	bl	800c5d2 <strcpy>
	if (strncmp(gsmInfo.imei, "AT+CGSN", 7)== 0) gsmState = Imei;
 800397c:	4911      	ldr	r1, [pc, #68]	; (80039c4 <getIMEI+0x58>)
 800397e:	4b10      	ldr	r3, [pc, #64]	; (80039c0 <getIMEI+0x54>)
 8003980:	2207      	movs	r2, #7
 8003982:	0018      	movs	r0, r3
 8003984:	f008 fe2d 	bl	800c5e2 <strncmp>
 8003988:	1e03      	subs	r3, r0, #0
 800398a:	d102      	bne.n	8003992 <getIMEI+0x26>
 800398c:	4b0e      	ldr	r3, [pc, #56]	; (80039c8 <getIMEI+0x5c>)
 800398e:	220a      	movs	r2, #10
 8003990:	701a      	strb	r2, [r3, #0]
	Debug_Send("IMEI:");
 8003992:	4b0e      	ldr	r3, [pc, #56]	; (80039cc <getIMEI+0x60>)
 8003994:	0018      	movs	r0, r3
 8003996:	f7ff fc21 	bl	80031dc <Debug_Send>
	Debug_Send(gsmInfo.imei);
 800399a:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <getIMEI+0x54>)
 800399c:	0018      	movs	r0, r3
 800399e:	f7ff fc1d 	bl	80031dc <Debug_Send>
	Debug_Send("\r\n");
 80039a2:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <getIMEI+0x64>)
 80039a4:	0018      	movs	r0, r3
 80039a6:	f7ff fc19 	bl	80031dc <Debug_Send>
	gsmInfo.imeiFlag = 0;
 80039aa:	4a0a      	ldr	r2, [pc, #40]	; (80039d4 <getIMEI+0x68>)
 80039ac:	23a8      	movs	r3, #168	; 0xa8
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	2100      	movs	r1, #0
 80039b2:	50d1      	str	r1, [r2, r3]
	//sendData("IMEI:",UART0);
	//sendData(gsmInfo.imei,UART0);
	//sendData("\r\n",UART0);
}
 80039b4:	46c0      	nop			; (mov r8, r8)
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	200005d8 	.word	0x200005d8
 80039c0:	2000033c 	.word	0x2000033c
 80039c4:	0800f91c 	.word	0x0800f91c
 80039c8:	20000000 	.word	0x20000000
 80039cc:	0800fb10 	.word	0x0800fb10
 80039d0:	0800f4c0 	.word	0x0800f4c0
 80039d4:	20000318 	.word	0x20000318

080039d8 <getCCID>:

void getCCID(){
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af02      	add	r7, sp, #8
	myStrSection(procBuff, gsmInfo.ccid,30,' ',1);
 80039de:	4905      	ldr	r1, [pc, #20]	; (80039f4 <getCCID+0x1c>)
 80039e0:	4805      	ldr	r0, [pc, #20]	; (80039f8 <getCCID+0x20>)
 80039e2:	2301      	movs	r3, #1
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	2320      	movs	r3, #32
 80039e8:	221e      	movs	r2, #30
 80039ea:	f002 f915 	bl	8005c18 <myStrSection>
	//sendData("CCID:",UART0);
	//sendData(gsmInfo.ccid,UART0);
	//sendData("\r\n",UART0);
}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	20000364 	.word	0x20000364
 80039f8:	200005d8 	.word	0x200005d8

080039fc <getSignal>:

void getSignal(){
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af02      	add	r7, sp, #8
	myStrSection(procBuff, quality,3,' ',1);
 8003a02:	490f      	ldr	r1, [pc, #60]	; (8003a40 <getSignal+0x44>)
 8003a04:	480f      	ldr	r0, [pc, #60]	; (8003a44 <getSignal+0x48>)
 8003a06:	2301      	movs	r3, #1
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	2320      	movs	r3, #32
 8003a0c:	2203      	movs	r2, #3
 8003a0e:	f002 f903 	bl	8005c18 <myStrSection>
	int temp2;
	int temp3;
	temp2 = atoi(quality);
 8003a12:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <getSignal+0x44>)
 8003a14:	0018      	movs	r0, r3
 8003a16:	f008 fd47 	bl	800c4a8 <atoi>
 8003a1a:	0003      	movs	r3, r0
 8003a1c:	607b      	str	r3, [r7, #4]
	temp2 *= 2;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	607b      	str	r3, [r7, #4]
	temp3 = 113 - temp2;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2271      	movs	r2, #113	; 0x71
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	603b      	str	r3, [r7, #0]
	sprintf (quality," -%ddBm", temp3);
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	4906      	ldr	r1, [pc, #24]	; (8003a48 <getSignal+0x4c>)
 8003a30:	4b03      	ldr	r3, [pc, #12]	; (8003a40 <getSignal+0x44>)
 8003a32:	0018      	movs	r0, r3
 8003a34:	f008 fda0 	bl	800c578 <siprintf>
}
 8003a38:	46c0      	nop			; (mov r8, r8)
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	b002      	add	sp, #8
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	200007e4 	.word	0x200007e4
 8003a44:	200005d8 	.word	0x200005d8
 8003a48:	0800fb18 	.word	0x0800fb18

08003a4c <RegisterConfirm>:
		index++;
		myStrSection(smsInfo.content1, pair,100,',',index);
	}
}

void RegisterConfirm(){
 8003a4c:	b590      	push	{r4, r7, lr}
 8003a4e:	b089      	sub	sp, #36	; 0x24
 8003a50:	af00      	add	r7, sp, #0
	char temps[30];
	strcpy(SMScontent,"Unit registered\n");
 8003a52:	4b2b      	ldr	r3, [pc, #172]	; (8003b00 <RegisterConfirm+0xb4>)
 8003a54:	4a2b      	ldr	r2, [pc, #172]	; (8003b04 <RegisterConfirm+0xb8>)
 8003a56:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003a58:	c313      	stmia	r3!, {r0, r1, r4}
 8003a5a:	6811      	ldr	r1, [r2, #0]
 8003a5c:	6019      	str	r1, [r3, #0]
 8003a5e:	7912      	ldrb	r2, [r2, #4]
 8003a60:	711a      	strb	r2, [r3, #4]
	sprintf(temps,"User: %s\n",gsmInfo.user);
 8003a62:	4a29      	ldr	r2, [pc, #164]	; (8003b08 <RegisterConfirm+0xbc>)
 8003a64:	4929      	ldr	r1, [pc, #164]	; (8003b0c <RegisterConfirm+0xc0>)
 8003a66:	003b      	movs	r3, r7
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f008 fd85 	bl	800c578 <siprintf>
	strcat(SMScontent,temps);
 8003a6e:	003a      	movs	r2, r7
 8003a70:	4b23      	ldr	r3, [pc, #140]	; (8003b00 <RegisterConfirm+0xb4>)
 8003a72:	0011      	movs	r1, r2
 8003a74:	0018      	movs	r0, r3
 8003a76:	f008 fd9f 	bl	800c5b8 <strcat>
	sprintf(temps,"MSISDN: %s\n",gsmInfo.msisdn);
 8003a7a:	4a25      	ldr	r2, [pc, #148]	; (8003b10 <RegisterConfirm+0xc4>)
 8003a7c:	4925      	ldr	r1, [pc, #148]	; (8003b14 <RegisterConfirm+0xc8>)
 8003a7e:	003b      	movs	r3, r7
 8003a80:	0018      	movs	r0, r3
 8003a82:	f008 fd79 	bl	800c578 <siprintf>
	strcat(SMScontent,temps);
 8003a86:	003a      	movs	r2, r7
 8003a88:	4b1d      	ldr	r3, [pc, #116]	; (8003b00 <RegisterConfirm+0xb4>)
 8003a8a:	0011      	movs	r1, r2
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f008 fd93 	bl	800c5b8 <strcat>
	strcat(SMScontent,"URL: ");
 8003a92:	4b1b      	ldr	r3, [pc, #108]	; (8003b00 <RegisterConfirm+0xb4>)
 8003a94:	0018      	movs	r0, r3
 8003a96:	f7fc fb41 	bl	800011c <strlen>
 8003a9a:	0003      	movs	r3, r0
 8003a9c:	001a      	movs	r2, r3
 8003a9e:	4b18      	ldr	r3, [pc, #96]	; (8003b00 <RegisterConfirm+0xb4>)
 8003aa0:	18d2      	adds	r2, r2, r3
 8003aa2:	4b1d      	ldr	r3, [pc, #116]	; (8003b18 <RegisterConfirm+0xcc>)
 8003aa4:	0010      	movs	r0, r2
 8003aa6:	0019      	movs	r1, r3
 8003aa8:	2306      	movs	r3, #6
 8003aaa:	001a      	movs	r2, r3
 8003aac:	f008 fd52 	bl	800c554 <memcpy>
	strcat(SMScontent,gsmInfo.url);
 8003ab0:	4a1a      	ldr	r2, [pc, #104]	; (8003b1c <RegisterConfirm+0xd0>)
 8003ab2:	4b13      	ldr	r3, [pc, #76]	; (8003b00 <RegisterConfirm+0xb4>)
 8003ab4:	0011      	movs	r1, r2
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f008 fd7e 	bl	800c5b8 <strcat>
	strcat(SMScontent,":");
 8003abc:	4b10      	ldr	r3, [pc, #64]	; (8003b00 <RegisterConfirm+0xb4>)
 8003abe:	0018      	movs	r0, r3
 8003ac0:	f7fc fb2c 	bl	800011c <strlen>
 8003ac4:	0003      	movs	r3, r0
 8003ac6:	001a      	movs	r2, r3
 8003ac8:	4b0d      	ldr	r3, [pc, #52]	; (8003b00 <RegisterConfirm+0xb4>)
 8003aca:	18d2      	adds	r2, r2, r3
 8003acc:	4b14      	ldr	r3, [pc, #80]	; (8003b20 <RegisterConfirm+0xd4>)
 8003ace:	0010      	movs	r0, r2
 8003ad0:	0019      	movs	r1, r3
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	001a      	movs	r2, r3
 8003ad6:	f008 fd3d 	bl	800c554 <memcpy>
	strcat(SMScontent,gsmInfo.urlport);
 8003ada:	4a12      	ldr	r2, [pc, #72]	; (8003b24 <RegisterConfirm+0xd8>)
 8003adc:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <RegisterConfirm+0xb4>)
 8003ade:	0011      	movs	r1, r2
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f008 fd69 	bl	800c5b8 <strcat>
	strcpy (smsInfo.build, SMScontent);
 8003ae6:	4a06      	ldr	r2, [pc, #24]	; (8003b00 <RegisterConfirm+0xb4>)
 8003ae8:	4b0f      	ldr	r3, [pc, #60]	; (8003b28 <RegisterConfirm+0xdc>)
 8003aea:	0011      	movs	r1, r2
 8003aec:	0018      	movs	r0, r3
 8003aee:	f008 fd70 	bl	800c5d2 <strcpy>
	smsFlags.reply = 1;
 8003af2:	4b0e      	ldr	r3, [pc, #56]	; (8003b2c <RegisterConfirm+0xe0>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	625a      	str	r2, [r3, #36]	; 0x24

}
 8003af8:	46c0      	nop			; (mov r8, r8)
 8003afa:	46bd      	mov	sp, r7
 8003afc:	b009      	add	sp, #36	; 0x24
 8003afe:	bd90      	pop	{r4, r7, pc}
 8003b00:	20000744 	.word	0x20000744
 8003b04:	0800fba8 	.word	0x0800fba8
 8003b08:	200003ac 	.word	0x200003ac
 8003b0c:	0800fbbc 	.word	0x0800fbbc
 8003b10:	200003ca 	.word	0x200003ca
 8003b14:	0800fbc8 	.word	0x0800fbc8
 8003b18:	0800fbd4 	.word	0x0800fbd4
 8003b1c:	20000318 	.word	0x20000318
 8003b20:	0800f8b8 	.word	0x0800f8b8
 8003b24:	20000336 	.word	0x20000336
 8003b28:	20000278 	.word	0x20000278
 8003b2c:	2000014c 	.word	0x2000014c

08003b30 <buildInfo>:
	//sendData(result,UART0);
	//strcpy(str, result);

}

void buildInfo(){
 8003b30:	b590      	push	{r4, r7, lr}
 8003b32:	b08f      	sub	sp, #60	; 0x3c
 8003b34:	af00      	add	r7, sp, #0
	Debug_Send("Build INFO SMS\r\n");
 8003b36:	4b7b      	ldr	r3, [pc, #492]	; (8003d24 <buildInfo+0x1f4>)
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f7ff fb4f 	bl	80031dc <Debug_Send>
	//strcpy(SMScontent,"Powerbox is active\n ");
	char temps[40];
	char adcv[10];
	GetADC(adcv);
 8003b3e:	1d3b      	adds	r3, r7, #4
 8003b40:	0018      	movs	r0, r3
 8003b42:	f7ff f8df 	bl	8002d04 <GetADC>
	strcpy(SMScontent,"GSM active\n");
 8003b46:	4b78      	ldr	r3, [pc, #480]	; (8003d28 <buildInfo+0x1f8>)
 8003b48:	4a78      	ldr	r2, [pc, #480]	; (8003d2c <buildInfo+0x1fc>)
 8003b4a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003b4c:	c313      	stmia	r3!, {r0, r1, r4}
	sprintf(temps,"V: %s\n",adcv);
 8003b4e:	1d3a      	adds	r2, r7, #4
 8003b50:	4977      	ldr	r1, [pc, #476]	; (8003d30 <buildInfo+0x200>)
 8003b52:	2410      	movs	r4, #16
 8003b54:	193b      	adds	r3, r7, r4
 8003b56:	0018      	movs	r0, r3
 8003b58:	f008 fd0e 	bl	800c578 <siprintf>
	strcpy(SMScontent,temps);
 8003b5c:	193a      	adds	r2, r7, r4
 8003b5e:	4b72      	ldr	r3, [pc, #456]	; (8003d28 <buildInfo+0x1f8>)
 8003b60:	0011      	movs	r1, r2
 8003b62:	0018      	movs	r0, r3
 8003b64:	f008 fd35 	bl	800c5d2 <strcpy>
	sprintf(temps,"Thresh: %sV\n",gsmInfo.vth);
 8003b68:	4a72      	ldr	r2, [pc, #456]	; (8003d34 <buildInfo+0x204>)
 8003b6a:	4973      	ldr	r1, [pc, #460]	; (8003d38 <buildInfo+0x208>)
 8003b6c:	193b      	adds	r3, r7, r4
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f008 fd02 	bl	800c578 <siprintf>
	strcat(SMScontent,temps);
 8003b74:	193a      	adds	r2, r7, r4
 8003b76:	4b6c      	ldr	r3, [pc, #432]	; (8003d28 <buildInfo+0x1f8>)
 8003b78:	0011      	movs	r1, r2
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f008 fd1c 	bl	800c5b8 <strcat>
	//sprintf(temps,"CCID: %s\n",gsmInfo.ccid);
	if (gsmInfo.ccidStatus == 1) strcat(SMScontent,"CCID miss-matched!\r\n");
 8003b80:	4a6e      	ldr	r2, [pc, #440]	; (8003d3c <buildInfo+0x20c>)
 8003b82:	2398      	movs	r3, #152	; 0x98
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	58d3      	ldr	r3, [r2, r3]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d10e      	bne.n	8003baa <buildInfo+0x7a>
 8003b8c:	4b66      	ldr	r3, [pc, #408]	; (8003d28 <buildInfo+0x1f8>)
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f7fc fac4 	bl	800011c <strlen>
 8003b94:	0003      	movs	r3, r0
 8003b96:	001a      	movs	r2, r3
 8003b98:	4b63      	ldr	r3, [pc, #396]	; (8003d28 <buildInfo+0x1f8>)
 8003b9a:	18d2      	adds	r2, r2, r3
 8003b9c:	4b68      	ldr	r3, [pc, #416]	; (8003d40 <buildInfo+0x210>)
 8003b9e:	0010      	movs	r0, r2
 8003ba0:	0019      	movs	r1, r3
 8003ba2:	2315      	movs	r3, #21
 8003ba4:	001a      	movs	r2, r3
 8003ba6:	f008 fcd5 	bl	800c554 <memcpy>
	//sprintf(temps,"mode: %s\n",smsInfo.IP);
	//strcat(SMScontent,temps);
	if (gsmInfo.modeFlag == 1) strcat(SMScontent,"Mode:Pulse\r\n");
 8003baa:	4a64      	ldr	r2, [pc, #400]	; (8003d3c <buildInfo+0x20c>)
 8003bac:	2394      	movs	r3, #148	; 0x94
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	58d3      	ldr	r3, [r2, r3]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d10f      	bne.n	8003bd6 <buildInfo+0xa6>
 8003bb6:	4b5c      	ldr	r3, [pc, #368]	; (8003d28 <buildInfo+0x1f8>)
 8003bb8:	0018      	movs	r0, r3
 8003bba:	f7fc faaf 	bl	800011c <strlen>
 8003bbe:	0003      	movs	r3, r0
 8003bc0:	001a      	movs	r2, r3
 8003bc2:	4b59      	ldr	r3, [pc, #356]	; (8003d28 <buildInfo+0x1f8>)
 8003bc4:	18d2      	adds	r2, r2, r3
 8003bc6:	4b5f      	ldr	r3, [pc, #380]	; (8003d44 <buildInfo+0x214>)
 8003bc8:	0010      	movs	r0, r2
 8003bca:	0019      	movs	r1, r3
 8003bcc:	230d      	movs	r3, #13
 8003bce:	001a      	movs	r2, r3
 8003bd0:	f008 fcc0 	bl	800c554 <memcpy>
 8003bd4:	e00e      	b.n	8003bf4 <buildInfo+0xc4>
	else strcat(SMScontent,"Mode: Latch\r\n");
 8003bd6:	4b54      	ldr	r3, [pc, #336]	; (8003d28 <buildInfo+0x1f8>)
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f7fc fa9f 	bl	800011c <strlen>
 8003bde:	0003      	movs	r3, r0
 8003be0:	001a      	movs	r2, r3
 8003be2:	4b51      	ldr	r3, [pc, #324]	; (8003d28 <buildInfo+0x1f8>)
 8003be4:	18d2      	adds	r2, r2, r3
 8003be6:	4b58      	ldr	r3, [pc, #352]	; (8003d48 <buildInfo+0x218>)
 8003be8:	0010      	movs	r0, r2
 8003bea:	0019      	movs	r1, r3
 8003bec:	230e      	movs	r3, #14
 8003bee:	001a      	movs	r2, r3
 8003bf0:	f008 fcb0 	bl	800c554 <memcpy>
	if (gsmInfo.activeFlag == 1) strcat(SMScontent,"Status:Active\r\n");
 8003bf4:	4a51      	ldr	r2, [pc, #324]	; (8003d3c <buildInfo+0x20c>)
 8003bf6:	2390      	movs	r3, #144	; 0x90
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	58d3      	ldr	r3, [r2, r3]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d10f      	bne.n	8003c20 <buildInfo+0xf0>
 8003c00:	4b49      	ldr	r3, [pc, #292]	; (8003d28 <buildInfo+0x1f8>)
 8003c02:	0018      	movs	r0, r3
 8003c04:	f7fc fa8a 	bl	800011c <strlen>
 8003c08:	0003      	movs	r3, r0
 8003c0a:	001a      	movs	r2, r3
 8003c0c:	4b46      	ldr	r3, [pc, #280]	; (8003d28 <buildInfo+0x1f8>)
 8003c0e:	18d2      	adds	r2, r2, r3
 8003c10:	4b4e      	ldr	r3, [pc, #312]	; (8003d4c <buildInfo+0x21c>)
 8003c12:	0010      	movs	r0, r2
 8003c14:	0019      	movs	r1, r3
 8003c16:	2310      	movs	r3, #16
 8003c18:	001a      	movs	r2, r3
 8003c1a:	f008 fc9b 	bl	800c554 <memcpy>
 8003c1e:	e00e      	b.n	8003c3e <buildInfo+0x10e>
	else strcat(SMScontent,"Status: Suspended\r\n");
 8003c20:	4b41      	ldr	r3, [pc, #260]	; (8003d28 <buildInfo+0x1f8>)
 8003c22:	0018      	movs	r0, r3
 8003c24:	f7fc fa7a 	bl	800011c <strlen>
 8003c28:	0003      	movs	r3, r0
 8003c2a:	001a      	movs	r2, r3
 8003c2c:	4b3e      	ldr	r3, [pc, #248]	; (8003d28 <buildInfo+0x1f8>)
 8003c2e:	18d2      	adds	r2, r2, r3
 8003c30:	4b47      	ldr	r3, [pc, #284]	; (8003d50 <buildInfo+0x220>)
 8003c32:	0010      	movs	r0, r2
 8003c34:	0019      	movs	r1, r3
 8003c36:	2314      	movs	r3, #20
 8003c38:	001a      	movs	r2, r3
 8003c3a:	f008 fc8b 	bl	800c554 <memcpy>
	//if (RELAY == 1) strcat(SMScontent,"Relay: ON\r\n");
	//else strcat(SMScontent,"Relay: OFF\r\n");
	sprintf(temps,"Airtime: %s\n",gsmInfo.balance);
 8003c3e:	4a45      	ldr	r2, [pc, #276]	; (8003d54 <buildInfo+0x224>)
 8003c40:	4945      	ldr	r1, [pc, #276]	; (8003d58 <buildInfo+0x228>)
 8003c42:	2410      	movs	r4, #16
 8003c44:	193b      	adds	r3, r7, r4
 8003c46:	0018      	movs	r0, r3
 8003c48:	f008 fc96 	bl	800c578 <siprintf>
	strcat(SMScontent,temps);
 8003c4c:	193a      	adds	r2, r7, r4
 8003c4e:	4b36      	ldr	r3, [pc, #216]	; (8003d28 <buildInfo+0x1f8>)
 8003c50:	0011      	movs	r1, r2
 8003c52:	0018      	movs	r0, r3
 8003c54:	f008 fcb0 	bl	800c5b8 <strcat>
	sprintf(temps,"User: %s\n",gsmInfo.user);
 8003c58:	4a40      	ldr	r2, [pc, #256]	; (8003d5c <buildInfo+0x22c>)
 8003c5a:	4941      	ldr	r1, [pc, #260]	; (8003d60 <buildInfo+0x230>)
 8003c5c:	193b      	adds	r3, r7, r4
 8003c5e:	0018      	movs	r0, r3
 8003c60:	f008 fc8a 	bl	800c578 <siprintf>
	strcat(SMScontent,temps);
 8003c64:	193a      	adds	r2, r7, r4
 8003c66:	4b30      	ldr	r3, [pc, #192]	; (8003d28 <buildInfo+0x1f8>)
 8003c68:	0011      	movs	r1, r2
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	f008 fca4 	bl	800c5b8 <strcat>
	sprintf(temps,"MSISDN: %s\n",gsmInfo.msisdn);
 8003c70:	4a3c      	ldr	r2, [pc, #240]	; (8003d64 <buildInfo+0x234>)
 8003c72:	493d      	ldr	r1, [pc, #244]	; (8003d68 <buildInfo+0x238>)
 8003c74:	193b      	adds	r3, r7, r4
 8003c76:	0018      	movs	r0, r3
 8003c78:	f008 fc7e 	bl	800c578 <siprintf>
	strcat(SMScontent,temps);
 8003c7c:	193a      	adds	r2, r7, r4
 8003c7e:	4b2a      	ldr	r3, [pc, #168]	; (8003d28 <buildInfo+0x1f8>)
 8003c80:	0011      	movs	r1, r2
 8003c82:	0018      	movs	r0, r3
 8003c84:	f008 fc98 	bl	800c5b8 <strcat>
	quality[0] = 0x20;
 8003c88:	4b38      	ldr	r3, [pc, #224]	; (8003d6c <buildInfo+0x23c>)
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	701a      	strb	r2, [r3, #0]
	sprintf(temps,"Signal:%s\n",quality);
 8003c8e:	4a37      	ldr	r2, [pc, #220]	; (8003d6c <buildInfo+0x23c>)
 8003c90:	4937      	ldr	r1, [pc, #220]	; (8003d70 <buildInfo+0x240>)
 8003c92:	193b      	adds	r3, r7, r4
 8003c94:	0018      	movs	r0, r3
 8003c96:	f008 fc6f 	bl	800c578 <siprintf>
	strcat(SMScontent,temps);
 8003c9a:	193a      	adds	r2, r7, r4
 8003c9c:	4b22      	ldr	r3, [pc, #136]	; (8003d28 <buildInfo+0x1f8>)
 8003c9e:	0011      	movs	r1, r2
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f008 fc89 	bl	800c5b8 <strcat>
	strcat(SMScontent,"URL: ");
 8003ca6:	4b20      	ldr	r3, [pc, #128]	; (8003d28 <buildInfo+0x1f8>)
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f7fc fa37 	bl	800011c <strlen>
 8003cae:	0003      	movs	r3, r0
 8003cb0:	001a      	movs	r2, r3
 8003cb2:	4b1d      	ldr	r3, [pc, #116]	; (8003d28 <buildInfo+0x1f8>)
 8003cb4:	18d2      	adds	r2, r2, r3
 8003cb6:	4b2f      	ldr	r3, [pc, #188]	; (8003d74 <buildInfo+0x244>)
 8003cb8:	0010      	movs	r0, r2
 8003cba:	0019      	movs	r1, r3
 8003cbc:	2306      	movs	r3, #6
 8003cbe:	001a      	movs	r2, r3
 8003cc0:	f008 fc48 	bl	800c554 <memcpy>
	strcat(SMScontent,gsmInfo.url);
 8003cc4:	4a1d      	ldr	r2, [pc, #116]	; (8003d3c <buildInfo+0x20c>)
 8003cc6:	4b18      	ldr	r3, [pc, #96]	; (8003d28 <buildInfo+0x1f8>)
 8003cc8:	0011      	movs	r1, r2
 8003cca:	0018      	movs	r0, r3
 8003ccc:	f008 fc74 	bl	800c5b8 <strcat>
	strcat(SMScontent,":");
 8003cd0:	4b15      	ldr	r3, [pc, #84]	; (8003d28 <buildInfo+0x1f8>)
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	f7fc fa22 	bl	800011c <strlen>
 8003cd8:	0003      	movs	r3, r0
 8003cda:	001a      	movs	r2, r3
 8003cdc:	4b12      	ldr	r3, [pc, #72]	; (8003d28 <buildInfo+0x1f8>)
 8003cde:	18d2      	adds	r2, r2, r3
 8003ce0:	4b25      	ldr	r3, [pc, #148]	; (8003d78 <buildInfo+0x248>)
 8003ce2:	0010      	movs	r0, r2
 8003ce4:	0019      	movs	r1, r3
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	001a      	movs	r2, r3
 8003cea:	f008 fc33 	bl	800c554 <memcpy>
	strcat(SMScontent,gsmInfo.urlport);
 8003cee:	4a23      	ldr	r2, [pc, #140]	; (8003d7c <buildInfo+0x24c>)
 8003cf0:	4b0d      	ldr	r3, [pc, #52]	; (8003d28 <buildInfo+0x1f8>)
 8003cf2:	0011      	movs	r1, r2
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f008 fc5f 	bl	800c5b8 <strcat>
	/*rtc time;
	time = getUptime();
	char temp1[30];
	sprintf (temp1,"Uptime: %.2dw %.2dd %.2dh %.2dm %.2ds\n", time.weeks, time.days, time.hours, time.minutes, time.seconds);
	strcat(SMScontent,temp1);*/
	strcpy (smsInfo.build, SMScontent);
 8003cfa:	4a0b      	ldr	r2, [pc, #44]	; (8003d28 <buildInfo+0x1f8>)
 8003cfc:	4b20      	ldr	r3, [pc, #128]	; (8003d80 <buildInfo+0x250>)
 8003cfe:	0011      	movs	r1, r2
 8003d00:	0018      	movs	r0, r3
 8003d02:	f008 fc66 	bl	800c5d2 <strcpy>
	//sendData("\r\nSMS content:",UART0);
	//sendData(SMScontent,UART0);
	//sendData("\r\n",UART0);
	//sendData("\r\nSMSinfo build:",UART0);
	Debug_Send(smsInfo.build);
 8003d06:	4b1e      	ldr	r3, [pc, #120]	; (8003d80 <buildInfo+0x250>)
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f7ff fa67 	bl	80031dc <Debug_Send>
	Debug_Send("\r\n");
 8003d0e:	4b1d      	ldr	r3, [pc, #116]	; (8003d84 <buildInfo+0x254>)
 8003d10:	0018      	movs	r0, r3
 8003d12:	f7ff fa63 	bl	80031dc <Debug_Send>
	smsFlags.reply = 1;			//generates reply sms
 8003d16:	4b1c      	ldr	r3, [pc, #112]	; (8003d88 <buildInfo+0x258>)
 8003d18:	2201      	movs	r2, #1
 8003d1a:	625a      	str	r2, [r3, #36]	; 0x24
	//strcpy(smsInfo.recMSISDN,"0720631005");	//debug for sms from rtc
}
 8003d1c:	46c0      	nop			; (mov r8, r8)
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	b00f      	add	sp, #60	; 0x3c
 8003d22:	bd90      	pop	{r4, r7, pc}
 8003d24:	0800fc58 	.word	0x0800fc58
 8003d28:	20000744 	.word	0x20000744
 8003d2c:	0800fc6c 	.word	0x0800fc6c
 8003d30:	0800fc78 	.word	0x0800fc78
 8003d34:	2000041c 	.word	0x2000041c
 8003d38:	0800fc80 	.word	0x0800fc80
 8003d3c:	20000318 	.word	0x20000318
 8003d40:	0800fc90 	.word	0x0800fc90
 8003d44:	0800fca8 	.word	0x0800fca8
 8003d48:	0800fcb8 	.word	0x0800fcb8
 8003d4c:	0800fcc8 	.word	0x0800fcc8
 8003d50:	0800fcd8 	.word	0x0800fcd8
 8003d54:	20000406 	.word	0x20000406
 8003d58:	0800fcec 	.word	0x0800fcec
 8003d5c:	200003ac 	.word	0x200003ac
 8003d60:	0800fbbc 	.word	0x0800fbbc
 8003d64:	200003ca 	.word	0x200003ca
 8003d68:	0800fbc8 	.word	0x0800fbc8
 8003d6c:	200007e4 	.word	0x200007e4
 8003d70:	0800fcfc 	.word	0x0800fcfc
 8003d74:	0800fbd4 	.word	0x0800fbd4
 8003d78:	0800f8b8 	.word	0x0800f8b8
 8003d7c:	20000336 	.word	0x20000336
 8003d80:	20000278 	.word	0x20000278
 8003d84:	0800f4c0 	.word	0x0800f4c0
 8003d88:	2000014c 	.word	0x2000014c

08003d8c <Context>:
	//sprintf(smsInfo.build, "IMC4.08\n IMEI:%s v:%i c %i\r\n",gsmInfo.imei, voltage, current1);

	Debug_Send(smsInfo.build);
}

void Context(){	//MIPCALL
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af02      	add	r7, sp, #8

	myStrSection(procBuff, smsInfo.IP,15,'"',1);
 8003d92:	4917      	ldr	r1, [pc, #92]	; (8003df0 <Context+0x64>)
 8003d94:	4817      	ldr	r0, [pc, #92]	; (8003df4 <Context+0x68>)
 8003d96:	2301      	movs	r3, #1
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	2322      	movs	r3, #34	; 0x22
 8003d9c:	220f      	movs	r2, #15
 8003d9e:	f001 ff3b 	bl	8005c18 <myStrSection>
	if (strlen(smsInfo.IP) > 3){
 8003da2:	4b13      	ldr	r3, [pc, #76]	; (8003df0 <Context+0x64>)
 8003da4:	0018      	movs	r0, r3
 8003da6:	f7fc f9b9 	bl	800011c <strlen>
 8003daa:	0003      	movs	r3, r0
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d911      	bls.n	8003dd4 <Context+0x48>
		smsFlags.gprsActive = 1;		//if gotten IP
 8003db0:	4b11      	ldr	r3, [pc, #68]	; (8003df8 <Context+0x6c>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	61da      	str	r2, [r3, #28]
		smsFlags.gprsPending = 0;
 8003db6:	4b10      	ldr	r3, [pc, #64]	; (8003df8 <Context+0x6c>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	619a      	str	r2, [r3, #24]
		gsmState = SocketOpen;
 8003dbc:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <Context+0x70>)
 8003dbe:	221a      	movs	r2, #26
 8003dc0:	701a      	strb	r2, [r3, #0]
		Debug_Send(smsInfo.IP);
 8003dc2:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <Context+0x64>)
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f7ff fa09 	bl	80031dc <Debug_Send>
		Debug_Send("\r\n");
 8003dca:	4b0d      	ldr	r3, [pc, #52]	; (8003e00 <Context+0x74>)
 8003dcc:	0018      	movs	r0, r3
 8003dce:	f7ff fa05 	bl	80031dc <Debug_Send>
			//gsmInfo.alarm = 0;
			gsmState = SMS_Send;
		}
		//sendData("Context closed\r\n",UART0);
	}
}
 8003dd2:	e00a      	b.n	8003dea <Context+0x5e>
		smsFlags.gprsActive = 0;
 8003dd4:	4b08      	ldr	r3, [pc, #32]	; (8003df8 <Context+0x6c>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	61da      	str	r2, [r3, #28]
		if (gsmInfo.alarm == 1){
 8003dda:	4b0a      	ldr	r3, [pc, #40]	; (8003e04 <Context+0x78>)
 8003ddc:	2290      	movs	r2, #144	; 0x90
 8003dde:	589b      	ldr	r3, [r3, r2]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d102      	bne.n	8003dea <Context+0x5e>
			gsmState = SMS_Send;
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <Context+0x70>)
 8003de6:	2211      	movs	r2, #17
 8003de8:	701a      	strb	r2, [r3, #0]
}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	20000254 	.word	0x20000254
 8003df4:	200005d8 	.word	0x200005d8
 8003df8:	2000014c 	.word	0x2000014c
 8003dfc:	20000000 	.word	0x20000000
 8003e00:	0800f4c0 	.word	0x0800f4c0
 8003e04:	20000318 	.word	0x20000318

08003e08 <GotSMS>:

void Socket2(){

}

void GotSMS(){
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af02      	add	r7, sp, #8
	if (smsFlags.reply == 1) return;
 8003e0e:	4b12      	ldr	r3, [pc, #72]	; (8003e58 <GotSMS+0x50>)
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d01b      	beq.n	8003e4e <GotSMS+0x46>
	char section[15];
	//char tempData[90];
	//strcpy(tempData,procBuff);
	//sendData("SMS info:\r\n",UART0);
	myStrSection(procBuff, section,10,',',0);
 8003e16:	0039      	movs	r1, r7
 8003e18:	4810      	ldr	r0, [pc, #64]	; (8003e5c <GotSMS+0x54>)
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	232c      	movs	r3, #44	; 0x2c
 8003e20:	220a      	movs	r2, #10
 8003e22:	f001 fef9 	bl	8005c18 <myStrSection>
	myStrSection(section, smsInfo.index,3,' ',1);
 8003e26:	490e      	ldr	r1, [pc, #56]	; (8003e60 <GotSMS+0x58>)
 8003e28:	0038      	movs	r0, r7
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	2320      	movs	r3, #32
 8003e30:	2203      	movs	r2, #3
 8003e32:	f001 fef1 	bl	8005c18 <myStrSection>
	myStrSection(procBuff, smsInfo.recMSISDN,20,'"',3);
 8003e36:	490b      	ldr	r1, [pc, #44]	; (8003e64 <GotSMS+0x5c>)
 8003e38:	4808      	ldr	r0, [pc, #32]	; (8003e5c <GotSMS+0x54>)
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	2322      	movs	r3, #34	; 0x22
 8003e40:	2214      	movs	r2, #20
 8003e42:	f001 fee9 	bl	8005c18 <myStrSection>
	//sendData(smsInfo.recMSISDN,UART0);
	//sendData(smsInfo.index,UART0);
	//sendData("\r\n",UART0);
	//sendData(smsInfo.index,UART0);
	//sendData("\r\n",UART0);
	smsFlags.content = 1;
 8003e46:	4b04      	ldr	r3, [pc, #16]	; (8003e58 <GotSMS+0x50>)
 8003e48:	2201      	movs	r2, #1
 8003e4a:	611a      	str	r2, [r3, #16]
 8003e4c:	e000      	b.n	8003e50 <GotSMS+0x48>
	if (smsFlags.reply == 1) return;
 8003e4e:	46c0      	nop			; (mov r8, r8)
}
 8003e50:	46bd      	mov	sp, r7
 8003e52:	b004      	add	sp, #16
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	46c0      	nop			; (mov r8, r8)
 8003e58:	2000014c 	.word	0x2000014c
 8003e5c:	200005d8 	.word	0x200005d8
 8003e60:	2000017c 	.word	0x2000017c
 8003e64:	20000180 	.word	0x20000180

08003e68 <OK>:

void OK(){
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0

	//Debug_Send("Got OK\r\n");
	errorTimer = 0;
 8003e6c:	4b1e      	ldr	r3, [pc, #120]	; (8003ee8 <OK+0x80>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]
	gsmTimer = 0;
 8003e72:	4b1e      	ldr	r3, [pc, #120]	; (8003eec <OK+0x84>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]
	//if (gsmState == GPRS_On) gsmState = SocketOpen;
	if (smsFlags.reply == 1){		//sent when sms built
 8003e78:	4b1d      	ldr	r3, [pc, #116]	; (8003ef0 <OK+0x88>)
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d10a      	bne.n	8003e96 <OK+0x2e>
	//if (smsFlags.send == 1){
		if ((smsFlags.config == 1)&&(smsFlags.gprsActive == 0)) gsmState = SMS_Send;
 8003e80:	4b1b      	ldr	r3, [pc, #108]	; (8003ef0 <OK+0x88>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d106      	bne.n	8003e96 <OK+0x2e>
 8003e88:	4b19      	ldr	r3, [pc, #100]	; (8003ef0 <OK+0x88>)
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d102      	bne.n	8003e96 <OK+0x2e>
 8003e90:	4b18      	ldr	r3, [pc, #96]	; (8003ef4 <OK+0x8c>)
 8003e92:	2211      	movs	r2, #17
 8003e94:	701a      	strb	r2, [r3, #0]
		//sendData("Send OK\r\n",UART0);
	}
	if (gsmState == GprsContext) smsFlags.context = 1;
 8003e96:	4b17      	ldr	r3, [pc, #92]	; (8003ef4 <OK+0x8c>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	2b0c      	cmp	r3, #12
 8003e9c:	d102      	bne.n	8003ea4 <OK+0x3c>
 8003e9e:	4b14      	ldr	r3, [pc, #80]	; (8003ef0 <OK+0x88>)
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	615a      	str	r2, [r3, #20]
	if (smsFlags.del == 1) gsmState = SMS_Del;	//set when sms content read
 8003ea4:	4b12      	ldr	r3, [pc, #72]	; (8003ef0 <OK+0x88>)
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d102      	bne.n	8003eb2 <OK+0x4a>
 8003eac:	4b11      	ldr	r3, [pc, #68]	; (8003ef4 <OK+0x8c>)
 8003eae:	221c      	movs	r2, #28
 8003eb0:	701a      	strb	r2, [r3, #0]
	if (gsmState == AutoBaud) gsmState = Search;
 8003eb2:	4b10      	ldr	r3, [pc, #64]	; (8003ef4 <OK+0x8c>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b25      	cmp	r3, #37	; 0x25
 8003eb8:	d102      	bne.n	8003ec0 <OK+0x58>
 8003eba:	4b0e      	ldr	r3, [pc, #56]	; (8003ef4 <OK+0x8c>)
 8003ebc:	2204      	movs	r2, #4
 8003ebe:	701a      	strb	r2, [r3, #0]
	if (gsmState == GPRS_SendMode) gsmState = GPRS_SendModeTRans;
 8003ec0:	4b0c      	ldr	r3, [pc, #48]	; (8003ef4 <OK+0x8c>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b23      	cmp	r3, #35	; 0x23
 8003ec6:	d102      	bne.n	8003ece <OK+0x66>
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <OK+0x8c>)
 8003eca:	2224      	movs	r2, #36	; 0x24
 8003ecc:	701a      	strb	r2, [r3, #0]
	if(gsmInfo.mqttPub == 1) gsmState = MQTT_PubPayload;
 8003ece:	4a0a      	ldr	r2, [pc, #40]	; (8003ef8 <OK+0x90>)
 8003ed0:	23c8      	movs	r3, #200	; 0xc8
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	58d3      	ldr	r3, [r2, r3]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d102      	bne.n	8003ee0 <OK+0x78>
 8003eda:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <OK+0x8c>)
 8003edc:	223a      	movs	r2, #58	; 0x3a
 8003ede:	701a      	strb	r2, [r3, #0]
	//if (gsmState == 12) gsmState = 6;
	//sprintf(count, "GSM state=%d", gsmState);
	//sendData(count,UART0);
	//sendData("\r\n",UART0);
}
 8003ee0:	46c0      	nop			; (mov r8, r8)
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	46c0      	nop			; (mov r8, r8)
 8003ee8:	200007f4 	.word	0x200007f4
 8003eec:	200007f0 	.word	0x200007f0
 8003ef0:	2000014c 	.word	0x2000014c
 8003ef4:	20000000 	.word	0x20000000
 8003ef8:	20000318 	.word	0x20000318

08003efc <DataDecrypt>:
		//sendData("Connection closed automatically due to non � fatal alert\r\n",UART0);
		gsmState = GPRS_Off;  		//close socket
	}
}

void DataDecrypt(){
 8003efc:	b5b0      	push	{r4, r5, r7, lr}
 8003efe:	b0f8      	sub	sp, #480	; 0x1e0
 8003f00:	af02      	add	r7, sp, #8
	Debug_Send("Decrypt\r\n");
 8003f02:	4bd8      	ldr	r3, [pc, #864]	; (8004264 <DataDecrypt+0x368>)
 8003f04:	0018      	movs	r0, r3
 8003f06:	f7ff f969 	bl	80031dc <Debug_Send>
	Debug_Send(procBuff);
 8003f0a:	4bd7      	ldr	r3, [pc, #860]	; (8004268 <DataDecrypt+0x36c>)
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	f7ff f965 	bl	80031dc <Debug_Send>
	Debug_Send("\r\n");
 8003f12:	4bd6      	ldr	r3, [pc, #856]	; (800426c <DataDecrypt+0x370>)
 8003f14:	0018      	movs	r0, r3
 8003f16:	f7ff f961 	bl	80031dc <Debug_Send>
	//char test1[10];
	char temp[180];
	char temp1[50];
	//strcpy(procBuff,"696E672F");
	int len;
	int index = 0;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	24ea      	movs	r4, #234	; 0xea
 8003f1e:	0064      	lsls	r4, r4, #1
 8003f20:	193a      	adds	r2, r7, r4
 8003f22:	6013      	str	r3, [r2, #0]
	char hex[4];
	int hexIndex = 0;
 8003f24:	2300      	movs	r3, #0
 8003f26:	22e8      	movs	r2, #232	; 0xe8
 8003f28:	0052      	lsls	r2, r2, #1
 8003f2a:	18ba      	adds	r2, r7, r2
 8003f2c:	6013      	str	r3, [r2, #0]
	int count = 0;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	22e6      	movs	r2, #230	; 0xe6
 8003f32:	0052      	lsls	r2, r2, #1
 8003f34:	18ba      	adds	r2, r7, r2
 8003f36:	6013      	str	r3, [r2, #0]
	}
	//recIndex++;
	receive[recIndex] = 0;
	index = 0;
	myStrSection(receive, temp ,160,';',index);*/
	strcpy(receive,procBuff);
 8003f38:	4acb      	ldr	r2, [pc, #812]	; (8004268 <DataDecrypt+0x36c>)
 8003f3a:	252c      	movs	r5, #44	; 0x2c
 8003f3c:	197b      	adds	r3, r7, r5
 8003f3e:	0011      	movs	r1, r2
 8003f40:	0018      	movs	r0, r3
 8003f42:	f008 fb46 	bl	800c5d2 <strcpy>
	myStrSection(receive, temp ,160,';',index);
 8003f46:	193b      	adds	r3, r7, r4
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	228c      	movs	r2, #140	; 0x8c
 8003f4e:	0052      	lsls	r2, r2, #1
 8003f50:	18b9      	adds	r1, r7, r2
 8003f52:	1978      	adds	r0, r7, r5
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	233b      	movs	r3, #59	; 0x3b
 8003f58:	22a0      	movs	r2, #160	; 0xa0
 8003f5a:	f001 fe5d 	bl	8005c18 <myStrSection>

	while (strlen(temp) > 1){
 8003f5e:	e26f      	b.n	8004440 <DataDecrypt+0x544>
		Debug_Send(temp);
 8003f60:	248c      	movs	r4, #140	; 0x8c
 8003f62:	0064      	lsls	r4, r4, #1
 8003f64:	193b      	adds	r3, r7, r4
 8003f66:	0018      	movs	r0, r3
 8003f68:	f7ff f938 	bl	80031dc <Debug_Send>
		Debug_Send("\r\n");
 8003f6c:	4bbf      	ldr	r3, [pc, #764]	; (800426c <DataDecrypt+0x370>)
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f7ff f934 	bl	80031dc <Debug_Send>
		if(strncmp((char*)temp,"user",4)==0){
 8003f74:	49be      	ldr	r1, [pc, #760]	; (8004270 <DataDecrypt+0x374>)
 8003f76:	193b      	adds	r3, r7, r4
 8003f78:	2204      	movs	r2, #4
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f008 fb31 	bl	800c5e2 <strncmp>
 8003f80:	1e03      	subs	r3, r0, #0
 8003f82:	d12b      	bne.n	8003fdc <DataDecrypt+0xe0>
			myStrSection(temp, temp1 ,40,':',1);
 8003f84:	25e4      	movs	r5, #228	; 0xe4
 8003f86:	1979      	adds	r1, r7, r5
 8003f88:	1938      	adds	r0, r7, r4
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	233a      	movs	r3, #58	; 0x3a
 8003f90:	2228      	movs	r2, #40	; 0x28
 8003f92:	f001 fe41 	bl	8005c18 <myStrSection>
			myStrSection(temp1, gsmInfo.user ,30,',',0);
 8003f96:	49b7      	ldr	r1, [pc, #732]	; (8004274 <DataDecrypt+0x378>)
 8003f98:	1978      	adds	r0, r7, r5
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	232c      	movs	r3, #44	; 0x2c
 8003fa0:	221e      	movs	r2, #30
 8003fa2:	f001 fe39 	bl	8005c18 <myStrSection>
			myStrSection(temp1, gsmInfo.msisdn ,30,',',1);
 8003fa6:	49b4      	ldr	r1, [pc, #720]	; (8004278 <DataDecrypt+0x37c>)
 8003fa8:	1978      	adds	r0, r7, r5
 8003faa:	2301      	movs	r3, #1
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	232c      	movs	r3, #44	; 0x2c
 8003fb0:	221e      	movs	r2, #30
 8003fb2:	f001 fe31 	bl	8005c18 <myStrSection>
			Debug_Send(gsmInfo.user);
 8003fb6:	4baf      	ldr	r3, [pc, #700]	; (8004274 <DataDecrypt+0x378>)
 8003fb8:	0018      	movs	r0, r3
 8003fba:	f7ff f90f 	bl	80031dc <Debug_Send>
			Debug_Send(" - ");
 8003fbe:	4baf      	ldr	r3, [pc, #700]	; (800427c <DataDecrypt+0x380>)
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	f7ff f90b 	bl	80031dc <Debug_Send>
			Debug_Send(gsmInfo.msisdn);
 8003fc6:	4bac      	ldr	r3, [pc, #688]	; (8004278 <DataDecrypt+0x37c>)
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f7ff f907 	bl	80031dc <Debug_Send>
			//LED = 0;
			Debug_Send("\r\n");
 8003fce:	4ba7      	ldr	r3, [pc, #668]	; (800426c <DataDecrypt+0x370>)
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	f7ff f903 	bl	80031dc <Debug_Send>
			gsmInfo.registered = 1;
 8003fd6:	4baa      	ldr	r3, [pc, #680]	; (8004280 <DataDecrypt+0x384>)
 8003fd8:	2201      	movs	r2, #1
 8003fda:	67da      	str	r2, [r3, #124]	; 0x7c
		}
		if(strncmp((char*)temp,"output",5)==0){
 8003fdc:	49a9      	ldr	r1, [pc, #676]	; (8004284 <DataDecrypt+0x388>)
 8003fde:	238c      	movs	r3, #140	; 0x8c
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	18fb      	adds	r3, r7, r3
 8003fe4:	2205      	movs	r2, #5
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f008 fafb 	bl	800c5e2 <strncmp>
 8003fec:	1e03      	subs	r3, r0, #0
 8003fee:	d11b      	bne.n	8004028 <DataDecrypt+0x12c>
			char state[5];
			myStrSection(receive, state ,4,':',1);
 8003ff0:	2424      	movs	r4, #36	; 0x24
 8003ff2:	1939      	adds	r1, r7, r4
 8003ff4:	232c      	movs	r3, #44	; 0x2c
 8003ff6:	18f8      	adds	r0, r7, r3
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	233a      	movs	r3, #58	; 0x3a
 8003ffe:	2204      	movs	r2, #4
 8004000:	f001 fe0a 	bl	8005c18 <myStrSection>
			if(strncmp(state,"ON",2)==0){
 8004004:	49a0      	ldr	r1, [pc, #640]	; (8004288 <DataDecrypt+0x38c>)
 8004006:	193b      	adds	r3, r7, r4
 8004008:	2202      	movs	r2, #2
 800400a:	0018      	movs	r0, r3
 800400c:	f008 fae9 	bl	800c5e2 <strncmp>
				if (gsmInfo.updateFlag == 0){
					//if (gsmInfo.activeFlag == 1) RELAY = 1;
				}
			}
			if(strncmp(state,"OFF",3)==0){
 8004010:	499e      	ldr	r1, [pc, #632]	; (800428c <DataDecrypt+0x390>)
 8004012:	193b      	adds	r3, r7, r4
 8004014:	2203      	movs	r2, #3
 8004016:	0018      	movs	r0, r3
 8004018:	f008 fae3 	bl	800c5e2 <strncmp>
 800401c:	1e03      	subs	r3, r0, #0
 800401e:	d103      	bne.n	8004028 <DataDecrypt+0x12c>
				Debug_Send("Off\r\n");
 8004020:	4b9b      	ldr	r3, [pc, #620]	; (8004290 <DataDecrypt+0x394>)
 8004022:	0018      	movs	r0, r3
 8004024:	f7ff f8da 	bl	80031dc <Debug_Send>
					//if (gsmInfo.activeFlag == 1) RELAY = 0;
				}
			}
			//CheckUser();
		}
		if(strncmp((char*)temp,"mode",4)==0){
 8004028:	499a      	ldr	r1, [pc, #616]	; (8004294 <DataDecrypt+0x398>)
 800402a:	248c      	movs	r4, #140	; 0x8c
 800402c:	0064      	lsls	r4, r4, #1
 800402e:	193b      	adds	r3, r7, r4
 8004030:	2204      	movs	r2, #4
 8004032:	0018      	movs	r0, r3
 8004034:	f008 fad5 	bl	800c5e2 <strncmp>
 8004038:	1e03      	subs	r3, r0, #0
 800403a:	d130      	bne.n	800409e <DataDecrypt+0x1a2>
			Debug_Send("GOT MODE!!!!!\r\n");
 800403c:	4b96      	ldr	r3, [pc, #600]	; (8004298 <DataDecrypt+0x39c>)
 800403e:	0018      	movs	r0, r3
 8004040:	f7ff f8cc 	bl	80031dc <Debug_Send>
			myStrSection(temp, temp1 ,40,':',1);
 8004044:	25e4      	movs	r5, #228	; 0xe4
 8004046:	1979      	adds	r1, r7, r5
 8004048:	1938      	adds	r0, r7, r4
 800404a:	2301      	movs	r3, #1
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	233a      	movs	r3, #58	; 0x3a
 8004050:	2228      	movs	r2, #40	; 0x28
 8004052:	f001 fde1 	bl	8005c18 <myStrSection>
			if (strncmp(temp1,"latch",5)==0){
 8004056:	4991      	ldr	r1, [pc, #580]	; (800429c <DataDecrypt+0x3a0>)
 8004058:	197b      	adds	r3, r7, r5
 800405a:	2205      	movs	r2, #5
 800405c:	0018      	movs	r0, r3
 800405e:	f008 fac0 	bl	800c5e2 <strncmp>
 8004062:	1e03      	subs	r3, r0, #0
 8004064:	d104      	bne.n	8004070 <DataDecrypt+0x174>
				gsmInfo.modeFlag = 0;
 8004066:	4a86      	ldr	r2, [pc, #536]	; (8004280 <DataDecrypt+0x384>)
 8004068:	2394      	movs	r3, #148	; 0x94
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	2100      	movs	r1, #0
 800406e:	50d1      	str	r1, [r2, r3]
			}
			if (strncmp(temp1,"pulse",5)==0){
 8004070:	498b      	ldr	r1, [pc, #556]	; (80042a0 <DataDecrypt+0x3a4>)
 8004072:	23e4      	movs	r3, #228	; 0xe4
 8004074:	18fb      	adds	r3, r7, r3
 8004076:	2205      	movs	r2, #5
 8004078:	0018      	movs	r0, r3
 800407a:	f008 fab2 	bl	800c5e2 <strncmp>
 800407e:	1e03      	subs	r3, r0, #0
 8004080:	d104      	bne.n	800408c <DataDecrypt+0x190>
				gsmInfo.modeFlag = 1;
 8004082:	4a7f      	ldr	r2, [pc, #508]	; (8004280 <DataDecrypt+0x384>)
 8004084:	2394      	movs	r3, #148	; 0x94
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	2101      	movs	r1, #1
 800408a:	50d1      	str	r1, [r2, r3]
			}
			Debug_Send(temp1);
 800408c:	23e4      	movs	r3, #228	; 0xe4
 800408e:	18fb      	adds	r3, r7, r3
 8004090:	0018      	movs	r0, r3
 8004092:	f7ff f8a3 	bl	80031dc <Debug_Send>
			Debug_Send("\r\n");
 8004096:	4b75      	ldr	r3, [pc, #468]	; (800426c <DataDecrypt+0x370>)
 8004098:	0018      	movs	r0, r3
 800409a:	f7ff f89f 	bl	80031dc <Debug_Send>
		}
		if(strncmp((char*)temp,"ccid",4)==0){
 800409e:	4981      	ldr	r1, [pc, #516]	; (80042a4 <DataDecrypt+0x3a8>)
 80040a0:	248c      	movs	r4, #140	; 0x8c
 80040a2:	0064      	lsls	r4, r4, #1
 80040a4:	193b      	adds	r3, r7, r4
 80040a6:	2204      	movs	r2, #4
 80040a8:	0018      	movs	r0, r3
 80040aa:	f008 fa9a 	bl	800c5e2 <strncmp>
 80040ae:	1e03      	subs	r3, r0, #0
 80040b0:	d122      	bne.n	80040f8 <DataDecrypt+0x1fc>
			char ccid1[30];
			myStrSection(temp, ccid1 ,40,':',1);
 80040b2:	1d39      	adds	r1, r7, #4
 80040b4:	1938      	adds	r0, r7, r4
 80040b6:	2301      	movs	r3, #1
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	233a      	movs	r3, #58	; 0x3a
 80040bc:	2228      	movs	r2, #40	; 0x28
 80040be:	f001 fdab 	bl	8005c18 <myStrSection>
			if (strncmp(gsmInfo.ccid,ccid1,25)==0){
 80040c2:	1d39      	adds	r1, r7, #4
 80040c4:	4b78      	ldr	r3, [pc, #480]	; (80042a8 <DataDecrypt+0x3ac>)
 80040c6:	2219      	movs	r2, #25
 80040c8:	0018      	movs	r0, r3
 80040ca:	f008 fa8a 	bl	800c5e2 <strncmp>
 80040ce:	1e03      	subs	r3, r0, #0
 80040d0:	d109      	bne.n	80040e6 <DataDecrypt+0x1ea>
				Debug_Send("CCID same\r\n");
 80040d2:	4b76      	ldr	r3, [pc, #472]	; (80042ac <DataDecrypt+0x3b0>)
 80040d4:	0018      	movs	r0, r3
 80040d6:	f7ff f881 	bl	80031dc <Debug_Send>
				gsmInfo.ccidStatus = 0;
 80040da:	4a69      	ldr	r2, [pc, #420]	; (8004280 <DataDecrypt+0x384>)
 80040dc:	2398      	movs	r3, #152	; 0x98
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	2100      	movs	r1, #0
 80040e2:	50d1      	str	r1, [r2, r3]
 80040e4:	e008      	b.n	80040f8 <DataDecrypt+0x1fc>
			}
			else{
				//alarmFunc(ccid);
				//RELAY = 0;
				Debug_Send("CCID differ\r\n");
 80040e6:	4b72      	ldr	r3, [pc, #456]	; (80042b0 <DataDecrypt+0x3b4>)
 80040e8:	0018      	movs	r0, r3
 80040ea:	f7ff f877 	bl	80031dc <Debug_Send>
				gsmInfo.ccidStatus = 1;
 80040ee:	4a64      	ldr	r2, [pc, #400]	; (8004280 <DataDecrypt+0x384>)
 80040f0:	2398      	movs	r3, #152	; 0x98
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	2101      	movs	r1, #1
 80040f6:	50d1      	str	r1, [r2, r3]
			}
		}
		if(strncmp((char*)temp,"status",6)==0){
 80040f8:	496e      	ldr	r1, [pc, #440]	; (80042b4 <DataDecrypt+0x3b8>)
 80040fa:	248c      	movs	r4, #140	; 0x8c
 80040fc:	0064      	lsls	r4, r4, #1
 80040fe:	193b      	adds	r3, r7, r4
 8004100:	2206      	movs	r2, #6
 8004102:	0018      	movs	r0, r3
 8004104:	f008 fa6d 	bl	800c5e2 <strncmp>

		}
		if(strncmp((char*)temp,"vth1",4)==0){
 8004108:	496b      	ldr	r1, [pc, #428]	; (80042b8 <DataDecrypt+0x3bc>)
 800410a:	193b      	adds	r3, r7, r4
 800410c:	2204      	movs	r2, #4
 800410e:	0018      	movs	r0, r3
 8004110:	f008 fa67 	bl	800c5e2 <strncmp>
 8004114:	1e03      	subs	r3, r0, #0
 8004116:	d12e      	bne.n	8004176 <DataDecrypt+0x27a>
			if (gsmInfo.vthFlag == 0){
 8004118:	4a59      	ldr	r2, [pc, #356]	; (8004280 <DataDecrypt+0x384>)
 800411a:	238a      	movs	r3, #138	; 0x8a
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	58d3      	ldr	r3, [r2, r3]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d120      	bne.n	8004166 <DataDecrypt+0x26a>
				Debug_Send("GOT THV!!!!!\r\n");
 8004124:	4b65      	ldr	r3, [pc, #404]	; (80042bc <DataDecrypt+0x3c0>)
 8004126:	0018      	movs	r0, r3
 8004128:	f7ff f858 	bl	80031dc <Debug_Send>
				myStrSection(temp, gsmInfo.vth ,5,':',1);
 800412c:	4964      	ldr	r1, [pc, #400]	; (80042c0 <DataDecrypt+0x3c4>)
 800412e:	1938      	adds	r0, r7, r4
 8004130:	2301      	movs	r3, #1
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	233a      	movs	r3, #58	; 0x3a
 8004136:	2205      	movs	r2, #5
 8004138:	f001 fd6e 	bl	8005c18 <myStrSection>
				gsmInfo.vth_l = myStrLong(gsmInfo.vth, 10);
 800413c:	4b60      	ldr	r3, [pc, #384]	; (80042c0 <DataDecrypt+0x3c4>)
 800413e:	210a      	movs	r1, #10
 8004140:	0018      	movs	r0, r3
 8004142:	f001 fef5 	bl	8005f30 <myStrLong>
 8004146:	0001      	movs	r1, r0
 8004148:	4a4d      	ldr	r2, [pc, #308]	; (8004280 <DataDecrypt+0x384>)
 800414a:	2388      	movs	r3, #136	; 0x88
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	50d1      	str	r1, [r2, r3]
				gsmInfo.vth_l *= 100;
 8004150:	4a4b      	ldr	r2, [pc, #300]	; (8004280 <DataDecrypt+0x384>)
 8004152:	2388      	movs	r3, #136	; 0x88
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	58d3      	ldr	r3, [r2, r3]
 8004158:	2264      	movs	r2, #100	; 0x64
 800415a:	435a      	muls	r2, r3
 800415c:	0011      	movs	r1, r2
 800415e:	4a48      	ldr	r2, [pc, #288]	; (8004280 <DataDecrypt+0x384>)
 8004160:	2388      	movs	r3, #136	; 0x88
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	50d1      	str	r1, [r2, r3]
			}
			Debug_Send(gsmInfo.vth);
 8004166:	4b56      	ldr	r3, [pc, #344]	; (80042c0 <DataDecrypt+0x3c4>)
 8004168:	0018      	movs	r0, r3
 800416a:	f7ff f837 	bl	80031dc <Debug_Send>
			Debug_Send("\r\n");
 800416e:	4b3f      	ldr	r3, [pc, #252]	; (800426c <DataDecrypt+0x370>)
 8004170:	0018      	movs	r0, r3
 8004172:	f7ff f833 	bl	80031dc <Debug_Send>

		}
		if(strncmp((char*)smsInfo.content1,"vth",5)==0){
 8004176:	4a53      	ldr	r2, [pc, #332]	; (80042c4 <DataDecrypt+0x3c8>)
 8004178:	4b53      	ldr	r3, [pc, #332]	; (80042c8 <DataDecrypt+0x3cc>)
 800417a:	0011      	movs	r1, r2
 800417c:	0018      	movs	r0, r3
 800417e:	f7fb ffc3 	bl	8000108 <strcmp>
 8004182:	1e03      	subs	r3, r0, #0
 8004184:	d11c      	bne.n	80041c0 <DataDecrypt+0x2c4>
			myStrSection(smsInfo.content1, gsmInfo.vth,4,':',1);
 8004186:	494e      	ldr	r1, [pc, #312]	; (80042c0 <DataDecrypt+0x3c4>)
 8004188:	484f      	ldr	r0, [pc, #316]	; (80042c8 <DataDecrypt+0x3cc>)
 800418a:	2301      	movs	r3, #1
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	233a      	movs	r3, #58	; 0x3a
 8004190:	2204      	movs	r2, #4
 8004192:	f001 fd41 	bl	8005c18 <myStrSection>
			//gsmInfo.vth_f = atof(gsmInfo.vth);
			gsmInfo.vth_l = myStrLong(gsmInfo.vth, 10);
 8004196:	4b4a      	ldr	r3, [pc, #296]	; (80042c0 <DataDecrypt+0x3c4>)
 8004198:	210a      	movs	r1, #10
 800419a:	0018      	movs	r0, r3
 800419c:	f001 fec8 	bl	8005f30 <myStrLong>
 80041a0:	0001      	movs	r1, r0
 80041a2:	4a37      	ldr	r2, [pc, #220]	; (8004280 <DataDecrypt+0x384>)
 80041a4:	2388      	movs	r3, #136	; 0x88
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	50d1      	str	r1, [r2, r3]
			gsmInfo.vth_l *= 100;
 80041aa:	4a35      	ldr	r2, [pc, #212]	; (8004280 <DataDecrypt+0x384>)
 80041ac:	2388      	movs	r3, #136	; 0x88
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	58d3      	ldr	r3, [r2, r3]
 80041b2:	2264      	movs	r2, #100	; 0x64
 80041b4:	435a      	muls	r2, r3
 80041b6:	0011      	movs	r1, r2
 80041b8:	4a31      	ldr	r2, [pc, #196]	; (8004280 <DataDecrypt+0x384>)
 80041ba:	2388      	movs	r3, #136	; 0x88
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	50d1      	str	r1, [r2, r3]
		}
		if(strncmp((char*)temp,"mode",4)==0){
 80041c0:	4934      	ldr	r1, [pc, #208]	; (8004294 <DataDecrypt+0x398>)
 80041c2:	248c      	movs	r4, #140	; 0x8c
 80041c4:	0064      	lsls	r4, r4, #1
 80041c6:	193b      	adds	r3, r7, r4
 80041c8:	2204      	movs	r2, #4
 80041ca:	0018      	movs	r0, r3
 80041cc:	f008 fa09 	bl	800c5e2 <strncmp>

		}
		if(strncmp((char*)temp,"status",5)==0){
 80041d0:	4938      	ldr	r1, [pc, #224]	; (80042b4 <DataDecrypt+0x3b8>)
 80041d2:	193b      	adds	r3, r7, r4
 80041d4:	2205      	movs	r2, #5
 80041d6:	0018      	movs	r0, r3
 80041d8:	f008 fa03 	bl	800c5e2 <strncmp>
 80041dc:	1e03      	subs	r3, r0, #0
 80041de:	d121      	bne.n	8004224 <DataDecrypt+0x328>
			myStrSection(temp, temp1 ,4,':',1);
 80041e0:	25e4      	movs	r5, #228	; 0xe4
 80041e2:	1979      	adds	r1, r7, r5
 80041e4:	1938      	adds	r0, r7, r4
 80041e6:	2301      	movs	r3, #1
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	233a      	movs	r3, #58	; 0x3a
 80041ec:	2204      	movs	r2, #4
 80041ee:	f001 fd13 	bl	8005c18 <myStrSection>
			if(strncmp(temp1,"1",1)==0){
 80041f2:	197b      	adds	r3, r7, r5
 80041f4:	781a      	ldrb	r2, [r3, #0]
 80041f6:	4b35      	ldr	r3, [pc, #212]	; (80042cc <DataDecrypt+0x3d0>)
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	d109      	bne.n	8004212 <DataDecrypt+0x316>
				Debug_Send("Unit active\r\n");
 80041fe:	4b34      	ldr	r3, [pc, #208]	; (80042d0 <DataDecrypt+0x3d4>)
 8004200:	0018      	movs	r0, r3
 8004202:	f7fe ffeb 	bl	80031dc <Debug_Send>
				gsmInfo.activeFlag = 1;
 8004206:	4a1e      	ldr	r2, [pc, #120]	; (8004280 <DataDecrypt+0x384>)
 8004208:	2390      	movs	r3, #144	; 0x90
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	2101      	movs	r1, #1
 800420e:	50d1      	str	r1, [r2, r3]
 8004210:	e008      	b.n	8004224 <DataDecrypt+0x328>
			}
			else{
				gsmInfo.activeFlag = 0;
 8004212:	4a1b      	ldr	r2, [pc, #108]	; (8004280 <DataDecrypt+0x384>)
 8004214:	2390      	movs	r3, #144	; 0x90
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	2100      	movs	r1, #0
 800421a:	50d1      	str	r1, [r2, r3]
				Debug_Send("Unit not active\r\n");
 800421c:	4b2d      	ldr	r3, [pc, #180]	; (80042d4 <DataDecrypt+0x3d8>)
 800421e:	0018      	movs	r0, r3
 8004220:	f7fe ffdc 	bl	80031dc <Debug_Send>
			}
		}
		if(strncmp((char*)temp,"sms",3)==0){
 8004224:	492c      	ldr	r1, [pc, #176]	; (80042d8 <DataDecrypt+0x3dc>)
 8004226:	248c      	movs	r4, #140	; 0x8c
 8004228:	0064      	lsls	r4, r4, #1
 800422a:	193b      	adds	r3, r7, r4
 800422c:	2203      	movs	r2, #3
 800422e:	0018      	movs	r0, r3
 8004230:	f008 f9d7 	bl	800c5e2 <strncmp>
 8004234:	1e03      	subs	r3, r0, #0
 8004236:	d157      	bne.n	80042e8 <DataDecrypt+0x3ec>
			myStrSection(temp, temp1 ,4,':',1);
 8004238:	25e4      	movs	r5, #228	; 0xe4
 800423a:	1979      	adds	r1, r7, r5
 800423c:	1938      	adds	r0, r7, r4
 800423e:	2301      	movs	r3, #1
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	233a      	movs	r3, #58	; 0x3a
 8004244:	2204      	movs	r2, #4
 8004246:	f001 fce7 	bl	8005c18 <myStrSection>
			if(strncmp(temp1,"1",1)==0){
 800424a:	197b      	adds	r3, r7, r5
 800424c:	781a      	ldrb	r2, [r3, #0]
 800424e:	4b1f      	ldr	r3, [pc, #124]	; (80042cc <DataDecrypt+0x3d0>)
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	d144      	bne.n	80042e0 <DataDecrypt+0x3e4>
				Debug_Send("Generate SMS\r\n");
 8004256:	4b21      	ldr	r3, [pc, #132]	; (80042dc <DataDecrypt+0x3e0>)
 8004258:	0018      	movs	r0, r3
 800425a:	f7fe ffbf 	bl	80031dc <Debug_Send>
				buildInfo();
 800425e:	f7ff fc67 	bl	8003b30 <buildInfo>
 8004262:	e041      	b.n	80042e8 <DataDecrypt+0x3ec>
 8004264:	0800fd60 	.word	0x0800fd60
 8004268:	200005d8 	.word	0x200005d8
 800426c:	0800f4c0 	.word	0x0800f4c0
 8004270:	0800fd6c 	.word	0x0800fd6c
 8004274:	200003ac 	.word	0x200003ac
 8004278:	200003ca 	.word	0x200003ca
 800427c:	0800fd74 	.word	0x0800fd74
 8004280:	20000318 	.word	0x20000318
 8004284:	0800fd78 	.word	0x0800fd78
 8004288:	0800fb48 	.word	0x0800fb48
 800428c:	0800fb4c 	.word	0x0800fb4c
 8004290:	0800fd80 	.word	0x0800fd80
 8004294:	0800fd88 	.word	0x0800fd88
 8004298:	0800fd90 	.word	0x0800fd90
 800429c:	0800fda0 	.word	0x0800fda0
 80042a0:	0800fda8 	.word	0x0800fda8
 80042a4:	0800fdb0 	.word	0x0800fdb0
 80042a8:	20000364 	.word	0x20000364
 80042ac:	0800fdb8 	.word	0x0800fdb8
 80042b0:	0800fdc4 	.word	0x0800fdc4
 80042b4:	0800fdd4 	.word	0x0800fdd4
 80042b8:	0800fddc 	.word	0x0800fddc
 80042bc:	0800fde4 	.word	0x0800fde4
 80042c0:	2000041c 	.word	0x2000041c
 80042c4:	0800fdf4 	.word	0x0800fdf4
 80042c8:	200001a0 	.word	0x200001a0
 80042cc:	0800f904 	.word	0x0800f904
 80042d0:	0800fdf8 	.word	0x0800fdf8
 80042d4:	0800fe08 	.word	0x0800fe08
 80042d8:	0800fe1c 	.word	0x0800fe1c
 80042dc:	0800fe20 	.word	0x0800fe20
			}
			else Debug_Send("Dont generate SMS\r\n");
 80042e0:	4b6a      	ldr	r3, [pc, #424]	; (800448c <DataDecrypt+0x590>)
 80042e2:	0018      	movs	r0, r3
 80042e4:	f7fe ff7a 	bl	80031dc <Debug_Send>
		}
		if(strncmp((char*)temp,"sync",4)==0){
 80042e8:	4969      	ldr	r1, [pc, #420]	; (8004490 <DataDecrypt+0x594>)
 80042ea:	248c      	movs	r4, #140	; 0x8c
 80042ec:	0064      	lsls	r4, r4, #1
 80042ee:	193b      	adds	r3, r7, r4
 80042f0:	2204      	movs	r2, #4
 80042f2:	0018      	movs	r0, r3
 80042f4:	f008 f975 	bl	800c5e2 <strncmp>
 80042f8:	1e03      	subs	r3, r0, #0
 80042fa:	d117      	bne.n	800432c <DataDecrypt+0x430>
			myStrSection(temp, temp1 ,4,':',1);
 80042fc:	25e4      	movs	r5, #228	; 0xe4
 80042fe:	1979      	adds	r1, r7, r5
 8004300:	1938      	adds	r0, r7, r4
 8004302:	2301      	movs	r3, #1
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	233a      	movs	r3, #58	; 0x3a
 8004308:	2204      	movs	r2, #4
 800430a:	f001 fc85 	bl	8005c18 <myStrSection>
			if(strncmp(temp1,"1",1)==0){
 800430e:	197b      	adds	r3, r7, r5
 8004310:	781a      	ldrb	r2, [r3, #0]
 8004312:	4b60      	ldr	r3, [pc, #384]	; (8004494 <DataDecrypt+0x598>)
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	d104      	bne.n	8004324 <DataDecrypt+0x428>
				Debug_Send("Unit active\r\n");
 800431a:	4b5f      	ldr	r3, [pc, #380]	; (8004498 <DataDecrypt+0x59c>)
 800431c:	0018      	movs	r0, r3
 800431e:	f7fe ff5d 	bl	80031dc <Debug_Send>
 8004322:	e003      	b.n	800432c <DataDecrypt+0x430>
			}
			else Debug_Send("Unit not active\r\n");
 8004324:	4b5d      	ldr	r3, [pc, #372]	; (800449c <DataDecrypt+0x5a0>)
 8004326:	0018      	movs	r0, r3
 8004328:	f7fe ff58 	bl	80031dc <Debug_Send>
		}
		if(strncmp((char*)temp,"vthresh",7)==0){
 800432c:	495c      	ldr	r1, [pc, #368]	; (80044a0 <DataDecrypt+0x5a4>)
 800432e:	248c      	movs	r4, #140	; 0x8c
 8004330:	0064      	lsls	r4, r4, #1
 8004332:	193b      	adds	r3, r7, r4
 8004334:	2207      	movs	r2, #7
 8004336:	0018      	movs	r0, r3
 8004338:	f008 f953 	bl	800c5e2 <strncmp>
 800433c:	1e03      	subs	r3, r0, #0
 800433e:	d121      	bne.n	8004384 <DataDecrypt+0x488>
			myStrSection(temp, temp1 ,4,':',1);
 8004340:	25e4      	movs	r5, #228	; 0xe4
 8004342:	1979      	adds	r1, r7, r5
 8004344:	1938      	adds	r0, r7, r4
 8004346:	2301      	movs	r3, #1
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	233a      	movs	r3, #58	; 0x3a
 800434c:	2204      	movs	r2, #4
 800434e:	f001 fc63 	bl	8005c18 <myStrSection>
			if(strncmp(temp1,"1",1)==0){
 8004352:	197b      	adds	r3, r7, r5
 8004354:	781a      	ldrb	r2, [r3, #0]
 8004356:	4b4f      	ldr	r3, [pc, #316]	; (8004494 <DataDecrypt+0x598>)
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	d109      	bne.n	8004372 <DataDecrypt+0x476>
				Debug_Send("Threshold active\r\n");
 800435e:	4b51      	ldr	r3, [pc, #324]	; (80044a4 <DataDecrypt+0x5a8>)
 8004360:	0018      	movs	r0, r3
 8004362:	f7fe ff3b 	bl	80031dc <Debug_Send>
				gsmInfo.vThreshold = 1;
 8004366:	4a50      	ldr	r2, [pc, #320]	; (80044a8 <DataDecrypt+0x5ac>)
 8004368:	2396      	movs	r3, #150	; 0x96
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	2101      	movs	r1, #1
 800436e:	50d1      	str	r1, [r2, r3]
 8004370:	e008      	b.n	8004384 <DataDecrypt+0x488>
			}
			else{
				Debug_Send("Threshold not active\r\n");
 8004372:	4b4e      	ldr	r3, [pc, #312]	; (80044ac <DataDecrypt+0x5b0>)
 8004374:	0018      	movs	r0, r3
 8004376:	f7fe ff31 	bl	80031dc <Debug_Send>
				gsmInfo.vThreshold = 0;
 800437a:	4a4b      	ldr	r2, [pc, #300]	; (80044a8 <DataDecrypt+0x5ac>)
 800437c:	2396      	movs	r3, #150	; 0x96
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	2100      	movs	r1, #0
 8004382:	50d1      	str	r1, [r2, r3]
			}
		}
		if(strncmp((char*)temp,"saved",5)==0){
 8004384:	494a      	ldr	r1, [pc, #296]	; (80044b0 <DataDecrypt+0x5b4>)
 8004386:	238c      	movs	r3, #140	; 0x8c
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	18fb      	adds	r3, r7, r3
 800438c:	2205      	movs	r2, #5
 800438e:	0018      	movs	r0, r3
 8004390:	f008 f927 	bl	800c5e2 <strncmp>
 8004394:	1e03      	subs	r3, r0, #0
 8004396:	d109      	bne.n	80043ac <DataDecrypt+0x4b0>
			Debug_Send("Generate registration SMS\r\n");
 8004398:	4b46      	ldr	r3, [pc, #280]	; (80044b4 <DataDecrypt+0x5b8>)
 800439a:	0018      	movs	r0, r3
 800439c:	f7fe ff1e 	bl	80031dc <Debug_Send>
			RegisterConfirm();
 80043a0:	f7ff fb54 	bl	8003a4c <RegisterConfirm>
			Debug_Send("Registration SMS generated\r\n");
 80043a4:	4b44      	ldr	r3, [pc, #272]	; (80044b8 <DataDecrypt+0x5bc>)
 80043a6:	0018      	movs	r0, r3
 80043a8:	f7fe ff18 	bl	80031dc <Debug_Send>
		}
		if(strncmp((char*)temp,"tmg",3)==0){
 80043ac:	4943      	ldr	r1, [pc, #268]	; (80044bc <DataDecrypt+0x5c0>)
 80043ae:	248c      	movs	r4, #140	; 0x8c
 80043b0:	0064      	lsls	r4, r4, #1
 80043b2:	193b      	adds	r3, r7, r4
 80043b4:	2203      	movs	r2, #3
 80043b6:	0018      	movs	r0, r3
 80043b8:	f008 f913 	bl	800c5e2 <strncmp>
 80043bc:	1e03      	subs	r3, r0, #0
 80043be:	d11e      	bne.n	80043fe <DataDecrypt+0x502>
			myStrSection(temp, gsmInfo.GPRSint,20,':',1);
 80043c0:	493f      	ldr	r1, [pc, #252]	; (80044c0 <DataDecrypt+0x5c4>)
 80043c2:	1938      	adds	r0, r7, r4
 80043c4:	2301      	movs	r3, #1
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	233a      	movs	r3, #58	; 0x3a
 80043ca:	2214      	movs	r2, #20
 80043cc:	f001 fc24 	bl	8005c18 <myStrSection>
			gsmInfo.GPRSinterval = myStrLong(gsmInfo.GPRSint, 10);
 80043d0:	4b3b      	ldr	r3, [pc, #236]	; (80044c0 <DataDecrypt+0x5c4>)
 80043d2:	210a      	movs	r1, #10
 80043d4:	0018      	movs	r0, r3
 80043d6:	f001 fdab 	bl	8005f30 <myStrLong>
 80043da:	0001      	movs	r1, r0
 80043dc:	4a32      	ldr	r2, [pc, #200]	; (80044a8 <DataDecrypt+0x5ac>)
 80043de:	23a0      	movs	r3, #160	; 0xa0
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	50d1      	str	r1, [r2, r3]
			gsmInfo.GPRSinterval *= 60;
 80043e4:	4a30      	ldr	r2, [pc, #192]	; (80044a8 <DataDecrypt+0x5ac>)
 80043e6:	23a0      	movs	r3, #160	; 0xa0
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	58d2      	ldr	r2, [r2, r3]
 80043ec:	0013      	movs	r3, r2
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	1a9b      	subs	r3, r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	0019      	movs	r1, r3
 80043f6:	4a2c      	ldr	r2, [pc, #176]	; (80044a8 <DataDecrypt+0x5ac>)
 80043f8:	23a0      	movs	r3, #160	; 0xa0
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	50d1      	str	r1, [r2, r3]
			//gsmInfo.vth_f = atof(gsmInfo.vth);


			//gsmInfo.vthFlag = 1;
		}
		if(strncmp((char*)temp,"no user",7)==0){
 80043fe:	4931      	ldr	r1, [pc, #196]	; (80044c4 <DataDecrypt+0x5c8>)
 8004400:	238c      	movs	r3, #140	; 0x8c
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	18fb      	adds	r3, r7, r3
 8004406:	2207      	movs	r2, #7
 8004408:	0018      	movs	r0, r3
 800440a:	f008 f8ea 	bl	800c5e2 <strncmp>
 800440e:	1e03      	subs	r3, r0, #0
 8004410:	d102      	bne.n	8004418 <DataDecrypt+0x51c>
			//LED = 1;
			gsmInfo.registered = 0;
 8004412:	4b25      	ldr	r3, [pc, #148]	; (80044a8 <DataDecrypt+0x5ac>)
 8004414:	2200      	movs	r2, #0
 8004416:	67da      	str	r2, [r3, #124]	; 0x7c
		}
		index++;
 8004418:	22ea      	movs	r2, #234	; 0xea
 800441a:	0052      	lsls	r2, r2, #1
 800441c:	18bb      	adds	r3, r7, r2
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	3301      	adds	r3, #1
 8004422:	18b9      	adds	r1, r7, r2
 8004424:	600b      	str	r3, [r1, #0]
		myStrSection(receive, temp ,160,';',index);
 8004426:	18bb      	adds	r3, r7, r2
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	b2db      	uxtb	r3, r3
 800442c:	228c      	movs	r2, #140	; 0x8c
 800442e:	0052      	lsls	r2, r2, #1
 8004430:	18b9      	adds	r1, r7, r2
 8004432:	222c      	movs	r2, #44	; 0x2c
 8004434:	18b8      	adds	r0, r7, r2
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	233b      	movs	r3, #59	; 0x3b
 800443a:	22a0      	movs	r2, #160	; 0xa0
 800443c:	f001 fbec 	bl	8005c18 <myStrSection>
	while (strlen(temp) > 1){
 8004440:	238c      	movs	r3, #140	; 0x8c
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	18fb      	adds	r3, r7, r3
 8004446:	0018      	movs	r0, r3
 8004448:	f7fb fe68 	bl	800011c <strlen>
 800444c:	0003      	movs	r3, r0
 800444e:	2b01      	cmp	r3, #1
 8004450:	d900      	bls.n	8004454 <DataDecrypt+0x558>
 8004452:	e585      	b.n	8003f60 <DataDecrypt+0x64>
	}
	//if(strncmp((char*)temp,"vth",3)==0){
	gsmInfo.updateFlag = 0;
 8004454:	4a14      	ldr	r2, [pc, #80]	; (80044a8 <DataDecrypt+0x5ac>)
 8004456:	2392      	movs	r3, #146	; 0x92
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	2100      	movs	r1, #0
 800445c:	50d1      	str	r1, [r2, r3]
	//}
	//Debug_Send(receive);
	//Debug_Send("\r\n");
	receive[0] = 0;
 800445e:	4b1a      	ldr	r3, [pc, #104]	; (80044c8 <DataDecrypt+0x5cc>)
 8004460:	22ec      	movs	r2, #236	; 0xec
 8004462:	0052      	lsls	r2, r2, #1
 8004464:	189b      	adds	r3, r3, r2
 8004466:	19db      	adds	r3, r3, r7
 8004468:	2200      	movs	r2, #0
 800446a:	701a      	strb	r2, [r3, #0]
	gsmState = SocketClose;
 800446c:	4b17      	ldr	r3, [pc, #92]	; (80044cc <DataDecrypt+0x5d0>)
 800446e:	221b      	movs	r2, #27
 8004470:	701a      	strb	r2, [r3, #0]
	gsmInfo.GPRS_Rec = 0;
 8004472:	4a0d      	ldr	r2, [pc, #52]	; (80044a8 <DataDecrypt+0x5ac>)
 8004474:	23ac      	movs	r3, #172	; 0xac
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	2100      	movs	r1, #0
 800447a:	50d1      	str	r1, [r2, r3]
	gsmState = 0;
 800447c:	4b13      	ldr	r3, [pc, #76]	; (80044cc <DataDecrypt+0x5d0>)
 800447e:	2200      	movs	r2, #0
 8004480:	701a      	strb	r2, [r3, #0]
}
 8004482:	46c0      	nop			; (mov r8, r8)
 8004484:	46bd      	mov	sp, r7
 8004486:	b076      	add	sp, #472	; 0x1d8
 8004488:	bdb0      	pop	{r4, r5, r7, pc}
 800448a:	46c0      	nop			; (mov r8, r8)
 800448c:	0800fe30 	.word	0x0800fe30
 8004490:	0800fe44 	.word	0x0800fe44
 8004494:	0800f904 	.word	0x0800f904
 8004498:	0800fdf8 	.word	0x0800fdf8
 800449c:	0800fe08 	.word	0x0800fe08
 80044a0:	0800fe4c 	.word	0x0800fe4c
 80044a4:	0800fe54 	.word	0x0800fe54
 80044a8:	20000318 	.word	0x20000318
 80044ac:	0800fe68 	.word	0x0800fe68
 80044b0:	0800fe80 	.word	0x0800fe80
 80044b4:	0800fe88 	.word	0x0800fe88
 80044b8:	0800fea4 	.word	0x0800fea4
 80044bc:	0800fec4 	.word	0x0800fec4
 80044c0:	2000045c 	.word	0x2000045c
 80044c4:	0800fec8 	.word	0x0800fec8
 80044c8:	fffffe54 	.word	0xfffffe54
 80044cc:	20000000 	.word	0x20000000

080044d0 <GSM_Receive>:
	 //sendData(testS,UART0);
	return count;
}


void GSM_Receive(char in){
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	0002      	movs	r2, r0
 80044d8:	1dfb      	adds	r3, r7, #7
 80044da:	701a      	strb	r2, [r3, #0]
	gsmInfo.Timeout = 0;
 80044dc:	4a12      	ldr	r2, [pc, #72]	; (8004528 <GSM_Receive+0x58>)
 80044de:	23b0      	movs	r3, #176	; 0xb0
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	2100      	movs	r1, #0
 80044e4:	50d1      	str	r1, [r2, r3]
	//HAL_UART_Receive_IT(&huart2, temp, 50);
	if (in == '>') gsmInfo.Prompt = 1;
 80044e6:	1dfb      	adds	r3, r7, #7
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b3e      	cmp	r3, #62	; 0x3e
 80044ec:	d104      	bne.n	80044f8 <GSM_Receive+0x28>
 80044ee:	4a0e      	ldr	r2, [pc, #56]	; (8004528 <GSM_Receive+0x58>)
 80044f0:	23ae      	movs	r3, #174	; 0xae
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	2101      	movs	r1, #1
 80044f6:	50d1      	str	r1, [r2, r3]
	recBuff[recBuffPointerWrite] = in;
 80044f8:	4b0c      	ldr	r3, [pc, #48]	; (800452c <GSM_Receive+0x5c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a0c      	ldr	r2, [pc, #48]	; (8004530 <GSM_Receive+0x60>)
 80044fe:	1df9      	adds	r1, r7, #7
 8004500:	7809      	ldrb	r1, [r1, #0]
 8004502:	54d1      	strb	r1, [r2, r3]
	//HAL_UART_Transmit(&huart1, recBuff[recBuffPointerWrite], 2, 10);
	//huart1.Instance->TDR = in;
	recBuffPointerWrite++;
 8004504:	4b09      	ldr	r3, [pc, #36]	; (800452c <GSM_Receive+0x5c>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	4b08      	ldr	r3, [pc, #32]	; (800452c <GSM_Receive+0x5c>)
 800450c:	601a      	str	r2, [r3, #0]
	if (recBuffPointerWrite >= recBuffSize) recBuffPointerWrite = 0;
 800450e:	4b07      	ldr	r3, [pc, #28]	; (800452c <GSM_Receive+0x5c>)
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	2396      	movs	r3, #150	; 0x96
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	429a      	cmp	r2, r3
 8004518:	db02      	blt.n	8004520 <GSM_Receive+0x50>
 800451a:	4b04      	ldr	r3, [pc, #16]	; (800452c <GSM_Receive+0x5c>)
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]

}
 8004520:	46c0      	nop			; (mov r8, r8)
 8004522:	46bd      	mov	sp, r7
 8004524:	b002      	add	sp, #8
 8004526:	bd80      	pop	{r7, pc}
 8004528:	20000318 	.word	0x20000318
 800452c:	200006c0 	.word	0x200006c0
 8004530:	200004ac 	.word	0x200004ac

08004534 <getTime>:

rtc getUptime(){
	return uptime;
}

rtc getTime(){
 8004534:	b590      	push	{r4, r7, lr}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
	return time;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a05      	ldr	r2, [pc, #20]	; (8004554 <getTime+0x20>)
 8004540:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004542:	c313      	stmia	r3!, {r0, r1, r4}
 8004544:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004546:	c313      	stmia	r3!, {r0, r1, r4}
 8004548:	6812      	ldr	r2, [r2, #0]
 800454a:	601a      	str	r2, [r3, #0]
}
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	46bd      	mov	sp, r7
 8004550:	b003      	add	sp, #12
 8004552:	bd90      	pop	{r4, r7, pc}
 8004554:	20000ac4 	.word	0x20000ac4

08004558 <updateTime>:

void updateTime(char* data){
 8004558:	b5b0      	push	{r4, r5, r7, lr}
 800455a:	b08c      	sub	sp, #48	; 0x30
 800455c:	af02      	add	r7, sp, #8
 800455e:	6078      	str	r0, [r7, #4]
	char temp[15];
	char temp1[10];

	myStrSection(data, temp,20,',',0);	//date 22/11/14
 8004560:	2518      	movs	r5, #24
 8004562:	1979      	adds	r1, r7, r5
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	2300      	movs	r3, #0
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	232c      	movs	r3, #44	; 0x2c
 800456c:	2214      	movs	r2, #20
 800456e:	f001 fb53 	bl	8005c18 <myStrSection>
	myStrSection(temp, temp1,20,'/',0);	//get year
 8004572:	240c      	movs	r4, #12
 8004574:	1939      	adds	r1, r7, r4
 8004576:	1978      	adds	r0, r7, r5
 8004578:	2300      	movs	r3, #0
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	232f      	movs	r3, #47	; 0x2f
 800457e:	2214      	movs	r2, #20
 8004580:	f001 fb4a 	bl	8005c18 <myStrSection>
	time.years = myStrLong(temp1, 10) + 2000;
 8004584:	193b      	adds	r3, r7, r4
 8004586:	210a      	movs	r1, #10
 8004588:	0018      	movs	r0, r3
 800458a:	f001 fcd1 	bl	8005f30 <myStrLong>
 800458e:	0003      	movs	r3, r0
 8004590:	22fa      	movs	r2, #250	; 0xfa
 8004592:	00d2      	lsls	r2, r2, #3
 8004594:	189a      	adds	r2, r3, r2
 8004596:	4b30      	ldr	r3, [pc, #192]	; (8004658 <updateTime+0x100>)
 8004598:	601a      	str	r2, [r3, #0]
	myStrSection(temp, temp1,20,'/',1);	//get month
 800459a:	1939      	adds	r1, r7, r4
 800459c:	1978      	adds	r0, r7, r5
 800459e:	2301      	movs	r3, #1
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	232f      	movs	r3, #47	; 0x2f
 80045a4:	2214      	movs	r2, #20
 80045a6:	f001 fb37 	bl	8005c18 <myStrSection>
	time.months = myStrLong(temp1, 10);
 80045aa:	193b      	adds	r3, r7, r4
 80045ac:	210a      	movs	r1, #10
 80045ae:	0018      	movs	r0, r3
 80045b0:	f001 fcbe 	bl	8005f30 <myStrLong>
 80045b4:	0002      	movs	r2, r0
 80045b6:	4b28      	ldr	r3, [pc, #160]	; (8004658 <updateTime+0x100>)
 80045b8:	605a      	str	r2, [r3, #4]
	myStrSection(temp, temp1,20,'/',2);	//get day
 80045ba:	1939      	adds	r1, r7, r4
 80045bc:	1978      	adds	r0, r7, r5
 80045be:	2302      	movs	r3, #2
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	232f      	movs	r3, #47	; 0x2f
 80045c4:	2214      	movs	r2, #20
 80045c6:	f001 fb27 	bl	8005c18 <myStrSection>
	time.days = myStrLong(temp1, 10);
 80045ca:	193b      	adds	r3, r7, r4
 80045cc:	210a      	movs	r1, #10
 80045ce:	0018      	movs	r0, r3
 80045d0:	f001 fcae 	bl	8005f30 <myStrLong>
 80045d4:	0002      	movs	r2, r0
 80045d6:	4b20      	ldr	r3, [pc, #128]	; (8004658 <updateTime+0x100>)
 80045d8:	60da      	str	r2, [r3, #12]

	myStrSection(data, temp,20,',',1);	//time 20:54:31+08
 80045da:	1979      	adds	r1, r7, r5
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	2301      	movs	r3, #1
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	232c      	movs	r3, #44	; 0x2c
 80045e4:	2214      	movs	r2, #20
 80045e6:	f001 fb17 	bl	8005c18 <myStrSection>
	myStrSection(temp, temp1,20,':',0);	//get hour
 80045ea:	1939      	adds	r1, r7, r4
 80045ec:	1978      	adds	r0, r7, r5
 80045ee:	2300      	movs	r3, #0
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	233a      	movs	r3, #58	; 0x3a
 80045f4:	2214      	movs	r2, #20
 80045f6:	f001 fb0f 	bl	8005c18 <myStrSection>
	time.hours = myStrLong(temp1, 10);
 80045fa:	193b      	adds	r3, r7, r4
 80045fc:	210a      	movs	r1, #10
 80045fe:	0018      	movs	r0, r3
 8004600:	f001 fc96 	bl	8005f30 <myStrLong>
 8004604:	0002      	movs	r2, r0
 8004606:	4b14      	ldr	r3, [pc, #80]	; (8004658 <updateTime+0x100>)
 8004608:	611a      	str	r2, [r3, #16]
	myStrSection(temp, temp1,20,':',1);	//get minute
 800460a:	1939      	adds	r1, r7, r4
 800460c:	1978      	adds	r0, r7, r5
 800460e:	2301      	movs	r3, #1
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	233a      	movs	r3, #58	; 0x3a
 8004614:	2214      	movs	r2, #20
 8004616:	f001 faff 	bl	8005c18 <myStrSection>
	time.minutes = myStrLong(temp1, 10);
 800461a:	193b      	adds	r3, r7, r4
 800461c:	210a      	movs	r1, #10
 800461e:	0018      	movs	r0, r3
 8004620:	f001 fc86 	bl	8005f30 <myStrLong>
 8004624:	0002      	movs	r2, r0
 8004626:	4b0c      	ldr	r3, [pc, #48]	; (8004658 <updateTime+0x100>)
 8004628:	615a      	str	r2, [r3, #20]
	myStrSection(temp, temp1,20,':',2);	//get second
 800462a:	1939      	adds	r1, r7, r4
 800462c:	1978      	adds	r0, r7, r5
 800462e:	2302      	movs	r3, #2
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	233a      	movs	r3, #58	; 0x3a
 8004634:	2214      	movs	r2, #20
 8004636:	f001 faef 	bl	8005c18 <myStrSection>
	temp1[2] = 0;
 800463a:	193b      	adds	r3, r7, r4
 800463c:	2200      	movs	r2, #0
 800463e:	709a      	strb	r2, [r3, #2]
	time.seconds = myStrLong(temp1, 10);
 8004640:	193b      	adds	r3, r7, r4
 8004642:	210a      	movs	r1, #10
 8004644:	0018      	movs	r0, r3
 8004646:	f001 fc73 	bl	8005f30 <myStrLong>
 800464a:	0002      	movs	r2, r0
 800464c:	4b02      	ldr	r3, [pc, #8]	; (8004658 <updateTime+0x100>)
 800464e:	619a      	str	r2, [r3, #24]
	Debug_Send(timeR);
	Debug_Send("\r\n");*/
	//if (strcmp(on,off) > 0) Debug_Send("More\r\n",UART0);
	//else Debug_Send("less\r\n",UART0);

}
 8004650:	46c0      	nop			; (mov r8, r8)
 8004652:	46bd      	mov	sp, r7
 8004654:	b00a      	add	sp, #40	; 0x28
 8004656:	bdb0      	pop	{r4, r5, r7, pc}
 8004658:	20000ac4 	.word	0x20000ac4

0800465c <RelayOff>:
	HAL_Delay(50);
	//HAL_GPIO_WritePin(Relay_Close_GPIO_Port, Relay_Close_Pin, GPIO_PIN_RESET);

}

void RelayOff(){
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(Relay_Open_GPIO_Port, Relay_Open_Pin, GPIO_PIN_SET);
	HAL_Delay(50);
 8004660:	2032      	movs	r0, #50	; 0x32
 8004662:	f002 fbdd 	bl	8006e20 <HAL_Delay>
	//HAL_GPIO_WritePin(Relay_Open_GPIO_Port, Relay_Open_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_TogglePin(Relay_Open_GPIO_Port, Relay_Open_Pin);
}
 8004666:	46c0      	nop			; (mov r8, r8)
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <HAL_TIM_IC_CaptureCallback>:

//Flow rate : 5~200L/min

//Flow Pulse:  F(Hz)=(0.45xQ) +/-3%    Q=L/min

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]

	  if (htim->Instance == TIM2){
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	2380      	movs	r3, #128	; 0x80
 800467a:	05db      	lsls	r3, r3, #23
 800467c:	429a      	cmp	r2, r3
 800467e:	d106      	bne.n	800468e <HAL_TIM_IC_CaptureCallback+0x22>
		  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4){
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	7f1b      	ldrb	r3, [r3, #28]
 8004684:	2b08      	cmp	r3, #8
 8004686:	d102      	bne.n	800468e <HAL_TIM_IC_CaptureCallback+0x22>
			  flowing = 2;
 8004688:	4b09      	ldr	r3, [pc, #36]	; (80046b0 <HAL_TIM_IC_CaptureCallback+0x44>)
 800468a:	2202      	movs	r2, #2
 800468c:	601a      	str	r2, [r3, #0]
		  }
	  }
	  if (htim->Instance == TIM15){
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a08      	ldr	r2, [pc, #32]	; (80046b4 <HAL_TIM_IC_CaptureCallback+0x48>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d106      	bne.n	80046a6 <HAL_TIM_IC_CaptureCallback+0x3a>
		  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	7f1b      	ldrb	r3, [r3, #28]
 800469c:	2b02      	cmp	r3, #2
 800469e:	d102      	bne.n	80046a6 <HAL_TIM_IC_CaptureCallback+0x3a>
			  flowing = 1;
 80046a0:	4b03      	ldr	r3, [pc, #12]	; (80046b0 <HAL_TIM_IC_CaptureCallback+0x44>)
 80046a2:	2201      	movs	r2, #1
 80046a4:	601a      	str	r2, [r3, #0]
		  }
	  }

}
 80046a6:	46c0      	nop			; (mov r8, r8)
 80046a8:	46bd      	mov	sp, r7
 80046aa:	b002      	add	sp, #8
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	46c0      	nop			; (mov r8, r8)
 80046b0:	20000dc8 	.word	0x20000dc8
 80046b4:	40014000 	.word	0x40014000

080046b8 <pulseTim>:
void pulseTim(uint32_t length){
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	if((TIM1->CR1 & TIM_CR1_CEN) == 0){
 80046c0:	4b0f      	ldr	r3, [pc, #60]	; (8004700 <pulseTim+0x48>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2201      	movs	r2, #1
 80046c6:	4013      	ands	r3, r2
 80046c8:	d115      	bne.n	80046f6 <pulseTim+0x3e>
	  Debug_Send("Pulse f\r\n");
 80046ca:	4b0e      	ldr	r3, [pc, #56]	; (8004704 <pulseTim+0x4c>)
 80046cc:	0018      	movs	r0, r3
 80046ce:	f7fe fd85 	bl	80031dc <Debug_Send>
	  temp = length;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	60fb      	str	r3, [r7, #12]
	  TIM1->CCR1 = 65000 - temp;
 80046d6:	4b0a      	ldr	r3, [pc, #40]	; (8004700 <pulseTim+0x48>)
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	490b      	ldr	r1, [pc, #44]	; (8004708 <pulseTim+0x50>)
 80046dc:	1a8a      	subs	r2, r1, r2
 80046de:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM1-> CNT = 65000 -temp - 300;
 80046e0:	4b07      	ldr	r3, [pc, #28]	; (8004700 <pulseTim+0x48>)
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	4909      	ldr	r1, [pc, #36]	; (800470c <pulseTim+0x54>)
 80046e6:	1a8a      	subs	r2, r1, r2
 80046e8:	625a      	str	r2, [r3, #36]	; 0x24
	  //sprintf(temp, "CCR:%i, CNT: %i, length: %i\r\n", TIM1->CCR1, TIM1-> CNT, length);
	  //Debug_Send(temp);
	  //TIM1->EGR |= TIM_EGR_UG;
	  //htim1.Init.Period = 100;
	  TIM1->CR1 |= TIM_CR1_CEN;
 80046ea:	4b05      	ldr	r3, [pc, #20]	; (8004700 <pulseTim+0x48>)
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	4b04      	ldr	r3, [pc, #16]	; (8004700 <pulseTim+0x48>)
 80046f0:	2101      	movs	r1, #1
 80046f2:	430a      	orrs	r2, r1
 80046f4:	601a      	str	r2, [r3, #0]
	}
}
 80046f6:	46c0      	nop			; (mov r8, r8)
 80046f8:	46bd      	mov	sp, r7
 80046fa:	b004      	add	sp, #16
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	46c0      	nop			; (mov r8, r8)
 8004700:	40012c00 	.word	0x40012c00
 8004704:	0800fed0 	.word	0x0800fed0
 8004708:	0000fde8 	.word	0x0000fde8
 800470c:	0000fcbc 	.word	0x0000fcbc

08004710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004714:	f002 fb54 	bl	8006dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004718:	f000 f914 	bl	8004944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800471c:	f000 fc6a 	bl	8004ff4 <MX_GPIO_Init>
  MX_DMA_Init();
 8004720:	f000 fc4a 	bl	8004fb8 <MX_DMA_Init>
  MX_I2C1_Init();
 8004724:	f000 f9e8 	bl	8004af8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8004728:	f000 fbe6 	bl	8004ef8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800472c:	f000 fc14 	bl	8004f58 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8004730:	f000 f96c 	bl	8004a0c <MX_ADC_Init>
  MX_TIM1_Init();
 8004734:	f000 fa20 	bl	8004b78 <MX_TIM1_Init>
  MX_TIM2_Init();
 8004738:	f000 fae0 	bl	8004cfc <MX_TIM2_Init>
  MX_TIM15_Init();
 800473c:	f000 fb5a 	bl	8004df4 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  Debug_Send("start\r\n");
 8004740:	4b71      	ldr	r3, [pc, #452]	; (8004908 <main+0x1f8>)
 8004742:	0018      	movs	r0, r3
 8004744:	f7fe fd4a 	bl	80031dc <Debug_Send>
  ssd1306_Init();
 8004748:	f001 fc9e 	bl	8006088 <ssd1306_Init>
  GSM_Init();
 800474c:	f7fe faec 	bl	8002d28 <GSM_Init>
  HAL_TIM_OnePulse_Start_IT(&htim1, TIM_CHANNEL_1);
 8004750:	4b6e      	ldr	r3, [pc, #440]	; (800490c <main+0x1fc>)
 8004752:	2100      	movs	r1, #0
 8004754:	0018      	movs	r0, r3
 8004756:	f005 f999 	bl	8009a8c <HAL_TIM_OnePulse_Start_IT>
  ssd1306_Init();
 800475a:	f001 fc95 	bl	8006088 <ssd1306_Init>
  Debug_Send("Init done\r\n");
 800475e:	4b6c      	ldr	r3, [pc, #432]	; (8004910 <main+0x200>)
 8004760:	0018      	movs	r0, r3
 8004762:	f7fe fd3b 	bl	80031dc <Debug_Send>
  HAL_Delay(1000);
 8004766:	23fa      	movs	r3, #250	; 0xfa
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	0018      	movs	r0, r3
 800476c:	f002 fb58 	bl	8006e20 <HAL_Delay>
  ADC_Service();
 8004770:	f7fe faa6 	bl	8002cc0 <ADC_Service>
  valve.idleCurrent = GetADC1()[ValveLimit];
 8004774:	f7fe fad0 	bl	8002d18 <GetADC1>
 8004778:	0003      	movs	r3, r0
 800477a:	3308      	adds	r3, #8
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	b29a      	uxth	r2, r3
 8004780:	4b64      	ldr	r3, [pc, #400]	; (8004914 <main+0x204>)
 8004782:	805a      	strh	r2, [r3, #2]
  HAL_Delay(1000);
 8004784:	23fa      	movs	r3, #250	; 0xfa
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	0018      	movs	r0, r3
 800478a:	f002 fb49 	bl	8006e20 <HAL_Delay>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 800478e:	4b62      	ldr	r3, [pc, #392]	; (8004918 <main+0x208>)
 8004790:	210c      	movs	r1, #12
 8004792:	0018      	movs	r0, r3
 8004794:	f005 f812 	bl	80097bc <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_2);
 8004798:	4b60      	ldr	r3, [pc, #384]	; (800491c <main+0x20c>)
 800479a:	2104      	movs	r1, #4
 800479c:	0018      	movs	r0, r3
 800479e:	f005 f80d 	bl	80097bc <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (timer1s == 1){
 80047a2:	4b5f      	ldr	r3, [pc, #380]	; (8004920 <main+0x210>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d138      	bne.n	800481c <main+0x10c>
		  timer1s = 0;
 80047aa:	4b5d      	ldr	r3, [pc, #372]	; (8004920 <main+0x210>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	701a      	strb	r2, [r3, #0]
		  Debug_Send("loop\r\n");
 80047b0:	4b5c      	ldr	r3, [pc, #368]	; (8004924 <main+0x214>)
 80047b2:	0018      	movs	r0, r3
 80047b4:	f7fe fd12 	bl	80031dc <Debug_Send>
		  if (valve.timeout == 0){
 80047b8:	4b56      	ldr	r3, [pc, #344]	; (8004914 <main+0x204>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10d      	bne.n	80047dc <main+0xcc>
			  ADC_Service();
 80047c0:	f7fe fa7e 	bl	8002cc0 <ADC_Service>
			  if(valve.calibrate == 1) valve.idleCurrent = GetADC1()[ValveLimit];
 80047c4:	4b53      	ldr	r3, [pc, #332]	; (8004914 <main+0x204>)
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d107      	bne.n	80047dc <main+0xcc>
 80047cc:	f7fe faa4 	bl	8002d18 <GetADC1>
 80047d0:	0003      	movs	r3, r0
 80047d2:	3308      	adds	r3, #8
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	4b4e      	ldr	r3, [pc, #312]	; (8004914 <main+0x204>)
 80047da:	805a      	strh	r2, [r3, #2]
		  }
		  //GSM_Service();
		  ssd1306_SetCursor(5, 5);
 80047dc:	2105      	movs	r1, #5
 80047de:	2005      	movs	r0, #5
 80047e0:	f001 fe36 	bl	8006450 <ssd1306_SetCursor>
		  ssd1306_WriteString(">Pos ", Font_7x10, White);
 80047e4:	4a50      	ldr	r2, [pc, #320]	; (8004928 <main+0x218>)
 80047e6:	4851      	ldr	r0, [pc, #324]	; (800492c <main+0x21c>)
 80047e8:	2301      	movs	r3, #1
 80047ea:	6811      	ldr	r1, [r2, #0]
 80047ec:	6852      	ldr	r2, [r2, #4]
 80047ee:	f001 fe05 	bl	80063fc <ssd1306_WriteString>
		  myLongStr(flowing,temp,10,10);
 80047f2:	4b4f      	ldr	r3, [pc, #316]	; (8004930 <main+0x220>)
 80047f4:	6818      	ldr	r0, [r3, #0]
 80047f6:	494f      	ldr	r1, [pc, #316]	; (8004934 <main+0x224>)
 80047f8:	230a      	movs	r3, #10
 80047fa:	220a      	movs	r2, #10
 80047fc:	f001 faa0 	bl	8005d40 <myLongStr>
		  ssd1306_WriteString(temp, Font_7x10, White);
 8004800:	4a49      	ldr	r2, [pc, #292]	; (8004928 <main+0x218>)
 8004802:	484c      	ldr	r0, [pc, #304]	; (8004934 <main+0x224>)
 8004804:	2301      	movs	r3, #1
 8004806:	6811      	ldr	r1, [r2, #0]
 8004808:	6852      	ldr	r2, [r2, #4]
 800480a:	f001 fdf7 	bl	80063fc <ssd1306_WriteString>
		  ssd1306_UpdateScreen();
 800480e:	f001 fccb 	bl	80061a8 <ssd1306_UpdateScreen>
		  Motor_Service();
 8004812:	f000 fcb1 	bl	8005178 <Motor_Service>
		  flowing = 0;
 8004816:	4b46      	ldr	r3, [pc, #280]	; (8004930 <main+0x220>)
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]
		  //HAL_GPIO_TogglePin(ValveDir_GPIO_Port, ValveDir_Pin);
	  }
	  if (timer10ms == 1){
 800481c:	4b46      	ldr	r3, [pc, #280]	; (8004938 <main+0x228>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d1be      	bne.n	80047a2 <main+0x92>
		  timer10ms = 0;
 8004824:	4b44      	ldr	r3, [pc, #272]	; (8004938 <main+0x228>)
 8004826:	2200      	movs	r2, #0
 8004828:	701a      	strb	r2, [r3, #0]
		  recData();
 800482a:	f7fe fcf1 	bl	8003210 <recData>
		  if (valve.timeout > 0){
 800482e:	4b39      	ldr	r3, [pc, #228]	; (8004914 <main+0x204>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0b5      	beq.n	80047a2 <main+0x92>
			  valve.timeout--;
 8004836:	4b37      	ldr	r3, [pc, #220]	; (8004914 <main+0x204>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	1e5a      	subs	r2, r3, #1
 800483c:	4b35      	ldr	r3, [pc, #212]	; (8004914 <main+0x204>)
 800483e:	609a      	str	r2, [r3, #8]

			  //openTimer = 0;
			  //closeTimer = 0;
			  ADC_Service();
 8004840:	f7fe fa3e 	bl	8002cc0 <ADC_Service>
			  //if (GetADC1()[ValveLimit] > (valve.idleCurrent + (valve.idleCurrent / 10))){	//valve current activity
			  //sprintf(temp, "t:%i cnt:%i rt:%i\r\n",valve.timeout, TIM1-> CNT, valve.runTimer);
			  //Debug_Send(temp);
			  if (GetADC1()[ValveLimit] > (2 * valve.idleCurrent)){
 8004844:	f7fe fa68 	bl	8002d18 <GetADC1>
 8004848:	0003      	movs	r3, r0
 800484a:	3308      	adds	r3, #8
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a31      	ldr	r2, [pc, #196]	; (8004914 <main+0x204>)
 8004850:	8852      	ldrh	r2, [r2, #2]
 8004852:	0052      	lsls	r2, r2, #1
 8004854:	4293      	cmp	r3, r2
 8004856:	d937      	bls.n	80048c8 <main+0x1b8>
				  if (valve.state == Open){
 8004858:	4b2e      	ldr	r3, [pc, #184]	; (8004914 <main+0x204>)
 800485a:	7b1b      	ldrb	r3, [r3, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d109      	bne.n	8004874 <main+0x164>
					  if(valve.calibrate == 0) valve.openTimer++;
 8004860:	4b2c      	ldr	r3, [pc, #176]	; (8004914 <main+0x204>)
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d105      	bne.n	8004874 <main+0x164>
 8004868:	4b2a      	ldr	r3, [pc, #168]	; (8004914 <main+0x204>)
 800486a:	889b      	ldrh	r3, [r3, #4]
 800486c:	3301      	adds	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	4b28      	ldr	r3, [pc, #160]	; (8004914 <main+0x204>)
 8004872:	809a      	strh	r2, [r3, #4]
					  //Debug_Send("o");
				  }
				  if (valve.state == Close){
 8004874:	4b27      	ldr	r3, [pc, #156]	; (8004914 <main+0x204>)
 8004876:	7b1b      	ldrb	r3, [r3, #12]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d109      	bne.n	8004890 <main+0x180>
					  if(valve.calibrate == 0) valve.closeTimer++;
 800487c:	4b25      	ldr	r3, [pc, #148]	; (8004914 <main+0x204>)
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d105      	bne.n	8004890 <main+0x180>
 8004884:	4b23      	ldr	r3, [pc, #140]	; (8004914 <main+0x204>)
 8004886:	88db      	ldrh	r3, [r3, #6]
 8004888:	3301      	adds	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	4b21      	ldr	r3, [pc, #132]	; (8004914 <main+0x204>)
 800488e:	80da      	strh	r2, [r3, #6]
				  }
				  if (valve.calibrate == 1){
 8004890:	4b20      	ldr	r3, [pc, #128]	; (8004914 <main+0x204>)
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d184      	bne.n	80047a2 <main+0x92>
					  //sprintf(temp, "s Timer:%i\r\n", valve.stepTimer);
					  //Debug_Send(temp);
					  Debug_Send(".");
 8004898:	4b28      	ldr	r3, [pc, #160]	; (800493c <main+0x22c>)
 800489a:	0018      	movs	r0, r3
 800489c:	f7fe fc9e 	bl	80031dc <Debug_Send>
					  valve.stepTimer++;
 80048a0:	4b1c      	ldr	r3, [pc, #112]	; (8004914 <main+0x204>)
 80048a2:	8a5b      	ldrh	r3, [r3, #18]
 80048a4:	3301      	adds	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	4b1a      	ldr	r3, [pc, #104]	; (8004914 <main+0x204>)
 80048aa:	825a      	strh	r2, [r3, #18]
					  if (valve.stepTimer >= valve.stepSize){
 80048ac:	4b19      	ldr	r3, [pc, #100]	; (8004914 <main+0x204>)
 80048ae:	8a5a      	ldrh	r2, [r3, #18]
 80048b0:	4b18      	ldr	r3, [pc, #96]	; (8004914 <main+0x204>)
 80048b2:	7b9b      	ldrb	r3, [r3, #14]
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d200      	bcs.n	80048bc <main+0x1ac>
 80048ba:	e772      	b.n	80047a2 <main+0x92>
						  valve.stepTimer = 0;
 80048bc:	4b15      	ldr	r3, [pc, #84]	; (8004914 <main+0x204>)
 80048be:	2200      	movs	r2, #0
 80048c0:	825a      	strh	r2, [r3, #18]
						  stop();
 80048c2:	f001 f993 	bl	8005bec <stop>
 80048c6:	e76c      	b.n	80047a2 <main+0x92>
			  }
			  else{			//no current change
				  if (valve.state == Close){
					  //if(valve.calibrate == 0) Debug_Send("no motion detected\r\n");
				  }
				  valve.runTimer++;
 80048c8:	4b12      	ldr	r3, [pc, #72]	; (8004914 <main+0x204>)
 80048ca:	8b1b      	ldrh	r3, [r3, #24]
 80048cc:	3301      	adds	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	4b10      	ldr	r3, [pc, #64]	; (8004914 <main+0x204>)
 80048d2:	831a      	strh	r2, [r3, #24]
				  if (valve.runTimer > 100){
 80048d4:	4b0f      	ldr	r3, [pc, #60]	; (8004914 <main+0x204>)
 80048d6:	8b1b      	ldrh	r3, [r3, #24]
 80048d8:	2b64      	cmp	r3, #100	; 0x64
 80048da:	d800      	bhi.n	80048de <main+0x1ce>
 80048dc:	e761      	b.n	80047a2 <main+0x92>
					  valve.runTimer = 0;
 80048de:	4b0d      	ldr	r3, [pc, #52]	; (8004914 <main+0x204>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	831a      	strh	r2, [r3, #24]
					  //TIM1->CR1 &= ~TIM_CR1_CEN;		//disable timer
					  //TIM1-> CNT = 6495;
					  valve.timeout = 0;
 80048e4:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <main+0x204>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	609a      	str	r2, [r3, #8]
					  sprintf(temp, "o:%i c:%i done\r\n",valve.openTimer, valve.closeTimer);
 80048ea:	4b0a      	ldr	r3, [pc, #40]	; (8004914 <main+0x204>)
 80048ec:	889b      	ldrh	r3, [r3, #4]
 80048ee:	001a      	movs	r2, r3
 80048f0:	4b08      	ldr	r3, [pc, #32]	; (8004914 <main+0x204>)
 80048f2:	88db      	ldrh	r3, [r3, #6]
 80048f4:	4912      	ldr	r1, [pc, #72]	; (8004940 <main+0x230>)
 80048f6:	480f      	ldr	r0, [pc, #60]	; (8004934 <main+0x224>)
 80048f8:	f007 fe3e 	bl	800c578 <siprintf>
					  Debug_Send(temp);
 80048fc:	4b0d      	ldr	r3, [pc, #52]	; (8004934 <main+0x224>)
 80048fe:	0018      	movs	r0, r3
 8004900:	f7fe fc6c 	bl	80031dc <Debug_Send>
	  if (timer1s == 1){
 8004904:	e74d      	b.n	80047a2 <main+0x92>
 8004906:	46c0      	nop			; (mov r8, r8)
 8004908:	0800fedc 	.word	0x0800fedc
 800490c:	20000bb8 	.word	0x20000bb8
 8004910:	0800fee4 	.word	0x0800fee4
 8004914:	20000dcc 	.word	0x20000dcc
 8004918:	20000c00 	.word	0x20000c00
 800491c:	20000c48 	.word	0x20000c48
 8004920:	20000db4 	.word	0x20000db4
 8004924:	0800fef0 	.word	0x0800fef0
 8004928:	20000008 	.word	0x20000008
 800492c:	0800fef8 	.word	0x0800fef8
 8004930:	20000dc8 	.word	0x20000dc8
 8004934:	20000da0 	.word	0x20000da0
 8004938:	20000db5 	.word	0x20000db5
 800493c:	0800ff00 	.word	0x0800ff00
 8004940:	0800ff04 	.word	0x0800ff04

08004944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004944:	b590      	push	{r4, r7, lr}
 8004946:	b099      	sub	sp, #100	; 0x64
 8004948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800494a:	242c      	movs	r4, #44	; 0x2c
 800494c:	193b      	adds	r3, r7, r4
 800494e:	0018      	movs	r0, r3
 8004950:	2334      	movs	r3, #52	; 0x34
 8004952:	001a      	movs	r2, r3
 8004954:	2100      	movs	r1, #0
 8004956:	f007 fe06 	bl	800c566 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800495a:	231c      	movs	r3, #28
 800495c:	18fb      	adds	r3, r7, r3
 800495e:	0018      	movs	r0, r3
 8004960:	2310      	movs	r3, #16
 8004962:	001a      	movs	r2, r3
 8004964:	2100      	movs	r1, #0
 8004966:	f007 fdfe 	bl	800c566 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800496a:	003b      	movs	r3, r7
 800496c:	0018      	movs	r0, r3
 800496e:	231c      	movs	r3, #28
 8004970:	001a      	movs	r2, r3
 8004972:	2100      	movs	r1, #0
 8004974:	f007 fdf7 	bl	800c566 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8004978:	0021      	movs	r1, r4
 800497a:	187b      	adds	r3, r7, r1
 800497c:	2212      	movs	r2, #18
 800497e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004980:	187b      	adds	r3, r7, r1
 8004982:	2201      	movs	r2, #1
 8004984:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8004986:	187b      	adds	r3, r7, r1
 8004988:	2201      	movs	r2, #1
 800498a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800498c:	187b      	adds	r3, r7, r1
 800498e:	2210      	movs	r2, #16
 8004990:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8004992:	187b      	adds	r3, r7, r1
 8004994:	2210      	movs	r2, #16
 8004996:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004998:	187b      	adds	r3, r7, r1
 800499a:	2200      	movs	r2, #0
 800499c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800499e:	187b      	adds	r3, r7, r1
 80049a0:	0018      	movs	r0, r3
 80049a2:	f003 ff9f 	bl	80088e4 <HAL_RCC_OscConfig>
 80049a6:	1e03      	subs	r3, r0, #0
 80049a8:	d001      	beq.n	80049ae <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80049aa:	f000 fbdf 	bl	800516c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049ae:	211c      	movs	r1, #28
 80049b0:	187b      	adds	r3, r7, r1
 80049b2:	2207      	movs	r2, #7
 80049b4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80049b6:	187b      	adds	r3, r7, r1
 80049b8:	2200      	movs	r2, #0
 80049ba:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80049bc:	187b      	adds	r3, r7, r1
 80049be:	2200      	movs	r2, #0
 80049c0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80049c2:	187b      	adds	r3, r7, r1
 80049c4:	2200      	movs	r2, #0
 80049c6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80049c8:	187b      	adds	r3, r7, r1
 80049ca:	2100      	movs	r1, #0
 80049cc:	0018      	movs	r0, r3
 80049ce:	f004 fb0f 	bl	8008ff0 <HAL_RCC_ClockConfig>
 80049d2:	1e03      	subs	r3, r0, #0
 80049d4:	d001      	beq.n	80049da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80049d6:	f000 fbc9 	bl	800516c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80049da:	003b      	movs	r3, r7
 80049dc:	2223      	movs	r2, #35	; 0x23
 80049de:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80049e0:	003b      	movs	r3, r7
 80049e2:	2200      	movs	r2, #0
 80049e4:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80049e6:	003b      	movs	r3, r7
 80049e8:	2200      	movs	r2, #0
 80049ea:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80049ec:	003b      	movs	r3, r7
 80049ee:	2200      	movs	r2, #0
 80049f0:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049f2:	003b      	movs	r3, r7
 80049f4:	0018      	movs	r0, r3
 80049f6:	f004 fc91 	bl	800931c <HAL_RCCEx_PeriphCLKConfig>
 80049fa:	1e03      	subs	r3, r0, #0
 80049fc:	d001      	beq.n	8004a02 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80049fe:	f000 fbb5 	bl	800516c <Error_Handler>
  }
}
 8004a02:	46c0      	nop			; (mov r8, r8)
 8004a04:	46bd      	mov	sp, r7
 8004a06:	b019      	add	sp, #100	; 0x64
 8004a08:	bd90      	pop	{r4, r7, pc}
	...

08004a0c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004a12:	1d3b      	adds	r3, r7, #4
 8004a14:	0018      	movs	r0, r3
 8004a16:	230c      	movs	r3, #12
 8004a18:	001a      	movs	r2, r3
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	f007 fda3 	bl	800c566 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8004a20:	4b33      	ldr	r3, [pc, #204]	; (8004af0 <MX_ADC_Init+0xe4>)
 8004a22:	4a34      	ldr	r2, [pc, #208]	; (8004af4 <MX_ADC_Init+0xe8>)
 8004a24:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004a26:	4b32      	ldr	r3, [pc, #200]	; (8004af0 <MX_ADC_Init+0xe4>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004a2c:	4b30      	ldr	r3, [pc, #192]	; (8004af0 <MX_ADC_Init+0xe4>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004a32:	4b2f      	ldr	r3, [pc, #188]	; (8004af0 <MX_ADC_Init+0xe4>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004a38:	4b2d      	ldr	r3, [pc, #180]	; (8004af0 <MX_ADC_Init+0xe4>)
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004a3e:	4b2c      	ldr	r3, [pc, #176]	; (8004af0 <MX_ADC_Init+0xe4>)
 8004a40:	2204      	movs	r2, #4
 8004a42:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004a44:	4b2a      	ldr	r3, [pc, #168]	; (8004af0 <MX_ADC_Init+0xe4>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004a4a:	4b29      	ldr	r3, [pc, #164]	; (8004af0 <MX_ADC_Init+0xe4>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8004a50:	4b27      	ldr	r3, [pc, #156]	; (8004af0 <MX_ADC_Init+0xe4>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8004a56:	4b26      	ldr	r3, [pc, #152]	; (8004af0 <MX_ADC_Init+0xe4>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004a5c:	4b24      	ldr	r3, [pc, #144]	; (8004af0 <MX_ADC_Init+0xe4>)
 8004a5e:	22c2      	movs	r2, #194	; 0xc2
 8004a60:	32ff      	adds	r2, #255	; 0xff
 8004a62:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004a64:	4b22      	ldr	r3, [pc, #136]	; (8004af0 <MX_ADC_Init+0xe4>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8004a6a:	4b21      	ldr	r3, [pc, #132]	; (8004af0 <MX_ADC_Init+0xe4>)
 8004a6c:	2224      	movs	r2, #36	; 0x24
 8004a6e:	2100      	movs	r1, #0
 8004a70:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004a72:	4b1f      	ldr	r3, [pc, #124]	; (8004af0 <MX_ADC_Init+0xe4>)
 8004a74:	2201      	movs	r2, #1
 8004a76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004a78:	4b1d      	ldr	r3, [pc, #116]	; (8004af0 <MX_ADC_Init+0xe4>)
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	f002 f9f4 	bl	8006e68 <HAL_ADC_Init>
 8004a80:	1e03      	subs	r3, r0, #0
 8004a82:	d001      	beq.n	8004a88 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8004a84:	f000 fb72 	bl	800516c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004a88:	1d3b      	adds	r3, r7, #4
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004a8e:	1d3b      	adds	r3, r7, #4
 8004a90:	2280      	movs	r2, #128	; 0x80
 8004a92:	0152      	lsls	r2, r2, #5
 8004a94:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004a96:	1d3b      	adds	r3, r7, #4
 8004a98:	2280      	movs	r2, #128	; 0x80
 8004a9a:	0552      	lsls	r2, r2, #21
 8004a9c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004a9e:	1d3a      	adds	r2, r7, #4
 8004aa0:	4b13      	ldr	r3, [pc, #76]	; (8004af0 <MX_ADC_Init+0xe4>)
 8004aa2:	0011      	movs	r1, r2
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	f002 fbb9 	bl	800721c <HAL_ADC_ConfigChannel>
 8004aaa:	1e03      	subs	r3, r0, #0
 8004aac:	d001      	beq.n	8004ab2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8004aae:	f000 fb5d 	bl	800516c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8004ab2:	1d3b      	adds	r3, r7, #4
 8004ab4:	2205      	movs	r2, #5
 8004ab6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004ab8:	1d3a      	adds	r2, r7, #4
 8004aba:	4b0d      	ldr	r3, [pc, #52]	; (8004af0 <MX_ADC_Init+0xe4>)
 8004abc:	0011      	movs	r1, r2
 8004abe:	0018      	movs	r0, r3
 8004ac0:	f002 fbac 	bl	800721c <HAL_ADC_ConfigChannel>
 8004ac4:	1e03      	subs	r3, r0, #0
 8004ac6:	d001      	beq.n	8004acc <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8004ac8:	f000 fb50 	bl	800516c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004acc:	1d3b      	adds	r3, r7, #4
 8004ace:	2206      	movs	r2, #6
 8004ad0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004ad2:	1d3a      	adds	r2, r7, #4
 8004ad4:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <MX_ADC_Init+0xe4>)
 8004ad6:	0011      	movs	r1, r2
 8004ad8:	0018      	movs	r0, r3
 8004ada:	f002 fb9f 	bl	800721c <HAL_ADC_ConfigChannel>
 8004ade:	1e03      	subs	r3, r0, #0
 8004ae0:	d001      	beq.n	8004ae6 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8004ae2:	f000 fb43 	bl	800516c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8004ae6:	46c0      	nop			; (mov r8, r8)
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	b004      	add	sp, #16
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	46c0      	nop			; (mov r8, r8)
 8004af0:	20000ae0 	.word	0x20000ae0
 8004af4:	40012400 	.word	0x40012400

08004af8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004afc:	4b1b      	ldr	r3, [pc, #108]	; (8004b6c <MX_I2C1_Init+0x74>)
 8004afe:	4a1c      	ldr	r2, [pc, #112]	; (8004b70 <MX_I2C1_Init+0x78>)
 8004b00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8004b02:	4b1a      	ldr	r3, [pc, #104]	; (8004b6c <MX_I2C1_Init+0x74>)
 8004b04:	4a1b      	ldr	r2, [pc, #108]	; (8004b74 <MX_I2C1_Init+0x7c>)
 8004b06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004b08:	4b18      	ldr	r3, [pc, #96]	; (8004b6c <MX_I2C1_Init+0x74>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b0e:	4b17      	ldr	r3, [pc, #92]	; (8004b6c <MX_I2C1_Init+0x74>)
 8004b10:	2201      	movs	r2, #1
 8004b12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b14:	4b15      	ldr	r3, [pc, #84]	; (8004b6c <MX_I2C1_Init+0x74>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004b1a:	4b14      	ldr	r3, [pc, #80]	; (8004b6c <MX_I2C1_Init+0x74>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004b20:	4b12      	ldr	r3, [pc, #72]	; (8004b6c <MX_I2C1_Init+0x74>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b26:	4b11      	ldr	r3, [pc, #68]	; (8004b6c <MX_I2C1_Init+0x74>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b2c:	4b0f      	ldr	r3, [pc, #60]	; (8004b6c <MX_I2C1_Init+0x74>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004b32:	4b0e      	ldr	r3, [pc, #56]	; (8004b6c <MX_I2C1_Init+0x74>)
 8004b34:	0018      	movs	r0, r3
 8004b36:	f003 f9e1 	bl	8007efc <HAL_I2C_Init>
 8004b3a:	1e03      	subs	r3, r0, #0
 8004b3c:	d001      	beq.n	8004b42 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004b3e:	f000 fb15 	bl	800516c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004b42:	4b0a      	ldr	r3, [pc, #40]	; (8004b6c <MX_I2C1_Init+0x74>)
 8004b44:	2100      	movs	r1, #0
 8004b46:	0018      	movs	r0, r3
 8004b48:	f003 fe34 	bl	80087b4 <HAL_I2CEx_ConfigAnalogFilter>
 8004b4c:	1e03      	subs	r3, r0, #0
 8004b4e:	d001      	beq.n	8004b54 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004b50:	f000 fb0c 	bl	800516c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004b54:	4b05      	ldr	r3, [pc, #20]	; (8004b6c <MX_I2C1_Init+0x74>)
 8004b56:	2100      	movs	r1, #0
 8004b58:	0018      	movs	r0, r3
 8004b5a:	f003 fe77 	bl	800884c <HAL_I2CEx_ConfigDigitalFilter>
 8004b5e:	1e03      	subs	r3, r0, #0
 8004b60:	d001      	beq.n	8004b66 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004b62:	f000 fb03 	bl	800516c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004b66:	46c0      	nop			; (mov r8, r8)
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	20000b64 	.word	0x20000b64
 8004b70:	40005400 	.word	0x40005400
 8004b74:	2000090e 	.word	0x2000090e

08004b78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b096      	sub	sp, #88	; 0x58
 8004b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b7e:	2348      	movs	r3, #72	; 0x48
 8004b80:	18fb      	adds	r3, r7, r3
 8004b82:	0018      	movs	r0, r3
 8004b84:	2310      	movs	r3, #16
 8004b86:	001a      	movs	r2, r3
 8004b88:	2100      	movs	r1, #0
 8004b8a:	f007 fcec 	bl	800c566 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b8e:	2340      	movs	r3, #64	; 0x40
 8004b90:	18fb      	adds	r3, r7, r3
 8004b92:	0018      	movs	r0, r3
 8004b94:	2308      	movs	r3, #8
 8004b96:	001a      	movs	r2, r3
 8004b98:	2100      	movs	r1, #0
 8004b9a:	f007 fce4 	bl	800c566 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b9e:	2324      	movs	r3, #36	; 0x24
 8004ba0:	18fb      	adds	r3, r7, r3
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	231c      	movs	r3, #28
 8004ba6:	001a      	movs	r2, r3
 8004ba8:	2100      	movs	r1, #0
 8004baa:	f007 fcdc 	bl	800c566 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004bae:	1d3b      	adds	r3, r7, #4
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	2320      	movs	r3, #32
 8004bb4:	001a      	movs	r2, r3
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	f007 fcd5 	bl	800c566 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004bbc:	4b4b      	ldr	r3, [pc, #300]	; (8004cec <MX_TIM1_Init+0x174>)
 8004bbe:	4a4c      	ldr	r2, [pc, #304]	; (8004cf0 <MX_TIM1_Init+0x178>)
 8004bc0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000-1;
 8004bc2:	4b4a      	ldr	r3, [pc, #296]	; (8004cec <MX_TIM1_Init+0x174>)
 8004bc4:	4a4b      	ldr	r2, [pc, #300]	; (8004cf4 <MX_TIM1_Init+0x17c>)
 8004bc6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bc8:	4b48      	ldr	r3, [pc, #288]	; (8004cec <MX_TIM1_Init+0x174>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004bce:	4b47      	ldr	r3, [pc, #284]	; (8004cec <MX_TIM1_Init+0x174>)
 8004bd0:	4a49      	ldr	r2, [pc, #292]	; (8004cf8 <MX_TIM1_Init+0x180>)
 8004bd2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bd4:	4b45      	ldr	r3, [pc, #276]	; (8004cec <MX_TIM1_Init+0x174>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004bda:	4b44      	ldr	r3, [pc, #272]	; (8004cec <MX_TIM1_Init+0x174>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004be0:	4b42      	ldr	r3, [pc, #264]	; (8004cec <MX_TIM1_Init+0x174>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004be6:	4b41      	ldr	r3, [pc, #260]	; (8004cec <MX_TIM1_Init+0x174>)
 8004be8:	0018      	movs	r0, r3
 8004bea:	f004 fc95 	bl	8009518 <HAL_TIM_Base_Init>
 8004bee:	1e03      	subs	r3, r0, #0
 8004bf0:	d001      	beq.n	8004bf6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8004bf2:	f000 fabb 	bl	800516c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004bf6:	2148      	movs	r1, #72	; 0x48
 8004bf8:	187b      	adds	r3, r7, r1
 8004bfa:	2280      	movs	r2, #128	; 0x80
 8004bfc:	0152      	lsls	r2, r2, #5
 8004bfe:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004c00:	187a      	adds	r2, r7, r1
 8004c02:	4b3a      	ldr	r3, [pc, #232]	; (8004cec <MX_TIM1_Init+0x174>)
 8004c04:	0011      	movs	r1, r2
 8004c06:	0018      	movs	r0, r3
 8004c08:	f005 fa4c 	bl	800a0a4 <HAL_TIM_ConfigClockSource>
 8004c0c:	1e03      	subs	r3, r0, #0
 8004c0e:	d001      	beq.n	8004c14 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8004c10:	f000 faac 	bl	800516c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004c14:	4b35      	ldr	r3, [pc, #212]	; (8004cec <MX_TIM1_Init+0x174>)
 8004c16:	0018      	movs	r0, r3
 8004c18:	f004 fd20 	bl	800965c <HAL_TIM_PWM_Init>
 8004c1c:	1e03      	subs	r3, r0, #0
 8004c1e:	d001      	beq.n	8004c24 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8004c20:	f000 faa4 	bl	800516c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8004c24:	4b31      	ldr	r3, [pc, #196]	; (8004cec <MX_TIM1_Init+0x174>)
 8004c26:	2108      	movs	r1, #8
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f004 fed5 	bl	80099d8 <HAL_TIM_OnePulse_Init>
 8004c2e:	1e03      	subs	r3, r0, #0
 8004c30:	d001      	beq.n	8004c36 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8004c32:	f000 fa9b 	bl	800516c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c36:	2140      	movs	r1, #64	; 0x40
 8004c38:	187b      	adds	r3, r7, r1
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c3e:	187b      	adds	r3, r7, r1
 8004c40:	2200      	movs	r2, #0
 8004c42:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004c44:	187a      	adds	r2, r7, r1
 8004c46:	4b29      	ldr	r3, [pc, #164]	; (8004cec <MX_TIM1_Init+0x174>)
 8004c48:	0011      	movs	r1, r2
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	f005 ff74 	bl	800ab38 <HAL_TIMEx_MasterConfigSynchronization>
 8004c50:	1e03      	subs	r3, r0, #0
 8004c52:	d001      	beq.n	8004c58 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 8004c54:	f000 fa8a 	bl	800516c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8004c58:	2124      	movs	r1, #36	; 0x24
 8004c5a:	187b      	adds	r3, r7, r1
 8004c5c:	2270      	movs	r2, #112	; 0x70
 8004c5e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 32000;
 8004c60:	187b      	adds	r3, r7, r1
 8004c62:	22fa      	movs	r2, #250	; 0xfa
 8004c64:	01d2      	lsls	r2, r2, #7
 8004c66:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c68:	187b      	adds	r3, r7, r1
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004c6e:	187b      	adds	r3, r7, r1
 8004c70:	2200      	movs	r2, #0
 8004c72:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004c74:	187b      	adds	r3, r7, r1
 8004c76:	2204      	movs	r2, #4
 8004c78:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004c7a:	187b      	adds	r3, r7, r1
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004c80:	187b      	adds	r3, r7, r1
 8004c82:	2200      	movs	r2, #0
 8004c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c86:	1879      	adds	r1, r7, r1
 8004c88:	4b18      	ldr	r3, [pc, #96]	; (8004cec <MX_TIM1_Init+0x174>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f005 f943 	bl	8009f18 <HAL_TIM_PWM_ConfigChannel>
 8004c92:	1e03      	subs	r3, r0, #0
 8004c94:	d001      	beq.n	8004c9a <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 8004c96:	f000 fa69 	bl	800516c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004c9a:	1d3b      	adds	r3, r7, #4
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004ca0:	1d3b      	adds	r3, r7, #4
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004ca6:	1d3b      	adds	r3, r7, #4
 8004ca8:	2200      	movs	r2, #0
 8004caa:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004cac:	1d3b      	adds	r3, r7, #4
 8004cae:	2200      	movs	r2, #0
 8004cb0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004cb2:	1d3b      	adds	r3, r7, #4
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004cb8:	1d3b      	adds	r3, r7, #4
 8004cba:	2280      	movs	r2, #128	; 0x80
 8004cbc:	0192      	lsls	r2, r2, #6
 8004cbe:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004cc0:	1d3b      	adds	r3, r7, #4
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004cc6:	1d3a      	adds	r2, r7, #4
 8004cc8:	4b08      	ldr	r3, [pc, #32]	; (8004cec <MX_TIM1_Init+0x174>)
 8004cca:	0011      	movs	r1, r2
 8004ccc:	0018      	movs	r0, r3
 8004cce:	f005 ff91 	bl	800abf4 <HAL_TIMEx_ConfigBreakDeadTime>
 8004cd2:	1e03      	subs	r3, r0, #0
 8004cd4:	d001      	beq.n	8004cda <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8004cd6:	f000 fa49 	bl	800516c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004cda:	4b04      	ldr	r3, [pc, #16]	; (8004cec <MX_TIM1_Init+0x174>)
 8004cdc:	0018      	movs	r0, r3
 8004cde:	f001 fdaf 	bl	8006840 <HAL_TIM_MspPostInit>

}
 8004ce2:	46c0      	nop			; (mov r8, r8)
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	b016      	add	sp, #88	; 0x58
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	46c0      	nop			; (mov r8, r8)
 8004cec:	20000bb8 	.word	0x20000bb8
 8004cf0:	40012c00 	.word	0x40012c00
 8004cf4:	00001f3f 	.word	0x00001f3f
 8004cf8:	0000ffff 	.word	0x0000ffff

08004cfc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08a      	sub	sp, #40	; 0x28
 8004d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d02:	2318      	movs	r3, #24
 8004d04:	18fb      	adds	r3, r7, r3
 8004d06:	0018      	movs	r0, r3
 8004d08:	2310      	movs	r3, #16
 8004d0a:	001a      	movs	r2, r3
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	f007 fc2a 	bl	800c566 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d12:	2310      	movs	r3, #16
 8004d14:	18fb      	adds	r3, r7, r3
 8004d16:	0018      	movs	r0, r3
 8004d18:	2308      	movs	r3, #8
 8004d1a:	001a      	movs	r2, r3
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	f007 fc22 	bl	800c566 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004d22:	003b      	movs	r3, r7
 8004d24:	0018      	movs	r0, r3
 8004d26:	2310      	movs	r3, #16
 8004d28:	001a      	movs	r2, r3
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	f007 fc1b 	bl	800c566 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004d30:	4b2e      	ldr	r3, [pc, #184]	; (8004dec <MX_TIM2_Init+0xf0>)
 8004d32:	2280      	movs	r2, #128	; 0x80
 8004d34:	05d2      	lsls	r2, r2, #23
 8004d36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8004d38:	4b2c      	ldr	r3, [pc, #176]	; (8004dec <MX_TIM2_Init+0xf0>)
 8004d3a:	4a2d      	ldr	r2, [pc, #180]	; (8004df0 <MX_TIM2_Init+0xf4>)
 8004d3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d3e:	4b2b      	ldr	r3, [pc, #172]	; (8004dec <MX_TIM2_Init+0xf0>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004d44:	4b29      	ldr	r3, [pc, #164]	; (8004dec <MX_TIM2_Init+0xf0>)
 8004d46:	2201      	movs	r2, #1
 8004d48:	4252      	negs	r2, r2
 8004d4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d4c:	4b27      	ldr	r3, [pc, #156]	; (8004dec <MX_TIM2_Init+0xf0>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d52:	4b26      	ldr	r3, [pc, #152]	; (8004dec <MX_TIM2_Init+0xf0>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004d58:	4b24      	ldr	r3, [pc, #144]	; (8004dec <MX_TIM2_Init+0xf0>)
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	f004 fbdc 	bl	8009518 <HAL_TIM_Base_Init>
 8004d60:	1e03      	subs	r3, r0, #0
 8004d62:	d001      	beq.n	8004d68 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8004d64:	f000 fa02 	bl	800516c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d68:	2118      	movs	r1, #24
 8004d6a:	187b      	adds	r3, r7, r1
 8004d6c:	2280      	movs	r2, #128	; 0x80
 8004d6e:	0152      	lsls	r2, r2, #5
 8004d70:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004d72:	187a      	adds	r2, r7, r1
 8004d74:	4b1d      	ldr	r3, [pc, #116]	; (8004dec <MX_TIM2_Init+0xf0>)
 8004d76:	0011      	movs	r1, r2
 8004d78:	0018      	movs	r0, r3
 8004d7a:	f005 f993 	bl	800a0a4 <HAL_TIM_ConfigClockSource>
 8004d7e:	1e03      	subs	r3, r0, #0
 8004d80:	d001      	beq.n	8004d86 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8004d82:	f000 f9f3 	bl	800516c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8004d86:	4b19      	ldr	r3, [pc, #100]	; (8004dec <MX_TIM2_Init+0xf0>)
 8004d88:	0018      	movs	r0, r3
 8004d8a:	f004 fcbf 	bl	800970c <HAL_TIM_IC_Init>
 8004d8e:	1e03      	subs	r3, r0, #0
 8004d90:	d001      	beq.n	8004d96 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8004d92:	f000 f9eb 	bl	800516c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d96:	2110      	movs	r1, #16
 8004d98:	187b      	adds	r3, r7, r1
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d9e:	187b      	adds	r3, r7, r1
 8004da0:	2200      	movs	r2, #0
 8004da2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004da4:	187a      	adds	r2, r7, r1
 8004da6:	4b11      	ldr	r3, [pc, #68]	; (8004dec <MX_TIM2_Init+0xf0>)
 8004da8:	0011      	movs	r1, r2
 8004daa:	0018      	movs	r0, r3
 8004dac:	f005 fec4 	bl	800ab38 <HAL_TIMEx_MasterConfigSynchronization>
 8004db0:	1e03      	subs	r3, r0, #0
 8004db2:	d001      	beq.n	8004db8 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8004db4:	f000 f9da 	bl	800516c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004db8:	003b      	movs	r3, r7
 8004dba:	2200      	movs	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004dbe:	003b      	movs	r3, r7
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004dc4:	003b      	movs	r3, r7
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8004dca:	003b      	movs	r3, r7
 8004dcc:	2200      	movs	r2, #0
 8004dce:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8004dd0:	0039      	movs	r1, r7
 8004dd2:	4b06      	ldr	r3, [pc, #24]	; (8004dec <MX_TIM2_Init+0xf0>)
 8004dd4:	220c      	movs	r2, #12
 8004dd6:	0018      	movs	r0, r3
 8004dd8:	f004 fffa 	bl	8009dd0 <HAL_TIM_IC_ConfigChannel>
 8004ddc:	1e03      	subs	r3, r0, #0
 8004dde:	d001      	beq.n	8004de4 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8004de0:	f000 f9c4 	bl	800516c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004de4:	46c0      	nop			; (mov r8, r8)
 8004de6:	46bd      	mov	sp, r7
 8004de8:	b00a      	add	sp, #40	; 0x28
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	20000c00 	.word	0x20000c00
 8004df0:	00001f3f 	.word	0x00001f3f

08004df4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b08a      	sub	sp, #40	; 0x28
 8004df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004dfa:	2318      	movs	r3, #24
 8004dfc:	18fb      	adds	r3, r7, r3
 8004dfe:	0018      	movs	r0, r3
 8004e00:	2310      	movs	r3, #16
 8004e02:	001a      	movs	r2, r3
 8004e04:	2100      	movs	r1, #0
 8004e06:	f007 fbae 	bl	800c566 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e0a:	2310      	movs	r3, #16
 8004e0c:	18fb      	adds	r3, r7, r3
 8004e0e:	0018      	movs	r0, r3
 8004e10:	2308      	movs	r3, #8
 8004e12:	001a      	movs	r2, r3
 8004e14:	2100      	movs	r1, #0
 8004e16:	f007 fba6 	bl	800c566 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004e1a:	003b      	movs	r3, r7
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	2310      	movs	r3, #16
 8004e20:	001a      	movs	r2, r3
 8004e22:	2100      	movs	r1, #0
 8004e24:	f007 fb9f 	bl	800c566 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8004e28:	4b2f      	ldr	r3, [pc, #188]	; (8004ee8 <MX_TIM15_Init+0xf4>)
 8004e2a:	4a30      	ldr	r2, [pc, #192]	; (8004eec <MX_TIM15_Init+0xf8>)
 8004e2c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8000-1;
 8004e2e:	4b2e      	ldr	r3, [pc, #184]	; (8004ee8 <MX_TIM15_Init+0xf4>)
 8004e30:	4a2f      	ldr	r2, [pc, #188]	; (8004ef0 <MX_TIM15_Init+0xfc>)
 8004e32:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e34:	4b2c      	ldr	r3, [pc, #176]	; (8004ee8 <MX_TIM15_Init+0xf4>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8004e3a:	4b2b      	ldr	r3, [pc, #172]	; (8004ee8 <MX_TIM15_Init+0xf4>)
 8004e3c:	4a2d      	ldr	r2, [pc, #180]	; (8004ef4 <MX_TIM15_Init+0x100>)
 8004e3e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e40:	4b29      	ldr	r3, [pc, #164]	; (8004ee8 <MX_TIM15_Init+0xf4>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8004e46:	4b28      	ldr	r3, [pc, #160]	; (8004ee8 <MX_TIM15_Init+0xf4>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e4c:	4b26      	ldr	r3, [pc, #152]	; (8004ee8 <MX_TIM15_Init+0xf4>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004e52:	4b25      	ldr	r3, [pc, #148]	; (8004ee8 <MX_TIM15_Init+0xf4>)
 8004e54:	0018      	movs	r0, r3
 8004e56:	f004 fb5f 	bl	8009518 <HAL_TIM_Base_Init>
 8004e5a:	1e03      	subs	r3, r0, #0
 8004e5c:	d001      	beq.n	8004e62 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8004e5e:	f000 f985 	bl	800516c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e62:	2118      	movs	r1, #24
 8004e64:	187b      	adds	r3, r7, r1
 8004e66:	2280      	movs	r2, #128	; 0x80
 8004e68:	0152      	lsls	r2, r2, #5
 8004e6a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004e6c:	187a      	adds	r2, r7, r1
 8004e6e:	4b1e      	ldr	r3, [pc, #120]	; (8004ee8 <MX_TIM15_Init+0xf4>)
 8004e70:	0011      	movs	r1, r2
 8004e72:	0018      	movs	r0, r3
 8004e74:	f005 f916 	bl	800a0a4 <HAL_TIM_ConfigClockSource>
 8004e78:	1e03      	subs	r3, r0, #0
 8004e7a:	d001      	beq.n	8004e80 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8004e7c:	f000 f976 	bl	800516c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8004e80:	4b19      	ldr	r3, [pc, #100]	; (8004ee8 <MX_TIM15_Init+0xf4>)
 8004e82:	0018      	movs	r0, r3
 8004e84:	f004 fc42 	bl	800970c <HAL_TIM_IC_Init>
 8004e88:	1e03      	subs	r3, r0, #0
 8004e8a:	d001      	beq.n	8004e90 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8004e8c:	f000 f96e 	bl	800516c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e90:	2110      	movs	r1, #16
 8004e92:	187b      	adds	r3, r7, r1
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e98:	187b      	adds	r3, r7, r1
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004e9e:	187a      	adds	r2, r7, r1
 8004ea0:	4b11      	ldr	r3, [pc, #68]	; (8004ee8 <MX_TIM15_Init+0xf4>)
 8004ea2:	0011      	movs	r1, r2
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	f005 fe47 	bl	800ab38 <HAL_TIMEx_MasterConfigSynchronization>
 8004eaa:	1e03      	subs	r3, r0, #0
 8004eac:	d001      	beq.n	8004eb2 <MX_TIM15_Init+0xbe>
  {
    Error_Handler();
 8004eae:	f000 f95d 	bl	800516c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004eb2:	003b      	movs	r3, r7
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004eb8:	003b      	movs	r3, r7
 8004eba:	2201      	movs	r2, #1
 8004ebc:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004ebe:	003b      	movs	r3, r7
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8004ec4:	003b      	movs	r3, r7
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8004eca:	0039      	movs	r1, r7
 8004ecc:	4b06      	ldr	r3, [pc, #24]	; (8004ee8 <MX_TIM15_Init+0xf4>)
 8004ece:	2204      	movs	r2, #4
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f004 ff7d 	bl	8009dd0 <HAL_TIM_IC_ConfigChannel>
 8004ed6:	1e03      	subs	r3, r0, #0
 8004ed8:	d001      	beq.n	8004ede <MX_TIM15_Init+0xea>
  {
    Error_Handler();
 8004eda:	f000 f947 	bl	800516c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8004ede:	46c0      	nop			; (mov r8, r8)
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	b00a      	add	sp, #40	; 0x28
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	46c0      	nop			; (mov r8, r8)
 8004ee8:	20000c48 	.word	0x20000c48
 8004eec:	40014000 	.word	0x40014000
 8004ef0:	00001f3f 	.word	0x00001f3f
 8004ef4:	0000ffff 	.word	0x0000ffff

08004ef8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004efc:	4b14      	ldr	r3, [pc, #80]	; (8004f50 <MX_USART1_UART_Init+0x58>)
 8004efe:	4a15      	ldr	r2, [pc, #84]	; (8004f54 <MX_USART1_UART_Init+0x5c>)
 8004f00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004f02:	4b13      	ldr	r3, [pc, #76]	; (8004f50 <MX_USART1_UART_Init+0x58>)
 8004f04:	22e1      	movs	r2, #225	; 0xe1
 8004f06:	0252      	lsls	r2, r2, #9
 8004f08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004f0a:	4b11      	ldr	r3, [pc, #68]	; (8004f50 <MX_USART1_UART_Init+0x58>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004f10:	4b0f      	ldr	r3, [pc, #60]	; (8004f50 <MX_USART1_UART_Init+0x58>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004f16:	4b0e      	ldr	r3, [pc, #56]	; (8004f50 <MX_USART1_UART_Init+0x58>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004f1c:	4b0c      	ldr	r3, [pc, #48]	; (8004f50 <MX_USART1_UART_Init+0x58>)
 8004f1e:	220c      	movs	r2, #12
 8004f20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f22:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <MX_USART1_UART_Init+0x58>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f28:	4b09      	ldr	r3, [pc, #36]	; (8004f50 <MX_USART1_UART_Init+0x58>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f2e:	4b08      	ldr	r3, [pc, #32]	; (8004f50 <MX_USART1_UART_Init+0x58>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f34:	4b06      	ldr	r3, [pc, #24]	; (8004f50 <MX_USART1_UART_Init+0x58>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004f3a:	4b05      	ldr	r3, [pc, #20]	; (8004f50 <MX_USART1_UART_Init+0x58>)
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	f005 fec7 	bl	800acd0 <HAL_UART_Init>
 8004f42:	1e03      	subs	r3, r0, #0
 8004f44:	d001      	beq.n	8004f4a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004f46:	f000 f911 	bl	800516c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	20000c90 	.word	0x20000c90
 8004f54:	40013800 	.word	0x40013800

08004f58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004f5c:	4b14      	ldr	r3, [pc, #80]	; (8004fb0 <MX_USART2_UART_Init+0x58>)
 8004f5e:	4a15      	ldr	r2, [pc, #84]	; (8004fb4 <MX_USART2_UART_Init+0x5c>)
 8004f60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004f62:	4b13      	ldr	r3, [pc, #76]	; (8004fb0 <MX_USART2_UART_Init+0x58>)
 8004f64:	22e1      	movs	r2, #225	; 0xe1
 8004f66:	0252      	lsls	r2, r2, #9
 8004f68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004f6a:	4b11      	ldr	r3, [pc, #68]	; (8004fb0 <MX_USART2_UART_Init+0x58>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004f70:	4b0f      	ldr	r3, [pc, #60]	; (8004fb0 <MX_USART2_UART_Init+0x58>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004f76:	4b0e      	ldr	r3, [pc, #56]	; (8004fb0 <MX_USART2_UART_Init+0x58>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004f7c:	4b0c      	ldr	r3, [pc, #48]	; (8004fb0 <MX_USART2_UART_Init+0x58>)
 8004f7e:	220c      	movs	r2, #12
 8004f80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f82:	4b0b      	ldr	r3, [pc, #44]	; (8004fb0 <MX_USART2_UART_Init+0x58>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f88:	4b09      	ldr	r3, [pc, #36]	; (8004fb0 <MX_USART2_UART_Init+0x58>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f8e:	4b08      	ldr	r3, [pc, #32]	; (8004fb0 <MX_USART2_UART_Init+0x58>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f94:	4b06      	ldr	r3, [pc, #24]	; (8004fb0 <MX_USART2_UART_Init+0x58>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004f9a:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <MX_USART2_UART_Init+0x58>)
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	f005 fe97 	bl	800acd0 <HAL_UART_Init>
 8004fa2:	1e03      	subs	r3, r0, #0
 8004fa4:	d001      	beq.n	8004faa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004fa6:	f000 f8e1 	bl	800516c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004faa:	46c0      	nop			; (mov r8, r8)
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	20000d18 	.word	0x20000d18
 8004fb4:	40004400 	.word	0x40004400

08004fb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004fbe:	4b0c      	ldr	r3, [pc, #48]	; (8004ff0 <MX_DMA_Init+0x38>)
 8004fc0:	695a      	ldr	r2, [r3, #20]
 8004fc2:	4b0b      	ldr	r3, [pc, #44]	; (8004ff0 <MX_DMA_Init+0x38>)
 8004fc4:	2101      	movs	r1, #1
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	615a      	str	r2, [r3, #20]
 8004fca:	4b09      	ldr	r3, [pc, #36]	; (8004ff0 <MX_DMA_Init+0x38>)
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	607b      	str	r3, [r7, #4]
 8004fd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	2100      	movs	r1, #0
 8004fda:	2009      	movs	r0, #9
 8004fdc:	f002 fbbc 	bl	8007758 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004fe0:	2009      	movs	r0, #9
 8004fe2:	f002 fbce 	bl	8007782 <HAL_NVIC_EnableIRQ>

}
 8004fe6:	46c0      	nop			; (mov r8, r8)
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	b002      	add	sp, #8
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	46c0      	nop			; (mov r8, r8)
 8004ff0:	40021000 	.word	0x40021000

08004ff4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ff4:	b590      	push	{r4, r7, lr}
 8004ff6:	b089      	sub	sp, #36	; 0x24
 8004ff8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ffa:	240c      	movs	r4, #12
 8004ffc:	193b      	adds	r3, r7, r4
 8004ffe:	0018      	movs	r0, r3
 8005000:	2314      	movs	r3, #20
 8005002:	001a      	movs	r2, r3
 8005004:	2100      	movs	r1, #0
 8005006:	f007 faae 	bl	800c566 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800500a:	4b31      	ldr	r3, [pc, #196]	; (80050d0 <MX_GPIO_Init+0xdc>)
 800500c:	695a      	ldr	r2, [r3, #20]
 800500e:	4b30      	ldr	r3, [pc, #192]	; (80050d0 <MX_GPIO_Init+0xdc>)
 8005010:	2180      	movs	r1, #128	; 0x80
 8005012:	03c9      	lsls	r1, r1, #15
 8005014:	430a      	orrs	r2, r1
 8005016:	615a      	str	r2, [r3, #20]
 8005018:	4b2d      	ldr	r3, [pc, #180]	; (80050d0 <MX_GPIO_Init+0xdc>)
 800501a:	695a      	ldr	r2, [r3, #20]
 800501c:	2380      	movs	r3, #128	; 0x80
 800501e:	03db      	lsls	r3, r3, #15
 8005020:	4013      	ands	r3, r2
 8005022:	60bb      	str	r3, [r7, #8]
 8005024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005026:	4b2a      	ldr	r3, [pc, #168]	; (80050d0 <MX_GPIO_Init+0xdc>)
 8005028:	695a      	ldr	r2, [r3, #20]
 800502a:	4b29      	ldr	r3, [pc, #164]	; (80050d0 <MX_GPIO_Init+0xdc>)
 800502c:	2180      	movs	r1, #128	; 0x80
 800502e:	0289      	lsls	r1, r1, #10
 8005030:	430a      	orrs	r2, r1
 8005032:	615a      	str	r2, [r3, #20]
 8005034:	4b26      	ldr	r3, [pc, #152]	; (80050d0 <MX_GPIO_Init+0xdc>)
 8005036:	695a      	ldr	r2, [r3, #20]
 8005038:	2380      	movs	r3, #128	; 0x80
 800503a:	029b      	lsls	r3, r3, #10
 800503c:	4013      	ands	r3, r2
 800503e:	607b      	str	r3, [r7, #4]
 8005040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005042:	4b23      	ldr	r3, [pc, #140]	; (80050d0 <MX_GPIO_Init+0xdc>)
 8005044:	695a      	ldr	r2, [r3, #20]
 8005046:	4b22      	ldr	r3, [pc, #136]	; (80050d0 <MX_GPIO_Init+0xdc>)
 8005048:	2180      	movs	r1, #128	; 0x80
 800504a:	02c9      	lsls	r1, r1, #11
 800504c:	430a      	orrs	r2, r1
 800504e:	615a      	str	r2, [r3, #20]
 8005050:	4b1f      	ldr	r3, [pc, #124]	; (80050d0 <MX_GPIO_Init+0xdc>)
 8005052:	695a      	ldr	r2, [r3, #20]
 8005054:	2380      	movs	r3, #128	; 0x80
 8005056:	02db      	lsls	r3, r3, #11
 8005058:	4013      	ands	r3, r2
 800505a:	603b      	str	r3, [r7, #0]
 800505c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ValveDir_GPIO_Port, ValveDir_Pin, GPIO_PIN_RESET);
 800505e:	2390      	movs	r3, #144	; 0x90
 8005060:	05db      	lsls	r3, r3, #23
 8005062:	2200      	movs	r2, #0
 8005064:	2180      	movs	r1, #128	; 0x80
 8005066:	0018      	movs	r0, r3
 8005068:	f002 ff2a 	bl	8007ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GSM_On_Pin|GSM_Power_Pin, GPIO_PIN_RESET);
 800506c:	23c0      	movs	r3, #192	; 0xc0
 800506e:	01db      	lsls	r3, r3, #7
 8005070:	4818      	ldr	r0, [pc, #96]	; (80050d4 <MX_GPIO_Init+0xe0>)
 8005072:	2200      	movs	r2, #0
 8005074:	0019      	movs	r1, r3
 8005076:	f002 ff23 	bl	8007ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ValveDir_Pin */
  GPIO_InitStruct.Pin = ValveDir_Pin;
 800507a:	193b      	adds	r3, r7, r4
 800507c:	2280      	movs	r2, #128	; 0x80
 800507e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005080:	193b      	adds	r3, r7, r4
 8005082:	2201      	movs	r2, #1
 8005084:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005086:	193b      	adds	r3, r7, r4
 8005088:	2200      	movs	r2, #0
 800508a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800508c:	193b      	adds	r3, r7, r4
 800508e:	2200      	movs	r2, #0
 8005090:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ValveDir_GPIO_Port, &GPIO_InitStruct);
 8005092:	193a      	adds	r2, r7, r4
 8005094:	2390      	movs	r3, #144	; 0x90
 8005096:	05db      	lsls	r3, r3, #23
 8005098:	0011      	movs	r1, r2
 800509a:	0018      	movs	r0, r3
 800509c:	f002 fd98 	bl	8007bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GSM_On_Pin GSM_Power_Pin */
  GPIO_InitStruct.Pin = GSM_On_Pin|GSM_Power_Pin;
 80050a0:	0021      	movs	r1, r4
 80050a2:	187b      	adds	r3, r7, r1
 80050a4:	22c0      	movs	r2, #192	; 0xc0
 80050a6:	01d2      	lsls	r2, r2, #7
 80050a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050aa:	187b      	adds	r3, r7, r1
 80050ac:	2201      	movs	r2, #1
 80050ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b0:	187b      	adds	r3, r7, r1
 80050b2:	2200      	movs	r2, #0
 80050b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050b6:	187b      	adds	r3, r7, r1
 80050b8:	2200      	movs	r2, #0
 80050ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050bc:	187b      	adds	r3, r7, r1
 80050be:	4a05      	ldr	r2, [pc, #20]	; (80050d4 <MX_GPIO_Init+0xe0>)
 80050c0:	0019      	movs	r1, r3
 80050c2:	0010      	movs	r0, r2
 80050c4:	f002 fd84 	bl	8007bd0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80050c8:	46c0      	nop			; (mov r8, r8)
 80050ca:	46bd      	mov	sp, r7
 80050cc:	b009      	add	sp, #36	; 0x24
 80050ce:	bd90      	pop	{r4, r7, pc}
 80050d0:	40021000 	.word	0x40021000
 80050d4:	48000400 	.word	0x48000400

080050d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (timer2 <30)timer2++;
 80050e0:	4b1c      	ldr	r3, [pc, #112]	; (8005154 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b1d      	cmp	r3, #29
 80050e6:	dc05      	bgt.n	80050f4 <HAL_TIM_PeriodElapsedCallback+0x1c>
 80050e8:	4b1a      	ldr	r3, [pc, #104]	; (8005154 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	1c5a      	adds	r2, r3, #1
 80050ee:	4b19      	ldr	r3, [pc, #100]	; (8005154 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	e002      	b.n	80050fa <HAL_TIM_PeriodElapsedCallback+0x22>
		else{
			timer2 = 0;
 80050f4:	4b17      	ldr	r3, [pc, #92]	; (8005154 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	601a      	str	r2, [r3, #0]
			//recData();
			//if(gsmTimeout <= 5) HAL_WWDG_Refresh(&hwwdg);
		}
	if (timer1 <1000)timer1++;
 80050fa:	4b17      	ldr	r3, [pc, #92]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	23fa      	movs	r3, #250	; 0xfa
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	429a      	cmp	r2, r3
 8005104:	da05      	bge.n	8005112 <HAL_TIM_PeriodElapsedCallback+0x3a>
 8005106:	4b14      	ldr	r3, [pc, #80]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	1c5a      	adds	r2, r3, #1
 800510c:	4b12      	ldr	r3, [pc, #72]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	e005      	b.n	800511e <HAL_TIM_PeriodElapsedCallback+0x46>
	else {
		timer1 = 0;
 8005112:	4b11      	ldr	r3, [pc, #68]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]
		//of = 1;
		//loop();
		timer1s = 1;
 8005118:	4b10      	ldr	r3, [pc, #64]	; (800515c <HAL_TIM_PeriodElapsedCallback+0x84>)
 800511a:	2201      	movs	r2, #1
 800511c:	701a      	strb	r2, [r3, #0]
		//SendChar(0x30);
	}
	timer3++;
 800511e:	4b10      	ldr	r3, [pc, #64]	; (8005160 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	4b0e      	ldr	r3, [pc, #56]	; (8005160 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005126:	601a      	str	r2, [r3, #0]
	if (timer3 >= 10){
 8005128:	4b0d      	ldr	r3, [pc, #52]	; (8005160 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b09      	cmp	r3, #9
 800512e:	dd05      	ble.n	800513c <HAL_TIM_PeriodElapsedCallback+0x64>
		timer3 = 0;
 8005130:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005132:	2200      	movs	r2, #0
 8005134:	601a      	str	r2, [r3, #0]
		timer10ms = 1;
 8005136:	4b0b      	ldr	r3, [pc, #44]	; (8005164 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005138:	2201      	movs	r2, #1
 800513a:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a09      	ldr	r2, [pc, #36]	; (8005168 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d101      	bne.n	800514a <HAL_TIM_PeriodElapsedCallback+0x72>
    HAL_IncTick();
 8005146:	f001 fe4f 	bl	8006de8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800514a:	46c0      	nop			; (mov r8, r8)
 800514c:	46bd      	mov	sp, r7
 800514e:	b002      	add	sp, #8
 8005150:	bd80      	pop	{r7, pc}
 8005152:	46c0      	nop			; (mov r8, r8)
 8005154:	20000dbc 	.word	0x20000dbc
 8005158:	20000db8 	.word	0x20000db8
 800515c:	20000db4 	.word	0x20000db4
 8005160:	20000dc0 	.word	0x20000dc0
 8005164:	20000db5 	.word	0x20000db5
 8005168:	40000400 	.word	0x40000400

0800516c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005170:	b672      	cpsid	i
}
 8005172:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005174:	e7fe      	b.n	8005174 <Error_Handler+0x8>
	...

08005178 <Motor_Service>:
flow flowData;
int eventCounter = 1;
float gpmAverage;
float gpmAverage1;

void Motor_Service(){
 8005178:	b5b0      	push	{r4, r5, r7, lr}
 800517a:	b0aa      	sub	sp, #168	; 0xa8
 800517c:	af02      	add	r7, sp, #8

	switch(mode){
 800517e:	4bd9      	ldr	r3, [pc, #868]	; (80054e4 <Motor_Service+0x36c>)
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	2b0c      	cmp	r3, #12
 8005184:	d901      	bls.n	800518a <Motor_Service+0x12>
 8005186:	f000 fcf4 	bl	8005b72 <Motor_Service+0x9fa>
 800518a:	009a      	lsls	r2, r3, #2
 800518c:	4bd6      	ldr	r3, [pc, #856]	; (80054e8 <Motor_Service+0x370>)
 800518e:	18d3      	adds	r3, r2, r3
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	469f      	mov	pc, r3
	case calEndStop:
		//if(valve.calibrate == 0){
		//if (valve.timeout == 0){
		if((TIM1->CR1 & TIM_CR1_CEN) == 0){
 8005194:	4bd5      	ldr	r3, [pc, #852]	; (80054ec <Motor_Service+0x374>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2201      	movs	r2, #1
 800519a:	4013      	ands	r3, r2
 800519c:	d001      	beq.n	80051a2 <Motor_Service+0x2a>
 800519e:	f000 fcb5 	bl	8005b0c <Motor_Service+0x994>
			//Debug_Send("Start timer 14\r\n");
			//TIM14->CR1 |= TIM_CR1_CEN;
			//}
			//open();
			mode = calClose;
 80051a2:	4bd0      	ldr	r3, [pc, #832]	; (80054e4 <Motor_Service+0x36c>)
 80051a4:	2202      	movs	r2, #2
 80051a6:	701a      	strb	r2, [r3, #0]

			valve.runTimer = 0;

			HAL_GPIO_WritePin(ValveDir_GPIO_Portt, ValveDir_Pin, GPIO_PIN_RESET);
			pulseTim(10000);*/
			Debug_Send("begin cal\r\n");
 80051a8:	4bd1      	ldr	r3, [pc, #836]	; (80054f0 <Motor_Service+0x378>)
 80051aa:	0018      	movs	r0, r3
 80051ac:	f7fe f816 	bl	80031dc <Debug_Send>
			valve.state = Open;
 80051b0:	4bd0      	ldr	r3, [pc, #832]	; (80054f4 <Motor_Service+0x37c>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	731a      	strb	r2, [r3, #12]
			HAL_GPIO_WritePin(ValveDir_GPIO_Port, ValveDir_Pin, GPIO_PIN_RESET);
 80051b6:	2390      	movs	r3, #144	; 0x90
 80051b8:	05db      	lsls	r3, r3, #23
 80051ba:	2200      	movs	r2, #0
 80051bc:	2180      	movs	r1, #128	; 0x80
 80051be:	0018      	movs	r0, r3
 80051c0:	f002 fe7e 	bl	8007ec0 <HAL_GPIO_WritePin>
			pulseTim(15000);
 80051c4:	4bcc      	ldr	r3, [pc, #816]	; (80054f8 <Motor_Service+0x380>)
 80051c6:	0018      	movs	r0, r3
 80051c8:	f7ff fa76 	bl	80046b8 <pulseTim>
			valve.timeout = 3000;
 80051cc:	4bc9      	ldr	r3, [pc, #804]	; (80054f4 <Motor_Service+0x37c>)
 80051ce:	4acb      	ldr	r2, [pc, #812]	; (80054fc <Motor_Service+0x384>)
 80051d0:	609a      	str	r2, [r3, #8]
			valve.runTimer = 0;
 80051d2:	4bc8      	ldr	r3, [pc, #800]	; (80054f4 <Motor_Service+0x37c>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	831a      	strh	r2, [r3, #24]
		}
		//}


		break;
 80051d8:	f000 fc98 	bl	8005b0c <Motor_Service+0x994>
	case calClose:	//brake
		//if (valve.timeout == 0){
		if((TIM1->CR1 & TIM_CR1_CEN) == 0){
 80051dc:	4bc3      	ldr	r3, [pc, #780]	; (80054ec <Motor_Service+0x374>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2201      	movs	r2, #1
 80051e2:	4013      	ands	r3, r2
 80051e4:	d001      	beq.n	80051ea <Motor_Service+0x72>
 80051e6:	f000 fc93 	bl	8005b10 <Motor_Service+0x998>
			//close();
			mode = calOpen;
 80051ea:	4bbe      	ldr	r3, [pc, #760]	; (80054e4 <Motor_Service+0x36c>)
 80051ec:	2203      	movs	r2, #3
 80051ee:	701a      	strb	r2, [r3, #0]
			//mode = calEndStop;
			//mode = Idle;
			valve.timeout = 4000;
 80051f0:	4bc0      	ldr	r3, [pc, #768]	; (80054f4 <Motor_Service+0x37c>)
 80051f2:	22fa      	movs	r2, #250	; 0xfa
 80051f4:	0112      	lsls	r2, r2, #4
 80051f6:	609a      	str	r2, [r3, #8]
			valve.state = Close;
 80051f8:	4bbe      	ldr	r3, [pc, #760]	; (80054f4 <Motor_Service+0x37c>)
 80051fa:	2201      	movs	r2, #1
 80051fc:	731a      	strb	r2, [r3, #12]
			valve.closeTimer = 0;
 80051fe:	4bbd      	ldr	r3, [pc, #756]	; (80054f4 <Motor_Service+0x37c>)
 8005200:	2200      	movs	r2, #0
 8005202:	80da      	strh	r2, [r3, #6]
			Debug_Send("close cal\r\n");
 8005204:	4bbe      	ldr	r3, [pc, #760]	; (8005500 <Motor_Service+0x388>)
 8005206:	0018      	movs	r0, r3
 8005208:	f7fd ffe8 	bl	80031dc <Debug_Send>
			HAL_GPIO_WritePin(ValveDir_GPIO_Port, ValveDir_Pin, GPIO_PIN_SET);
 800520c:	2390      	movs	r3, #144	; 0x90
 800520e:	05db      	lsls	r3, r3, #23
 8005210:	2201      	movs	r2, #1
 8005212:	2180      	movs	r1, #128	; 0x80
 8005214:	0018      	movs	r0, r3
 8005216:	f002 fe53 	bl	8007ec0 <HAL_GPIO_WritePin>
			pulseTim(15000);
 800521a:	4bb7      	ldr	r3, [pc, #732]	; (80054f8 <Motor_Service+0x380>)
 800521c:	0018      	movs	r0, r3
 800521e:	f7ff fa4b 	bl	80046b8 <pulseTim>
			valve.timeout = 3000;
 8005222:	4bb4      	ldr	r3, [pc, #720]	; (80054f4 <Motor_Service+0x37c>)
 8005224:	4ab5      	ldr	r2, [pc, #724]	; (80054fc <Motor_Service+0x384>)
 8005226:	609a      	str	r2, [r3, #8]
			valve.runTimer = 0;
 8005228:	4bb2      	ldr	r3, [pc, #712]	; (80054f4 <Motor_Service+0x37c>)
 800522a:	2200      	movs	r2, #0
 800522c:	831a      	strh	r2, [r3, #24]
		}
		break;
 800522e:	f000 fc6f 	bl	8005b10 <Motor_Service+0x998>
	case calOpen:	//forward
		//if (valve.timeout == 0){
		if((TIM1->CR1 & TIM_CR1_CEN) == 0){
 8005232:	4bae      	ldr	r3, [pc, #696]	; (80054ec <Motor_Service+0x374>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2201      	movs	r2, #1
 8005238:	4013      	ands	r3, r2
 800523a:	d001      	beq.n	8005240 <Motor_Service+0xc8>
 800523c:	f000 fc6a 	bl	8005b14 <Motor_Service+0x99c>
			//open();
			//if (valve.closeTimer < 100) error
			mode = calCheck;
 8005240:	4ba8      	ldr	r3, [pc, #672]	; (80054e4 <Motor_Service+0x36c>)
 8005242:	2204      	movs	r2, #4
 8005244:	701a      	strb	r2, [r3, #0]
			valve.timeout = 4000;
 8005246:	4bab      	ldr	r3, [pc, #684]	; (80054f4 <Motor_Service+0x37c>)
 8005248:	22fa      	movs	r2, #250	; 0xfa
 800524a:	0112      	lsls	r2, r2, #4
 800524c:	609a      	str	r2, [r3, #8]
			valve.state = Open;
 800524e:	4ba9      	ldr	r3, [pc, #676]	; (80054f4 <Motor_Service+0x37c>)
 8005250:	2200      	movs	r2, #0
 8005252:	731a      	strb	r2, [r3, #12]
			valve.openTimer = 0;
 8005254:	4ba7      	ldr	r3, [pc, #668]	; (80054f4 <Motor_Service+0x37c>)
 8005256:	2200      	movs	r2, #0
 8005258:	809a      	strh	r2, [r3, #4]
			Debug_Send("open cal\r\n");
 800525a:	4baa      	ldr	r3, [pc, #680]	; (8005504 <Motor_Service+0x38c>)
 800525c:	0018      	movs	r0, r3
 800525e:	f7fd ffbd 	bl	80031dc <Debug_Send>
			HAL_GPIO_WritePin(ValveDir_GPIO_Port, ValveDir_Pin, GPIO_PIN_RESET);
 8005262:	2390      	movs	r3, #144	; 0x90
 8005264:	05db      	lsls	r3, r3, #23
 8005266:	2200      	movs	r2, #0
 8005268:	2180      	movs	r1, #128	; 0x80
 800526a:	0018      	movs	r0, r3
 800526c:	f002 fe28 	bl	8007ec0 <HAL_GPIO_WritePin>
			pulseTim(15000);
 8005270:	4ba1      	ldr	r3, [pc, #644]	; (80054f8 <Motor_Service+0x380>)
 8005272:	0018      	movs	r0, r3
 8005274:	f7ff fa20 	bl	80046b8 <pulseTim>
			valve.timeout = 3000;
 8005278:	4b9e      	ldr	r3, [pc, #632]	; (80054f4 <Motor_Service+0x37c>)
 800527a:	4aa0      	ldr	r2, [pc, #640]	; (80054fc <Motor_Service+0x384>)
 800527c:	609a      	str	r2, [r3, #8]
			valve.runTimer = 0;
 800527e:	4b9d      	ldr	r3, [pc, #628]	; (80054f4 <Motor_Service+0x37c>)
 8005280:	2200      	movs	r2, #0
 8005282:	831a      	strh	r2, [r3, #24]
		}
		break;
 8005284:	f000 fc46 	bl	8005b14 <Motor_Service+0x99c>
	case calCheck:	//brake
		//uint8_t diff;
		if (valve.timeout == 0){
 8005288:	4b9a      	ldr	r3, [pc, #616]	; (80054f4 <Motor_Service+0x37c>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <Motor_Service+0x11c>
 8005290:	f000 fc42 	bl	8005b18 <Motor_Service+0x9a0>
			float tempS;
			Debug_Send("check cal\r\n");
 8005294:	4b9c      	ldr	r3, [pc, #624]	; (8005508 <Motor_Service+0x390>)
 8005296:	0018      	movs	r0, r3
 8005298:	f7fd ffa0 	bl	80031dc <Debug_Send>
			if (valve.openTimer > valve.closeTimer){
 800529c:	4b95      	ldr	r3, [pc, #596]	; (80054f4 <Motor_Service+0x37c>)
 800529e:	889a      	ldrh	r2, [r3, #4]
 80052a0:	4b94      	ldr	r3, [pc, #592]	; (80054f4 <Motor_Service+0x37c>)
 80052a2:	88db      	ldrh	r3, [r3, #6]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d943      	bls.n	8005330 <Motor_Service+0x1b8>
				Debug_Send("open >\r\n");
 80052a8:	4b98      	ldr	r3, [pc, #608]	; (800550c <Motor_Service+0x394>)
 80052aa:	0018      	movs	r0, r3
 80052ac:	f7fd ff96 	bl	80031dc <Debug_Send>
				diff = valve.openTimer - valve.closeTimer;
 80052b0:	4b90      	ldr	r3, [pc, #576]	; (80054f4 <Motor_Service+0x37c>)
 80052b2:	889b      	ldrh	r3, [r3, #4]
 80052b4:	001a      	movs	r2, r3
 80052b6:	4b8f      	ldr	r3, [pc, #572]	; (80054f4 <Motor_Service+0x37c>)
 80052b8:	88db      	ldrh	r3, [r3, #6]
 80052ba:	1ad2      	subs	r2, r2, r3
 80052bc:	4b94      	ldr	r3, [pc, #592]	; (8005510 <Motor_Service+0x398>)
 80052be:	601a      	str	r2, [r3, #0]
				if (diff < 100){
 80052c0:	4b93      	ldr	r3, [pc, #588]	; (8005510 <Motor_Service+0x398>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b63      	cmp	r3, #99	; 0x63
 80052c6:	dc2f      	bgt.n	8005328 <Motor_Service+0x1b0>
					valve.calibrate = 1;
 80052c8:	4b8a      	ldr	r3, [pc, #552]	; (80054f4 <Motor_Service+0x37c>)
 80052ca:	2201      	movs	r2, #1
 80052cc:	701a      	strb	r2, [r3, #0]
					tempS = valve.closeTimer % 40;
 80052ce:	4b89      	ldr	r3, [pc, #548]	; (80054f4 <Motor_Service+0x37c>)
 80052d0:	88db      	ldrh	r3, [r3, #6]
 80052d2:	2128      	movs	r1, #40	; 0x28
 80052d4:	0018      	movs	r0, r3
 80052d6:	f7fa ffc3 	bl	8000260 <__aeabi_uidivmod>
 80052da:	000b      	movs	r3, r1
 80052dc:	b29b      	uxth	r3, r3
 80052de:	0018      	movs	r0, r3
 80052e0:	f7fb fe72 	bl	8000fc8 <__aeabi_i2f>
 80052e4:	1c03      	adds	r3, r0, #0
 80052e6:	249c      	movs	r4, #156	; 0x9c
 80052e8:	193a      	adds	r2, r7, r4
 80052ea:	6013      	str	r3, [r2, #0]
					valve.closeTimer = valve.closeTimer - tempS;
 80052ec:	4b81      	ldr	r3, [pc, #516]	; (80054f4 <Motor_Service+0x37c>)
 80052ee:	88db      	ldrh	r3, [r3, #6]
 80052f0:	0018      	movs	r0, r3
 80052f2:	f7fb fe69 	bl	8000fc8 <__aeabi_i2f>
 80052f6:	1c03      	adds	r3, r0, #0
 80052f8:	193a      	adds	r2, r7, r4
 80052fa:	6811      	ldr	r1, [r2, #0]
 80052fc:	1c18      	adds	r0, r3, #0
 80052fe:	f7fb fc95 	bl	8000c2c <__aeabi_fsub>
 8005302:	1c03      	adds	r3, r0, #0
 8005304:	1c18      	adds	r0, r3, #0
 8005306:	f7fb f913 	bl	8000530 <__aeabi_f2uiz>
 800530a:	0003      	movs	r3, r0
 800530c:	b29a      	uxth	r2, r3
 800530e:	4b79      	ldr	r3, [pc, #484]	; (80054f4 <Motor_Service+0x37c>)
 8005310:	80da      	strh	r2, [r3, #6]
					valve.stepSize = valve.closeTimer / 40;
 8005312:	4b78      	ldr	r3, [pc, #480]	; (80054f4 <Motor_Service+0x37c>)
 8005314:	88db      	ldrh	r3, [r3, #6]
 8005316:	2128      	movs	r1, #40	; 0x28
 8005318:	0018      	movs	r0, r3
 800531a:	f7fa ff1b 	bl	8000154 <__udivsi3>
 800531e:	0003      	movs	r3, r0
 8005320:	b29b      	uxth	r3, r3
 8005322:	b2da      	uxtb	r2, r3
 8005324:	4b73      	ldr	r3, [pc, #460]	; (80054f4 <Motor_Service+0x37c>)
 8005326:	739a      	strb	r2, [r3, #14]
				}
				mode = flowMonitor;
 8005328:	4b6e      	ldr	r3, [pc, #440]	; (80054e4 <Motor_Service+0x36c>)
 800532a:	2205      	movs	r2, #5
 800532c:	701a      	strb	r2, [r3, #0]
 800532e:	e04d      	b.n	80053cc <Motor_Service+0x254>

			}
			else if (valve.closeTimer > valve.openTimer){
 8005330:	4b70      	ldr	r3, [pc, #448]	; (80054f4 <Motor_Service+0x37c>)
 8005332:	88da      	ldrh	r2, [r3, #6]
 8005334:	4b6f      	ldr	r3, [pc, #444]	; (80054f4 <Motor_Service+0x37c>)
 8005336:	889b      	ldrh	r3, [r3, #4]
 8005338:	429a      	cmp	r2, r3
 800533a:	d943      	bls.n	80053c4 <Motor_Service+0x24c>
				Debug_Send("close >\r\n");
 800533c:	4b75      	ldr	r3, [pc, #468]	; (8005514 <Motor_Service+0x39c>)
 800533e:	0018      	movs	r0, r3
 8005340:	f7fd ff4c 	bl	80031dc <Debug_Send>
				diff = valve.closeTimer - valve.openTimer;
 8005344:	4b6b      	ldr	r3, [pc, #428]	; (80054f4 <Motor_Service+0x37c>)
 8005346:	88db      	ldrh	r3, [r3, #6]
 8005348:	001a      	movs	r2, r3
 800534a:	4b6a      	ldr	r3, [pc, #424]	; (80054f4 <Motor_Service+0x37c>)
 800534c:	889b      	ldrh	r3, [r3, #4]
 800534e:	1ad2      	subs	r2, r2, r3
 8005350:	4b6f      	ldr	r3, [pc, #444]	; (8005510 <Motor_Service+0x398>)
 8005352:	601a      	str	r2, [r3, #0]
				if (diff <100){
 8005354:	4b6e      	ldr	r3, [pc, #440]	; (8005510 <Motor_Service+0x398>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b63      	cmp	r3, #99	; 0x63
 800535a:	dc2f      	bgt.n	80053bc <Motor_Service+0x244>
					valve.calibrate = 1;
 800535c:	4b65      	ldr	r3, [pc, #404]	; (80054f4 <Motor_Service+0x37c>)
 800535e:	2201      	movs	r2, #1
 8005360:	701a      	strb	r2, [r3, #0]
					tempS = valve.openTimer % 40;
 8005362:	4b64      	ldr	r3, [pc, #400]	; (80054f4 <Motor_Service+0x37c>)
 8005364:	889b      	ldrh	r3, [r3, #4]
 8005366:	2128      	movs	r1, #40	; 0x28
 8005368:	0018      	movs	r0, r3
 800536a:	f7fa ff79 	bl	8000260 <__aeabi_uidivmod>
 800536e:	000b      	movs	r3, r1
 8005370:	b29b      	uxth	r3, r3
 8005372:	0018      	movs	r0, r3
 8005374:	f7fb fe28 	bl	8000fc8 <__aeabi_i2f>
 8005378:	1c03      	adds	r3, r0, #0
 800537a:	249c      	movs	r4, #156	; 0x9c
 800537c:	193a      	adds	r2, r7, r4
 800537e:	6013      	str	r3, [r2, #0]
					valve.openTimer = valve.openTimer - tempS;
 8005380:	4b5c      	ldr	r3, [pc, #368]	; (80054f4 <Motor_Service+0x37c>)
 8005382:	889b      	ldrh	r3, [r3, #4]
 8005384:	0018      	movs	r0, r3
 8005386:	f7fb fe1f 	bl	8000fc8 <__aeabi_i2f>
 800538a:	1c03      	adds	r3, r0, #0
 800538c:	193a      	adds	r2, r7, r4
 800538e:	6811      	ldr	r1, [r2, #0]
 8005390:	1c18      	adds	r0, r3, #0
 8005392:	f7fb fc4b 	bl	8000c2c <__aeabi_fsub>
 8005396:	1c03      	adds	r3, r0, #0
 8005398:	1c18      	adds	r0, r3, #0
 800539a:	f7fb f8c9 	bl	8000530 <__aeabi_f2uiz>
 800539e:	0003      	movs	r3, r0
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	4b54      	ldr	r3, [pc, #336]	; (80054f4 <Motor_Service+0x37c>)
 80053a4:	809a      	strh	r2, [r3, #4]
					valve.stepSize = valve.openTimer / 20;
 80053a6:	4b53      	ldr	r3, [pc, #332]	; (80054f4 <Motor_Service+0x37c>)
 80053a8:	889b      	ldrh	r3, [r3, #4]
 80053aa:	2114      	movs	r1, #20
 80053ac:	0018      	movs	r0, r3
 80053ae:	f7fa fed1 	bl	8000154 <__udivsi3>
 80053b2:	0003      	movs	r3, r0
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	4b4e      	ldr	r3, [pc, #312]	; (80054f4 <Motor_Service+0x37c>)
 80053ba:	739a      	strb	r2, [r3, #14]
					//valve.stepSize = tempS;
				}
				mode = flowMonitor;
 80053bc:	4b49      	ldr	r3, [pc, #292]	; (80054e4 <Motor_Service+0x36c>)
 80053be:	2205      	movs	r2, #5
 80053c0:	701a      	strb	r2, [r3, #0]
 80053c2:	e003      	b.n	80053cc <Motor_Service+0x254>

			}
			else{
				Debug_Send("perfect match\r\n");
 80053c4:	4b54      	ldr	r3, [pc, #336]	; (8005518 <Motor_Service+0x3a0>)
 80053c6:	0018      	movs	r0, r3
 80053c8:	f7fd ff08 	bl	80031dc <Debug_Send>
			}
			char temp[60];
			if ((diff > 150)||(valve.openTimer == 0)||(valve.closeTimer == 0)){
 80053cc:	4b50      	ldr	r3, [pc, #320]	; (8005510 <Motor_Service+0x398>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b96      	cmp	r3, #150	; 0x96
 80053d2:	dc07      	bgt.n	80053e4 <Motor_Service+0x26c>
 80053d4:	4b47      	ldr	r3, [pc, #284]	; (80054f4 <Motor_Service+0x37c>)
 80053d6:	889b      	ldrh	r3, [r3, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <Motor_Service+0x26c>
 80053dc:	4b45      	ldr	r3, [pc, #276]	; (80054f4 <Motor_Service+0x37c>)
 80053de:	88db      	ldrh	r3, [r3, #6]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d109      	bne.n	80053f8 <Motor_Service+0x280>
				Debug_Send("calibration failed\r\n");
 80053e4:	4b4d      	ldr	r3, [pc, #308]	; (800551c <Motor_Service+0x3a4>)
 80053e6:	0018      	movs	r0, r3
 80053e8:	f7fd fef8 	bl	80031dc <Debug_Send>
				valve.calibrate = 0;
 80053ec:	4b41      	ldr	r3, [pc, #260]	; (80054f4 <Motor_Service+0x37c>)
 80053ee:	2200      	movs	r2, #0
 80053f0:	701a      	strb	r2, [r3, #0]
				mode = 7;
 80053f2:	4b3c      	ldr	r3, [pc, #240]	; (80054e4 <Motor_Service+0x36c>)
 80053f4:	2207      	movs	r2, #7
 80053f6:	701a      	strb	r2, [r3, #0]
			}
			//valve.stepSize = 16;	//debug
			valve.position = 100;
 80053f8:	4b3e      	ldr	r3, [pc, #248]	; (80054f4 <Motor_Service+0x37c>)
 80053fa:	2264      	movs	r2, #100	; 0x64
 80053fc:	73da      	strb	r2, [r3, #15]
			sprintf(temp, "Step:%i, open: %i, close: %i, position: %i\r\n",valve.stepSize, valve.openTimer, valve.closeTimer, valve.position);
 80053fe:	4b3d      	ldr	r3, [pc, #244]	; (80054f4 <Motor_Service+0x37c>)
 8005400:	7b9b      	ldrb	r3, [r3, #14]
 8005402:	001c      	movs	r4, r3
 8005404:	4b3b      	ldr	r3, [pc, #236]	; (80054f4 <Motor_Service+0x37c>)
 8005406:	889b      	ldrh	r3, [r3, #4]
 8005408:	001d      	movs	r5, r3
 800540a:	4b3a      	ldr	r3, [pc, #232]	; (80054f4 <Motor_Service+0x37c>)
 800540c:	88db      	ldrh	r3, [r3, #6]
 800540e:	001a      	movs	r2, r3
 8005410:	4b38      	ldr	r3, [pc, #224]	; (80054f4 <Motor_Service+0x37c>)
 8005412:	7bdb      	ldrb	r3, [r3, #15]
 8005414:	4942      	ldr	r1, [pc, #264]	; (8005520 <Motor_Service+0x3a8>)
 8005416:	1d38      	adds	r0, r7, #4
 8005418:	9301      	str	r3, [sp, #4]
 800541a:	9200      	str	r2, [sp, #0]
 800541c:	002b      	movs	r3, r5
 800541e:	0022      	movs	r2, r4
 8005420:	f007 f8aa 	bl	800c578 <siprintf>
			Debug_Send(temp);
 8005424:	1d3b      	adds	r3, r7, #4
 8005426:	0018      	movs	r0, r3
 8005428:	f7fd fed8 	bl	80031dc <Debug_Send>

		}
		break;
 800542c:	e374      	b.n	8005b18 <Motor_Service+0x9a0>
	case flowMonitor: //reverse
		//Debug_Send("Check flow task\r\n");
		valve.flowTimer++;
 800542e:	4b31      	ldr	r3, [pc, #196]	; (80054f4 <Motor_Service+0x37c>)
 8005430:	8a1b      	ldrh	r3, [r3, #16]
 8005432:	3301      	adds	r3, #1
 8005434:	b29a      	uxth	r2, r3
 8005436:	4b2f      	ldr	r3, [pc, #188]	; (80054f4 <Motor_Service+0x37c>)
 8005438:	821a      	strh	r2, [r3, #16]
		if (valve.flowTimer == 10){
 800543a:	4b2e      	ldr	r3, [pc, #184]	; (80054f4 <Motor_Service+0x37c>)
 800543c:	8a1b      	ldrh	r3, [r3, #16]
 800543e:	2b0a      	cmp	r3, #10
 8005440:	d143      	bne.n	80054ca <Motor_Service+0x352>
			Debug_Send("Check flow rate\r\n");
 8005442:	4b38      	ldr	r3, [pc, #224]	; (8005524 <Motor_Service+0x3ac>)
 8005444:	0018      	movs	r0, r3
 8005446:	f7fd fec9 	bl	80031dc <Debug_Send>
			valve.flowTimer = 0;
 800544a:	4b2a      	ldr	r3, [pc, #168]	; (80054f4 <Motor_Service+0x37c>)
 800544c:	2200      	movs	r2, #0
 800544e:	821a      	strh	r2, [r3, #16]
			char temp1[30];
			if (gallonsPm < 2){
 8005450:	4b35      	ldr	r3, [pc, #212]	; (8005528 <Motor_Service+0x3b0>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2180      	movs	r1, #128	; 0x80
 8005456:	05c9      	lsls	r1, r1, #23
 8005458:	1c18      	adds	r0, r3, #0
 800545a:	f7fb f841 	bl	80004e0 <__aeabi_fcmplt>
 800545e:	1e03      	subs	r3, r0, #0
 8005460:	d02d      	beq.n	80054be <Motor_Service+0x346>
				if(valve.position > 10){
 8005462:	4b24      	ldr	r3, [pc, #144]	; (80054f4 <Motor_Service+0x37c>)
 8005464:	7bdb      	ldrb	r3, [r3, #15]
 8005466:	2b0a      	cmp	r3, #10
 8005468:	d921      	bls.n	80054ae <Motor_Service+0x336>
					closeStep();
 800546a:	f000 fb87 	bl	8005b7c <closeStep>
					//sprintf(temp, "Step count:%i,\r\n",count);
					Debug_Send("Step count:");
 800546e:	4b2f      	ldr	r3, [pc, #188]	; (800552c <Motor_Service+0x3b4>)
 8005470:	0018      	movs	r0, r3
 8005472:	f7fd feb3 	bl	80031dc <Debug_Send>
					myLongStr(count,temp1,10,10);
 8005476:	4b2e      	ldr	r3, [pc, #184]	; (8005530 <Motor_Service+0x3b8>)
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	0018      	movs	r0, r3
 800547c:	2440      	movs	r4, #64	; 0x40
 800547e:	1939      	adds	r1, r7, r4
 8005480:	230a      	movs	r3, #10
 8005482:	220a      	movs	r2, #10
 8005484:	f000 fc5c 	bl	8005d40 <myLongStr>
					Debug_Send(temp1);
 8005488:	193b      	adds	r3, r7, r4
 800548a:	0018      	movs	r0, r3
 800548c:	f7fd fea6 	bl	80031dc <Debug_Send>
					//Debug_Send(temp);
					Debug_Send("\r\n");
 8005490:	4b28      	ldr	r3, [pc, #160]	; (8005534 <Motor_Service+0x3bc>)
 8005492:	0018      	movs	r0, r3
 8005494:	f7fd fea2 	bl	80031dc <Debug_Send>
					count++;
 8005498:	4b25      	ldr	r3, [pc, #148]	; (8005530 <Motor_Service+0x3b8>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	3301      	adds	r3, #1
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	4b23      	ldr	r3, [pc, #140]	; (8005530 <Motor_Service+0x3b8>)
 80054a2:	701a      	strb	r2, [r3, #0]
					valve.timeout = 400;
 80054a4:	4b13      	ldr	r3, [pc, #76]	; (80054f4 <Motor_Service+0x37c>)
 80054a6:	22c8      	movs	r2, #200	; 0xc8
 80054a8:	0052      	lsls	r2, r2, #1
 80054aa:	609a      	str	r2, [r3, #8]
 80054ac:	e003      	b.n	80054b6 <Motor_Service+0x33e>
				}
				else Debug_Send("Valve at its limit cannot close any more");
 80054ae:	4b22      	ldr	r3, [pc, #136]	; (8005538 <Motor_Service+0x3c0>)
 80054b0:	0018      	movs	r0, r3
 80054b2:	f7fd fe93 	bl	80031dc <Debug_Send>
				valve.flowCount = 0;
 80054b6:	4b0f      	ldr	r3, [pc, #60]	; (80054f4 <Motor_Service+0x37c>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	829a      	strh	r2, [r3, #20]
 80054bc:	e005      	b.n	80054ca <Motor_Service+0x352>
			}
			else valve.flowCount++;
 80054be:	4b0d      	ldr	r3, [pc, #52]	; (80054f4 <Motor_Service+0x37c>)
 80054c0:	8a9b      	ldrh	r3, [r3, #20]
 80054c2:	3301      	adds	r3, #1
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	4b0b      	ldr	r3, [pc, #44]	; (80054f4 <Motor_Service+0x37c>)
 80054c8:	829a      	strh	r2, [r3, #20]
		}
		if (valve.flowCount >= 3){
 80054ca:	4b0a      	ldr	r3, [pc, #40]	; (80054f4 <Motor_Service+0x37c>)
 80054cc:	8a9b      	ldrh	r3, [r3, #20]
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d800      	bhi.n	80054d4 <Motor_Service+0x35c>
 80054d2:	e323      	b.n	8005b1c <Motor_Service+0x9a4>
			mode = pressureRead;
 80054d4:	4b03      	ldr	r3, [pc, #12]	; (80054e4 <Motor_Service+0x36c>)
 80054d6:	2206      	movs	r2, #6
 80054d8:	701a      	strb	r2, [r3, #0]
			waterPressure.initial = 0;
 80054da:	4b18      	ldr	r3, [pc, #96]	; (800553c <Motor_Service+0x3c4>)
 80054dc:	2200      	movs	r2, #0
 80054de:	801a      	strh	r2, [r3, #0]
		}
		break;
 80054e0:	e31c      	b.n	8005b1c <Motor_Service+0x9a4>
 80054e2:	46c0      	nop			; (mov r8, r8)
 80054e4:	20000001 	.word	0x20000001
 80054e8:	08010218 	.word	0x08010218
 80054ec:	40012c00 	.word	0x40012c00
 80054f0:	0800ff18 	.word	0x0800ff18
 80054f4:	20000dcc 	.word	0x20000dcc
 80054f8:	00003a98 	.word	0x00003a98
 80054fc:	00000bb8 	.word	0x00000bb8
 8005500:	0800ff24 	.word	0x0800ff24
 8005504:	0800ff30 	.word	0x0800ff30
 8005508:	0800ff3c 	.word	0x0800ff3c
 800550c:	0800ff48 	.word	0x0800ff48
 8005510:	20000df4 	.word	0x20000df4
 8005514:	0800ff54 	.word	0x0800ff54
 8005518:	0800ff60 	.word	0x0800ff60
 800551c:	0800ff70 	.word	0x0800ff70
 8005520:	0800ff88 	.word	0x0800ff88
 8005524:	0800ffb8 	.word	0x0800ffb8
 8005528:	20000dc4 	.word	0x20000dc4
 800552c:	0800ffcc 	.word	0x0800ffcc
 8005530:	20000dfc 	.word	0x20000dfc
 8005534:	0800ffd8 	.word	0x0800ffd8
 8005538:	0800ffdc 	.word	0x0800ffdc
 800553c:	20000de8 	.word	0x20000de8
	case pressureRead:
		//ValveOpen();
		ADC_Service();
 8005540:	f7fd fbbe 	bl	8002cc0 <ADC_Service>
		waterPressure.initial = GetADC1()[Pressure];
 8005544:	f7fd fbe8 	bl	8002d18 <GetADC1>
 8005548:	0003      	movs	r3, r0
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	b29a      	uxth	r2, r3
 800554e:	4b77      	ldr	r3, [pc, #476]	; (800572c <Motor_Service+0x5b4>)
 8005550:	801a      	strh	r2, [r3, #0]
			open();
			mode = 6;
			valve.timeout = 400;
			valve.state = Open;
		}*/
		waterPressure.low = 0;
 8005552:	4b76      	ldr	r3, [pc, #472]	; (800572c <Motor_Service+0x5b4>)
 8005554:	2200      	movs	r2, #0
 8005556:	80da      	strh	r2, [r3, #6]
		waterPressure.high = 0;
 8005558:	4b74      	ldr	r3, [pc, #464]	; (800572c <Motor_Service+0x5b4>)
 800555a:	2200      	movs	r2, #0
 800555c:	805a      	strh	r2, [r3, #2]
		waterPressure.counter = 0;
 800555e:	4b73      	ldr	r3, [pc, #460]	; (800572c <Motor_Service+0x5b4>)
 8005560:	2200      	movs	r2, #0
 8005562:	815a      	strh	r2, [r3, #10]
		mode = pressureLow;
 8005564:	4b72      	ldr	r3, [pc, #456]	; (8005730 <Motor_Service+0x5b8>)
 8005566:	2207      	movs	r2, #7
 8005568:	701a      	strb	r2, [r3, #0]
		break;
 800556a:	e302      	b.n	8005b72 <Motor_Service+0x9fa>
	case pressureLow:
		valve.flowTimer++;
 800556c:	4b71      	ldr	r3, [pc, #452]	; (8005734 <Motor_Service+0x5bc>)
 800556e:	8a1b      	ldrh	r3, [r3, #16]
 8005570:	3301      	adds	r3, #1
 8005572:	b29a      	uxth	r2, r3
 8005574:	4b6f      	ldr	r3, [pc, #444]	; (8005734 <Motor_Service+0x5bc>)
 8005576:	821a      	strh	r2, [r3, #16]
		if (valve.flowTimer == 10){
 8005578:	4b6e      	ldr	r3, [pc, #440]	; (8005734 <Motor_Service+0x5bc>)
 800557a:	8a1b      	ldrh	r3, [r3, #16]
 800557c:	2b0a      	cmp	r3, #10
 800557e:	d000      	beq.n	8005582 <Motor_Service+0x40a>
 8005580:	e2ce      	b.n	8005b20 <Motor_Service+0x9a8>
			valve.flowTimer = 0;
 8005582:	4b6c      	ldr	r3, [pc, #432]	; (8005734 <Motor_Service+0x5bc>)
 8005584:	2200      	movs	r2, #0
 8005586:	821a      	strh	r2, [r3, #16]
			Debug_Send("Check low pressure\r\n");
 8005588:	4b6b      	ldr	r3, [pc, #428]	; (8005738 <Motor_Service+0x5c0>)
 800558a:	0018      	movs	r0, r3
 800558c:	f7fd fe26 	bl	80031dc <Debug_Send>
			openStep();
 8005590:	f000 fb10 	bl	8005bb4 <openStep>
			valve.timeout = 400;
 8005594:	4b67      	ldr	r3, [pc, #412]	; (8005734 <Motor_Service+0x5bc>)
 8005596:	22c8      	movs	r2, #200	; 0xc8
 8005598:	0052      	lsls	r2, r2, #1
 800559a:	609a      	str	r2, [r3, #8]
			HAL_Delay(100);
 800559c:	2064      	movs	r0, #100	; 0x64
 800559e:	f001 fc3f 	bl	8006e20 <HAL_Delay>
			ADC_Service();
 80055a2:	f7fd fb8d 	bl	8002cc0 <ADC_Service>
			tempVal = GetADC1()[Pressure];
 80055a6:	f7fd fbb7 	bl	8002d18 <GetADC1>
 80055aa:	0003      	movs	r3, r0
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	4b63      	ldr	r3, [pc, #396]	; (800573c <Motor_Service+0x5c4>)
 80055b0:	601a      	str	r2, [r3, #0]
			if (tempVal < (waterPressure.initial - (waterPressure.initial / 10))){
 80055b2:	4b5e      	ldr	r3, [pc, #376]	; (800572c <Motor_Service+0x5b4>)
 80055b4:	881b      	ldrh	r3, [r3, #0]
 80055b6:	001c      	movs	r4, r3
 80055b8:	4b5c      	ldr	r3, [pc, #368]	; (800572c <Motor_Service+0x5b4>)
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	210a      	movs	r1, #10
 80055be:	0018      	movs	r0, r3
 80055c0:	f7fa fdc8 	bl	8000154 <__udivsi3>
 80055c4:	0003      	movs	r3, r0
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	1ae3      	subs	r3, r4, r3
 80055ca:	001a      	movs	r2, r3
 80055cc:	4b5b      	ldr	r3, [pc, #364]	; (800573c <Motor_Service+0x5c4>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d906      	bls.n	80055e2 <Motor_Service+0x46a>
				waterPressure.counter++;
 80055d4:	4b55      	ldr	r3, [pc, #340]	; (800572c <Motor_Service+0x5b4>)
 80055d6:	895b      	ldrh	r3, [r3, #10]
 80055d8:	3301      	adds	r3, #1
 80055da:	b29a      	uxth	r2, r3
 80055dc:	4b53      	ldr	r3, [pc, #332]	; (800572c <Motor_Service+0x5b4>)
 80055de:	815a      	strh	r2, [r3, #10]
 80055e0:	e002      	b.n	80055e8 <Motor_Service+0x470>
			}
			else waterPressure.counter = 0;
 80055e2:	4b52      	ldr	r3, [pc, #328]	; (800572c <Motor_Service+0x5b4>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	815a      	strh	r2, [r3, #10]
			if (waterPressure.counter == 1){ 	//reading debounce
 80055e8:	4b50      	ldr	r3, [pc, #320]	; (800572c <Motor_Service+0x5b4>)
 80055ea:	895b      	ldrh	r3, [r3, #10]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d000      	beq.n	80055f2 <Motor_Service+0x47a>
 80055f0:	e296      	b.n	8005b20 <Motor_Service+0x9a8>
				waterPressure.low = tempVal;
 80055f2:	4b52      	ldr	r3, [pc, #328]	; (800573c <Motor_Service+0x5c4>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	4b4c      	ldr	r3, [pc, #304]	; (800572c <Motor_Service+0x5b4>)
 80055fa:	80da      	strh	r2, [r3, #6]
				mode = pressureHigh;
 80055fc:	4b4c      	ldr	r3, [pc, #304]	; (8005730 <Motor_Service+0x5b8>)
 80055fe:	2208      	movs	r2, #8
 8005600:	701a      	strb	r2, [r3, #0]
				waterPressure.lowPosition = valve.position;
 8005602:	4b4c      	ldr	r3, [pc, #304]	; (8005734 <Motor_Service+0x5bc>)
 8005604:	7bdb      	ldrb	r3, [r3, #15]
 8005606:	b29a      	uxth	r2, r3
 8005608:	4b48      	ldr	r3, [pc, #288]	; (800572c <Motor_Service+0x5b4>)
 800560a:	811a      	strh	r2, [r3, #8]
				valve.flowTimer = 0;
 800560c:	4b49      	ldr	r3, [pc, #292]	; (8005734 <Motor_Service+0x5bc>)
 800560e:	2200      	movs	r2, #0
 8005610:	821a      	strh	r2, [r3, #16]
			}
		}
		break;
 8005612:	e285      	b.n	8005b20 <Motor_Service+0x9a8>
	case pressureHigh:
		valve.flowTimer++;
 8005614:	4b47      	ldr	r3, [pc, #284]	; (8005734 <Motor_Service+0x5bc>)
 8005616:	8a1b      	ldrh	r3, [r3, #16]
 8005618:	3301      	adds	r3, #1
 800561a:	b29a      	uxth	r2, r3
 800561c:	4b45      	ldr	r3, [pc, #276]	; (8005734 <Motor_Service+0x5bc>)
 800561e:	821a      	strh	r2, [r3, #16]
		if (valve.flowTimer == 10){
 8005620:	4b44      	ldr	r3, [pc, #272]	; (8005734 <Motor_Service+0x5bc>)
 8005622:	8a1b      	ldrh	r3, [r3, #16]
 8005624:	2b0a      	cmp	r3, #10
 8005626:	d000      	beq.n	800562a <Motor_Service+0x4b2>
 8005628:	e27c      	b.n	8005b24 <Motor_Service+0x9ac>
			valve.flowTimer = 0;
 800562a:	4b42      	ldr	r3, [pc, #264]	; (8005734 <Motor_Service+0x5bc>)
 800562c:	2200      	movs	r2, #0
 800562e:	821a      	strh	r2, [r3, #16]
			Debug_Send("Check high pressure\r\n");
 8005630:	4b43      	ldr	r3, [pc, #268]	; (8005740 <Motor_Service+0x5c8>)
 8005632:	0018      	movs	r0, r3
 8005634:	f7fd fdd2 	bl	80031dc <Debug_Send>
			closeStep();
 8005638:	f000 faa0 	bl	8005b7c <closeStep>
			valve.timeout = 400;
 800563c:	4b3d      	ldr	r3, [pc, #244]	; (8005734 <Motor_Service+0x5bc>)
 800563e:	22c8      	movs	r2, #200	; 0xc8
 8005640:	0052      	lsls	r2, r2, #1
 8005642:	609a      	str	r2, [r3, #8]
			HAL_Delay(100);
 8005644:	2064      	movs	r0, #100	; 0x64
 8005646:	f001 fbeb 	bl	8006e20 <HAL_Delay>
			ADC_Service();
 800564a:	f7fd fb39 	bl	8002cc0 <ADC_Service>
			tempVal = GetADC1()[Pressure];
 800564e:	f7fd fb63 	bl	8002d18 <GetADC1>
 8005652:	0003      	movs	r3, r0
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	4b39      	ldr	r3, [pc, #228]	; (800573c <Motor_Service+0x5c4>)
 8005658:	601a      	str	r2, [r3, #0]
			if (tempVal > (waterPressure.low + (waterPressure.low / 10))){
 800565a:	4b34      	ldr	r3, [pc, #208]	; (800572c <Motor_Service+0x5b4>)
 800565c:	88db      	ldrh	r3, [r3, #6]
 800565e:	001c      	movs	r4, r3
 8005660:	4b32      	ldr	r3, [pc, #200]	; (800572c <Motor_Service+0x5b4>)
 8005662:	88db      	ldrh	r3, [r3, #6]
 8005664:	210a      	movs	r1, #10
 8005666:	0018      	movs	r0, r3
 8005668:	f7fa fd74 	bl	8000154 <__udivsi3>
 800566c:	0003      	movs	r3, r0
 800566e:	b29b      	uxth	r3, r3
 8005670:	18e3      	adds	r3, r4, r3
 8005672:	001a      	movs	r2, r3
 8005674:	4b31      	ldr	r3, [pc, #196]	; (800573c <Motor_Service+0x5c4>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	429a      	cmp	r2, r3
 800567a:	d20a      	bcs.n	8005692 <Motor_Service+0x51a>
				waterPressure.counter++;
 800567c:	4b2b      	ldr	r3, [pc, #172]	; (800572c <Motor_Service+0x5b4>)
 800567e:	895b      	ldrh	r3, [r3, #10]
 8005680:	3301      	adds	r3, #1
 8005682:	b29a      	uxth	r2, r3
 8005684:	4b29      	ldr	r3, [pc, #164]	; (800572c <Motor_Service+0x5b4>)
 8005686:	815a      	strh	r2, [r3, #10]
				Debug_Send("inc\r\n");
 8005688:	4b2e      	ldr	r3, [pc, #184]	; (8005744 <Motor_Service+0x5cc>)
 800568a:	0018      	movs	r0, r3
 800568c:	f7fd fda6 	bl	80031dc <Debug_Send>
 8005690:	e002      	b.n	8005698 <Motor_Service+0x520>
			}
			else waterPressure.counter = 0;
 8005692:	4b26      	ldr	r3, [pc, #152]	; (800572c <Motor_Service+0x5b4>)
 8005694:	2200      	movs	r2, #0
 8005696:	815a      	strh	r2, [r3, #10]
			if (waterPressure.counter == 1){
 8005698:	4b24      	ldr	r3, [pc, #144]	; (800572c <Motor_Service+0x5b4>)
 800569a:	895b      	ldrh	r3, [r3, #10]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d000      	beq.n	80056a2 <Motor_Service+0x52a>
 80056a0:	e240      	b.n	8005b24 <Motor_Service+0x9ac>
				Debug_Send("Completed high pressure\r\n");
 80056a2:	4b29      	ldr	r3, [pc, #164]	; (8005748 <Motor_Service+0x5d0>)
 80056a4:	0018      	movs	r0, r3
 80056a6:	f7fd fd99 	bl	80031dc <Debug_Send>
				waterPressure.high = tempVal;
 80056aa:	4b24      	ldr	r3, [pc, #144]	; (800573c <Motor_Service+0x5c4>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	4b1e      	ldr	r3, [pc, #120]	; (800572c <Motor_Service+0x5b4>)
 80056b2:	805a      	strh	r2, [r3, #2]
				mode = pressureCalc;
 80056b4:	4b1e      	ldr	r3, [pc, #120]	; (8005730 <Motor_Service+0x5b8>)
 80056b6:	2209      	movs	r2, #9
 80056b8:	701a      	strb	r2, [r3, #0]
				waterPressure.highPosition = valve.position;
 80056ba:	4b1e      	ldr	r3, [pc, #120]	; (8005734 <Motor_Service+0x5bc>)
 80056bc:	7bdb      	ldrb	r3, [r3, #15]
 80056be:	b29a      	uxth	r2, r3
 80056c0:	4b1a      	ldr	r3, [pc, #104]	; (800572c <Motor_Service+0x5b4>)
 80056c2:	809a      	strh	r2, [r3, #4]
				Debug_Send("Display position differential\r\n");
 80056c4:	4b21      	ldr	r3, [pc, #132]	; (800574c <Motor_Service+0x5d4>)
 80056c6:	0018      	movs	r0, r3
 80056c8:	f7fd fd88 	bl	80031dc <Debug_Send>
			}
		}

		break;
 80056cc:	e22a      	b.n	8005b24 <Motor_Service+0x9ac>
	case pressureCalc:
		//sprintf(temp, "pos low:%i  pos high:%i\r\n",waterPressure.lowPosition ,waterPressure.highPosition );
		//Debug_Send(temp);

		diff = (waterPressure.lowPosition - waterPressure.highPosition) / 2;
 80056ce:	4b17      	ldr	r3, [pc, #92]	; (800572c <Motor_Service+0x5b4>)
 80056d0:	891b      	ldrh	r3, [r3, #8]
 80056d2:	001a      	movs	r2, r3
 80056d4:	4b15      	ldr	r3, [pc, #84]	; (800572c <Motor_Service+0x5b4>)
 80056d6:	889b      	ldrh	r3, [r3, #4]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	d500      	bpl.n	80056de <Motor_Service+0x566>
 80056dc:	3301      	adds	r3, #1
 80056de:	105b      	asrs	r3, r3, #1
 80056e0:	001a      	movs	r2, r3
 80056e2:	4b1b      	ldr	r3, [pc, #108]	; (8005750 <Motor_Service+0x5d8>)
 80056e4:	601a      	str	r2, [r3, #0]
		valve.targetPosition = diff + waterPressure.highPosition;
 80056e6:	4b11      	ldr	r3, [pc, #68]	; (800572c <Motor_Service+0x5b4>)
 80056e8:	889b      	ldrh	r3, [r3, #4]
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	4b18      	ldr	r3, [pc, #96]	; (8005750 <Motor_Service+0x5d8>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	18d3      	adds	r3, r2, r3
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	4b0f      	ldr	r3, [pc, #60]	; (8005734 <Motor_Service+0x5bc>)
 80056f8:	759a      	strb	r2, [r3, #22]
		//if((diff + waterPressure.highPosition)  > valve.position){
		if(valve.targetPosition  > valve.position){
 80056fa:	4b0e      	ldr	r3, [pc, #56]	; (8005734 <Motor_Service+0x5bc>)
 80056fc:	7d9a      	ldrb	r2, [r3, #22]
 80056fe:	4b0d      	ldr	r3, [pc, #52]	; (8005734 <Motor_Service+0x5bc>)
 8005700:	7bdb      	ldrb	r3, [r3, #15]
 8005702:	429a      	cmp	r2, r3
 8005704:	d906      	bls.n	8005714 <Motor_Service+0x59c>
			openStep();
 8005706:	f000 fa55 	bl	8005bb4 <openStep>
			valve.timeout = 400;
 800570a:	4b0a      	ldr	r3, [pc, #40]	; (8005734 <Motor_Service+0x5bc>)
 800570c:	22c8      	movs	r2, #200	; 0xc8
 800570e:	0052      	lsls	r2, r2, #1
 8005710:	609a      	str	r2, [r3, #8]
 8005712:	e006      	b.n	8005722 <Motor_Service+0x5aa>
		}
		else{
			Debug_Send("valve on optimal position\r\n");
 8005714:	4b0f      	ldr	r3, [pc, #60]	; (8005754 <Motor_Service+0x5dc>)
 8005716:	0018      	movs	r0, r3
 8005718:	f7fd fd60 	bl	80031dc <Debug_Send>
			mode = flowMonitorSave;
 800571c:	4b04      	ldr	r3, [pc, #16]	; (8005730 <Motor_Service+0x5b8>)
 800571e:	220a      	movs	r2, #10
 8005720:	701a      	strb	r2, [r3, #0]
		}
		Debug_Send("open step\r\n");
 8005722:	4b0d      	ldr	r3, [pc, #52]	; (8005758 <Motor_Service+0x5e0>)
 8005724:	0018      	movs	r0, r3
 8005726:	f7fd fd59 	bl	80031dc <Debug_Send>
		break;
 800572a:	e222      	b.n	8005b72 <Motor_Service+0x9fa>
 800572c:	20000de8 	.word	0x20000de8
 8005730:	20000001 	.word	0x20000001
 8005734:	20000dcc 	.word	0x20000dcc
 8005738:	08010008 	.word	0x08010008
 800573c:	20000df8 	.word	0x20000df8
 8005740:	08010020 	.word	0x08010020
 8005744:	08010038 	.word	0x08010038
 8005748:	08010040 	.word	0x08010040
 800574c:	0801005c 	.word	0x0801005c
 8005750:	20000df4 	.word	0x20000df4
 8005754:	0801007c 	.word	0x0801007c
 8005758:	08010098 	.word	0x08010098
	case flowMonitorSave:
		flowData.counter++;
 800575c:	4bf2      	ldr	r3, [pc, #968]	; (8005b28 <Motor_Service+0x9b0>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	1c5a      	adds	r2, r3, #1
 8005762:	4bf1      	ldr	r3, [pc, #964]	; (8005b28 <Motor_Service+0x9b0>)
 8005764:	601a      	str	r2, [r3, #0]
		rtc tempTime;
		char temp[20];
		char temp1[10];
		//gpmAverage = 0;
		ADC_Service();
 8005766:	f7fd faab 	bl	8002cc0 <ADC_Service>
		if(flowData.counter == 30){
 800576a:	4bef      	ldr	r3, [pc, #956]	; (8005b28 <Motor_Service+0x9b0>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b1e      	cmp	r3, #30
 8005770:	d000      	beq.n	8005774 <Motor_Service+0x5fc>
 8005772:	e1fd      	b.n	8005b70 <Motor_Service+0x9f8>
			flowData.counter = 0;
 8005774:	4bec      	ldr	r3, [pc, #944]	; (8005b28 <Motor_Service+0x9b0>)
 8005776:	2200      	movs	r2, #0
 8005778:	601a      	str	r2, [r3, #0]
			tempTime = getTime();
 800577a:	2480      	movs	r4, #128	; 0x80
 800577c:	193b      	adds	r3, r7, r4
 800577e:	0018      	movs	r0, r3
 8005780:	f7fe fed8 	bl	8004534 <getTime>

			flowEvents[eventCounter].timestamp = tempTime;
 8005784:	4be9      	ldr	r3, [pc, #932]	; (8005b2c <Motor_Service+0x9b4>)
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	49e9      	ldr	r1, [pc, #932]	; (8005b30 <Motor_Service+0x9b8>)
 800578a:	0013      	movs	r3, r2
 800578c:	00db      	lsls	r3, r3, #3
 800578e:	189b      	adds	r3, r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	2204      	movs	r2, #4
 8005794:	18cb      	adds	r3, r1, r3
 8005796:	189b      	adds	r3, r3, r2
 8005798:	193a      	adds	r2, r7, r4
 800579a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800579c:	c313      	stmia	r3!, {r0, r1, r4}
 800579e:	ca13      	ldmia	r2!, {r0, r1, r4}
 80057a0:	c313      	stmia	r3!, {r0, r1, r4}
 80057a2:	6812      	ldr	r2, [r2, #0]
 80057a4:	601a      	str	r2, [r3, #0]
			flowEvents[eventCounter].eventNum = eventCounter;
 80057a6:	4be1      	ldr	r3, [pc, #900]	; (8005b2c <Motor_Service+0x9b4>)
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	4be0      	ldr	r3, [pc, #896]	; (8005b2c <Motor_Service+0x9b4>)
 80057ac:	6818      	ldr	r0, [r3, #0]
 80057ae:	49e0      	ldr	r1, [pc, #896]	; (8005b30 <Motor_Service+0x9b8>)
 80057b0:	0013      	movs	r3, r2
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	189b      	adds	r3, r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	5058      	str	r0, [r3, r1]
			flowEvents[eventCounter].gallons = gallonsPm;
 80057ba:	4bdc      	ldr	r3, [pc, #880]	; (8005b2c <Motor_Service+0x9b4>)
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	4bdd      	ldr	r3, [pc, #884]	; (8005b34 <Motor_Service+0x9bc>)
 80057c0:	6819      	ldr	r1, [r3, #0]
 80057c2:	48db      	ldr	r0, [pc, #876]	; (8005b30 <Motor_Service+0x9b8>)
 80057c4:	0013      	movs	r3, r2
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	189b      	adds	r3, r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	18c3      	adds	r3, r0, r3
 80057ce:	3320      	adds	r3, #32
 80057d0:	6019      	str	r1, [r3, #0]
			gpmAverage += gallonsPm;
 80057d2:	4bd9      	ldr	r3, [pc, #868]	; (8005b38 <Motor_Service+0x9c0>)
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	4bd7      	ldr	r3, [pc, #860]	; (8005b34 <Motor_Service+0x9bc>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	1c19      	adds	r1, r3, #0
 80057dc:	1c10      	adds	r0, r2, #0
 80057de:	f7fa febf 	bl	8000560 <__aeabi_fadd>
 80057e2:	1c03      	adds	r3, r0, #0
 80057e4:	1c1a      	adds	r2, r3, #0
 80057e6:	4bd4      	ldr	r3, [pc, #848]	; (8005b38 <Motor_Service+0x9c0>)
 80057e8:	601a      	str	r2, [r3, #0]
			gpmAverage1 = gpmAverage / eventCounter;
 80057ea:	4bd3      	ldr	r3, [pc, #844]	; (8005b38 <Motor_Service+0x9c0>)
 80057ec:	681c      	ldr	r4, [r3, #0]
 80057ee:	4bcf      	ldr	r3, [pc, #828]	; (8005b2c <Motor_Service+0x9b4>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	0018      	movs	r0, r3
 80057f4:	f7fb fbe8 	bl	8000fc8 <__aeabi_i2f>
 80057f8:	1c03      	adds	r3, r0, #0
 80057fa:	1c19      	adds	r1, r3, #0
 80057fc:	1c20      	adds	r0, r4, #0
 80057fe:	f7fb f84d 	bl	800089c <__aeabi_fdiv>
 8005802:	1c03      	adds	r3, r0, #0
 8005804:	1c1a      	adds	r2, r3, #0
 8005806:	4bcd      	ldr	r3, [pc, #820]	; (8005b3c <Motor_Service+0x9c4>)
 8005808:	601a      	str	r2, [r3, #0]


			strcpy(temp,"GPM ave:");
 800580a:	246c      	movs	r4, #108	; 0x6c
 800580c:	193b      	adds	r3, r7, r4
 800580e:	4acc      	ldr	r2, [pc, #816]	; (8005b40 <Motor_Service+0x9c8>)
 8005810:	ca03      	ldmia	r2!, {r0, r1}
 8005812:	c303      	stmia	r3!, {r0, r1}
 8005814:	7812      	ldrb	r2, [r2, #0]
 8005816:	701a      	strb	r2, [r3, #0]

			gcvt(gpmAverage, 4, temp1);
 8005818:	4bc7      	ldr	r3, [pc, #796]	; (8005b38 <Motor_Service+0x9c0>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	1c18      	adds	r0, r3, #0
 800581e:	f7fd f9e9 	bl	8002bf4 <__aeabi_f2d>
 8005822:	2560      	movs	r5, #96	; 0x60
 8005824:	197b      	adds	r3, r7, r5
 8005826:	2204      	movs	r2, #4
 8005828:	f006 fe44 	bl	800c4b4 <gcvt>
			strcat(temp,temp1);
 800582c:	197a      	adds	r2, r7, r5
 800582e:	193b      	adds	r3, r7, r4
 8005830:	0011      	movs	r1, r2
 8005832:	0018      	movs	r0, r3
 8005834:	f006 fec0 	bl	800c5b8 <strcat>
			strcat(temp,"-");
 8005838:	193b      	adds	r3, r7, r4
 800583a:	0018      	movs	r0, r3
 800583c:	f7fa fc6e 	bl	800011c <strlen>
 8005840:	0003      	movs	r3, r0
 8005842:	001a      	movs	r2, r3
 8005844:	193b      	adds	r3, r7, r4
 8005846:	189a      	adds	r2, r3, r2
 8005848:	4bbe      	ldr	r3, [pc, #760]	; (8005b44 <Motor_Service+0x9cc>)
 800584a:	0010      	movs	r0, r2
 800584c:	0019      	movs	r1, r3
 800584e:	2302      	movs	r3, #2
 8005850:	001a      	movs	r2, r3
 8005852:	f006 fe7f 	bl	800c554 <memcpy>
			myLongStr(eventCounter,temp1,10,10);
 8005856:	4bb5      	ldr	r3, [pc, #724]	; (8005b2c <Motor_Service+0x9b4>)
 8005858:	6818      	ldr	r0, [r3, #0]
 800585a:	1979      	adds	r1, r7, r5
 800585c:	230a      	movs	r3, #10
 800585e:	220a      	movs	r2, #10
 8005860:	f000 fa6e 	bl	8005d40 <myLongStr>
			strcat(temp,temp1);
 8005864:	197a      	adds	r2, r7, r5
 8005866:	193b      	adds	r3, r7, r4
 8005868:	0011      	movs	r1, r2
 800586a:	0018      	movs	r0, r3
 800586c:	f006 fea4 	bl	800c5b8 <strcat>
			strcat(temp,"-");
 8005870:	193b      	adds	r3, r7, r4
 8005872:	0018      	movs	r0, r3
 8005874:	f7fa fc52 	bl	800011c <strlen>
 8005878:	0003      	movs	r3, r0
 800587a:	001a      	movs	r2, r3
 800587c:	193b      	adds	r3, r7, r4
 800587e:	189a      	adds	r2, r3, r2
 8005880:	4bb0      	ldr	r3, [pc, #704]	; (8005b44 <Motor_Service+0x9cc>)
 8005882:	0010      	movs	r0, r2
 8005884:	0019      	movs	r1, r3
 8005886:	2302      	movs	r3, #2
 8005888:	001a      	movs	r2, r3
 800588a:	f006 fe63 	bl	800c554 <memcpy>
			gcvt(gpmAverage1, 4, temp1);
 800588e:	4bab      	ldr	r3, [pc, #684]	; (8005b3c <Motor_Service+0x9c4>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	1c18      	adds	r0, r3, #0
 8005894:	f7fd f9ae 	bl	8002bf4 <__aeabi_f2d>
 8005898:	197b      	adds	r3, r7, r5
 800589a:	2204      	movs	r2, #4
 800589c:	f006 fe0a 	bl	800c4b4 <gcvt>
			strcat(temp,temp1);
 80058a0:	197a      	adds	r2, r7, r5
 80058a2:	193b      	adds	r3, r7, r4
 80058a4:	0011      	movs	r1, r2
 80058a6:	0018      	movs	r0, r3
 80058a8:	f006 fe86 	bl	800c5b8 <strcat>
			strcat(temp,"\r\n");
 80058ac:	193b      	adds	r3, r7, r4
 80058ae:	0018      	movs	r0, r3
 80058b0:	f7fa fc34 	bl	800011c <strlen>
 80058b4:	0003      	movs	r3, r0
 80058b6:	001a      	movs	r2, r3
 80058b8:	193b      	adds	r3, r7, r4
 80058ba:	189a      	adds	r2, r3, r2
 80058bc:	4ba2      	ldr	r3, [pc, #648]	; (8005b48 <Motor_Service+0x9d0>)
 80058be:	0010      	movs	r0, r2
 80058c0:	0019      	movs	r1, r3
 80058c2:	2303      	movs	r3, #3
 80058c4:	001a      	movs	r2, r3
 80058c6:	f006 fe45 	bl	800c554 <memcpy>
			Debug_Send(temp);
 80058ca:	193b      	adds	r3, r7, r4
 80058cc:	0018      	movs	r0, r3
 80058ce:	f7fd fc85 	bl	80031dc <Debug_Send>

			strcpy(temp,"Date1:");
 80058d2:	193b      	adds	r3, r7, r4
 80058d4:	4a9d      	ldr	r2, [pc, #628]	; (8005b4c <Motor_Service+0x9d4>)
 80058d6:	6811      	ldr	r1, [r2, #0]
 80058d8:	6019      	str	r1, [r3, #0]
 80058da:	8891      	ldrh	r1, [r2, #4]
 80058dc:	8099      	strh	r1, [r3, #4]
 80058de:	7992      	ldrb	r2, [r2, #6]
 80058e0:	719a      	strb	r2, [r3, #6]
			myLongStr(flowEvents[eventCounter].timestamp.months,temp1,10,10);
 80058e2:	4b92      	ldr	r3, [pc, #584]	; (8005b2c <Motor_Service+0x9b4>)
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	4992      	ldr	r1, [pc, #584]	; (8005b30 <Motor_Service+0x9b8>)
 80058e8:	0013      	movs	r3, r2
 80058ea:	00db      	lsls	r3, r3, #3
 80058ec:	189b      	adds	r3, r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	18cb      	adds	r3, r1, r3
 80058f2:	3308      	adds	r3, #8
 80058f4:	6818      	ldr	r0, [r3, #0]
 80058f6:	1979      	adds	r1, r7, r5
 80058f8:	230a      	movs	r3, #10
 80058fa:	220a      	movs	r2, #10
 80058fc:	f000 fa20 	bl	8005d40 <myLongStr>
			strcat(temp,temp1);
 8005900:	197a      	adds	r2, r7, r5
 8005902:	193b      	adds	r3, r7, r4
 8005904:	0011      	movs	r1, r2
 8005906:	0018      	movs	r0, r3
 8005908:	f006 fe56 	bl	800c5b8 <strcat>
			strcat(temp,"/");
 800590c:	193b      	adds	r3, r7, r4
 800590e:	0018      	movs	r0, r3
 8005910:	f7fa fc04 	bl	800011c <strlen>
 8005914:	0003      	movs	r3, r0
 8005916:	001a      	movs	r2, r3
 8005918:	193b      	adds	r3, r7, r4
 800591a:	189a      	adds	r2, r3, r2
 800591c:	4b8c      	ldr	r3, [pc, #560]	; (8005b50 <Motor_Service+0x9d8>)
 800591e:	0010      	movs	r0, r2
 8005920:	0019      	movs	r1, r3
 8005922:	2302      	movs	r3, #2
 8005924:	001a      	movs	r2, r3
 8005926:	f006 fe15 	bl	800c554 <memcpy>
			myLongStr(flowEvents[eventCounter].timestamp.days,temp1,10,10);
 800592a:	4b80      	ldr	r3, [pc, #512]	; (8005b2c <Motor_Service+0x9b4>)
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	4980      	ldr	r1, [pc, #512]	; (8005b30 <Motor_Service+0x9b8>)
 8005930:	0013      	movs	r3, r2
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	189b      	adds	r3, r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	18cb      	adds	r3, r1, r3
 800593a:	3310      	adds	r3, #16
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	1979      	adds	r1, r7, r5
 8005940:	230a      	movs	r3, #10
 8005942:	220a      	movs	r2, #10
 8005944:	f000 f9fc 	bl	8005d40 <myLongStr>
			strcat(temp,temp1);
 8005948:	197a      	adds	r2, r7, r5
 800594a:	193b      	adds	r3, r7, r4
 800594c:	0011      	movs	r1, r2
 800594e:	0018      	movs	r0, r3
 8005950:	f006 fe32 	bl	800c5b8 <strcat>
			strcat(temp,"/");
 8005954:	193b      	adds	r3, r7, r4
 8005956:	0018      	movs	r0, r3
 8005958:	f7fa fbe0 	bl	800011c <strlen>
 800595c:	0003      	movs	r3, r0
 800595e:	001a      	movs	r2, r3
 8005960:	193b      	adds	r3, r7, r4
 8005962:	189a      	adds	r2, r3, r2
 8005964:	4b7a      	ldr	r3, [pc, #488]	; (8005b50 <Motor_Service+0x9d8>)
 8005966:	0010      	movs	r0, r2
 8005968:	0019      	movs	r1, r3
 800596a:	2302      	movs	r3, #2
 800596c:	001a      	movs	r2, r3
 800596e:	f006 fdf1 	bl	800c554 <memcpy>
			myLongStr(flowEvents[eventCounter].timestamp.years,temp1,10,10);
 8005972:	4b6e      	ldr	r3, [pc, #440]	; (8005b2c <Motor_Service+0x9b4>)
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	496e      	ldr	r1, [pc, #440]	; (8005b30 <Motor_Service+0x9b8>)
 8005978:	0013      	movs	r3, r2
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	189b      	adds	r3, r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	18cb      	adds	r3, r1, r3
 8005982:	3304      	adds	r3, #4
 8005984:	6818      	ldr	r0, [r3, #0]
 8005986:	1979      	adds	r1, r7, r5
 8005988:	230a      	movs	r3, #10
 800598a:	220a      	movs	r2, #10
 800598c:	f000 f9d8 	bl	8005d40 <myLongStr>
			strcat(temp,temp1);
 8005990:	197a      	adds	r2, r7, r5
 8005992:	193b      	adds	r3, r7, r4
 8005994:	0011      	movs	r1, r2
 8005996:	0018      	movs	r0, r3
 8005998:	f006 fe0e 	bl	800c5b8 <strcat>
			strcat(temp,"!!!!!!!\r\n");
 800599c:	193b      	adds	r3, r7, r4
 800599e:	0018      	movs	r0, r3
 80059a0:	f7fa fbbc 	bl	800011c <strlen>
 80059a4:	0003      	movs	r3, r0
 80059a6:	001a      	movs	r2, r3
 80059a8:	193b      	adds	r3, r7, r4
 80059aa:	189a      	adds	r2, r3, r2
 80059ac:	4b69      	ldr	r3, [pc, #420]	; (8005b54 <Motor_Service+0x9dc>)
 80059ae:	0010      	movs	r0, r2
 80059b0:	0019      	movs	r1, r3
 80059b2:	230a      	movs	r3, #10
 80059b4:	001a      	movs	r2, r3
 80059b6:	f006 fdcd 	bl	800c554 <memcpy>
			Debug_Send(temp);
 80059ba:	193b      	adds	r3, r7, r4
 80059bc:	0018      	movs	r0, r3
 80059be:	f7fd fc0d 	bl	80031dc <Debug_Send>

			strcpy(temp,"time1:");
 80059c2:	193b      	adds	r3, r7, r4
 80059c4:	4a64      	ldr	r2, [pc, #400]	; (8005b58 <Motor_Service+0x9e0>)
 80059c6:	6811      	ldr	r1, [r2, #0]
 80059c8:	6019      	str	r1, [r3, #0]
 80059ca:	8891      	ldrh	r1, [r2, #4]
 80059cc:	8099      	strh	r1, [r3, #4]
 80059ce:	7992      	ldrb	r2, [r2, #6]
 80059d0:	719a      	strb	r2, [r3, #6]
			myLongStr(flowEvents[eventCounter].timestamp.hours,temp1,10,10);
 80059d2:	4b56      	ldr	r3, [pc, #344]	; (8005b2c <Motor_Service+0x9b4>)
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	4956      	ldr	r1, [pc, #344]	; (8005b30 <Motor_Service+0x9b8>)
 80059d8:	0013      	movs	r3, r2
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	189b      	adds	r3, r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	18cb      	adds	r3, r1, r3
 80059e2:	3314      	adds	r3, #20
 80059e4:	6818      	ldr	r0, [r3, #0]
 80059e6:	1979      	adds	r1, r7, r5
 80059e8:	230a      	movs	r3, #10
 80059ea:	220a      	movs	r2, #10
 80059ec:	f000 f9a8 	bl	8005d40 <myLongStr>
			strcat(temp,temp1);
 80059f0:	197a      	adds	r2, r7, r5
 80059f2:	193b      	adds	r3, r7, r4
 80059f4:	0011      	movs	r1, r2
 80059f6:	0018      	movs	r0, r3
 80059f8:	f006 fdde 	bl	800c5b8 <strcat>
			strcat(temp,":");
 80059fc:	193b      	adds	r3, r7, r4
 80059fe:	0018      	movs	r0, r3
 8005a00:	f7fa fb8c 	bl	800011c <strlen>
 8005a04:	0003      	movs	r3, r0
 8005a06:	001a      	movs	r2, r3
 8005a08:	193b      	adds	r3, r7, r4
 8005a0a:	189a      	adds	r2, r3, r2
 8005a0c:	4b53      	ldr	r3, [pc, #332]	; (8005b5c <Motor_Service+0x9e4>)
 8005a0e:	0010      	movs	r0, r2
 8005a10:	0019      	movs	r1, r3
 8005a12:	2302      	movs	r3, #2
 8005a14:	001a      	movs	r2, r3
 8005a16:	f006 fd9d 	bl	800c554 <memcpy>
			myLongStr(flowEvents[eventCounter].timestamp.minutes,temp1,10,10);
 8005a1a:	4b44      	ldr	r3, [pc, #272]	; (8005b2c <Motor_Service+0x9b4>)
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	4944      	ldr	r1, [pc, #272]	; (8005b30 <Motor_Service+0x9b8>)
 8005a20:	0013      	movs	r3, r2
 8005a22:	00db      	lsls	r3, r3, #3
 8005a24:	189b      	adds	r3, r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	18cb      	adds	r3, r1, r3
 8005a2a:	3318      	adds	r3, #24
 8005a2c:	6818      	ldr	r0, [r3, #0]
 8005a2e:	1979      	adds	r1, r7, r5
 8005a30:	230a      	movs	r3, #10
 8005a32:	220a      	movs	r2, #10
 8005a34:	f000 f984 	bl	8005d40 <myLongStr>
			strcat(temp,temp1);
 8005a38:	197a      	adds	r2, r7, r5
 8005a3a:	193b      	adds	r3, r7, r4
 8005a3c:	0011      	movs	r1, r2
 8005a3e:	0018      	movs	r0, r3
 8005a40:	f006 fdba 	bl	800c5b8 <strcat>
			strcat(temp,":");
 8005a44:	193b      	adds	r3, r7, r4
 8005a46:	0018      	movs	r0, r3
 8005a48:	f7fa fb68 	bl	800011c <strlen>
 8005a4c:	0003      	movs	r3, r0
 8005a4e:	001a      	movs	r2, r3
 8005a50:	193b      	adds	r3, r7, r4
 8005a52:	189a      	adds	r2, r3, r2
 8005a54:	4b41      	ldr	r3, [pc, #260]	; (8005b5c <Motor_Service+0x9e4>)
 8005a56:	0010      	movs	r0, r2
 8005a58:	0019      	movs	r1, r3
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	001a      	movs	r2, r3
 8005a5e:	f006 fd79 	bl	800c554 <memcpy>
			myLongStr(flowEvents[eventCounter].timestamp.seconds,temp1,10,10);
 8005a62:	4b32      	ldr	r3, [pc, #200]	; (8005b2c <Motor_Service+0x9b4>)
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	4932      	ldr	r1, [pc, #200]	; (8005b30 <Motor_Service+0x9b8>)
 8005a68:	0013      	movs	r3, r2
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	189b      	adds	r3, r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	18cb      	adds	r3, r1, r3
 8005a72:	331c      	adds	r3, #28
 8005a74:	6818      	ldr	r0, [r3, #0]
 8005a76:	1979      	adds	r1, r7, r5
 8005a78:	230a      	movs	r3, #10
 8005a7a:	220a      	movs	r2, #10
 8005a7c:	f000 f960 	bl	8005d40 <myLongStr>
			strcat(temp,temp1);
 8005a80:	197a      	adds	r2, r7, r5
 8005a82:	193b      	adds	r3, r7, r4
 8005a84:	0011      	movs	r1, r2
 8005a86:	0018      	movs	r0, r3
 8005a88:	f006 fd96 	bl	800c5b8 <strcat>
			strcat(temp,"!!!!!!!!!!\r\n");
 8005a8c:	193b      	adds	r3, r7, r4
 8005a8e:	0018      	movs	r0, r3
 8005a90:	f7fa fb44 	bl	800011c <strlen>
 8005a94:	0003      	movs	r3, r0
 8005a96:	001a      	movs	r2, r3
 8005a98:	193b      	adds	r3, r7, r4
 8005a9a:	189a      	adds	r2, r3, r2
 8005a9c:	4b30      	ldr	r3, [pc, #192]	; (8005b60 <Motor_Service+0x9e8>)
 8005a9e:	0010      	movs	r0, r2
 8005aa0:	0019      	movs	r1, r3
 8005aa2:	230d      	movs	r3, #13
 8005aa4:	001a      	movs	r2, r3
 8005aa6:	f006 fd55 	bl	800c554 <memcpy>
			Debug_Send(temp);
 8005aaa:	193b      	adds	r3, r7, r4
 8005aac:	0018      	movs	r0, r3
 8005aae:	f7fd fb95 	bl	80031dc <Debug_Send>
			if (eventCounter == 5){
 8005ab2:	4b1e      	ldr	r3, [pc, #120]	; (8005b2c <Motor_Service+0x9b4>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b05      	cmp	r3, #5
 8005ab8:	d119      	bne.n	8005aee <Motor_Service+0x976>
				Debug_Send("Send Email");
 8005aba:	4b2a      	ldr	r3, [pc, #168]	; (8005b64 <Motor_Service+0x9ec>)
 8005abc:	0018      	movs	r0, r3
 8005abe:	f7fd fb8d 	bl	80031dc <Debug_Send>
				setEmail(&flowEvents, eventCounter, gpmAverage1);
 8005ac2:	4b1a      	ldr	r3, [pc, #104]	; (8005b2c <Motor_Service+0x9b4>)
 8005ac4:	681c      	ldr	r4, [r3, #0]
 8005ac6:	4b1d      	ldr	r3, [pc, #116]	; (8005b3c <Motor_Service+0x9c4>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	1c18      	adds	r0, r3, #0
 8005acc:	f7fd f892 	bl	8002bf4 <__aeabi_f2d>
 8005ad0:	0002      	movs	r2, r0
 8005ad2:	000b      	movs	r3, r1
 8005ad4:	4816      	ldr	r0, [pc, #88]	; (8005b30 <Motor_Service+0x9b8>)
 8005ad6:	0021      	movs	r1, r4
 8005ad8:	f7fd f99a 	bl	8002e10 <setEmail>
				eventCounter = 1;
 8005adc:	4b13      	ldr	r3, [pc, #76]	; (8005b2c <Motor_Service+0x9b4>)
 8005ade:	2201      	movs	r2, #1
 8005ae0:	601a      	str	r2, [r3, #0]
				gpmAverage = 0;
 8005ae2:	4b15      	ldr	r3, [pc, #84]	; (8005b38 <Motor_Service+0x9c0>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	601a      	str	r2, [r3, #0]
				mode = sendingEmail;
 8005ae8:	4b1f      	ldr	r3, [pc, #124]	; (8005b68 <Motor_Service+0x9f0>)
 8005aea:	220b      	movs	r2, #11
 8005aec:	701a      	strb	r2, [r3, #0]

			}
			eventCounter++;
 8005aee:	4b0f      	ldr	r3, [pc, #60]	; (8005b2c <Motor_Service+0x9b4>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	4b0d      	ldr	r3, [pc, #52]	; (8005b2c <Motor_Service+0x9b4>)
 8005af6:	601a      	str	r2, [r3, #0]
		}

		break;
 8005af8:	e03a      	b.n	8005b70 <Motor_Service+0x9f8>
	case sendingEmail:
		Debug_Send("Sending Email\r\n");
 8005afa:	4b1c      	ldr	r3, [pc, #112]	; (8005b6c <Motor_Service+0x9f4>)
 8005afc:	0018      	movs	r0, r3
 8005afe:	f7fd fb6d 	bl	80031dc <Debug_Send>
		RelayOff();
 8005b02:	f7fe fdab 	bl	800465c <RelayOff>
		break;
 8005b06:	e034      	b.n	8005b72 <Motor_Service+0x9fa>
		//pulseTim(10);
		//valve.stepSize = 5;
		//openStep();
		//pulseTim(5000);
		//valve.timeout = 3000;
		break;
 8005b08:	46c0      	nop			; (mov r8, r8)
 8005b0a:	e032      	b.n	8005b72 <Motor_Service+0x9fa>
		break;
 8005b0c:	46c0      	nop			; (mov r8, r8)
 8005b0e:	e030      	b.n	8005b72 <Motor_Service+0x9fa>
		break;
 8005b10:	46c0      	nop			; (mov r8, r8)
 8005b12:	e02e      	b.n	8005b72 <Motor_Service+0x9fa>
		break;
 8005b14:	46c0      	nop			; (mov r8, r8)
 8005b16:	e02c      	b.n	8005b72 <Motor_Service+0x9fa>
		break;
 8005b18:	46c0      	nop			; (mov r8, r8)
 8005b1a:	e02a      	b.n	8005b72 <Motor_Service+0x9fa>
		break;
 8005b1c:	46c0      	nop			; (mov r8, r8)
 8005b1e:	e028      	b.n	8005b72 <Motor_Service+0x9fa>
		break;
 8005b20:	46c0      	nop			; (mov r8, r8)
 8005b22:	e026      	b.n	8005b72 <Motor_Service+0x9fa>
		break;
 8005b24:	46c0      	nop			; (mov r8, r8)
 8005b26:	e024      	b.n	8005b72 <Motor_Service+0x9fa>
 8005b28:	20001238 	.word	0x20001238
 8005b2c:	20000004 	.word	0x20000004
 8005b30:	20000e00 	.word	0x20000e00
 8005b34:	20000dc4 	.word	0x20000dc4
 8005b38:	2000123c 	.word	0x2000123c
 8005b3c:	20001240 	.word	0x20001240
 8005b40:	080100a4 	.word	0x080100a4
 8005b44:	080100b0 	.word	0x080100b0
 8005b48:	0800ffd8 	.word	0x0800ffd8
 8005b4c:	080100b4 	.word	0x080100b4
 8005b50:	080100bc 	.word	0x080100bc
 8005b54:	080100c0 	.word	0x080100c0
 8005b58:	080100cc 	.word	0x080100cc
 8005b5c:	080100d4 	.word	0x080100d4
 8005b60:	080100d8 	.word	0x080100d8
 8005b64:	080100e8 	.word	0x080100e8
 8005b68:	20000001 	.word	0x20000001
 8005b6c:	080100f4 	.word	0x080100f4
		break;
 8005b70:	46c0      	nop			; (mov r8, r8)
	}
}
 8005b72:	46c0      	nop			; (mov r8, r8)
 8005b74:	46bd      	mov	sp, r7
 8005b76:	b028      	add	sp, #160	; 0xa0
 8005b78:	bdb0      	pop	{r4, r5, r7, pc}
 8005b7a:	46c0      	nop			; (mov r8, r8)

08005b7c <closeStep>:

void closeStep(){	//10 = 1ms
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	af00      	add	r7, sp, #0
	if((TIM1->CR1 & TIM_CR1_CEN) == 0){
	  Debug_Send("Start timer 14\r\n");
	  TIM1->CR1 |= TIM_CR1_CEN;
	}*/

	HAL_GPIO_WritePin(ValveDir_GPIO_Port, ValveDir_Pin, GPIO_PIN_SET);
 8005b80:	2390      	movs	r3, #144	; 0x90
 8005b82:	05db      	lsls	r3, r3, #23
 8005b84:	2201      	movs	r2, #1
 8005b86:	2180      	movs	r1, #128	; 0x80
 8005b88:	0018      	movs	r0, r3
 8005b8a:	f002 f999 	bl	8007ec0 <HAL_GPIO_WritePin>
	//pulseTim(valve.stepSize * 10);
	pulseTim(valve.stepSize);
 8005b8e:	4b08      	ldr	r3, [pc, #32]	; (8005bb0 <closeStep+0x34>)
 8005b90:	7b9b      	ldrb	r3, [r3, #14]
 8005b92:	0018      	movs	r0, r3
 8005b94:	f7fe fd90 	bl	80046b8 <pulseTim>
	valve.state = Close;
 8005b98:	4b05      	ldr	r3, [pc, #20]	; (8005bb0 <closeStep+0x34>)
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	731a      	strb	r2, [r3, #12]
	valve.position -= 5;
 8005b9e:	4b04      	ldr	r3, [pc, #16]	; (8005bb0 <closeStep+0x34>)
 8005ba0:	7bdb      	ldrb	r3, [r3, #15]
 8005ba2:	3b05      	subs	r3, #5
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	4b02      	ldr	r3, [pc, #8]	; (8005bb0 <closeStep+0x34>)
 8005ba8:	73da      	strb	r2, [r3, #15]
}
 8005baa:	46c0      	nop			; (mov r8, r8)
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	20000dcc 	.word	0x20000dcc

08005bb4 <openStep>:

void openStep(){
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	af00      	add	r7, sp, #0
	/*TIM14->CCR1 = 6500 - (valve.stepSize * 100);
	if((TIM14->CR1 & TIM_CR1_CEN) == 0){
	  Debug_Send("Start timer 14\r\n");
	  TIM14->CR1 |= TIM_CR1_CEN;
	}*/
	HAL_GPIO_WritePin(ValveDir_GPIO_Port, ValveDir_Pin, GPIO_PIN_RESET);
 8005bb8:	2390      	movs	r3, #144	; 0x90
 8005bba:	05db      	lsls	r3, r3, #23
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	2180      	movs	r1, #128	; 0x80
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	f002 f97d 	bl	8007ec0 <HAL_GPIO_WritePin>
	pulseTim(valve.stepSize);
 8005bc6:	4b08      	ldr	r3, [pc, #32]	; (8005be8 <openStep+0x34>)
 8005bc8:	7b9b      	ldrb	r3, [r3, #14]
 8005bca:	0018      	movs	r0, r3
 8005bcc:	f7fe fd74 	bl	80046b8 <pulseTim>
	valve.state = Open;
 8005bd0:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <openStep+0x34>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	731a      	strb	r2, [r3, #12]
	valve.position += 5;
 8005bd6:	4b04      	ldr	r3, [pc, #16]	; (8005be8 <openStep+0x34>)
 8005bd8:	7bdb      	ldrb	r3, [r3, #15]
 8005bda:	3305      	adds	r3, #5
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	4b02      	ldr	r3, [pc, #8]	; (8005be8 <openStep+0x34>)
 8005be0:	73da      	strb	r2, [r3, #15]
}
 8005be2:	46c0      	nop			; (mov r8, r8)
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	20000dcc 	.word	0x20000dcc

08005bec <stop>:
	HAL_GPIO_WritePin(ValveDir_GPIO_Port, ValveDir_Pin, GPIO_PIN_SET);
	valve.state = Close;
	valve.runTimer = 0;
}

void stop(){
 8005bec:	b580      	push	{r7, lr}
 8005bee:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(ValveEN_GPIO_Port, ValveEN_Pin, GPIO_PIN_RESET);
	TIM14->CR1 &= ~(TIM_CR1_CEN);
 8005bf0:	4b07      	ldr	r3, [pc, #28]	; (8005c10 <stop+0x24>)
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	4b06      	ldr	r3, [pc, #24]	; (8005c10 <stop+0x24>)
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	438a      	bics	r2, r1
 8005bfa:	601a      	str	r2, [r3, #0]
	//HAL_GPIO_WritePin(ValvePH_GPIO_Port, ValvePH_Pin, GPIO_PIN_RESET);
	valve.state = IdleValve;
 8005bfc:	4b05      	ldr	r3, [pc, #20]	; (8005c14 <stop+0x28>)
 8005bfe:	2202      	movs	r2, #2
 8005c00:	731a      	strb	r2, [r3, #12]
	valve.timeout = 0;
 8005c02:	4b04      	ldr	r3, [pc, #16]	; (8005c14 <stop+0x28>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	609a      	str	r2, [r3, #8]
}
 8005c08:	46c0      	nop			; (mov r8, r8)
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	46c0      	nop			; (mov r8, r8)
 8005c10:	40002000 	.word	0x40002000
 8005c14:	20000dcc 	.word	0x20000dcc

08005c18 <myStrSection>:
//#include "GSM.h"

//volatile unsigned char msisdn[80];
const char hex[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};

short myStrSection(char *p_str,char *p_result,unsigned char p_size,char p_char,char p_pos){
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	0019      	movs	r1, r3
 8005c24:	1dfb      	adds	r3, r7, #7
 8005c26:	701a      	strb	r2, [r3, #0]
 8005c28:	1dbb      	adds	r3, r7, #6
 8005c2a:	1c0a      	adds	r2, r1, #0
 8005c2c:	701a      	strb	r2, [r3, #0]
	short string_index;
	short result_index;
	char tmp_pos;

	string_index=0;
 8005c2e:	2316      	movs	r3, #22
 8005c30:	18fb      	adds	r3, r7, r3
 8005c32:	2200      	movs	r2, #0
 8005c34:	801a      	strh	r2, [r3, #0]
	result_index=0;
 8005c36:	2314      	movs	r3, #20
 8005c38:	18fb      	adds	r3, r7, r3
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	801a      	strh	r2, [r3, #0]
	tmp_pos=0;
 8005c3e:	2313      	movs	r3, #19
 8005c40:	18fb      	adds	r3, r7, r3
 8005c42:	2200      	movs	r2, #0
 8005c44:	701a      	strb	r2, [r3, #0]
	p_size--;
 8005c46:	1dfb      	adds	r3, r7, #7
 8005c48:	781a      	ldrb	r2, [r3, #0]
 8005c4a:	1dfb      	adds	r3, r7, #7
 8005c4c:	3a01      	subs	r2, #1
 8005c4e:	701a      	strb	r2, [r3, #0]
	while(p_str[string_index]!=0){
 8005c50:	e04a      	b.n	8005ce8 <myStrSection+0xd0>
		if(p_str[string_index]==p_char){
 8005c52:	2316      	movs	r3, #22
 8005c54:	18fb      	adds	r3, r7, r3
 8005c56:	2200      	movs	r2, #0
 8005c58:	5e9b      	ldrsh	r3, [r3, r2]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	18d3      	adds	r3, r2, r3
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	1dba      	adds	r2, r7, #6
 8005c62:	7812      	ldrb	r2, [r2, #0]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d111      	bne.n	8005c8c <myStrSection+0x74>

			if(tmp_pos==p_pos)break;
 8005c68:	2113      	movs	r1, #19
 8005c6a:	187a      	adds	r2, r7, r1
 8005c6c:	2320      	movs	r3, #32
 8005c6e:	18fb      	adds	r3, r7, r3
 8005c70:	7812      	ldrb	r2, [r2, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d041      	beq.n	8005cfc <myStrSection+0xe4>
			tmp_pos++;
 8005c78:	187b      	adds	r3, r7, r1
 8005c7a:	781a      	ldrb	r2, [r3, #0]
 8005c7c:	187b      	adds	r3, r7, r1
 8005c7e:	3201      	adds	r2, #1
 8005c80:	701a      	strb	r2, [r3, #0]
			result_index=0;
 8005c82:	2314      	movs	r3, #20
 8005c84:	18fb      	adds	r3, r7, r3
 8005c86:	2200      	movs	r2, #0
 8005c88:	801a      	strh	r2, [r3, #0]
 8005c8a:	e024      	b.n	8005cd6 <myStrSection+0xbe>
		}else{
			if(p_str[string_index]>=' '){
 8005c8c:	2116      	movs	r1, #22
 8005c8e:	187b      	adds	r3, r7, r1
 8005c90:	2200      	movs	r2, #0
 8005c92:	5e9b      	ldrsh	r3, [r3, r2]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	18d3      	adds	r3, r2, r3
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	2b1f      	cmp	r3, #31
 8005c9c:	d91b      	bls.n	8005cd6 <myStrSection+0xbe>
				p_result[result_index]=p_str[string_index];				if(result_index<p_size)result_index++;
 8005c9e:	187b      	adds	r3, r7, r1
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	5e9b      	ldrsh	r3, [r3, r2]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	18d2      	adds	r2, r2, r3
 8005ca8:	2014      	movs	r0, #20
 8005caa:	183b      	adds	r3, r7, r0
 8005cac:	2100      	movs	r1, #0
 8005cae:	5e5b      	ldrsh	r3, [r3, r1]
 8005cb0:	68b9      	ldr	r1, [r7, #8]
 8005cb2:	18cb      	adds	r3, r1, r3
 8005cb4:	7812      	ldrb	r2, [r2, #0]
 8005cb6:	701a      	strb	r2, [r3, #0]
 8005cb8:	183b      	adds	r3, r7, r0
 8005cba:	2200      	movs	r2, #0
 8005cbc:	5e9a      	ldrsh	r2, [r3, r2]
 8005cbe:	1dfb      	adds	r3, r7, #7
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	da07      	bge.n	8005cd6 <myStrSection+0xbe>
 8005cc6:	183b      	adds	r3, r7, r0
 8005cc8:	2200      	movs	r2, #0
 8005cca:	5e9b      	ldrsh	r3, [r3, r2]
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	3301      	adds	r3, #1
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	183b      	adds	r3, r7, r0
 8005cd4:	801a      	strh	r2, [r3, #0]
			}
		}
		string_index++;
 8005cd6:	2116      	movs	r1, #22
 8005cd8:	187b      	adds	r3, r7, r1
 8005cda:	2200      	movs	r2, #0
 8005cdc:	5e9b      	ldrsh	r3, [r3, r2]
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	187b      	adds	r3, r7, r1
 8005ce6:	801a      	strh	r2, [r3, #0]
	while(p_str[string_index]!=0){
 8005ce8:	2316      	movs	r3, #22
 8005cea:	18fb      	adds	r3, r7, r3
 8005cec:	2200      	movs	r2, #0
 8005cee:	5e9b      	ldrsh	r3, [r3, r2]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	18d3      	adds	r3, r2, r3
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1ab      	bne.n	8005c52 <myStrSection+0x3a>
 8005cfa:	e000      	b.n	8005cfe <myStrSection+0xe6>
			if(tmp_pos==p_pos)break;
 8005cfc:	46c0      	nop			; (mov r8, r8)
	}
	if(tmp_pos!=p_pos){
 8005cfe:	2313      	movs	r3, #19
 8005d00:	18fa      	adds	r2, r7, r3
 8005d02:	2320      	movs	r3, #32
 8005d04:	18fb      	adds	r3, r7, r3
 8005d06:	7812      	ldrb	r2, [r2, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d008      	beq.n	8005d20 <myStrSection+0x108>
		result_index=0;
 8005d0e:	2314      	movs	r3, #20
 8005d10:	18fb      	adds	r3, r7, r3
 8005d12:	2200      	movs	r2, #0
 8005d14:	801a      	strh	r2, [r3, #0]
		string_index=-1;
 8005d16:	2316      	movs	r3, #22
 8005d18:	18fb      	adds	r3, r7, r3
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	4252      	negs	r2, r2
 8005d1e:	801a      	strh	r2, [r3, #0]
	}
	p_result[result_index]=0;
 8005d20:	2314      	movs	r3, #20
 8005d22:	18fb      	adds	r3, r7, r3
 8005d24:	2200      	movs	r2, #0
 8005d26:	5e9b      	ldrsh	r3, [r3, r2]
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	18d3      	adds	r3, r2, r3
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	701a      	strb	r2, [r3, #0]

	return string_index;
 8005d30:	2316      	movs	r3, #22
 8005d32:	18fb      	adds	r3, r7, r3
 8005d34:	2200      	movs	r2, #0
 8005d36:	5e9b      	ldrsh	r3, [r3, r2]
}
 8005d38:	0018      	movs	r0, r3
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	b006      	add	sp, #24
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <myLongStr>:


char* myLongStr(signed long p_val,char *p_dest,short p_size,char p_base){
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	0019      	movs	r1, r3
 8005d4c:	1dbb      	adds	r3, r7, #6
 8005d4e:	801a      	strh	r2, [r3, #0]
 8005d50:	1d7b      	adds	r3, r7, #5
 8005d52:	1c0a      	adds	r2, r1, #0
 8005d54:	701a      	strb	r2, [r3, #0]
	unsigned long tmp_index;
	short tmp_size;
	char tmp_val;
	char tmp_iszero;

	tmp_size=0;
 8005d56:	2112      	movs	r1, #18
 8005d58:	187b      	adds	r3, r7, r1
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	801a      	strh	r2, [r3, #0]
	tmp_iszero=1;
 8005d5e:	2311      	movs	r3, #17
 8005d60:	18fb      	adds	r3, r7, r3
 8005d62:	2201      	movs	r2, #1
 8005d64:	701a      	strb	r2, [r3, #0]

	if(p_base==10){
 8005d66:	1d7b      	adds	r3, r7, #5
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	2b0a      	cmp	r3, #10
 8005d6c:	d15f      	bne.n	8005e2e <myLongStr+0xee>
		tmp_index=1000000000;
 8005d6e:	4b6f      	ldr	r3, [pc, #444]	; (8005f2c <myLongStr+0x1ec>)
 8005d70:	617b      	str	r3, [r7, #20]

		if(p_val<0){
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	da56      	bge.n	8005e26 <myLongStr+0xe6>
			p_val*=-1;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	425b      	negs	r3, r3
 8005d7c:	60fb      	str	r3, [r7, #12]
			p_dest[tmp_size]='-';
 8005d7e:	187b      	adds	r3, r7, r1
 8005d80:	2200      	movs	r2, #0
 8005d82:	5e9b      	ldrsh	r3, [r3, r2]
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	18d3      	adds	r3, r2, r3
 8005d88:	222d      	movs	r2, #45	; 0x2d
 8005d8a:	701a      	strb	r2, [r3, #0]
			tmp_size++;
 8005d8c:	187b      	adds	r3, r7, r1
 8005d8e:	2200      	movs	r2, #0
 8005d90:	5e9b      	ldrsh	r3, [r3, r2]
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	3301      	adds	r3, #1
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	187b      	adds	r3, r7, r1
 8005d9a:	801a      	strh	r2, [r3, #0]
		}

		while(tmp_index>0){
 8005d9c:	e043      	b.n	8005e26 <myLongStr+0xe6>
			tmp_val=p_val/tmp_index;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6979      	ldr	r1, [r7, #20]
 8005da2:	0018      	movs	r0, r3
 8005da4:	f7fa f9d6 	bl	8000154 <__udivsi3>
 8005da8:	0003      	movs	r3, r0
 8005daa:	001a      	movs	r2, r3
 8005dac:	2110      	movs	r1, #16
 8005dae:	187b      	adds	r3, r7, r1
 8005db0:	701a      	strb	r2, [r3, #0]
			if(tmp_val>0)tmp_iszero=0;
 8005db2:	187b      	adds	r3, r7, r1
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <myLongStr+0x82>
 8005dba:	2311      	movs	r3, #17
 8005dbc:	18fb      	adds	r3, r7, r3
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	701a      	strb	r2, [r3, #0]
			if(tmp_iszero==0){
 8005dc2:	2311      	movs	r3, #17
 8005dc4:	18fb      	adds	r3, r7, r3
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d113      	bne.n	8005df4 <myLongStr+0xb4>
				p_dest[tmp_size]=tmp_val+0x30;
 8005dcc:	2112      	movs	r1, #18
 8005dce:	187b      	adds	r3, r7, r1
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	5e9b      	ldrsh	r3, [r3, r2]
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	18d3      	adds	r3, r2, r3
 8005dd8:	2210      	movs	r2, #16
 8005dda:	18ba      	adds	r2, r7, r2
 8005ddc:	7812      	ldrb	r2, [r2, #0]
 8005dde:	3230      	adds	r2, #48	; 0x30
 8005de0:	b2d2      	uxtb	r2, r2
 8005de2:	701a      	strb	r2, [r3, #0]
				tmp_size++;
 8005de4:	187b      	adds	r3, r7, r1
 8005de6:	2200      	movs	r2, #0
 8005de8:	5e9b      	ldrsh	r3, [r3, r2]
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	3301      	adds	r3, #1
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	187b      	adds	r3, r7, r1
 8005df2:	801a      	strh	r2, [r3, #0]
			}
			p_val=p_val-(tmp_val*tmp_index);
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	2310      	movs	r3, #16
 8005df8:	18fb      	adds	r3, r7, r3
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	6979      	ldr	r1, [r7, #20]
 8005dfe:	434b      	muls	r3, r1
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	60fb      	str	r3, [r7, #12]
			tmp_index/=10;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	210a      	movs	r1, #10
 8005e08:	0018      	movs	r0, r3
 8005e0a:	f7fa f9a3 	bl	8000154 <__udivsi3>
 8005e0e:	0003      	movs	r3, r0
 8005e10:	617b      	str	r3, [r7, #20]
			if(tmp_size>=(p_size-1))break;
 8005e12:	2312      	movs	r3, #18
 8005e14:	18fb      	adds	r3, r7, r3
 8005e16:	2200      	movs	r2, #0
 8005e18:	5e9a      	ldrsh	r2, [r3, r2]
 8005e1a:	1dbb      	adds	r3, r7, #6
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	5e5b      	ldrsh	r3, [r3, r1]
 8005e20:	3b01      	subs	r3, #1
 8005e22:	429a      	cmp	r2, r3
 8005e24:	da5d      	bge.n	8005ee2 <myLongStr+0x1a2>
		while(tmp_index>0){
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1b8      	bne.n	8005d9e <myLongStr+0x5e>
 8005e2c:	e05c      	b.n	8005ee8 <myLongStr+0x1a8>
		}

	}
	else if(p_base==16){
 8005e2e:	1d7b      	adds	r3, r7, #5
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	2b10      	cmp	r3, #16
 8005e34:	d158      	bne.n	8005ee8 <myLongStr+0x1a8>
		tmp_index=32;
 8005e36:	2320      	movs	r3, #32
 8005e38:	617b      	str	r3, [r7, #20]
		while(tmp_index>0){
 8005e3a:	e04e      	b.n	8005eda <myLongStr+0x19a>
			tmp_val=(p_val>>(tmp_index-4))&0x0f;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	3b04      	subs	r3, #4
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	411a      	asrs	r2, r3
 8005e44:	0013      	movs	r3, r2
 8005e46:	b2da      	uxtb	r2, r3
 8005e48:	2010      	movs	r0, #16
 8005e4a:	183b      	adds	r3, r7, r0
 8005e4c:	210f      	movs	r1, #15
 8005e4e:	400a      	ands	r2, r1
 8005e50:	701a      	strb	r2, [r3, #0]

			if(tmp_val>0)tmp_iszero=0;
 8005e52:	183b      	adds	r3, r7, r0
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <myLongStr+0x122>
 8005e5a:	2311      	movs	r3, #17
 8005e5c:	18fb      	adds	r3, r7, r3
 8005e5e:	2200      	movs	r2, #0
 8005e60:	701a      	strb	r2, [r3, #0]
			if(tmp_iszero==0){
 8005e62:	2311      	movs	r3, #17
 8005e64:	18fb      	adds	r3, r7, r3
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d129      	bne.n	8005ec0 <myLongStr+0x180>
				if(tmp_val<=9)p_dest[tmp_size]=tmp_val+0x30;
 8005e6c:	2110      	movs	r1, #16
 8005e6e:	187b      	adds	r3, r7, r1
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b09      	cmp	r3, #9
 8005e74:	d80b      	bhi.n	8005e8e <myLongStr+0x14e>
 8005e76:	2312      	movs	r3, #18
 8005e78:	18fb      	adds	r3, r7, r3
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	5e9b      	ldrsh	r3, [r3, r2]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	18d3      	adds	r3, r2, r3
 8005e82:	187a      	adds	r2, r7, r1
 8005e84:	7812      	ldrb	r2, [r2, #0]
 8005e86:	3230      	adds	r2, #48	; 0x30
 8005e88:	b2d2      	uxtb	r2, r2
 8005e8a:	701a      	strb	r2, [r3, #0]
 8005e8c:	e00f      	b.n	8005eae <myLongStr+0x16e>
				else if(tmp_val>=10)p_dest[tmp_size]=(tmp_val-10)+'A';
 8005e8e:	2110      	movs	r1, #16
 8005e90:	187b      	adds	r3, r7, r1
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	2b09      	cmp	r3, #9
 8005e96:	d90a      	bls.n	8005eae <myLongStr+0x16e>
 8005e98:	2312      	movs	r3, #18
 8005e9a:	18fb      	adds	r3, r7, r3
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	5e9b      	ldrsh	r3, [r3, r2]
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	18d3      	adds	r3, r2, r3
 8005ea4:	187a      	adds	r2, r7, r1
 8005ea6:	7812      	ldrb	r2, [r2, #0]
 8005ea8:	3237      	adds	r2, #55	; 0x37
 8005eaa:	b2d2      	uxtb	r2, r2
 8005eac:	701a      	strb	r2, [r3, #0]
				tmp_size++;
 8005eae:	2112      	movs	r1, #18
 8005eb0:	187b      	adds	r3, r7, r1
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	5e9b      	ldrsh	r3, [r3, r2]
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	3301      	adds	r3, #1
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	187b      	adds	r3, r7, r1
 8005ebe:	801a      	strh	r2, [r3, #0]
			}

			tmp_index-=4;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	3b04      	subs	r3, #4
 8005ec4:	617b      	str	r3, [r7, #20]
			if(tmp_size>=(p_size-1))break;
 8005ec6:	2312      	movs	r3, #18
 8005ec8:	18fb      	adds	r3, r7, r3
 8005eca:	2200      	movs	r2, #0
 8005ecc:	5e9a      	ldrsh	r2, [r3, r2]
 8005ece:	1dbb      	adds	r3, r7, #6
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	5e5b      	ldrsh	r3, [r3, r1]
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	da05      	bge.n	8005ee6 <myLongStr+0x1a6>
		while(tmp_index>0){
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1ad      	bne.n	8005e3c <myLongStr+0xfc>
 8005ee0:	e002      	b.n	8005ee8 <myLongStr+0x1a8>
			if(tmp_size>=(p_size-1))break;
 8005ee2:	46c0      	nop			; (mov r8, r8)
 8005ee4:	e000      	b.n	8005ee8 <myLongStr+0x1a8>
			if(tmp_size>=(p_size-1))break;
 8005ee6:	46c0      	nop			; (mov r8, r8)
		}

	}

	if(tmp_iszero==1){
 8005ee8:	2311      	movs	r3, #17
 8005eea:	18fb      	adds	r3, r7, r3
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d10f      	bne.n	8005f12 <myLongStr+0x1d2>
		p_dest[tmp_size]='0';
 8005ef2:	2112      	movs	r1, #18
 8005ef4:	187b      	adds	r3, r7, r1
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	5e9b      	ldrsh	r3, [r3, r2]
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	18d3      	adds	r3, r2, r3
 8005efe:	2230      	movs	r2, #48	; 0x30
 8005f00:	701a      	strb	r2, [r3, #0]
		tmp_size++;
 8005f02:	187b      	adds	r3, r7, r1
 8005f04:	2200      	movs	r2, #0
 8005f06:	5e9b      	ldrsh	r3, [r3, r2]
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	187b      	adds	r3, r7, r1
 8005f10:	801a      	strh	r2, [r3, #0]
	}

	p_dest[tmp_size]=0;
 8005f12:	2312      	movs	r3, #18
 8005f14:	18fb      	adds	r3, r7, r3
 8005f16:	2200      	movs	r2, #0
 8005f18:	5e9b      	ldrsh	r3, [r3, r2]
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	18d3      	adds	r3, r2, r3
 8005f1e:	2200      	movs	r2, #0
 8005f20:	701a      	strb	r2, [r3, #0]
	return p_dest;
 8005f22:	68bb      	ldr	r3, [r7, #8]
}
 8005f24:	0018      	movs	r0, r3
 8005f26:	46bd      	mov	sp, r7
 8005f28:	b006      	add	sp, #24
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	3b9aca00 	.word	0x3b9aca00

08005f30 <myStrLong>:

long myStrLong(char *p_str,char p_base){
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	000a      	movs	r2, r1
 8005f3a:	1cfb      	adds	r3, r7, #3
 8005f3c:	701a      	strb	r2, [r3, #0]
	long tmp_long;
	tmp_long=0;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60fb      	str	r3, [r7, #12]
	if(p_base==10){
 8005f42:	1cfb      	adds	r3, r7, #3
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	2b0a      	cmp	r3, #10
 8005f48:	d120      	bne.n	8005f8c <myStrLong+0x5c>
		while(*p_str != 0){
 8005f4a:	e01a      	b.n	8005f82 <myStrLong+0x52>
			if((*p_str>='0')&&(*p_str<='9')){
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	2b2f      	cmp	r3, #47	; 0x2f
 8005f52:	d90f      	bls.n	8005f74 <myStrLong+0x44>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2b39      	cmp	r3, #57	; 0x39
 8005f5a:	d80b      	bhi.n	8005f74 <myStrLong+0x44>
				tmp_long*=10;
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	0013      	movs	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	189b      	adds	r3, r3, r2
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	60fb      	str	r3, [r7, #12]
				tmp_long+=*p_str-0x30;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	3b30      	subs	r3, #48	; 0x30
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	18d3      	adds	r3, r2, r3
 8005f72:	60fb      	str	r3, [r7, #12]
			}
			if(*p_str>='.')
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b2d      	cmp	r3, #45	; 0x2d
 8005f7a:	d902      	bls.n	8005f82 <myStrLong+0x52>
			p_str++;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	607b      	str	r3, [r7, #4]
		while(*p_str != 0){
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1e0      	bne.n	8005f4c <myStrLong+0x1c>
 8005f8a:	e03e      	b.n	800600a <myStrLong+0xda>
		}
	}
	else if(p_base==16){
 8005f8c:	1cfb      	adds	r3, r7, #3
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2b10      	cmp	r3, #16
 8005f92:	d13a      	bne.n	800600a <myStrLong+0xda>
		while(*p_str != 0){
 8005f94:	e035      	b.n	8006002 <myStrLong+0xd2>
			if(*p_str>='0'){
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	2b2f      	cmp	r3, #47	; 0x2f
 8005f9c:	d92e      	bls.n	8005ffc <myStrLong+0xcc>
				tmp_long=tmp_long<<4;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	011b      	lsls	r3, r3, #4
 8005fa2:	60fb      	str	r3, [r7, #12]
				if((*p_str>='0')&&(*p_str<='9'))tmp_long|=*p_str-'0';
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	2b2f      	cmp	r3, #47	; 0x2f
 8005faa:	d90a      	bls.n	8005fc2 <myStrLong+0x92>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	2b39      	cmp	r3, #57	; 0x39
 8005fb2:	d806      	bhi.n	8005fc2 <myStrLong+0x92>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	3b30      	subs	r3, #48	; 0x30
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	e01c      	b.n	8005ffc <myStrLong+0xcc>
				else if((*p_str>='a')&&(*p_str<='f'))tmp_long|=(*p_str-'a')+10;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	2b60      	cmp	r3, #96	; 0x60
 8005fc8:	d90a      	bls.n	8005fe0 <myStrLong+0xb0>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	2b66      	cmp	r3, #102	; 0x66
 8005fd0:	d806      	bhi.n	8005fe0 <myStrLong+0xb0>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	3b57      	subs	r3, #87	; 0x57
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	60fb      	str	r3, [r7, #12]
 8005fde:	e00d      	b.n	8005ffc <myStrLong+0xcc>
				else if((*p_str>='A')&&(*p_str<='F'))tmp_long|=(*p_str-'A')+10;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	2b40      	cmp	r3, #64	; 0x40
 8005fe6:	d909      	bls.n	8005ffc <myStrLong+0xcc>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	2b46      	cmp	r3, #70	; 0x46
 8005fee:	d805      	bhi.n	8005ffc <myStrLong+0xcc>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	3b37      	subs	r3, #55	; 0x37
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	60fb      	str	r3, [r7, #12]
			}
			p_str++;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	3301      	adds	r3, #1
 8006000:	607b      	str	r3, [r7, #4]
		while(*p_str != 0){
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1c5      	bne.n	8005f96 <myStrLong+0x66>
		}
	}
	return tmp_long;
 800600a:	68fb      	ldr	r3, [r7, #12]
}
 800600c:	0018      	movs	r0, r3
 800600e:	46bd      	mov	sp, r7
 8006010:	b004      	add	sp, #16
 8006012:	bd80      	pop	{r7, pc}

08006014 <ssd1306_Reset>:

#define SSD1306_USE_I2C		//bug

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8006014:	b580      	push	{r7, lr}
 8006016:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8006018:	46c0      	nop			; (mov r8, r8)
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
	...

08006020 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af04      	add	r7, sp, #16
 8006026:	0002      	movs	r2, r0
 8006028:	1dfb      	adds	r3, r7, #7
 800602a:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800602c:	4808      	ldr	r0, [pc, #32]	; (8006050 <ssd1306_WriteCommand+0x30>)
 800602e:	2301      	movs	r3, #1
 8006030:	425b      	negs	r3, r3
 8006032:	9302      	str	r3, [sp, #8]
 8006034:	2301      	movs	r3, #1
 8006036:	9301      	str	r3, [sp, #4]
 8006038:	1dfb      	adds	r3, r7, #7
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	2301      	movs	r3, #1
 800603e:	2200      	movs	r2, #0
 8006040:	2178      	movs	r1, #120	; 0x78
 8006042:	f001 fff1 	bl	8008028 <HAL_I2C_Mem_Write>
}
 8006046:	46c0      	nop			; (mov r8, r8)
 8006048:	46bd      	mov	sp, r7
 800604a:	b002      	add	sp, #8
 800604c:	bd80      	pop	{r7, pc}
 800604e:	46c0      	nop			; (mov r8, r8)
 8006050:	20000b64 	.word	0x20000b64

08006054 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af04      	add	r7, sp, #16
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	b29b      	uxth	r3, r3
 8006062:	4808      	ldr	r0, [pc, #32]	; (8006084 <ssd1306_WriteData+0x30>)
 8006064:	2201      	movs	r2, #1
 8006066:	4252      	negs	r2, r2
 8006068:	9202      	str	r2, [sp, #8]
 800606a:	9301      	str	r3, [sp, #4]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	2301      	movs	r3, #1
 8006072:	2240      	movs	r2, #64	; 0x40
 8006074:	2178      	movs	r1, #120	; 0x78
 8006076:	f001 ffd7 	bl	8008028 <HAL_I2C_Mem_Write>
}
 800607a:	46c0      	nop			; (mov r8, r8)
 800607c:	46bd      	mov	sp, r7
 800607e:	b002      	add	sp, #8
 8006080:	bd80      	pop	{r7, pc}
 8006082:	46c0      	nop			; (mov r8, r8)
 8006084:	20000b64 	.word	0x20000b64

08006088 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8006088:	b580      	push	{r7, lr}
 800608a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800608c:	f7ff ffc2 	bl	8006014 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8006090:	2064      	movs	r0, #100	; 0x64
 8006092:	f000 fec5 	bl	8006e20 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8006096:	2000      	movs	r0, #0
 8006098:	f000 fa0c 	bl	80064b4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800609c:	2020      	movs	r0, #32
 800609e:	f7ff ffbf 	bl	8006020 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80060a2:	2000      	movs	r0, #0
 80060a4:	f7ff ffbc 	bl	8006020 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80060a8:	20b0      	movs	r0, #176	; 0xb0
 80060aa:	f7ff ffb9 	bl	8006020 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80060ae:	20c8      	movs	r0, #200	; 0xc8
 80060b0:	f7ff ffb6 	bl	8006020 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80060b4:	2000      	movs	r0, #0
 80060b6:	f7ff ffb3 	bl	8006020 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80060ba:	2010      	movs	r0, #16
 80060bc:	f7ff ffb0 	bl	8006020 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80060c0:	2040      	movs	r0, #64	; 0x40
 80060c2:	f7ff ffad 	bl	8006020 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80060c6:	20ff      	movs	r0, #255	; 0xff
 80060c8:	f000 f9dc 	bl	8006484 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80060cc:	20a1      	movs	r0, #161	; 0xa1
 80060ce:	f7ff ffa7 	bl	8006020 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80060d2:	20a6      	movs	r0, #166	; 0xa6
 80060d4:	f7ff ffa4 	bl	8006020 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80060d8:	20a8      	movs	r0, #168	; 0xa8
 80060da:	f7ff ffa1 	bl	8006020 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80060de:	203f      	movs	r0, #63	; 0x3f
 80060e0:	f7ff ff9e 	bl	8006020 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80060e4:	20a4      	movs	r0, #164	; 0xa4
 80060e6:	f7ff ff9b 	bl	8006020 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80060ea:	20d3      	movs	r0, #211	; 0xd3
 80060ec:	f7ff ff98 	bl	8006020 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80060f0:	2000      	movs	r0, #0
 80060f2:	f7ff ff95 	bl	8006020 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80060f6:	20d5      	movs	r0, #213	; 0xd5
 80060f8:	f7ff ff92 	bl	8006020 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80060fc:	20f0      	movs	r0, #240	; 0xf0
 80060fe:	f7ff ff8f 	bl	8006020 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8006102:	20d9      	movs	r0, #217	; 0xd9
 8006104:	f7ff ff8c 	bl	8006020 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8006108:	2022      	movs	r0, #34	; 0x22
 800610a:	f7ff ff89 	bl	8006020 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800610e:	20da      	movs	r0, #218	; 0xda
 8006110:	f7ff ff86 	bl	8006020 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8006114:	2012      	movs	r0, #18
 8006116:	f7ff ff83 	bl	8006020 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800611a:	20db      	movs	r0, #219	; 0xdb
 800611c:	f7ff ff80 	bl	8006020 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8006120:	2020      	movs	r0, #32
 8006122:	f7ff ff7d 	bl	8006020 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8006126:	208d      	movs	r0, #141	; 0x8d
 8006128:	f7ff ff7a 	bl	8006020 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800612c:	2014      	movs	r0, #20
 800612e:	f7ff ff77 	bl	8006020 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8006132:	2001      	movs	r0, #1
 8006134:	f000 f9be 	bl	80064b4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8006138:	2000      	movs	r0, #0
 800613a:	f000 f811 	bl	8006160 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800613e:	f000 f833 	bl	80061a8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8006142:	4b06      	ldr	r3, [pc, #24]	; (800615c <ssd1306_Init+0xd4>)
 8006144:	2200      	movs	r2, #0
 8006146:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8006148:	4b04      	ldr	r3, [pc, #16]	; (800615c <ssd1306_Init+0xd4>)
 800614a:	2200      	movs	r2, #0
 800614c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800614e:	4b03      	ldr	r3, [pc, #12]	; (800615c <ssd1306_Init+0xd4>)
 8006150:	2201      	movs	r2, #1
 8006152:	711a      	strb	r2, [r3, #4]
}
 8006154:	46c0      	nop			; (mov r8, r8)
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	46c0      	nop			; (mov r8, r8)
 800615c:	20001644 	.word	0x20001644

08006160 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	0002      	movs	r2, r0
 8006168:	1dfb      	adds	r3, r7, #7
 800616a:	701a      	strb	r2, [r3, #0]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800616c:	2300      	movs	r3, #0
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	e00e      	b.n	8006190 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8006172:	1dfb      	adds	r3, r7, #7
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <ssd1306_Fill+0x1e>
 800617a:	2100      	movs	r1, #0
 800617c:	e000      	b.n	8006180 <ssd1306_Fill+0x20>
 800617e:	21ff      	movs	r1, #255	; 0xff
 8006180:	4a08      	ldr	r2, [pc, #32]	; (80061a4 <ssd1306_Fill+0x44>)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	18d3      	adds	r3, r2, r3
 8006186:	1c0a      	adds	r2, r1, #0
 8006188:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	3301      	adds	r3, #1
 800618e:	60fb      	str	r3, [r7, #12]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	2380      	movs	r3, #128	; 0x80
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	429a      	cmp	r2, r3
 8006198:	d3eb      	bcc.n	8006172 <ssd1306_Fill+0x12>
    }
}
 800619a:	46c0      	nop			; (mov r8, r8)
 800619c:	46c0      	nop			; (mov r8, r8)
 800619e:	46bd      	mov	sp, r7
 80061a0:	b004      	add	sp, #16
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	20001244 	.word	0x20001244

080061a8 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80061ae:	1dfb      	adds	r3, r7, #7
 80061b0:	2200      	movs	r2, #0
 80061b2:	701a      	strb	r2, [r3, #0]
 80061b4:	e01a      	b.n	80061ec <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80061b6:	1dfb      	adds	r3, r7, #7
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	3b50      	subs	r3, #80	; 0x50
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	0018      	movs	r0, r3
 80061c0:	f7ff ff2e 	bl	8006020 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80061c4:	2000      	movs	r0, #0
 80061c6:	f7ff ff2b 	bl	8006020 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80061ca:	2010      	movs	r0, #16
 80061cc:	f7ff ff28 	bl	8006020 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80061d0:	1dfb      	adds	r3, r7, #7
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	01da      	lsls	r2, r3, #7
 80061d6:	4b0a      	ldr	r3, [pc, #40]	; (8006200 <ssd1306_UpdateScreen+0x58>)
 80061d8:	18d3      	adds	r3, r2, r3
 80061da:	2180      	movs	r1, #128	; 0x80
 80061dc:	0018      	movs	r0, r3
 80061de:	f7ff ff39 	bl	8006054 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80061e2:	1dfb      	adds	r3, r7, #7
 80061e4:	781a      	ldrb	r2, [r3, #0]
 80061e6:	1dfb      	adds	r3, r7, #7
 80061e8:	3201      	adds	r2, #1
 80061ea:	701a      	strb	r2, [r3, #0]
 80061ec:	1dfb      	adds	r3, r7, #7
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	2b07      	cmp	r3, #7
 80061f2:	d9e0      	bls.n	80061b6 <ssd1306_UpdateScreen+0xe>
    }
}
 80061f4:	46c0      	nop			; (mov r8, r8)
 80061f6:	46c0      	nop			; (mov r8, r8)
 80061f8:	46bd      	mov	sp, r7
 80061fa:	b002      	add	sp, #8
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	46c0      	nop			; (mov r8, r8)
 8006200:	20001244 	.word	0x20001244

08006204 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8006204:	b590      	push	{r4, r7, lr}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	0004      	movs	r4, r0
 800620c:	0008      	movs	r0, r1
 800620e:	0011      	movs	r1, r2
 8006210:	1dfb      	adds	r3, r7, #7
 8006212:	1c22      	adds	r2, r4, #0
 8006214:	701a      	strb	r2, [r3, #0]
 8006216:	1dbb      	adds	r3, r7, #6
 8006218:	1c02      	adds	r2, r0, #0
 800621a:	701a      	strb	r2, [r3, #0]
 800621c:	1d7b      	adds	r3, r7, #5
 800621e:	1c0a      	adds	r2, r1, #0
 8006220:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8006222:	1dfb      	adds	r3, r7, #7
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	b25b      	sxtb	r3, r3
 8006228:	2b00      	cmp	r3, #0
 800622a:	db47      	blt.n	80062bc <ssd1306_DrawPixel+0xb8>
 800622c:	1dbb      	adds	r3, r7, #6
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	2b3f      	cmp	r3, #63	; 0x3f
 8006232:	d843      	bhi.n	80062bc <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8006234:	1d7b      	adds	r3, r7, #5
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d11e      	bne.n	800627a <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800623c:	1dfb      	adds	r3, r7, #7
 800623e:	781a      	ldrb	r2, [r3, #0]
 8006240:	1dbb      	adds	r3, r7, #6
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	08db      	lsrs	r3, r3, #3
 8006246:	b2d8      	uxtb	r0, r3
 8006248:	0003      	movs	r3, r0
 800624a:	01db      	lsls	r3, r3, #7
 800624c:	18d3      	adds	r3, r2, r3
 800624e:	4a1d      	ldr	r2, [pc, #116]	; (80062c4 <ssd1306_DrawPixel+0xc0>)
 8006250:	5cd3      	ldrb	r3, [r2, r3]
 8006252:	b25a      	sxtb	r2, r3
 8006254:	1dbb      	adds	r3, r7, #6
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	2107      	movs	r1, #7
 800625a:	400b      	ands	r3, r1
 800625c:	2101      	movs	r1, #1
 800625e:	4099      	lsls	r1, r3
 8006260:	000b      	movs	r3, r1
 8006262:	b25b      	sxtb	r3, r3
 8006264:	4313      	orrs	r3, r2
 8006266:	b259      	sxtb	r1, r3
 8006268:	1dfb      	adds	r3, r7, #7
 800626a:	781a      	ldrb	r2, [r3, #0]
 800626c:	0003      	movs	r3, r0
 800626e:	01db      	lsls	r3, r3, #7
 8006270:	18d3      	adds	r3, r2, r3
 8006272:	b2c9      	uxtb	r1, r1
 8006274:	4a13      	ldr	r2, [pc, #76]	; (80062c4 <ssd1306_DrawPixel+0xc0>)
 8006276:	54d1      	strb	r1, [r2, r3]
 8006278:	e021      	b.n	80062be <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800627a:	1dfb      	adds	r3, r7, #7
 800627c:	781a      	ldrb	r2, [r3, #0]
 800627e:	1dbb      	adds	r3, r7, #6
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	08db      	lsrs	r3, r3, #3
 8006284:	b2d8      	uxtb	r0, r3
 8006286:	0003      	movs	r3, r0
 8006288:	01db      	lsls	r3, r3, #7
 800628a:	18d3      	adds	r3, r2, r3
 800628c:	4a0d      	ldr	r2, [pc, #52]	; (80062c4 <ssd1306_DrawPixel+0xc0>)
 800628e:	5cd3      	ldrb	r3, [r2, r3]
 8006290:	b25b      	sxtb	r3, r3
 8006292:	1dba      	adds	r2, r7, #6
 8006294:	7812      	ldrb	r2, [r2, #0]
 8006296:	2107      	movs	r1, #7
 8006298:	400a      	ands	r2, r1
 800629a:	2101      	movs	r1, #1
 800629c:	4091      	lsls	r1, r2
 800629e:	000a      	movs	r2, r1
 80062a0:	b252      	sxtb	r2, r2
 80062a2:	43d2      	mvns	r2, r2
 80062a4:	b252      	sxtb	r2, r2
 80062a6:	4013      	ands	r3, r2
 80062a8:	b259      	sxtb	r1, r3
 80062aa:	1dfb      	adds	r3, r7, #7
 80062ac:	781a      	ldrb	r2, [r3, #0]
 80062ae:	0003      	movs	r3, r0
 80062b0:	01db      	lsls	r3, r3, #7
 80062b2:	18d3      	adds	r3, r2, r3
 80062b4:	b2c9      	uxtb	r1, r1
 80062b6:	4a03      	ldr	r2, [pc, #12]	; (80062c4 <ssd1306_DrawPixel+0xc0>)
 80062b8:	54d1      	strb	r1, [r2, r3]
 80062ba:	e000      	b.n	80062be <ssd1306_DrawPixel+0xba>
        return;
 80062bc:	46c0      	nop			; (mov r8, r8)
    }
}
 80062be:	46bd      	mov	sp, r7
 80062c0:	b003      	add	sp, #12
 80062c2:	bd90      	pop	{r4, r7, pc}
 80062c4:	20001244 	.word	0x20001244

080062c8 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80062c8:	b590      	push	{r4, r7, lr}
 80062ca:	b089      	sub	sp, #36	; 0x24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	0004      	movs	r4, r0
 80062d0:	1d38      	adds	r0, r7, #4
 80062d2:	6001      	str	r1, [r0, #0]
 80062d4:	6042      	str	r2, [r0, #4]
 80062d6:	0019      	movs	r1, r3
 80062d8:	200f      	movs	r0, #15
 80062da:	183b      	adds	r3, r7, r0
 80062dc:	1c22      	adds	r2, r4, #0
 80062de:	701a      	strb	r2, [r3, #0]
 80062e0:	230e      	movs	r3, #14
 80062e2:	18fb      	adds	r3, r7, r3
 80062e4:	1c0a      	adds	r2, r1, #0
 80062e6:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80062e8:	183b      	adds	r3, r7, r0
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	2b1f      	cmp	r3, #31
 80062ee:	d903      	bls.n	80062f8 <ssd1306_WriteChar+0x30>
 80062f0:	183b      	adds	r3, r7, r0
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b7e      	cmp	r3, #126	; 0x7e
 80062f6:	d901      	bls.n	80062fc <ssd1306_WriteChar+0x34>
        return 0;
 80062f8:	2300      	movs	r3, #0
 80062fa:	e078      	b.n	80063ee <ssd1306_WriteChar+0x126>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80062fc:	4b3e      	ldr	r3, [pc, #248]	; (80063f8 <ssd1306_WriteChar+0x130>)
 80062fe:	881b      	ldrh	r3, [r3, #0]
 8006300:	001a      	movs	r2, r3
 8006302:	1d3b      	adds	r3, r7, #4
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	18d3      	adds	r3, r2, r3
 8006308:	2b80      	cmp	r3, #128	; 0x80
 800630a:	dc07      	bgt.n	800631c <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800630c:	4b3a      	ldr	r3, [pc, #232]	; (80063f8 <ssd1306_WriteChar+0x130>)
 800630e:	885b      	ldrh	r3, [r3, #2]
 8006310:	001a      	movs	r2, r3
 8006312:	1d3b      	adds	r3, r7, #4
 8006314:	785b      	ldrb	r3, [r3, #1]
 8006316:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8006318:	2b40      	cmp	r3, #64	; 0x40
 800631a:	dd01      	ble.n	8006320 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 800631c:	2300      	movs	r3, #0
 800631e:	e066      	b.n	80063ee <ssd1306_WriteChar+0x126>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8006320:	2300      	movs	r3, #0
 8006322:	61fb      	str	r3, [r7, #28]
 8006324:	e051      	b.n	80063ca <ssd1306_WriteChar+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8006326:	1d3b      	adds	r3, r7, #4
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	230f      	movs	r3, #15
 800632c:	18fb      	adds	r3, r7, r3
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	3b20      	subs	r3, #32
 8006332:	1d39      	adds	r1, r7, #4
 8006334:	7849      	ldrb	r1, [r1, #1]
 8006336:	434b      	muls	r3, r1
 8006338:	0019      	movs	r1, r3
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	18cb      	adds	r3, r1, r3
 800633e:	005b      	lsls	r3, r3, #1
 8006340:	18d3      	adds	r3, r2, r3
 8006342:	881b      	ldrh	r3, [r3, #0]
 8006344:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8006346:	2300      	movs	r3, #0
 8006348:	61bb      	str	r3, [r7, #24]
 800634a:	e035      	b.n	80063b8 <ssd1306_WriteChar+0xf0>
            if((b << j) & 0x8000)  {
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	409a      	lsls	r2, r3
 8006352:	2380      	movs	r3, #128	; 0x80
 8006354:	021b      	lsls	r3, r3, #8
 8006356:	4013      	ands	r3, r2
 8006358:	d014      	beq.n	8006384 <ssd1306_WriteChar+0xbc>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800635a:	4b27      	ldr	r3, [pc, #156]	; (80063f8 <ssd1306_WriteChar+0x130>)
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	b2da      	uxtb	r2, r3
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	b2db      	uxtb	r3, r3
 8006364:	18d3      	adds	r3, r2, r3
 8006366:	b2d8      	uxtb	r0, r3
 8006368:	4b23      	ldr	r3, [pc, #140]	; (80063f8 <ssd1306_WriteChar+0x130>)
 800636a:	885b      	ldrh	r3, [r3, #2]
 800636c:	b2da      	uxtb	r2, r3
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	b2db      	uxtb	r3, r3
 8006372:	18d3      	adds	r3, r2, r3
 8006374:	b2d9      	uxtb	r1, r3
 8006376:	230e      	movs	r3, #14
 8006378:	18fb      	adds	r3, r7, r3
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	001a      	movs	r2, r3
 800637e:	f7ff ff41 	bl	8006204 <ssd1306_DrawPixel>
 8006382:	e016      	b.n	80063b2 <ssd1306_WriteChar+0xea>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8006384:	4b1c      	ldr	r3, [pc, #112]	; (80063f8 <ssd1306_WriteChar+0x130>)
 8006386:	881b      	ldrh	r3, [r3, #0]
 8006388:	b2da      	uxtb	r2, r3
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	b2db      	uxtb	r3, r3
 800638e:	18d3      	adds	r3, r2, r3
 8006390:	b2d8      	uxtb	r0, r3
 8006392:	4b19      	ldr	r3, [pc, #100]	; (80063f8 <ssd1306_WriteChar+0x130>)
 8006394:	885b      	ldrh	r3, [r3, #2]
 8006396:	b2da      	uxtb	r2, r3
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	b2db      	uxtb	r3, r3
 800639c:	18d3      	adds	r3, r2, r3
 800639e:	b2d9      	uxtb	r1, r3
 80063a0:	230e      	movs	r3, #14
 80063a2:	18fb      	adds	r3, r7, r3
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	425a      	negs	r2, r3
 80063a8:	4153      	adcs	r3, r2
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	001a      	movs	r2, r3
 80063ae:	f7ff ff29 	bl	8006204 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	3301      	adds	r3, #1
 80063b6:	61bb      	str	r3, [r7, #24]
 80063b8:	1d3b      	adds	r3, r7, #4
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	001a      	movs	r2, r3
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d3c3      	bcc.n	800634c <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	3301      	adds	r3, #1
 80063c8:	61fb      	str	r3, [r7, #28]
 80063ca:	1d3b      	adds	r3, r7, #4
 80063cc:	785b      	ldrb	r3, [r3, #1]
 80063ce:	001a      	movs	r2, r3
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d3a7      	bcc.n	8006326 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80063d6:	4b08      	ldr	r3, [pc, #32]	; (80063f8 <ssd1306_WriteChar+0x130>)
 80063d8:	881a      	ldrh	r2, [r3, #0]
 80063da:	1d3b      	adds	r3, r7, #4
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	b29b      	uxth	r3, r3
 80063e0:	18d3      	adds	r3, r2, r3
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	4b04      	ldr	r3, [pc, #16]	; (80063f8 <ssd1306_WriteChar+0x130>)
 80063e6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80063e8:	230f      	movs	r3, #15
 80063ea:	18fb      	adds	r3, r7, r3
 80063ec:	781b      	ldrb	r3, [r3, #0]
}
 80063ee:	0018      	movs	r0, r3
 80063f0:	46bd      	mov	sp, r7
 80063f2:	b009      	add	sp, #36	; 0x24
 80063f4:	bd90      	pop	{r4, r7, pc}
 80063f6:	46c0      	nop			; (mov r8, r8)
 80063f8:	20001644 	.word	0x20001644

080063fc <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	1d38      	adds	r0, r7, #4
 8006406:	6001      	str	r1, [r0, #0]
 8006408:	6042      	str	r2, [r0, #4]
 800640a:	001a      	movs	r2, r3
 800640c:	1cfb      	adds	r3, r7, #3
 800640e:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str) {
 8006410:	e014      	b.n	800643c <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	7818      	ldrb	r0, [r3, #0]
 8006416:	1cfb      	adds	r3, r7, #3
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	1d3a      	adds	r2, r7, #4
 800641c:	6811      	ldr	r1, [r2, #0]
 800641e:	6852      	ldr	r2, [r2, #4]
 8006420:	f7ff ff52 	bl	80062c8 <ssd1306_WriteChar>
 8006424:	0003      	movs	r3, r0
 8006426:	001a      	movs	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	429a      	cmp	r2, r3
 800642e:	d002      	beq.n	8006436 <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	e008      	b.n	8006448 <ssd1306_WriteString+0x4c>
        }
        
        // Next char
        str++;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	3301      	adds	r3, #1
 800643a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1e6      	bne.n	8006412 <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	781b      	ldrb	r3, [r3, #0]
}
 8006448:	0018      	movs	r0, r3
 800644a:	46bd      	mov	sp, r7
 800644c:	b004      	add	sp, #16
 800644e:	bd80      	pop	{r7, pc}

08006450 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	0002      	movs	r2, r0
 8006458:	1dfb      	adds	r3, r7, #7
 800645a:	701a      	strb	r2, [r3, #0]
 800645c:	1dbb      	adds	r3, r7, #6
 800645e:	1c0a      	adds	r2, r1, #0
 8006460:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8006462:	1dfb      	adds	r3, r7, #7
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	b29a      	uxth	r2, r3
 8006468:	4b05      	ldr	r3, [pc, #20]	; (8006480 <ssd1306_SetCursor+0x30>)
 800646a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800646c:	1dbb      	adds	r3, r7, #6
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	b29a      	uxth	r2, r3
 8006472:	4b03      	ldr	r3, [pc, #12]	; (8006480 <ssd1306_SetCursor+0x30>)
 8006474:	805a      	strh	r2, [r3, #2]
}
 8006476:	46c0      	nop			; (mov r8, r8)
 8006478:	46bd      	mov	sp, r7
 800647a:	b002      	add	sp, #8
 800647c:	bd80      	pop	{r7, pc}
 800647e:	46c0      	nop			; (mov r8, r8)
 8006480:	20001644 	.word	0x20001644

08006484 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	0002      	movs	r2, r0
 800648c:	1dfb      	adds	r3, r7, #7
 800648e:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8006490:	210f      	movs	r1, #15
 8006492:	187b      	adds	r3, r7, r1
 8006494:	2281      	movs	r2, #129	; 0x81
 8006496:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8006498:	187b      	adds	r3, r7, r1
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	0018      	movs	r0, r3
 800649e:	f7ff fdbf 	bl	8006020 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80064a2:	1dfb      	adds	r3, r7, #7
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	0018      	movs	r0, r3
 80064a8:	f7ff fdba 	bl	8006020 <ssd1306_WriteCommand>
}
 80064ac:	46c0      	nop			; (mov r8, r8)
 80064ae:	46bd      	mov	sp, r7
 80064b0:	b004      	add	sp, #16
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	0002      	movs	r2, r0
 80064bc:	1dfb      	adds	r3, r7, #7
 80064be:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 80064c0:	1dfb      	adds	r3, r7, #7
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d007      	beq.n	80064d8 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 80064c8:	230f      	movs	r3, #15
 80064ca:	18fb      	adds	r3, r7, r3
 80064cc:	22af      	movs	r2, #175	; 0xaf
 80064ce:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 80064d0:	4b0a      	ldr	r3, [pc, #40]	; (80064fc <ssd1306_SetDisplayOn+0x48>)
 80064d2:	2201      	movs	r2, #1
 80064d4:	715a      	strb	r2, [r3, #5]
 80064d6:	e006      	b.n	80064e6 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 80064d8:	230f      	movs	r3, #15
 80064da:	18fb      	adds	r3, r7, r3
 80064dc:	22ae      	movs	r2, #174	; 0xae
 80064de:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 80064e0:	4b06      	ldr	r3, [pc, #24]	; (80064fc <ssd1306_SetDisplayOn+0x48>)
 80064e2:	2200      	movs	r2, #0
 80064e4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80064e6:	230f      	movs	r3, #15
 80064e8:	18fb      	adds	r3, r7, r3
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	0018      	movs	r0, r3
 80064ee:	f7ff fd97 	bl	8006020 <ssd1306_WriteCommand>
}
 80064f2:	46c0      	nop			; (mov r8, r8)
 80064f4:	46bd      	mov	sp, r7
 80064f6:	b004      	add	sp, #16
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	46c0      	nop			; (mov r8, r8)
 80064fc:	20001644 	.word	0x20001644

08006500 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006506:	4b0f      	ldr	r3, [pc, #60]	; (8006544 <HAL_MspInit+0x44>)
 8006508:	699a      	ldr	r2, [r3, #24]
 800650a:	4b0e      	ldr	r3, [pc, #56]	; (8006544 <HAL_MspInit+0x44>)
 800650c:	2101      	movs	r1, #1
 800650e:	430a      	orrs	r2, r1
 8006510:	619a      	str	r2, [r3, #24]
 8006512:	4b0c      	ldr	r3, [pc, #48]	; (8006544 <HAL_MspInit+0x44>)
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	2201      	movs	r2, #1
 8006518:	4013      	ands	r3, r2
 800651a:	607b      	str	r3, [r7, #4]
 800651c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800651e:	4b09      	ldr	r3, [pc, #36]	; (8006544 <HAL_MspInit+0x44>)
 8006520:	69da      	ldr	r2, [r3, #28]
 8006522:	4b08      	ldr	r3, [pc, #32]	; (8006544 <HAL_MspInit+0x44>)
 8006524:	2180      	movs	r1, #128	; 0x80
 8006526:	0549      	lsls	r1, r1, #21
 8006528:	430a      	orrs	r2, r1
 800652a:	61da      	str	r2, [r3, #28]
 800652c:	4b05      	ldr	r3, [pc, #20]	; (8006544 <HAL_MspInit+0x44>)
 800652e:	69da      	ldr	r2, [r3, #28]
 8006530:	2380      	movs	r3, #128	; 0x80
 8006532:	055b      	lsls	r3, r3, #21
 8006534:	4013      	ands	r3, r2
 8006536:	603b      	str	r3, [r7, #0]
 8006538:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800653a:	46c0      	nop			; (mov r8, r8)
 800653c:	46bd      	mov	sp, r7
 800653e:	b002      	add	sp, #8
 8006540:	bd80      	pop	{r7, pc}
 8006542:	46c0      	nop			; (mov r8, r8)
 8006544:	40021000 	.word	0x40021000

08006548 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006548:	b590      	push	{r4, r7, lr}
 800654a:	b08b      	sub	sp, #44	; 0x2c
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006550:	2414      	movs	r4, #20
 8006552:	193b      	adds	r3, r7, r4
 8006554:	0018      	movs	r0, r3
 8006556:	2314      	movs	r3, #20
 8006558:	001a      	movs	r2, r3
 800655a:	2100      	movs	r1, #0
 800655c:	f006 f803 	bl	800c566 <memset>
  if(hadc->Instance==ADC1)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a2d      	ldr	r2, [pc, #180]	; (800661c <HAL_ADC_MspInit+0xd4>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d153      	bne.n	8006612 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800656a:	4b2d      	ldr	r3, [pc, #180]	; (8006620 <HAL_ADC_MspInit+0xd8>)
 800656c:	699a      	ldr	r2, [r3, #24]
 800656e:	4b2c      	ldr	r3, [pc, #176]	; (8006620 <HAL_ADC_MspInit+0xd8>)
 8006570:	2180      	movs	r1, #128	; 0x80
 8006572:	0089      	lsls	r1, r1, #2
 8006574:	430a      	orrs	r2, r1
 8006576:	619a      	str	r2, [r3, #24]
 8006578:	4b29      	ldr	r3, [pc, #164]	; (8006620 <HAL_ADC_MspInit+0xd8>)
 800657a:	699a      	ldr	r2, [r3, #24]
 800657c:	2380      	movs	r3, #128	; 0x80
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4013      	ands	r3, r2
 8006582:	613b      	str	r3, [r7, #16]
 8006584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006586:	4b26      	ldr	r3, [pc, #152]	; (8006620 <HAL_ADC_MspInit+0xd8>)
 8006588:	695a      	ldr	r2, [r3, #20]
 800658a:	4b25      	ldr	r3, [pc, #148]	; (8006620 <HAL_ADC_MspInit+0xd8>)
 800658c:	2180      	movs	r1, #128	; 0x80
 800658e:	0289      	lsls	r1, r1, #10
 8006590:	430a      	orrs	r2, r1
 8006592:	615a      	str	r2, [r3, #20]
 8006594:	4b22      	ldr	r3, [pc, #136]	; (8006620 <HAL_ADC_MspInit+0xd8>)
 8006596:	695a      	ldr	r2, [r3, #20]
 8006598:	2380      	movs	r3, #128	; 0x80
 800659a:	029b      	lsls	r3, r3, #10
 800659c:	4013      	ands	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]
 80065a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6;
 80065a2:	193b      	adds	r3, r7, r4
 80065a4:	2262      	movs	r2, #98	; 0x62
 80065a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80065a8:	193b      	adds	r3, r7, r4
 80065aa:	2203      	movs	r2, #3
 80065ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ae:	193b      	adds	r3, r7, r4
 80065b0:	2200      	movs	r2, #0
 80065b2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065b4:	193a      	adds	r2, r7, r4
 80065b6:	2390      	movs	r3, #144	; 0x90
 80065b8:	05db      	lsls	r3, r3, #23
 80065ba:	0011      	movs	r1, r2
 80065bc:	0018      	movs	r0, r3
 80065be:	f001 fb07 	bl	8007bd0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80065c2:	4b18      	ldr	r3, [pc, #96]	; (8006624 <HAL_ADC_MspInit+0xdc>)
 80065c4:	4a18      	ldr	r2, [pc, #96]	; (8006628 <HAL_ADC_MspInit+0xe0>)
 80065c6:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80065c8:	4b16      	ldr	r3, [pc, #88]	; (8006624 <HAL_ADC_MspInit+0xdc>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80065ce:	4b15      	ldr	r3, [pc, #84]	; (8006624 <HAL_ADC_MspInit+0xdc>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80065d4:	4b13      	ldr	r3, [pc, #76]	; (8006624 <HAL_ADC_MspInit+0xdc>)
 80065d6:	2280      	movs	r2, #128	; 0x80
 80065d8:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80065da:	4b12      	ldr	r3, [pc, #72]	; (8006624 <HAL_ADC_MspInit+0xdc>)
 80065dc:	2280      	movs	r2, #128	; 0x80
 80065de:	0092      	lsls	r2, r2, #2
 80065e0:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80065e2:	4b10      	ldr	r3, [pc, #64]	; (8006624 <HAL_ADC_MspInit+0xdc>)
 80065e4:	2280      	movs	r2, #128	; 0x80
 80065e6:	0112      	lsls	r2, r2, #4
 80065e8:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80065ea:	4b0e      	ldr	r3, [pc, #56]	; (8006624 <HAL_ADC_MspInit+0xdc>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80065f0:	4b0c      	ldr	r3, [pc, #48]	; (8006624 <HAL_ADC_MspInit+0xdc>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80065f6:	4b0b      	ldr	r3, [pc, #44]	; (8006624 <HAL_ADC_MspInit+0xdc>)
 80065f8:	0018      	movs	r0, r3
 80065fa:	f001 f8d3 	bl	80077a4 <HAL_DMA_Init>
 80065fe:	1e03      	subs	r3, r0, #0
 8006600:	d001      	beq.n	8006606 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8006602:	f7fe fdb3 	bl	800516c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a06      	ldr	r2, [pc, #24]	; (8006624 <HAL_ADC_MspInit+0xdc>)
 800660a:	631a      	str	r2, [r3, #48]	; 0x30
 800660c:	4b05      	ldr	r3, [pc, #20]	; (8006624 <HAL_ADC_MspInit+0xdc>)
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006612:	46c0      	nop			; (mov r8, r8)
 8006614:	46bd      	mov	sp, r7
 8006616:	b00b      	add	sp, #44	; 0x2c
 8006618:	bd90      	pop	{r4, r7, pc}
 800661a:	46c0      	nop			; (mov r8, r8)
 800661c:	40012400 	.word	0x40012400
 8006620:	40021000 	.word	0x40021000
 8006624:	20000b20 	.word	0x20000b20
 8006628:	40020008 	.word	0x40020008

0800662c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800662c:	b590      	push	{r4, r7, lr}
 800662e:	b08b      	sub	sp, #44	; 0x2c
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006634:	2414      	movs	r4, #20
 8006636:	193b      	adds	r3, r7, r4
 8006638:	0018      	movs	r0, r3
 800663a:	2314      	movs	r3, #20
 800663c:	001a      	movs	r2, r3
 800663e:	2100      	movs	r1, #0
 8006640:	f005 ff91 	bl	800c566 <memset>
  if(hi2c->Instance==I2C1)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a1c      	ldr	r2, [pc, #112]	; (80066bc <HAL_I2C_MspInit+0x90>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d131      	bne.n	80066b2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800664e:	4b1c      	ldr	r3, [pc, #112]	; (80066c0 <HAL_I2C_MspInit+0x94>)
 8006650:	695a      	ldr	r2, [r3, #20]
 8006652:	4b1b      	ldr	r3, [pc, #108]	; (80066c0 <HAL_I2C_MspInit+0x94>)
 8006654:	2180      	movs	r1, #128	; 0x80
 8006656:	02c9      	lsls	r1, r1, #11
 8006658:	430a      	orrs	r2, r1
 800665a:	615a      	str	r2, [r3, #20]
 800665c:	4b18      	ldr	r3, [pc, #96]	; (80066c0 <HAL_I2C_MspInit+0x94>)
 800665e:	695a      	ldr	r2, [r3, #20]
 8006660:	2380      	movs	r3, #128	; 0x80
 8006662:	02db      	lsls	r3, r3, #11
 8006664:	4013      	ands	r3, r2
 8006666:	613b      	str	r3, [r7, #16]
 8006668:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800666a:	0021      	movs	r1, r4
 800666c:	187b      	adds	r3, r7, r1
 800666e:	22c0      	movs	r2, #192	; 0xc0
 8006670:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006672:	187b      	adds	r3, r7, r1
 8006674:	2212      	movs	r2, #18
 8006676:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006678:	187b      	adds	r3, r7, r1
 800667a:	2200      	movs	r2, #0
 800667c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800667e:	187b      	adds	r3, r7, r1
 8006680:	2203      	movs	r2, #3
 8006682:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8006684:	187b      	adds	r3, r7, r1
 8006686:	2201      	movs	r2, #1
 8006688:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800668a:	187b      	adds	r3, r7, r1
 800668c:	4a0d      	ldr	r2, [pc, #52]	; (80066c4 <HAL_I2C_MspInit+0x98>)
 800668e:	0019      	movs	r1, r3
 8006690:	0010      	movs	r0, r2
 8006692:	f001 fa9d 	bl	8007bd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006696:	4b0a      	ldr	r3, [pc, #40]	; (80066c0 <HAL_I2C_MspInit+0x94>)
 8006698:	69da      	ldr	r2, [r3, #28]
 800669a:	4b09      	ldr	r3, [pc, #36]	; (80066c0 <HAL_I2C_MspInit+0x94>)
 800669c:	2180      	movs	r1, #128	; 0x80
 800669e:	0389      	lsls	r1, r1, #14
 80066a0:	430a      	orrs	r2, r1
 80066a2:	61da      	str	r2, [r3, #28]
 80066a4:	4b06      	ldr	r3, [pc, #24]	; (80066c0 <HAL_I2C_MspInit+0x94>)
 80066a6:	69da      	ldr	r2, [r3, #28]
 80066a8:	2380      	movs	r3, #128	; 0x80
 80066aa:	039b      	lsls	r3, r3, #14
 80066ac:	4013      	ands	r3, r2
 80066ae:	60fb      	str	r3, [r7, #12]
 80066b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80066b2:	46c0      	nop			; (mov r8, r8)
 80066b4:	46bd      	mov	sp, r7
 80066b6:	b00b      	add	sp, #44	; 0x2c
 80066b8:	bd90      	pop	{r4, r7, pc}
 80066ba:	46c0      	nop			; (mov r8, r8)
 80066bc:	40005400 	.word	0x40005400
 80066c0:	40021000 	.word	0x40021000
 80066c4:	48000400 	.word	0x48000400

080066c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b08c      	sub	sp, #48	; 0x30
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066d0:	231c      	movs	r3, #28
 80066d2:	18fb      	adds	r3, r7, r3
 80066d4:	0018      	movs	r0, r3
 80066d6:	2314      	movs	r3, #20
 80066d8:	001a      	movs	r2, r3
 80066da:	2100      	movs	r1, #0
 80066dc:	f005 ff43 	bl	800c566 <memset>
  if(htim_base->Instance==TIM1)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a52      	ldr	r2, [pc, #328]	; (8006830 <HAL_TIM_Base_MspInit+0x168>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d11e      	bne.n	8006728 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80066ea:	4b52      	ldr	r3, [pc, #328]	; (8006834 <HAL_TIM_Base_MspInit+0x16c>)
 80066ec:	699a      	ldr	r2, [r3, #24]
 80066ee:	4b51      	ldr	r3, [pc, #324]	; (8006834 <HAL_TIM_Base_MspInit+0x16c>)
 80066f0:	2180      	movs	r1, #128	; 0x80
 80066f2:	0109      	lsls	r1, r1, #4
 80066f4:	430a      	orrs	r2, r1
 80066f6:	619a      	str	r2, [r3, #24]
 80066f8:	4b4e      	ldr	r3, [pc, #312]	; (8006834 <HAL_TIM_Base_MspInit+0x16c>)
 80066fa:	699a      	ldr	r2, [r3, #24]
 80066fc:	2380      	movs	r3, #128	; 0x80
 80066fe:	011b      	lsls	r3, r3, #4
 8006700:	4013      	ands	r3, r2
 8006702:	61bb      	str	r3, [r7, #24]
 8006704:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8006706:	2200      	movs	r2, #0
 8006708:	2100      	movs	r1, #0
 800670a:	200d      	movs	r0, #13
 800670c:	f001 f824 	bl	8007758 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8006710:	200d      	movs	r0, #13
 8006712:	f001 f836 	bl	8007782 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8006716:	2200      	movs	r2, #0
 8006718:	2100      	movs	r1, #0
 800671a:	200e      	movs	r0, #14
 800671c:	f001 f81c 	bl	8007758 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8006720:	200e      	movs	r0, #14
 8006722:	f001 f82e 	bl	8007782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8006726:	e07f      	b.n	8006828 <HAL_TIM_Base_MspInit+0x160>
  else if(htim_base->Instance==TIM2)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	2380      	movs	r3, #128	; 0x80
 800672e:	05db      	lsls	r3, r3, #23
 8006730:	429a      	cmp	r2, r3
 8006732:	d139      	bne.n	80067a8 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006734:	4b3f      	ldr	r3, [pc, #252]	; (8006834 <HAL_TIM_Base_MspInit+0x16c>)
 8006736:	69da      	ldr	r2, [r3, #28]
 8006738:	4b3e      	ldr	r3, [pc, #248]	; (8006834 <HAL_TIM_Base_MspInit+0x16c>)
 800673a:	2101      	movs	r1, #1
 800673c:	430a      	orrs	r2, r1
 800673e:	61da      	str	r2, [r3, #28]
 8006740:	4b3c      	ldr	r3, [pc, #240]	; (8006834 <HAL_TIM_Base_MspInit+0x16c>)
 8006742:	69db      	ldr	r3, [r3, #28]
 8006744:	2201      	movs	r2, #1
 8006746:	4013      	ands	r3, r2
 8006748:	617b      	str	r3, [r7, #20]
 800674a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800674c:	4b39      	ldr	r3, [pc, #228]	; (8006834 <HAL_TIM_Base_MspInit+0x16c>)
 800674e:	695a      	ldr	r2, [r3, #20]
 8006750:	4b38      	ldr	r3, [pc, #224]	; (8006834 <HAL_TIM_Base_MspInit+0x16c>)
 8006752:	2180      	movs	r1, #128	; 0x80
 8006754:	02c9      	lsls	r1, r1, #11
 8006756:	430a      	orrs	r2, r1
 8006758:	615a      	str	r2, [r3, #20]
 800675a:	4b36      	ldr	r3, [pc, #216]	; (8006834 <HAL_TIM_Base_MspInit+0x16c>)
 800675c:	695a      	ldr	r2, [r3, #20]
 800675e:	2380      	movs	r3, #128	; 0x80
 8006760:	02db      	lsls	r3, r3, #11
 8006762:	4013      	ands	r3, r2
 8006764:	613b      	str	r3, [r7, #16]
 8006766:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006768:	211c      	movs	r1, #28
 800676a:	187b      	adds	r3, r7, r1
 800676c:	2280      	movs	r2, #128	; 0x80
 800676e:	0112      	lsls	r2, r2, #4
 8006770:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006772:	187b      	adds	r3, r7, r1
 8006774:	2202      	movs	r2, #2
 8006776:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006778:	187b      	adds	r3, r7, r1
 800677a:	2200      	movs	r2, #0
 800677c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800677e:	187b      	adds	r3, r7, r1
 8006780:	2200      	movs	r2, #0
 8006782:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8006784:	187b      	adds	r3, r7, r1
 8006786:	2202      	movs	r2, #2
 8006788:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800678a:	187b      	adds	r3, r7, r1
 800678c:	4a2a      	ldr	r2, [pc, #168]	; (8006838 <HAL_TIM_Base_MspInit+0x170>)
 800678e:	0019      	movs	r1, r3
 8006790:	0010      	movs	r0, r2
 8006792:	f001 fa1d 	bl	8007bd0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006796:	2200      	movs	r2, #0
 8006798:	2100      	movs	r1, #0
 800679a:	200f      	movs	r0, #15
 800679c:	f000 ffdc 	bl	8007758 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80067a0:	200f      	movs	r0, #15
 80067a2:	f000 ffee 	bl	8007782 <HAL_NVIC_EnableIRQ>
}
 80067a6:	e03f      	b.n	8006828 <HAL_TIM_Base_MspInit+0x160>
  else if(htim_base->Instance==TIM15)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a23      	ldr	r2, [pc, #140]	; (800683c <HAL_TIM_Base_MspInit+0x174>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d13a      	bne.n	8006828 <HAL_TIM_Base_MspInit+0x160>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80067b2:	4b20      	ldr	r3, [pc, #128]	; (8006834 <HAL_TIM_Base_MspInit+0x16c>)
 80067b4:	699a      	ldr	r2, [r3, #24]
 80067b6:	4b1f      	ldr	r3, [pc, #124]	; (8006834 <HAL_TIM_Base_MspInit+0x16c>)
 80067b8:	2180      	movs	r1, #128	; 0x80
 80067ba:	0249      	lsls	r1, r1, #9
 80067bc:	430a      	orrs	r2, r1
 80067be:	619a      	str	r2, [r3, #24]
 80067c0:	4b1c      	ldr	r3, [pc, #112]	; (8006834 <HAL_TIM_Base_MspInit+0x16c>)
 80067c2:	699a      	ldr	r2, [r3, #24]
 80067c4:	2380      	movs	r3, #128	; 0x80
 80067c6:	025b      	lsls	r3, r3, #9
 80067c8:	4013      	ands	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]
 80067cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80067ce:	4b19      	ldr	r3, [pc, #100]	; (8006834 <HAL_TIM_Base_MspInit+0x16c>)
 80067d0:	695a      	ldr	r2, [r3, #20]
 80067d2:	4b18      	ldr	r3, [pc, #96]	; (8006834 <HAL_TIM_Base_MspInit+0x16c>)
 80067d4:	2180      	movs	r1, #128	; 0x80
 80067d6:	02c9      	lsls	r1, r1, #11
 80067d8:	430a      	orrs	r2, r1
 80067da:	615a      	str	r2, [r3, #20]
 80067dc:	4b15      	ldr	r3, [pc, #84]	; (8006834 <HAL_TIM_Base_MspInit+0x16c>)
 80067de:	695a      	ldr	r2, [r3, #20]
 80067e0:	2380      	movs	r3, #128	; 0x80
 80067e2:	02db      	lsls	r3, r3, #11
 80067e4:	4013      	ands	r3, r2
 80067e6:	60bb      	str	r3, [r7, #8]
 80067e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80067ea:	211c      	movs	r1, #28
 80067ec:	187b      	adds	r3, r7, r1
 80067ee:	2280      	movs	r2, #128	; 0x80
 80067f0:	0212      	lsls	r2, r2, #8
 80067f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067f4:	187b      	adds	r3, r7, r1
 80067f6:	2202      	movs	r2, #2
 80067f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067fa:	187b      	adds	r3, r7, r1
 80067fc:	2200      	movs	r2, #0
 80067fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006800:	187b      	adds	r3, r7, r1
 8006802:	2200      	movs	r2, #0
 8006804:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8006806:	187b      	adds	r3, r7, r1
 8006808:	2201      	movs	r2, #1
 800680a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800680c:	187b      	adds	r3, r7, r1
 800680e:	4a0a      	ldr	r2, [pc, #40]	; (8006838 <HAL_TIM_Base_MspInit+0x170>)
 8006810:	0019      	movs	r1, r3
 8006812:	0010      	movs	r0, r2
 8006814:	f001 f9dc 	bl	8007bd0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8006818:	2200      	movs	r2, #0
 800681a:	2100      	movs	r1, #0
 800681c:	2014      	movs	r0, #20
 800681e:	f000 ff9b 	bl	8007758 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8006822:	2014      	movs	r0, #20
 8006824:	f000 ffad 	bl	8007782 <HAL_NVIC_EnableIRQ>
}
 8006828:	46c0      	nop			; (mov r8, r8)
 800682a:	46bd      	mov	sp, r7
 800682c:	b00c      	add	sp, #48	; 0x30
 800682e:	bd80      	pop	{r7, pc}
 8006830:	40012c00 	.word	0x40012c00
 8006834:	40021000 	.word	0x40021000
 8006838:	48000400 	.word	0x48000400
 800683c:	40014000 	.word	0x40014000

08006840 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006840:	b590      	push	{r4, r7, lr}
 8006842:	b089      	sub	sp, #36	; 0x24
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006848:	240c      	movs	r4, #12
 800684a:	193b      	adds	r3, r7, r4
 800684c:	0018      	movs	r0, r3
 800684e:	2314      	movs	r3, #20
 8006850:	001a      	movs	r2, r3
 8006852:	2100      	movs	r1, #0
 8006854:	f005 fe87 	bl	800c566 <memset>
  if(htim->Instance==TIM1)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a16      	ldr	r2, [pc, #88]	; (80068b8 <HAL_TIM_MspPostInit+0x78>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d125      	bne.n	80068ae <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006862:	4b16      	ldr	r3, [pc, #88]	; (80068bc <HAL_TIM_MspPostInit+0x7c>)
 8006864:	695a      	ldr	r2, [r3, #20]
 8006866:	4b15      	ldr	r3, [pc, #84]	; (80068bc <HAL_TIM_MspPostInit+0x7c>)
 8006868:	2180      	movs	r1, #128	; 0x80
 800686a:	0289      	lsls	r1, r1, #10
 800686c:	430a      	orrs	r2, r1
 800686e:	615a      	str	r2, [r3, #20]
 8006870:	4b12      	ldr	r3, [pc, #72]	; (80068bc <HAL_TIM_MspPostInit+0x7c>)
 8006872:	695a      	ldr	r2, [r3, #20]
 8006874:	2380      	movs	r3, #128	; 0x80
 8006876:	029b      	lsls	r3, r3, #10
 8006878:	4013      	ands	r3, r2
 800687a:	60bb      	str	r3, [r7, #8]
 800687c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800687e:	193b      	adds	r3, r7, r4
 8006880:	2280      	movs	r2, #128	; 0x80
 8006882:	0052      	lsls	r2, r2, #1
 8006884:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006886:	0021      	movs	r1, r4
 8006888:	187b      	adds	r3, r7, r1
 800688a:	2202      	movs	r2, #2
 800688c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800688e:	187b      	adds	r3, r7, r1
 8006890:	2200      	movs	r2, #0
 8006892:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006894:	187b      	adds	r3, r7, r1
 8006896:	2200      	movs	r2, #0
 8006898:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800689a:	187b      	adds	r3, r7, r1
 800689c:	2202      	movs	r2, #2
 800689e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068a0:	187a      	adds	r2, r7, r1
 80068a2:	2390      	movs	r3, #144	; 0x90
 80068a4:	05db      	lsls	r3, r3, #23
 80068a6:	0011      	movs	r1, r2
 80068a8:	0018      	movs	r0, r3
 80068aa:	f001 f991 	bl	8007bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80068ae:	46c0      	nop			; (mov r8, r8)
 80068b0:	46bd      	mov	sp, r7
 80068b2:	b009      	add	sp, #36	; 0x24
 80068b4:	bd90      	pop	{r4, r7, pc}
 80068b6:	46c0      	nop			; (mov r8, r8)
 80068b8:	40012c00 	.word	0x40012c00
 80068bc:	40021000 	.word	0x40021000

080068c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80068c0:	b590      	push	{r4, r7, lr}
 80068c2:	b08d      	sub	sp, #52	; 0x34
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068c8:	241c      	movs	r4, #28
 80068ca:	193b      	adds	r3, r7, r4
 80068cc:	0018      	movs	r0, r3
 80068ce:	2314      	movs	r3, #20
 80068d0:	001a      	movs	r2, r3
 80068d2:	2100      	movs	r1, #0
 80068d4:	f005 fe47 	bl	800c566 <memset>
  if(huart->Instance==USART1)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a41      	ldr	r2, [pc, #260]	; (80069e4 <HAL_UART_MspInit+0x124>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d13c      	bne.n	800695c <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80068e2:	4b41      	ldr	r3, [pc, #260]	; (80069e8 <HAL_UART_MspInit+0x128>)
 80068e4:	699a      	ldr	r2, [r3, #24]
 80068e6:	4b40      	ldr	r3, [pc, #256]	; (80069e8 <HAL_UART_MspInit+0x128>)
 80068e8:	2180      	movs	r1, #128	; 0x80
 80068ea:	01c9      	lsls	r1, r1, #7
 80068ec:	430a      	orrs	r2, r1
 80068ee:	619a      	str	r2, [r3, #24]
 80068f0:	4b3d      	ldr	r3, [pc, #244]	; (80069e8 <HAL_UART_MspInit+0x128>)
 80068f2:	699a      	ldr	r2, [r3, #24]
 80068f4:	2380      	movs	r3, #128	; 0x80
 80068f6:	01db      	lsls	r3, r3, #7
 80068f8:	4013      	ands	r3, r2
 80068fa:	61bb      	str	r3, [r7, #24]
 80068fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068fe:	4b3a      	ldr	r3, [pc, #232]	; (80069e8 <HAL_UART_MspInit+0x128>)
 8006900:	695a      	ldr	r2, [r3, #20]
 8006902:	4b39      	ldr	r3, [pc, #228]	; (80069e8 <HAL_UART_MspInit+0x128>)
 8006904:	2180      	movs	r1, #128	; 0x80
 8006906:	0289      	lsls	r1, r1, #10
 8006908:	430a      	orrs	r2, r1
 800690a:	615a      	str	r2, [r3, #20]
 800690c:	4b36      	ldr	r3, [pc, #216]	; (80069e8 <HAL_UART_MspInit+0x128>)
 800690e:	695a      	ldr	r2, [r3, #20]
 8006910:	2380      	movs	r3, #128	; 0x80
 8006912:	029b      	lsls	r3, r3, #10
 8006914:	4013      	ands	r3, r2
 8006916:	617b      	str	r3, [r7, #20]
 8006918:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800691a:	193b      	adds	r3, r7, r4
 800691c:	22c0      	movs	r2, #192	; 0xc0
 800691e:	00d2      	lsls	r2, r2, #3
 8006920:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006922:	0021      	movs	r1, r4
 8006924:	187b      	adds	r3, r7, r1
 8006926:	2202      	movs	r2, #2
 8006928:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800692a:	187b      	adds	r3, r7, r1
 800692c:	2200      	movs	r2, #0
 800692e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006930:	187b      	adds	r3, r7, r1
 8006932:	2203      	movs	r2, #3
 8006934:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8006936:	187b      	adds	r3, r7, r1
 8006938:	2201      	movs	r2, #1
 800693a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800693c:	187a      	adds	r2, r7, r1
 800693e:	2390      	movs	r3, #144	; 0x90
 8006940:	05db      	lsls	r3, r3, #23
 8006942:	0011      	movs	r1, r2
 8006944:	0018      	movs	r0, r3
 8006946:	f001 f943 	bl	8007bd0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800694a:	2200      	movs	r2, #0
 800694c:	2100      	movs	r1, #0
 800694e:	201b      	movs	r0, #27
 8006950:	f000 ff02 	bl	8007758 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006954:	201b      	movs	r0, #27
 8006956:	f000 ff14 	bl	8007782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800695a:	e03f      	b.n	80069dc <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a22      	ldr	r2, [pc, #136]	; (80069ec <HAL_UART_MspInit+0x12c>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d13a      	bne.n	80069dc <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006966:	4b20      	ldr	r3, [pc, #128]	; (80069e8 <HAL_UART_MspInit+0x128>)
 8006968:	69da      	ldr	r2, [r3, #28]
 800696a:	4b1f      	ldr	r3, [pc, #124]	; (80069e8 <HAL_UART_MspInit+0x128>)
 800696c:	2180      	movs	r1, #128	; 0x80
 800696e:	0289      	lsls	r1, r1, #10
 8006970:	430a      	orrs	r2, r1
 8006972:	61da      	str	r2, [r3, #28]
 8006974:	4b1c      	ldr	r3, [pc, #112]	; (80069e8 <HAL_UART_MspInit+0x128>)
 8006976:	69da      	ldr	r2, [r3, #28]
 8006978:	2380      	movs	r3, #128	; 0x80
 800697a:	029b      	lsls	r3, r3, #10
 800697c:	4013      	ands	r3, r2
 800697e:	613b      	str	r3, [r7, #16]
 8006980:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006982:	4b19      	ldr	r3, [pc, #100]	; (80069e8 <HAL_UART_MspInit+0x128>)
 8006984:	695a      	ldr	r2, [r3, #20]
 8006986:	4b18      	ldr	r3, [pc, #96]	; (80069e8 <HAL_UART_MspInit+0x128>)
 8006988:	2180      	movs	r1, #128	; 0x80
 800698a:	0289      	lsls	r1, r1, #10
 800698c:	430a      	orrs	r2, r1
 800698e:	615a      	str	r2, [r3, #20]
 8006990:	4b15      	ldr	r3, [pc, #84]	; (80069e8 <HAL_UART_MspInit+0x128>)
 8006992:	695a      	ldr	r2, [r3, #20]
 8006994:	2380      	movs	r3, #128	; 0x80
 8006996:	029b      	lsls	r3, r3, #10
 8006998:	4013      	ands	r3, r2
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800699e:	211c      	movs	r1, #28
 80069a0:	187b      	adds	r3, r7, r1
 80069a2:	220c      	movs	r2, #12
 80069a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069a6:	187b      	adds	r3, r7, r1
 80069a8:	2202      	movs	r2, #2
 80069aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ac:	187b      	adds	r3, r7, r1
 80069ae:	2200      	movs	r2, #0
 80069b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80069b2:	187b      	adds	r3, r7, r1
 80069b4:	2203      	movs	r2, #3
 80069b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80069b8:	187b      	adds	r3, r7, r1
 80069ba:	2201      	movs	r2, #1
 80069bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069be:	187a      	adds	r2, r7, r1
 80069c0:	2390      	movs	r3, #144	; 0x90
 80069c2:	05db      	lsls	r3, r3, #23
 80069c4:	0011      	movs	r1, r2
 80069c6:	0018      	movs	r0, r3
 80069c8:	f001 f902 	bl	8007bd0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80069cc:	2200      	movs	r2, #0
 80069ce:	2100      	movs	r1, #0
 80069d0:	201c      	movs	r0, #28
 80069d2:	f000 fec1 	bl	8007758 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80069d6:	201c      	movs	r0, #28
 80069d8:	f000 fed3 	bl	8007782 <HAL_NVIC_EnableIRQ>
}
 80069dc:	46c0      	nop			; (mov r8, r8)
 80069de:	46bd      	mov	sp, r7
 80069e0:	b00d      	add	sp, #52	; 0x34
 80069e2:	bd90      	pop	{r4, r7, pc}
 80069e4:	40013800 	.word	0x40013800
 80069e8:	40021000 	.word	0x40021000
 80069ec:	40004400 	.word	0x40004400

080069f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80069f0:	b5b0      	push	{r4, r5, r7, lr}
 80069f2:	b08c      	sub	sp, #48	; 0x30
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80069f8:	2300      	movs	r3, #0
 80069fa:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t              uwPrescalerValue = 0U;
 80069fc:	2300      	movs	r3, #0
 80069fe:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8006a00:	4b37      	ldr	r3, [pc, #220]	; (8006ae0 <HAL_InitTick+0xf0>)
 8006a02:	69da      	ldr	r2, [r3, #28]
 8006a04:	4b36      	ldr	r3, [pc, #216]	; (8006ae0 <HAL_InitTick+0xf0>)
 8006a06:	2102      	movs	r1, #2
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	61da      	str	r2, [r3, #28]
 8006a0c:	4b34      	ldr	r3, [pc, #208]	; (8006ae0 <HAL_InitTick+0xf0>)
 8006a0e:	69db      	ldr	r3, [r3, #28]
 8006a10:	2202      	movs	r2, #2
 8006a12:	4013      	ands	r3, r2
 8006a14:	60bb      	str	r3, [r7, #8]
 8006a16:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006a18:	230c      	movs	r3, #12
 8006a1a:	18fa      	adds	r2, r7, r3
 8006a1c:	2410      	movs	r4, #16
 8006a1e:	193b      	adds	r3, r7, r4
 8006a20:	0011      	movs	r1, r2
 8006a22:	0018      	movs	r0, r3
 8006a24:	f002 fc50 	bl	80092c8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8006a28:	193b      	adds	r3, r7, r4
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d104      	bne.n	8006a3e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006a34:	f002 fc32 	bl	800929c <HAL_RCC_GetPCLK1Freq>
 8006a38:	0003      	movs	r3, r0
 8006a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a3c:	e004      	b.n	8006a48 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8006a3e:	f002 fc2d 	bl	800929c <HAL_RCC_GetPCLK1Freq>
 8006a42:	0003      	movs	r3, r0
 8006a44:	005b      	lsls	r3, r3, #1
 8006a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4a:	4926      	ldr	r1, [pc, #152]	; (8006ae4 <HAL_InitTick+0xf4>)
 8006a4c:	0018      	movs	r0, r3
 8006a4e:	f7f9 fb81 	bl	8000154 <__udivsi3>
 8006a52:	0003      	movs	r3, r0
 8006a54:	3b01      	subs	r3, #1
 8006a56:	623b      	str	r3, [r7, #32]

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8006a58:	4b23      	ldr	r3, [pc, #140]	; (8006ae8 <HAL_InitTick+0xf8>)
 8006a5a:	4a24      	ldr	r2, [pc, #144]	; (8006aec <HAL_InitTick+0xfc>)
 8006a5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8006a5e:	4b22      	ldr	r3, [pc, #136]	; (8006ae8 <HAL_InitTick+0xf8>)
 8006a60:	4a23      	ldr	r2, [pc, #140]	; (8006af0 <HAL_InitTick+0x100>)
 8006a62:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8006a64:	4b20      	ldr	r3, [pc, #128]	; (8006ae8 <HAL_InitTick+0xf8>)
 8006a66:	6a3a      	ldr	r2, [r7, #32]
 8006a68:	605a      	str	r2, [r3, #4]
  htim3.Init.ClockDivision = 0;
 8006a6a:	4b1f      	ldr	r3, [pc, #124]	; (8006ae8 <HAL_InitTick+0xf8>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a70:	4b1d      	ldr	r3, [pc, #116]	; (8006ae8 <HAL_InitTick+0xf8>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a76:	4b1c      	ldr	r3, [pc, #112]	; (8006ae8 <HAL_InitTick+0xf8>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8006a7c:	252b      	movs	r5, #43	; 0x2b
 8006a7e:	197c      	adds	r4, r7, r5
 8006a80:	4b19      	ldr	r3, [pc, #100]	; (8006ae8 <HAL_InitTick+0xf8>)
 8006a82:	0018      	movs	r0, r3
 8006a84:	f002 fd48 	bl	8009518 <HAL_TIM_Base_Init>
 8006a88:	0003      	movs	r3, r0
 8006a8a:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8006a8c:	197b      	adds	r3, r7, r5
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d11e      	bne.n	8006ad2 <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8006a94:	197c      	adds	r4, r7, r5
 8006a96:	4b14      	ldr	r3, [pc, #80]	; (8006ae8 <HAL_InitTick+0xf8>)
 8006a98:	0018      	movs	r0, r3
 8006a9a:	f002 fd8d 	bl	80095b8 <HAL_TIM_Base_Start_IT>
 8006a9e:	0003      	movs	r3, r0
 8006aa0:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8006aa2:	197b      	adds	r3, r7, r5
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d113      	bne.n	8006ad2 <HAL_InitTick+0xe2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006aaa:	2010      	movs	r0, #16
 8006aac:	f000 fe69 	bl	8007782 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2b03      	cmp	r3, #3
 8006ab4:	d809      	bhi.n	8006aca <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	0019      	movs	r1, r3
 8006abc:	2010      	movs	r0, #16
 8006abe:	f000 fe4b 	bl	8007758 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006ac2:	4b0c      	ldr	r3, [pc, #48]	; (8006af4 <HAL_InitTick+0x104>)
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	601a      	str	r2, [r3, #0]
 8006ac8:	e003      	b.n	8006ad2 <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8006aca:	232b      	movs	r3, #43	; 0x2b
 8006acc:	18fb      	adds	r3, r7, r3
 8006ace:	2201      	movs	r2, #1
 8006ad0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8006ad2:	232b      	movs	r3, #43	; 0x2b
 8006ad4:	18fb      	adds	r3, r7, r3
 8006ad6:	781b      	ldrb	r3, [r3, #0]
}
 8006ad8:	0018      	movs	r0, r3
 8006ada:	46bd      	mov	sp, r7
 8006adc:	b00c      	add	sp, #48	; 0x30
 8006ade:	bdb0      	pop	{r4, r5, r7, pc}
 8006ae0:	40021000 	.word	0x40021000
 8006ae4:	000f4240 	.word	0x000f4240
 8006ae8:	2000164c 	.word	0x2000164c
 8006aec:	40000400 	.word	0x40000400
 8006af0:	000003e7 	.word	0x000003e7
 8006af4:	20000014 	.word	0x20000014

08006af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006afc:	e7fe      	b.n	8006afc <NMI_Handler+0x4>

08006afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006b02:	e7fe      	b.n	8006b02 <HardFault_Handler+0x4>

08006b04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8006b08:	46c0      	nop			; (mov r8, r8)
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006b12:	46c0      	nop			; (mov r8, r8)
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006b1c:	46c0      	nop			; (mov r8, r8)
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
	...

08006b24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8006b28:	4b03      	ldr	r3, [pc, #12]	; (8006b38 <DMA1_Channel1_IRQHandler+0x14>)
 8006b2a:	0018      	movs	r0, r3
 8006b2c:	f000 ff65 	bl	80079fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006b30:	46c0      	nop			; (mov r8, r8)
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	46c0      	nop			; (mov r8, r8)
 8006b38:	20000b20 	.word	0x20000b20

08006b3c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006b40:	4b03      	ldr	r3, [pc, #12]	; (8006b50 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8006b42:	0018      	movs	r0, r3
 8006b44:	f003 f82e 	bl	8009ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8006b48:	46c0      	nop			; (mov r8, r8)
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	46c0      	nop			; (mov r8, r8)
 8006b50:	20000bb8 	.word	0x20000bb8

08006b54 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006b58:	4b03      	ldr	r3, [pc, #12]	; (8006b68 <TIM1_CC_IRQHandler+0x14>)
 8006b5a:	0018      	movs	r0, r3
 8006b5c:	f003 f822 	bl	8009ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8006b60:	46c0      	nop			; (mov r8, r8)
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	46c0      	nop			; (mov r8, r8)
 8006b68:	20000bb8 	.word	0x20000bb8

08006b6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006b70:	4b03      	ldr	r3, [pc, #12]	; (8006b80 <TIM2_IRQHandler+0x14>)
 8006b72:	0018      	movs	r0, r3
 8006b74:	f003 f816 	bl	8009ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006b78:	46c0      	nop			; (mov r8, r8)
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	46c0      	nop			; (mov r8, r8)
 8006b80:	20000c00 	.word	0x20000c00

08006b84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006b88:	4b03      	ldr	r3, [pc, #12]	; (8006b98 <TIM3_IRQHandler+0x14>)
 8006b8a:	0018      	movs	r0, r3
 8006b8c:	f003 f80a 	bl	8009ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006b90:	46c0      	nop			; (mov r8, r8)
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	46c0      	nop			; (mov r8, r8)
 8006b98:	2000164c 	.word	0x2000164c

08006b9c <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8006ba0:	4b03      	ldr	r3, [pc, #12]	; (8006bb0 <TIM15_IRQHandler+0x14>)
 8006ba2:	0018      	movs	r0, r3
 8006ba4:	f002 fffe 	bl	8009ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8006ba8:	46c0      	nop			; (mov r8, r8)
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	46c0      	nop			; (mov r8, r8)
 8006bb0:	20000c48 	.word	0x20000c48

08006bb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006bb8:	4b03      	ldr	r3, [pc, #12]	; (8006bc8 <USART1_IRQHandler+0x14>)
 8006bba:	0018      	movs	r0, r3
 8006bbc:	f004 fa44 	bl	800b048 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006bc0:	46c0      	nop			; (mov r8, r8)
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	46c0      	nop			; (mov r8, r8)
 8006bc8:	20000c90 	.word	0x20000c90

08006bcc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006bd0:	4b03      	ldr	r3, [pc, #12]	; (8006be0 <USART2_IRQHandler+0x14>)
 8006bd2:	0018      	movs	r0, r3
 8006bd4:	f004 fa38 	bl	800b048 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006bd8:	46c0      	nop			; (mov r8, r8)
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	46c0      	nop			; (mov r8, r8)
 8006be0:	20000d18 	.word	0x20000d18

08006be4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	af00      	add	r7, sp, #0
  return 1;
 8006be8:	2301      	movs	r3, #1
}
 8006bea:	0018      	movs	r0, r3
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <_kill>:

int _kill(int pid, int sig)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006bfa:	f005 fc81 	bl	800c500 <__errno>
 8006bfe:	0003      	movs	r3, r0
 8006c00:	2216      	movs	r2, #22
 8006c02:	601a      	str	r2, [r3, #0]
  return -1;
 8006c04:	2301      	movs	r3, #1
 8006c06:	425b      	negs	r3, r3
}
 8006c08:	0018      	movs	r0, r3
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	b002      	add	sp, #8
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <_exit>:

void _exit (int status)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006c18:	2301      	movs	r3, #1
 8006c1a:	425a      	negs	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	0011      	movs	r1, r2
 8006c20:	0018      	movs	r0, r3
 8006c22:	f7ff ffe5 	bl	8006bf0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006c26:	e7fe      	b.n	8006c26 <_exit+0x16>

08006c28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c34:	2300      	movs	r3, #0
 8006c36:	617b      	str	r3, [r7, #20]
 8006c38:	e00a      	b.n	8006c50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006c3a:	e000      	b.n	8006c3e <_read+0x16>
 8006c3c:	bf00      	nop
 8006c3e:	0001      	movs	r1, r0
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	1c5a      	adds	r2, r3, #1
 8006c44:	60ba      	str	r2, [r7, #8]
 8006c46:	b2ca      	uxtb	r2, r1
 8006c48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	617b      	str	r3, [r7, #20]
 8006c50:	697a      	ldr	r2, [r7, #20]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	dbf0      	blt.n	8006c3a <_read+0x12>
  }

  return len;
 8006c58:	687b      	ldr	r3, [r7, #4]
}
 8006c5a:	0018      	movs	r0, r3
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	b006      	add	sp, #24
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b086      	sub	sp, #24
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	60f8      	str	r0, [r7, #12]
 8006c6a:	60b9      	str	r1, [r7, #8]
 8006c6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c6e:	2300      	movs	r3, #0
 8006c70:	617b      	str	r3, [r7, #20]
 8006c72:	e009      	b.n	8006c88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	1c5a      	adds	r2, r3, #1
 8006c78:	60ba      	str	r2, [r7, #8]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	0018      	movs	r0, r3
 8006c7e:	e000      	b.n	8006c82 <_write+0x20>
 8006c80:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	3301      	adds	r3, #1
 8006c86:	617b      	str	r3, [r7, #20]
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	dbf1      	blt.n	8006c74 <_write+0x12>
  }
  return len;
 8006c90:	687b      	ldr	r3, [r7, #4]
}
 8006c92:	0018      	movs	r0, r3
 8006c94:	46bd      	mov	sp, r7
 8006c96:	b006      	add	sp, #24
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <_close>:

int _close(int file)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b082      	sub	sp, #8
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	425b      	negs	r3, r3
}
 8006ca6:	0018      	movs	r0, r3
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	b002      	add	sp, #8
 8006cac:	bd80      	pop	{r7, pc}

08006cae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b082      	sub	sp, #8
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
 8006cb6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	2280      	movs	r2, #128	; 0x80
 8006cbc:	0192      	lsls	r2, r2, #6
 8006cbe:	605a      	str	r2, [r3, #4]
  return 0;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	0018      	movs	r0, r3
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	b002      	add	sp, #8
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <_isatty>:

int _isatty(int file)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b082      	sub	sp, #8
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006cd2:	2301      	movs	r3, #1
}
 8006cd4:	0018      	movs	r0, r3
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	b002      	add	sp, #8
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	0018      	movs	r0, r3
 8006cec:	46bd      	mov	sp, r7
 8006cee:	b004      	add	sp, #16
 8006cf0:	bd80      	pop	{r7, pc}
	...

08006cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006cfc:	4a14      	ldr	r2, [pc, #80]	; (8006d50 <_sbrk+0x5c>)
 8006cfe:	4b15      	ldr	r3, [pc, #84]	; (8006d54 <_sbrk+0x60>)
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006d08:	4b13      	ldr	r3, [pc, #76]	; (8006d58 <_sbrk+0x64>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d102      	bne.n	8006d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006d10:	4b11      	ldr	r3, [pc, #68]	; (8006d58 <_sbrk+0x64>)
 8006d12:	4a12      	ldr	r2, [pc, #72]	; (8006d5c <_sbrk+0x68>)
 8006d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006d16:	4b10      	ldr	r3, [pc, #64]	; (8006d58 <_sbrk+0x64>)
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	18d3      	adds	r3, r2, r3
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d207      	bcs.n	8006d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006d24:	f005 fbec 	bl	800c500 <__errno>
 8006d28:	0003      	movs	r3, r0
 8006d2a:	220c      	movs	r2, #12
 8006d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	425b      	negs	r3, r3
 8006d32:	e009      	b.n	8006d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006d34:	4b08      	ldr	r3, [pc, #32]	; (8006d58 <_sbrk+0x64>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006d3a:	4b07      	ldr	r3, [pc, #28]	; (8006d58 <_sbrk+0x64>)
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	18d2      	adds	r2, r2, r3
 8006d42:	4b05      	ldr	r3, [pc, #20]	; (8006d58 <_sbrk+0x64>)
 8006d44:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8006d46:	68fb      	ldr	r3, [r7, #12]
}
 8006d48:	0018      	movs	r0, r3
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	b006      	add	sp, #24
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	20004000 	.word	0x20004000
 8006d54:	00000400 	.word	0x00000400
 8006d58:	20001694 	.word	0x20001694
 8006d5c:	200016b0 	.word	0x200016b0

08006d60 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8006d64:	46c0      	nop			; (mov r8, r8)
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
	...

08006d6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006d6c:	480d      	ldr	r0, [pc, #52]	; (8006da4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006d6e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006d70:	f7ff fff6 	bl	8006d60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006d74:	480c      	ldr	r0, [pc, #48]	; (8006da8 <LoopForever+0x6>)
  ldr r1, =_edata
 8006d76:	490d      	ldr	r1, [pc, #52]	; (8006dac <LoopForever+0xa>)
  ldr r2, =_sidata
 8006d78:	4a0d      	ldr	r2, [pc, #52]	; (8006db0 <LoopForever+0xe>)
  movs r3, #0
 8006d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006d7c:	e002      	b.n	8006d84 <LoopCopyDataInit>

08006d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006d82:	3304      	adds	r3, #4

08006d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006d88:	d3f9      	bcc.n	8006d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006d8a:	4a0a      	ldr	r2, [pc, #40]	; (8006db4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006d8c:	4c0a      	ldr	r4, [pc, #40]	; (8006db8 <LoopForever+0x16>)
  movs r3, #0
 8006d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006d90:	e001      	b.n	8006d96 <LoopFillZerobss>

08006d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006d94:	3204      	adds	r2, #4

08006d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006d98:	d3fb      	bcc.n	8006d92 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006d9a:	f005 fbb7 	bl	800c50c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006d9e:	f7fd fcb7 	bl	8004710 <main>

08006da2 <LoopForever>:

LoopForever:
    b LoopForever
 8006da2:	e7fe      	b.n	8006da2 <LoopForever>
  ldr   r0, =_estack
 8006da4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8006da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006dac:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8006db0:	08010dc0 	.word	0x08010dc0
  ldr r2, =_sbss
 8006db4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8006db8:	200016ac 	.word	0x200016ac

08006dbc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006dbc:	e7fe      	b.n	8006dbc <ADC1_COMP_IRQHandler>
	...

08006dc0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006dc4:	4b07      	ldr	r3, [pc, #28]	; (8006de4 <HAL_Init+0x24>)
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	4b06      	ldr	r3, [pc, #24]	; (8006de4 <HAL_Init+0x24>)
 8006dca:	2110      	movs	r1, #16
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8006dd0:	2003      	movs	r0, #3
 8006dd2:	f7ff fe0d 	bl	80069f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006dd6:	f7ff fb93 	bl	8006500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	0018      	movs	r0, r3
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	46c0      	nop			; (mov r8, r8)
 8006de4:	40022000 	.word	0x40022000

08006de8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006dec:	4b05      	ldr	r3, [pc, #20]	; (8006e04 <HAL_IncTick+0x1c>)
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	001a      	movs	r2, r3
 8006df2:	4b05      	ldr	r3, [pc, #20]	; (8006e08 <HAL_IncTick+0x20>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	18d2      	adds	r2, r2, r3
 8006df8:	4b03      	ldr	r3, [pc, #12]	; (8006e08 <HAL_IncTick+0x20>)
 8006dfa:	601a      	str	r2, [r3, #0]
}
 8006dfc:	46c0      	nop			; (mov r8, r8)
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	46c0      	nop			; (mov r8, r8)
 8006e04:	20000018 	.word	0x20000018
 8006e08:	20001698 	.word	0x20001698

08006e0c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8006e10:	4b02      	ldr	r3, [pc, #8]	; (8006e1c <HAL_GetTick+0x10>)
 8006e12:	681b      	ldr	r3, [r3, #0]
}
 8006e14:	0018      	movs	r0, r3
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	46c0      	nop			; (mov r8, r8)
 8006e1c:	20001698 	.word	0x20001698

08006e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006e28:	f7ff fff0 	bl	8006e0c <HAL_GetTick>
 8006e2c:	0003      	movs	r3, r0
 8006e2e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	3301      	adds	r3, #1
 8006e38:	d005      	beq.n	8006e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006e3a:	4b0a      	ldr	r3, [pc, #40]	; (8006e64 <HAL_Delay+0x44>)
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	001a      	movs	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	189b      	adds	r3, r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8006e46:	46c0      	nop			; (mov r8, r8)
 8006e48:	f7ff ffe0 	bl	8006e0c <HAL_GetTick>
 8006e4c:	0002      	movs	r2, r0
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d8f7      	bhi.n	8006e48 <HAL_Delay+0x28>
  {
  }
}
 8006e58:	46c0      	nop			; (mov r8, r8)
 8006e5a:	46c0      	nop			; (mov r8, r8)
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	b004      	add	sp, #16
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	46c0      	nop			; (mov r8, r8)
 8006e64:	20000018 	.word	0x20000018

08006e68 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e70:	230f      	movs	r3, #15
 8006e72:	18fb      	adds	r3, r7, r3
 8006e74:	2200      	movs	r2, #0
 8006e76:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e125      	b.n	80070d2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10a      	bne.n	8006ea4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2234      	movs	r2, #52	; 0x34
 8006e98:	2100      	movs	r1, #0
 8006e9a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	0018      	movs	r0, r3
 8006ea0:	f7ff fb52 	bl	8006548 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea8:	2210      	movs	r2, #16
 8006eaa:	4013      	ands	r3, r2
 8006eac:	d000      	beq.n	8006eb0 <HAL_ADC_Init+0x48>
 8006eae:	e103      	b.n	80070b8 <HAL_ADC_Init+0x250>
 8006eb0:	230f      	movs	r3, #15
 8006eb2:	18fb      	adds	r3, r7, r3
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d000      	beq.n	8006ebc <HAL_ADC_Init+0x54>
 8006eba:	e0fd      	b.n	80070b8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	2204      	movs	r2, #4
 8006ec4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8006ec6:	d000      	beq.n	8006eca <HAL_ADC_Init+0x62>
 8006ec8:	e0f6      	b.n	80070b8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ece:	4a83      	ldr	r2, [pc, #524]	; (80070dc <HAL_ADC_Init+0x274>)
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	431a      	orrs	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	2203      	movs	r2, #3
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d112      	bne.n	8006f0e <HAL_ADC_Init+0xa6>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d009      	beq.n	8006f0a <HAL_ADC_Init+0xa2>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68da      	ldr	r2, [r3, #12]
 8006efc:	2380      	movs	r3, #128	; 0x80
 8006efe:	021b      	lsls	r3, r3, #8
 8006f00:	401a      	ands	r2, r3
 8006f02:	2380      	movs	r3, #128	; 0x80
 8006f04:	021b      	lsls	r3, r3, #8
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d101      	bne.n	8006f0e <HAL_ADC_Init+0xa6>
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e000      	b.n	8006f10 <HAL_ADC_Init+0xa8>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d116      	bne.n	8006f42 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	2218      	movs	r2, #24
 8006f1c:	4393      	bics	r3, r2
 8006f1e:	0019      	movs	r1, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	689a      	ldr	r2, [r3, #8]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	430a      	orrs	r2, r1
 8006f2a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	0899      	lsrs	r1, r3, #2
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	430a      	orrs	r2, r1
 8006f40:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68da      	ldr	r2, [r3, #12]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4964      	ldr	r1, [pc, #400]	; (80070e0 <HAL_ADC_Init+0x278>)
 8006f4e:	400a      	ands	r2, r1
 8006f50:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	7e1b      	ldrb	r3, [r3, #24]
 8006f56:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	7e5b      	ldrb	r3, [r3, #25]
 8006f5c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006f5e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	7e9b      	ldrb	r3, [r3, #26]
 8006f64:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8006f66:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d002      	beq.n	8006f76 <HAL_ADC_Init+0x10e>
 8006f70:	2380      	movs	r3, #128	; 0x80
 8006f72:	015b      	lsls	r3, r3, #5
 8006f74:	e000      	b.n	8006f78 <HAL_ADC_Init+0x110>
 8006f76:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006f78:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8006f7e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d101      	bne.n	8006f8c <HAL_ADC_Init+0x124>
 8006f88:	2304      	movs	r3, #4
 8006f8a:	e000      	b.n	8006f8e <HAL_ADC_Init+0x126>
 8006f8c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8006f8e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2124      	movs	r1, #36	; 0x24
 8006f94:	5c5b      	ldrb	r3, [r3, r1]
 8006f96:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8006f98:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	7edb      	ldrb	r3, [r3, #27]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d115      	bne.n	8006fd4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	7e9b      	ldrb	r3, [r3, #26]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d105      	bne.n	8006fbc <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2280      	movs	r2, #128	; 0x80
 8006fb4:	0252      	lsls	r2, r2, #9
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	60bb      	str	r3, [r7, #8]
 8006fba:	e00b      	b.n	8006fd4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fcc:	2201      	movs	r2, #1
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	69da      	ldr	r2, [r3, #28]
 8006fd8:	23c2      	movs	r3, #194	; 0xc2
 8006fda:	33ff      	adds	r3, #255	; 0xff
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d007      	beq.n	8006ff0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68d9      	ldr	r1, [r3, #12]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007004:	2380      	movs	r3, #128	; 0x80
 8007006:	055b      	lsls	r3, r3, #21
 8007008:	429a      	cmp	r2, r3
 800700a:	d01b      	beq.n	8007044 <HAL_ADC_Init+0x1dc>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007010:	2b01      	cmp	r3, #1
 8007012:	d017      	beq.n	8007044 <HAL_ADC_Init+0x1dc>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007018:	2b02      	cmp	r3, #2
 800701a:	d013      	beq.n	8007044 <HAL_ADC_Init+0x1dc>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007020:	2b03      	cmp	r3, #3
 8007022:	d00f      	beq.n	8007044 <HAL_ADC_Init+0x1dc>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007028:	2b04      	cmp	r3, #4
 800702a:	d00b      	beq.n	8007044 <HAL_ADC_Init+0x1dc>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007030:	2b05      	cmp	r3, #5
 8007032:	d007      	beq.n	8007044 <HAL_ADC_Init+0x1dc>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	2b06      	cmp	r3, #6
 800703a:	d003      	beq.n	8007044 <HAL_ADC_Init+0x1dc>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007040:	2b07      	cmp	r3, #7
 8007042:	d112      	bne.n	800706a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	695a      	ldr	r2, [r3, #20]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2107      	movs	r1, #7
 8007050:	438a      	bics	r2, r1
 8007052:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6959      	ldr	r1, [r3, #20]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705e:	2207      	movs	r2, #7
 8007060:	401a      	ands	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	430a      	orrs	r2, r1
 8007068:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	4a1c      	ldr	r2, [pc, #112]	; (80070e4 <HAL_ADC_Init+0x27c>)
 8007072:	4013      	ands	r3, r2
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	429a      	cmp	r2, r3
 8007078:	d10b      	bne.n	8007092 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007084:	2203      	movs	r2, #3
 8007086:	4393      	bics	r3, r2
 8007088:	2201      	movs	r2, #1
 800708a:	431a      	orrs	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8007090:	e01c      	b.n	80070cc <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007096:	2212      	movs	r2, #18
 8007098:	4393      	bics	r3, r2
 800709a:	2210      	movs	r2, #16
 800709c:	431a      	orrs	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a6:	2201      	movs	r2, #1
 80070a8:	431a      	orrs	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80070ae:	230f      	movs	r3, #15
 80070b0:	18fb      	adds	r3, r7, r3
 80070b2:	2201      	movs	r2, #1
 80070b4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80070b6:	e009      	b.n	80070cc <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070bc:	2210      	movs	r2, #16
 80070be:	431a      	orrs	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80070c4:	230f      	movs	r3, #15
 80070c6:	18fb      	adds	r3, r7, r3
 80070c8:	2201      	movs	r2, #1
 80070ca:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80070cc:	230f      	movs	r3, #15
 80070ce:	18fb      	adds	r3, r7, r3
 80070d0:	781b      	ldrb	r3, [r3, #0]
}
 80070d2:	0018      	movs	r0, r3
 80070d4:	46bd      	mov	sp, r7
 80070d6:	b004      	add	sp, #16
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	46c0      	nop			; (mov r8, r8)
 80070dc:	fffffefd 	.word	0xfffffefd
 80070e0:	fffe0219 	.word	0xfffe0219
 80070e4:	833fffe7 	.word	0x833fffe7

080070e8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80070e8:	b590      	push	{r4, r7, lr}
 80070ea:	b087      	sub	sp, #28
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80070f4:	2317      	movs	r3, #23
 80070f6:	18fb      	adds	r3, r7, r3
 80070f8:	2200      	movs	r2, #0
 80070fa:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	2204      	movs	r2, #4
 8007104:	4013      	ands	r3, r2
 8007106:	d15e      	bne.n	80071c6 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2234      	movs	r2, #52	; 0x34
 800710c:	5c9b      	ldrb	r3, [r3, r2]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d101      	bne.n	8007116 <HAL_ADC_Start_DMA+0x2e>
 8007112:	2302      	movs	r3, #2
 8007114:	e05e      	b.n	80071d4 <HAL_ADC_Start_DMA+0xec>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2234      	movs	r2, #52	; 0x34
 800711a:	2101      	movs	r1, #1
 800711c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	7e5b      	ldrb	r3, [r3, #25]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d007      	beq.n	8007136 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8007126:	2317      	movs	r3, #23
 8007128:	18fc      	adds	r4, r7, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	0018      	movs	r0, r3
 800712e:	f000 f983 	bl	8007438 <ADC_Enable>
 8007132:	0003      	movs	r3, r0
 8007134:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007136:	2317      	movs	r3, #23
 8007138:	18fb      	adds	r3, r7, r3
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d146      	bne.n	80071ce <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007144:	4a25      	ldr	r2, [pc, #148]	; (80071dc <HAL_ADC_Start_DMA+0xf4>)
 8007146:	4013      	ands	r3, r2
 8007148:	2280      	movs	r2, #128	; 0x80
 800714a:	0052      	lsls	r2, r2, #1
 800714c:	431a      	orrs	r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2234      	movs	r2, #52	; 0x34
 800715c:	2100      	movs	r1, #0
 800715e:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007164:	4a1e      	ldr	r2, [pc, #120]	; (80071e0 <HAL_ADC_Start_DMA+0xf8>)
 8007166:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716c:	4a1d      	ldr	r2, [pc, #116]	; (80071e4 <HAL_ADC_Start_DMA+0xfc>)
 800716e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007174:	4a1c      	ldr	r2, [pc, #112]	; (80071e8 <HAL_ADC_Start_DMA+0x100>)
 8007176:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	221c      	movs	r2, #28
 800717e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2110      	movs	r1, #16
 800718c:	430a      	orrs	r2, r1
 800718e:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68da      	ldr	r2, [r3, #12]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2101      	movs	r1, #1
 800719c:	430a      	orrs	r2, r1
 800719e:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	3340      	adds	r3, #64	; 0x40
 80071aa:	0019      	movs	r1, r3
 80071ac:	68ba      	ldr	r2, [r7, #8]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f000 fb40 	bl	8007834 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	689a      	ldr	r2, [r3, #8]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2104      	movs	r1, #4
 80071c0:	430a      	orrs	r2, r1
 80071c2:	609a      	str	r2, [r3, #8]
 80071c4:	e003      	b.n	80071ce <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80071c6:	2317      	movs	r3, #23
 80071c8:	18fb      	adds	r3, r7, r3
 80071ca:	2202      	movs	r2, #2
 80071cc:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80071ce:	2317      	movs	r3, #23
 80071d0:	18fb      	adds	r3, r7, r3
 80071d2:	781b      	ldrb	r3, [r3, #0]
}
 80071d4:	0018      	movs	r0, r3
 80071d6:	46bd      	mov	sp, r7
 80071d8:	b007      	add	sp, #28
 80071da:	bd90      	pop	{r4, r7, pc}
 80071dc:	fffff0fe 	.word	0xfffff0fe
 80071e0:	08007541 	.word	0x08007541
 80071e4:	080075f5 	.word	0x080075f5
 80071e8:	08007613 	.word	0x08007613

080071ec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80071f4:	46c0      	nop			; (mov r8, r8)
 80071f6:	46bd      	mov	sp, r7
 80071f8:	b002      	add	sp, #8
 80071fa:	bd80      	pop	{r7, pc}

080071fc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007204:	46c0      	nop			; (mov r8, r8)
 8007206:	46bd      	mov	sp, r7
 8007208:	b002      	add	sp, #8
 800720a:	bd80      	pop	{r7, pc}

0800720c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007214:	46c0      	nop			; (mov r8, r8)
 8007216:	46bd      	mov	sp, r7
 8007218:	b002      	add	sp, #8
 800721a:	bd80      	pop	{r7, pc}

0800721c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007226:	230f      	movs	r3, #15
 8007228:	18fb      	adds	r3, r7, r3
 800722a:	2200      	movs	r2, #0
 800722c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800722e:	2300      	movs	r3, #0
 8007230:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007236:	2380      	movs	r3, #128	; 0x80
 8007238:	055b      	lsls	r3, r3, #21
 800723a:	429a      	cmp	r2, r3
 800723c:	d011      	beq.n	8007262 <HAL_ADC_ConfigChannel+0x46>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007242:	2b01      	cmp	r3, #1
 8007244:	d00d      	beq.n	8007262 <HAL_ADC_ConfigChannel+0x46>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724a:	2b02      	cmp	r3, #2
 800724c:	d009      	beq.n	8007262 <HAL_ADC_ConfigChannel+0x46>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007252:	2b03      	cmp	r3, #3
 8007254:	d005      	beq.n	8007262 <HAL_ADC_ConfigChannel+0x46>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725a:	2b04      	cmp	r3, #4
 800725c:	d001      	beq.n	8007262 <HAL_ADC_ConfigChannel+0x46>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2234      	movs	r2, #52	; 0x34
 8007266:	5c9b      	ldrb	r3, [r3, r2]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d101      	bne.n	8007270 <HAL_ADC_ConfigChannel+0x54>
 800726c:	2302      	movs	r3, #2
 800726e:	e0d0      	b.n	8007412 <HAL_ADC_ConfigChannel+0x1f6>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2234      	movs	r2, #52	; 0x34
 8007274:	2101      	movs	r1, #1
 8007276:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	2204      	movs	r2, #4
 8007280:	4013      	ands	r3, r2
 8007282:	d000      	beq.n	8007286 <HAL_ADC_ConfigChannel+0x6a>
 8007284:	e0b4      	b.n	80073f0 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	4a64      	ldr	r2, [pc, #400]	; (800741c <HAL_ADC_ConfigChannel+0x200>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d100      	bne.n	8007292 <HAL_ADC_ConfigChannel+0x76>
 8007290:	e082      	b.n	8007398 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2201      	movs	r2, #1
 800729e:	409a      	lsls	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	430a      	orrs	r2, r1
 80072a6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ac:	2380      	movs	r3, #128	; 0x80
 80072ae:	055b      	lsls	r3, r3, #21
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d037      	beq.n	8007324 <HAL_ADC_ConfigChannel+0x108>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d033      	beq.n	8007324 <HAL_ADC_ConfigChannel+0x108>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d02f      	beq.n	8007324 <HAL_ADC_ConfigChannel+0x108>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c8:	2b03      	cmp	r3, #3
 80072ca:	d02b      	beq.n	8007324 <HAL_ADC_ConfigChannel+0x108>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d0:	2b04      	cmp	r3, #4
 80072d2:	d027      	beq.n	8007324 <HAL_ADC_ConfigChannel+0x108>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d8:	2b05      	cmp	r3, #5
 80072da:	d023      	beq.n	8007324 <HAL_ADC_ConfigChannel+0x108>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e0:	2b06      	cmp	r3, #6
 80072e2:	d01f      	beq.n	8007324 <HAL_ADC_ConfigChannel+0x108>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e8:	2b07      	cmp	r3, #7
 80072ea:	d01b      	beq.n	8007324 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	689a      	ldr	r2, [r3, #8]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	2107      	movs	r1, #7
 80072f8:	400b      	ands	r3, r1
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d012      	beq.n	8007324 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	695a      	ldr	r2, [r3, #20]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2107      	movs	r1, #7
 800730a:	438a      	bics	r2, r1
 800730c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6959      	ldr	r1, [r3, #20]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	2207      	movs	r2, #7
 800731a:	401a      	ands	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	430a      	orrs	r2, r1
 8007322:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2b10      	cmp	r3, #16
 800732a:	d007      	beq.n	800733c <HAL_ADC_ConfigChannel+0x120>
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b11      	cmp	r3, #17
 8007332:	d003      	beq.n	800733c <HAL_ADC_ConfigChannel+0x120>
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2b12      	cmp	r3, #18
 800733a:	d163      	bne.n	8007404 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800733c:	4b38      	ldr	r3, [pc, #224]	; (8007420 <HAL_ADC_ConfigChannel+0x204>)
 800733e:	6819      	ldr	r1, [r3, #0]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b10      	cmp	r3, #16
 8007346:	d009      	beq.n	800735c <HAL_ADC_ConfigChannel+0x140>
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2b11      	cmp	r3, #17
 800734e:	d102      	bne.n	8007356 <HAL_ADC_ConfigChannel+0x13a>
 8007350:	2380      	movs	r3, #128	; 0x80
 8007352:	03db      	lsls	r3, r3, #15
 8007354:	e004      	b.n	8007360 <HAL_ADC_ConfigChannel+0x144>
 8007356:	2380      	movs	r3, #128	; 0x80
 8007358:	045b      	lsls	r3, r3, #17
 800735a:	e001      	b.n	8007360 <HAL_ADC_ConfigChannel+0x144>
 800735c:	2380      	movs	r3, #128	; 0x80
 800735e:	041b      	lsls	r3, r3, #16
 8007360:	4a2f      	ldr	r2, [pc, #188]	; (8007420 <HAL_ADC_ConfigChannel+0x204>)
 8007362:	430b      	orrs	r3, r1
 8007364:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b10      	cmp	r3, #16
 800736c:	d14a      	bne.n	8007404 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800736e:	4b2d      	ldr	r3, [pc, #180]	; (8007424 <HAL_ADC_ConfigChannel+0x208>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	492d      	ldr	r1, [pc, #180]	; (8007428 <HAL_ADC_ConfigChannel+0x20c>)
 8007374:	0018      	movs	r0, r3
 8007376:	f7f8 feed 	bl	8000154 <__udivsi3>
 800737a:	0003      	movs	r3, r0
 800737c:	001a      	movs	r2, r3
 800737e:	0013      	movs	r3, r2
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	189b      	adds	r3, r3, r2
 8007384:	005b      	lsls	r3, r3, #1
 8007386:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007388:	e002      	b.n	8007390 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	3b01      	subs	r3, #1
 800738e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1f9      	bne.n	800738a <HAL_ADC_ConfigChannel+0x16e>
 8007396:	e035      	b.n	8007404 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2101      	movs	r1, #1
 80073a4:	4099      	lsls	r1, r3
 80073a6:	000b      	movs	r3, r1
 80073a8:	43d9      	mvns	r1, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	400a      	ands	r2, r1
 80073b0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2b10      	cmp	r3, #16
 80073b8:	d007      	beq.n	80073ca <HAL_ADC_ConfigChannel+0x1ae>
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b11      	cmp	r3, #17
 80073c0:	d003      	beq.n	80073ca <HAL_ADC_ConfigChannel+0x1ae>
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2b12      	cmp	r3, #18
 80073c8:	d11c      	bne.n	8007404 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80073ca:	4b15      	ldr	r3, [pc, #84]	; (8007420 <HAL_ADC_ConfigChannel+0x204>)
 80073cc:	6819      	ldr	r1, [r3, #0]
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2b10      	cmp	r3, #16
 80073d4:	d007      	beq.n	80073e6 <HAL_ADC_ConfigChannel+0x1ca>
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2b11      	cmp	r3, #17
 80073dc:	d101      	bne.n	80073e2 <HAL_ADC_ConfigChannel+0x1c6>
 80073de:	4b13      	ldr	r3, [pc, #76]	; (800742c <HAL_ADC_ConfigChannel+0x210>)
 80073e0:	e002      	b.n	80073e8 <HAL_ADC_ConfigChannel+0x1cc>
 80073e2:	4b13      	ldr	r3, [pc, #76]	; (8007430 <HAL_ADC_ConfigChannel+0x214>)
 80073e4:	e000      	b.n	80073e8 <HAL_ADC_ConfigChannel+0x1cc>
 80073e6:	4b13      	ldr	r3, [pc, #76]	; (8007434 <HAL_ADC_ConfigChannel+0x218>)
 80073e8:	4a0d      	ldr	r2, [pc, #52]	; (8007420 <HAL_ADC_ConfigChannel+0x204>)
 80073ea:	400b      	ands	r3, r1
 80073ec:	6013      	str	r3, [r2, #0]
 80073ee:	e009      	b.n	8007404 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f4:	2220      	movs	r2, #32
 80073f6:	431a      	orrs	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80073fc:	230f      	movs	r3, #15
 80073fe:	18fb      	adds	r3, r7, r3
 8007400:	2201      	movs	r2, #1
 8007402:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2234      	movs	r2, #52	; 0x34
 8007408:	2100      	movs	r1, #0
 800740a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800740c:	230f      	movs	r3, #15
 800740e:	18fb      	adds	r3, r7, r3
 8007410:	781b      	ldrb	r3, [r3, #0]
}
 8007412:	0018      	movs	r0, r3
 8007414:	46bd      	mov	sp, r7
 8007416:	b004      	add	sp, #16
 8007418:	bd80      	pop	{r7, pc}
 800741a:	46c0      	nop			; (mov r8, r8)
 800741c:	00001001 	.word	0x00001001
 8007420:	40012708 	.word	0x40012708
 8007424:	20000010 	.word	0x20000010
 8007428:	000f4240 	.word	0x000f4240
 800742c:	ffbfffff 	.word	0xffbfffff
 8007430:	feffffff 	.word	0xfeffffff
 8007434:	ff7fffff 	.word	0xff7fffff

08007438 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007440:	2300      	movs	r3, #0
 8007442:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8007444:	2300      	movs	r3, #0
 8007446:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	2203      	movs	r2, #3
 8007450:	4013      	ands	r3, r2
 8007452:	2b01      	cmp	r3, #1
 8007454:	d112      	bne.n	800747c <ADC_Enable+0x44>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2201      	movs	r2, #1
 800745e:	4013      	ands	r3, r2
 8007460:	2b01      	cmp	r3, #1
 8007462:	d009      	beq.n	8007478 <ADC_Enable+0x40>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68da      	ldr	r2, [r3, #12]
 800746a:	2380      	movs	r3, #128	; 0x80
 800746c:	021b      	lsls	r3, r3, #8
 800746e:	401a      	ands	r2, r3
 8007470:	2380      	movs	r3, #128	; 0x80
 8007472:	021b      	lsls	r3, r3, #8
 8007474:	429a      	cmp	r2, r3
 8007476:	d101      	bne.n	800747c <ADC_Enable+0x44>
 8007478:	2301      	movs	r3, #1
 800747a:	e000      	b.n	800747e <ADC_Enable+0x46>
 800747c:	2300      	movs	r3, #0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d152      	bne.n	8007528 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	4a2a      	ldr	r2, [pc, #168]	; (8007534 <ADC_Enable+0xfc>)
 800748a:	4013      	ands	r3, r2
 800748c:	d00d      	beq.n	80074aa <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007492:	2210      	movs	r2, #16
 8007494:	431a      	orrs	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800749e:	2201      	movs	r2, #1
 80074a0:	431a      	orrs	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e03f      	b.n	800752a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689a      	ldr	r2, [r3, #8]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2101      	movs	r1, #1
 80074b6:	430a      	orrs	r2, r1
 80074b8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80074ba:	4b1f      	ldr	r3, [pc, #124]	; (8007538 <ADC_Enable+0x100>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	491f      	ldr	r1, [pc, #124]	; (800753c <ADC_Enable+0x104>)
 80074c0:	0018      	movs	r0, r3
 80074c2:	f7f8 fe47 	bl	8000154 <__udivsi3>
 80074c6:	0003      	movs	r3, r0
 80074c8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80074ca:	e002      	b.n	80074d2 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	3b01      	subs	r3, #1
 80074d0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d1f9      	bne.n	80074cc <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80074d8:	f7ff fc98 	bl	8006e0c <HAL_GetTick>
 80074dc:	0003      	movs	r3, r0
 80074de:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80074e0:	e01b      	b.n	800751a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80074e2:	f7ff fc93 	bl	8006e0c <HAL_GetTick>
 80074e6:	0002      	movs	r2, r0
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d914      	bls.n	800751a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2201      	movs	r2, #1
 80074f8:	4013      	ands	r3, r2
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d00d      	beq.n	800751a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007502:	2210      	movs	r2, #16
 8007504:	431a      	orrs	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800750e:	2201      	movs	r2, #1
 8007510:	431a      	orrs	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e007      	b.n	800752a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2201      	movs	r2, #1
 8007522:	4013      	ands	r3, r2
 8007524:	2b01      	cmp	r3, #1
 8007526:	d1dc      	bne.n	80074e2 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	0018      	movs	r0, r3
 800752c:	46bd      	mov	sp, r7
 800752e:	b004      	add	sp, #16
 8007530:	bd80      	pop	{r7, pc}
 8007532:	46c0      	nop			; (mov r8, r8)
 8007534:	80000017 	.word	0x80000017
 8007538:	20000010 	.word	0x20000010
 800753c:	000f4240 	.word	0x000f4240

08007540 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007552:	2250      	movs	r2, #80	; 0x50
 8007554:	4013      	ands	r3, r2
 8007556:	d140      	bne.n	80075da <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755c:	2280      	movs	r2, #128	; 0x80
 800755e:	0092      	lsls	r2, r2, #2
 8007560:	431a      	orrs	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68da      	ldr	r2, [r3, #12]
 800756c:	23c0      	movs	r3, #192	; 0xc0
 800756e:	011b      	lsls	r3, r3, #4
 8007570:	4013      	ands	r3, r2
 8007572:	d12d      	bne.n	80075d0 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007578:	2b00      	cmp	r3, #0
 800757a:	d129      	bne.n	80075d0 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2208      	movs	r2, #8
 8007584:	4013      	ands	r3, r2
 8007586:	2b08      	cmp	r3, #8
 8007588:	d122      	bne.n	80075d0 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	2204      	movs	r2, #4
 8007592:	4013      	ands	r3, r2
 8007594:	d110      	bne.n	80075b8 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	685a      	ldr	r2, [r3, #4]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	210c      	movs	r1, #12
 80075a2:	438a      	bics	r2, r1
 80075a4:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075aa:	4a11      	ldr	r2, [pc, #68]	; (80075f0 <ADC_DMAConvCplt+0xb0>)
 80075ac:	4013      	ands	r3, r2
 80075ae:	2201      	movs	r2, #1
 80075b0:	431a      	orrs	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	639a      	str	r2, [r3, #56]	; 0x38
 80075b6:	e00b      	b.n	80075d0 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075bc:	2220      	movs	r2, #32
 80075be:	431a      	orrs	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075c8:	2201      	movs	r2, #1
 80075ca:	431a      	orrs	r2, r3
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	0018      	movs	r0, r3
 80075d4:	f7ff fe0a 	bl	80071ec <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80075d8:	e005      	b.n	80075e6 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	0010      	movs	r0, r2
 80075e4:	4798      	blx	r3
}
 80075e6:	46c0      	nop			; (mov r8, r8)
 80075e8:	46bd      	mov	sp, r7
 80075ea:	b004      	add	sp, #16
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	46c0      	nop			; (mov r8, r8)
 80075f0:	fffffefe 	.word	0xfffffefe

080075f4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007600:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	0018      	movs	r0, r3
 8007606:	f7ff fdf9 	bl	80071fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800760a:	46c0      	nop			; (mov r8, r8)
 800760c:	46bd      	mov	sp, r7
 800760e:	b004      	add	sp, #16
 8007610:	bd80      	pop	{r7, pc}

08007612 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b084      	sub	sp, #16
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007624:	2240      	movs	r2, #64	; 0x40
 8007626:	431a      	orrs	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007630:	2204      	movs	r2, #4
 8007632:	431a      	orrs	r2, r3
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	0018      	movs	r0, r3
 800763c:	f7ff fde6 	bl	800720c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007640:	46c0      	nop			; (mov r8, r8)
 8007642:	46bd      	mov	sp, r7
 8007644:	b004      	add	sp, #16
 8007646:	bd80      	pop	{r7, pc}

08007648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	0002      	movs	r2, r0
 8007650:	1dfb      	adds	r3, r7, #7
 8007652:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007654:	1dfb      	adds	r3, r7, #7
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	2b7f      	cmp	r3, #127	; 0x7f
 800765a:	d809      	bhi.n	8007670 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800765c:	1dfb      	adds	r3, r7, #7
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	001a      	movs	r2, r3
 8007662:	231f      	movs	r3, #31
 8007664:	401a      	ands	r2, r3
 8007666:	4b04      	ldr	r3, [pc, #16]	; (8007678 <__NVIC_EnableIRQ+0x30>)
 8007668:	2101      	movs	r1, #1
 800766a:	4091      	lsls	r1, r2
 800766c:	000a      	movs	r2, r1
 800766e:	601a      	str	r2, [r3, #0]
  }
}
 8007670:	46c0      	nop			; (mov r8, r8)
 8007672:	46bd      	mov	sp, r7
 8007674:	b002      	add	sp, #8
 8007676:	bd80      	pop	{r7, pc}
 8007678:	e000e100 	.word	0xe000e100

0800767c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800767c:	b590      	push	{r4, r7, lr}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	0002      	movs	r2, r0
 8007684:	6039      	str	r1, [r7, #0]
 8007686:	1dfb      	adds	r3, r7, #7
 8007688:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800768a:	1dfb      	adds	r3, r7, #7
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	2b7f      	cmp	r3, #127	; 0x7f
 8007690:	d828      	bhi.n	80076e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007692:	4a2f      	ldr	r2, [pc, #188]	; (8007750 <__NVIC_SetPriority+0xd4>)
 8007694:	1dfb      	adds	r3, r7, #7
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	b25b      	sxtb	r3, r3
 800769a:	089b      	lsrs	r3, r3, #2
 800769c:	33c0      	adds	r3, #192	; 0xc0
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	589b      	ldr	r3, [r3, r2]
 80076a2:	1dfa      	adds	r2, r7, #7
 80076a4:	7812      	ldrb	r2, [r2, #0]
 80076a6:	0011      	movs	r1, r2
 80076a8:	2203      	movs	r2, #3
 80076aa:	400a      	ands	r2, r1
 80076ac:	00d2      	lsls	r2, r2, #3
 80076ae:	21ff      	movs	r1, #255	; 0xff
 80076b0:	4091      	lsls	r1, r2
 80076b2:	000a      	movs	r2, r1
 80076b4:	43d2      	mvns	r2, r2
 80076b6:	401a      	ands	r2, r3
 80076b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	019b      	lsls	r3, r3, #6
 80076be:	22ff      	movs	r2, #255	; 0xff
 80076c0:	401a      	ands	r2, r3
 80076c2:	1dfb      	adds	r3, r7, #7
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	0018      	movs	r0, r3
 80076c8:	2303      	movs	r3, #3
 80076ca:	4003      	ands	r3, r0
 80076cc:	00db      	lsls	r3, r3, #3
 80076ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80076d0:	481f      	ldr	r0, [pc, #124]	; (8007750 <__NVIC_SetPriority+0xd4>)
 80076d2:	1dfb      	adds	r3, r7, #7
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	b25b      	sxtb	r3, r3
 80076d8:	089b      	lsrs	r3, r3, #2
 80076da:	430a      	orrs	r2, r1
 80076dc:	33c0      	adds	r3, #192	; 0xc0
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80076e2:	e031      	b.n	8007748 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80076e4:	4a1b      	ldr	r2, [pc, #108]	; (8007754 <__NVIC_SetPriority+0xd8>)
 80076e6:	1dfb      	adds	r3, r7, #7
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	0019      	movs	r1, r3
 80076ec:	230f      	movs	r3, #15
 80076ee:	400b      	ands	r3, r1
 80076f0:	3b08      	subs	r3, #8
 80076f2:	089b      	lsrs	r3, r3, #2
 80076f4:	3306      	adds	r3, #6
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	18d3      	adds	r3, r2, r3
 80076fa:	3304      	adds	r3, #4
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	1dfa      	adds	r2, r7, #7
 8007700:	7812      	ldrb	r2, [r2, #0]
 8007702:	0011      	movs	r1, r2
 8007704:	2203      	movs	r2, #3
 8007706:	400a      	ands	r2, r1
 8007708:	00d2      	lsls	r2, r2, #3
 800770a:	21ff      	movs	r1, #255	; 0xff
 800770c:	4091      	lsls	r1, r2
 800770e:	000a      	movs	r2, r1
 8007710:	43d2      	mvns	r2, r2
 8007712:	401a      	ands	r2, r3
 8007714:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	019b      	lsls	r3, r3, #6
 800771a:	22ff      	movs	r2, #255	; 0xff
 800771c:	401a      	ands	r2, r3
 800771e:	1dfb      	adds	r3, r7, #7
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	0018      	movs	r0, r3
 8007724:	2303      	movs	r3, #3
 8007726:	4003      	ands	r3, r0
 8007728:	00db      	lsls	r3, r3, #3
 800772a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800772c:	4809      	ldr	r0, [pc, #36]	; (8007754 <__NVIC_SetPriority+0xd8>)
 800772e:	1dfb      	adds	r3, r7, #7
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	001c      	movs	r4, r3
 8007734:	230f      	movs	r3, #15
 8007736:	4023      	ands	r3, r4
 8007738:	3b08      	subs	r3, #8
 800773a:	089b      	lsrs	r3, r3, #2
 800773c:	430a      	orrs	r2, r1
 800773e:	3306      	adds	r3, #6
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	18c3      	adds	r3, r0, r3
 8007744:	3304      	adds	r3, #4
 8007746:	601a      	str	r2, [r3, #0]
}
 8007748:	46c0      	nop			; (mov r8, r8)
 800774a:	46bd      	mov	sp, r7
 800774c:	b003      	add	sp, #12
 800774e:	bd90      	pop	{r4, r7, pc}
 8007750:	e000e100 	.word	0xe000e100
 8007754:	e000ed00 	.word	0xe000ed00

08007758 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	60b9      	str	r1, [r7, #8]
 8007760:	607a      	str	r2, [r7, #4]
 8007762:	210f      	movs	r1, #15
 8007764:	187b      	adds	r3, r7, r1
 8007766:	1c02      	adds	r2, r0, #0
 8007768:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	187b      	adds	r3, r7, r1
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	b25b      	sxtb	r3, r3
 8007772:	0011      	movs	r1, r2
 8007774:	0018      	movs	r0, r3
 8007776:	f7ff ff81 	bl	800767c <__NVIC_SetPriority>
}
 800777a:	46c0      	nop			; (mov r8, r8)
 800777c:	46bd      	mov	sp, r7
 800777e:	b004      	add	sp, #16
 8007780:	bd80      	pop	{r7, pc}

08007782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b082      	sub	sp, #8
 8007786:	af00      	add	r7, sp, #0
 8007788:	0002      	movs	r2, r0
 800778a:	1dfb      	adds	r3, r7, #7
 800778c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800778e:	1dfb      	adds	r3, r7, #7
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	b25b      	sxtb	r3, r3
 8007794:	0018      	movs	r0, r3
 8007796:	f7ff ff57 	bl	8007648 <__NVIC_EnableIRQ>
}
 800779a:	46c0      	nop			; (mov r8, r8)
 800779c:	46bd      	mov	sp, r7
 800779e:	b002      	add	sp, #8
 80077a0:	bd80      	pop	{r7, pc}
	...

080077a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80077ac:	2300      	movs	r3, #0
 80077ae:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d101      	bne.n	80077ba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e036      	b.n	8007828 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2221      	movs	r2, #33	; 0x21
 80077be:	2102      	movs	r1, #2
 80077c0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	4a18      	ldr	r2, [pc, #96]	; (8007830 <HAL_DMA_Init+0x8c>)
 80077ce:	4013      	ands	r3, r2
 80077d0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80077da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80077e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	695b      	ldr	r3, [r3, #20]
 80077ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80077f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	69db      	ldr	r3, [r3, #28]
 80077f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	0018      	movs	r0, r3
 800780c:	f000 f9c4 	bl	8007b98 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2221      	movs	r2, #33	; 0x21
 800781a:	2101      	movs	r1, #1
 800781c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2220      	movs	r2, #32
 8007822:	2100      	movs	r1, #0
 8007824:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	0018      	movs	r0, r3
 800782a:	46bd      	mov	sp, r7
 800782c:	b004      	add	sp, #16
 800782e:	bd80      	pop	{r7, pc}
 8007830:	ffffc00f 	.word	0xffffc00f

08007834 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]
 8007840:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007842:	2317      	movs	r3, #23
 8007844:	18fb      	adds	r3, r7, r3
 8007846:	2200      	movs	r2, #0
 8007848:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2220      	movs	r2, #32
 800784e:	5c9b      	ldrb	r3, [r3, r2]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d101      	bne.n	8007858 <HAL_DMA_Start_IT+0x24>
 8007854:	2302      	movs	r3, #2
 8007856:	e04f      	b.n	80078f8 <HAL_DMA_Start_IT+0xc4>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2220      	movs	r2, #32
 800785c:	2101      	movs	r1, #1
 800785e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2221      	movs	r2, #33	; 0x21
 8007864:	5c9b      	ldrb	r3, [r3, r2]
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b01      	cmp	r3, #1
 800786a:	d13a      	bne.n	80078e2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2221      	movs	r2, #33	; 0x21
 8007870:	2102      	movs	r1, #2
 8007872:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2101      	movs	r1, #1
 8007886:	438a      	bics	r2, r1
 8007888:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	68b9      	ldr	r1, [r7, #8]
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 f954 	bl	8007b3e <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789a:	2b00      	cmp	r3, #0
 800789c:	d008      	beq.n	80078b0 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	210e      	movs	r1, #14
 80078aa:	430a      	orrs	r2, r1
 80078ac:	601a      	str	r2, [r3, #0]
 80078ae:	e00f      	b.n	80078d0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	210a      	movs	r1, #10
 80078bc:	430a      	orrs	r2, r1
 80078be:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2104      	movs	r1, #4
 80078cc:	438a      	bics	r2, r1
 80078ce:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2101      	movs	r1, #1
 80078dc:	430a      	orrs	r2, r1
 80078de:	601a      	str	r2, [r3, #0]
 80078e0:	e007      	b.n	80078f2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2220      	movs	r2, #32
 80078e6:	2100      	movs	r1, #0
 80078e8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80078ea:	2317      	movs	r3, #23
 80078ec:	18fb      	adds	r3, r7, r3
 80078ee:	2202      	movs	r2, #2
 80078f0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80078f2:	2317      	movs	r3, #23
 80078f4:	18fb      	adds	r3, r7, r3
 80078f6:	781b      	ldrb	r3, [r3, #0]
}
 80078f8:	0018      	movs	r0, r3
 80078fa:	46bd      	mov	sp, r7
 80078fc:	b006      	add	sp, #24
 80078fe:	bd80      	pop	{r7, pc}

08007900 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2221      	movs	r2, #33	; 0x21
 800790c:	5c9b      	ldrb	r3, [r3, r2]
 800790e:	b2db      	uxtb	r3, r3
 8007910:	2b02      	cmp	r3, #2
 8007912:	d008      	beq.n	8007926 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2204      	movs	r2, #4
 8007918:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2220      	movs	r2, #32
 800791e:	2100      	movs	r1, #0
 8007920:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e020      	b.n	8007968 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	210e      	movs	r1, #14
 8007932:	438a      	bics	r2, r1
 8007934:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2101      	movs	r1, #1
 8007942:	438a      	bics	r2, r1
 8007944:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800794e:	2101      	movs	r1, #1
 8007950:	4091      	lsls	r1, r2
 8007952:	000a      	movs	r2, r1
 8007954:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2221      	movs	r2, #33	; 0x21
 800795a:	2101      	movs	r1, #1
 800795c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2220      	movs	r2, #32
 8007962:	2100      	movs	r1, #0
 8007964:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	0018      	movs	r0, r3
 800796a:	46bd      	mov	sp, r7
 800796c:	b002      	add	sp, #8
 800796e:	bd80      	pop	{r7, pc}

08007970 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007978:	210f      	movs	r1, #15
 800797a:	187b      	adds	r3, r7, r1
 800797c:	2200      	movs	r2, #0
 800797e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2221      	movs	r2, #33	; 0x21
 8007984:	5c9b      	ldrb	r3, [r3, r2]
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b02      	cmp	r3, #2
 800798a:	d006      	beq.n	800799a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2204      	movs	r2, #4
 8007990:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8007992:	187b      	adds	r3, r7, r1
 8007994:	2201      	movs	r2, #1
 8007996:	701a      	strb	r2, [r3, #0]
 8007998:	e028      	b.n	80079ec <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	210e      	movs	r1, #14
 80079a6:	438a      	bics	r2, r1
 80079a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2101      	movs	r1, #1
 80079b6:	438a      	bics	r2, r1
 80079b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c2:	2101      	movs	r1, #1
 80079c4:	4091      	lsls	r1, r2
 80079c6:	000a      	movs	r2, r1
 80079c8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2221      	movs	r2, #33	; 0x21
 80079ce:	2101      	movs	r1, #1
 80079d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2220      	movs	r2, #32
 80079d6:	2100      	movs	r1, #0
 80079d8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d004      	beq.n	80079ec <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	0010      	movs	r0, r2
 80079ea:	4798      	blx	r3
    }
  }
  return status;
 80079ec:	230f      	movs	r3, #15
 80079ee:	18fb      	adds	r3, r7, r3
 80079f0:	781b      	ldrb	r3, [r3, #0]
}
 80079f2:	0018      	movs	r0, r3
 80079f4:	46bd      	mov	sp, r7
 80079f6:	b004      	add	sp, #16
 80079f8:	bd80      	pop	{r7, pc}

080079fa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b084      	sub	sp, #16
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a16:	2204      	movs	r2, #4
 8007a18:	409a      	lsls	r2, r3
 8007a1a:	0013      	movs	r3, r2
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	4013      	ands	r3, r2
 8007a20:	d024      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x72>
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	2204      	movs	r2, #4
 8007a26:	4013      	ands	r3, r2
 8007a28:	d020      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2220      	movs	r2, #32
 8007a32:	4013      	ands	r3, r2
 8007a34:	d107      	bne.n	8007a46 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2104      	movs	r1, #4
 8007a42:	438a      	bics	r2, r1
 8007a44:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a4e:	2104      	movs	r1, #4
 8007a50:	4091      	lsls	r1, r2
 8007a52:	000a      	movs	r2, r1
 8007a54:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d100      	bne.n	8007a60 <HAL_DMA_IRQHandler+0x66>
 8007a5e:	e06a      	b.n	8007b36 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	0010      	movs	r0, r2
 8007a68:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007a6a:	e064      	b.n	8007b36 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a70:	2202      	movs	r2, #2
 8007a72:	409a      	lsls	r2, r3
 8007a74:	0013      	movs	r3, r2
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	4013      	ands	r3, r2
 8007a7a:	d02b      	beq.n	8007ad4 <HAL_DMA_IRQHandler+0xda>
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	2202      	movs	r2, #2
 8007a80:	4013      	ands	r3, r2
 8007a82:	d027      	beq.n	8007ad4 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2220      	movs	r2, #32
 8007a8c:	4013      	ands	r3, r2
 8007a8e:	d10b      	bne.n	8007aa8 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	210a      	movs	r1, #10
 8007a9c:	438a      	bics	r2, r1
 8007a9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2221      	movs	r2, #33	; 0x21
 8007aa4:	2101      	movs	r1, #1
 8007aa6:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ab0:	2102      	movs	r1, #2
 8007ab2:	4091      	lsls	r1, r2
 8007ab4:	000a      	movs	r2, r1
 8007ab6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2220      	movs	r2, #32
 8007abc:	2100      	movs	r1, #0
 8007abe:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d036      	beq.n	8007b36 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	0010      	movs	r0, r2
 8007ad0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007ad2:	e030      	b.n	8007b36 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad8:	2208      	movs	r2, #8
 8007ada:	409a      	lsls	r2, r3
 8007adc:	0013      	movs	r3, r2
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	d028      	beq.n	8007b36 <HAL_DMA_IRQHandler+0x13c>
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	2208      	movs	r2, #8
 8007ae8:	4013      	ands	r3, r2
 8007aea:	d024      	beq.n	8007b36 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	210e      	movs	r1, #14
 8007af8:	438a      	bics	r2, r1
 8007afa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b04:	2101      	movs	r1, #1
 8007b06:	4091      	lsls	r1, r2
 8007b08:	000a      	movs	r2, r1
 8007b0a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2221      	movs	r2, #33	; 0x21
 8007b16:	2101      	movs	r1, #1
 8007b18:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2220      	movs	r2, #32
 8007b1e:	2100      	movs	r1, #0
 8007b20:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d005      	beq.n	8007b36 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	0010      	movs	r0, r2
 8007b32:	4798      	blx	r3
    }
  }
}
 8007b34:	e7ff      	b.n	8007b36 <HAL_DMA_IRQHandler+0x13c>
 8007b36:	46c0      	nop			; (mov r8, r8)
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	b004      	add	sp, #16
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b084      	sub	sp, #16
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	60f8      	str	r0, [r7, #12]
 8007b46:	60b9      	str	r1, [r7, #8]
 8007b48:	607a      	str	r2, [r7, #4]
 8007b4a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b54:	2101      	movs	r1, #1
 8007b56:	4091      	lsls	r1, r2
 8007b58:	000a      	movs	r2, r1
 8007b5a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	2b10      	cmp	r3, #16
 8007b6a:	d108      	bne.n	8007b7e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007b7c:	e007      	b.n	8007b8e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	60da      	str	r2, [r3, #12]
}
 8007b8e:	46c0      	nop			; (mov r8, r8)
 8007b90:	46bd      	mov	sp, r7
 8007b92:	b004      	add	sp, #16
 8007b94:	bd80      	pop	{r7, pc}
	...

08007b98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a08      	ldr	r2, [pc, #32]	; (8007bc8 <DMA_CalcBaseAndBitshift+0x30>)
 8007ba6:	4694      	mov	ip, r2
 8007ba8:	4463      	add	r3, ip
 8007baa:	2114      	movs	r1, #20
 8007bac:	0018      	movs	r0, r3
 8007bae:	f7f8 fad1 	bl	8000154 <__udivsi3>
 8007bb2:	0003      	movs	r3, r0
 8007bb4:	009a      	lsls	r2, r3, #2
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a03      	ldr	r2, [pc, #12]	; (8007bcc <DMA_CalcBaseAndBitshift+0x34>)
 8007bbe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8007bc0:	46c0      	nop			; (mov r8, r8)
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	b002      	add	sp, #8
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	bffdfff8 	.word	0xbffdfff8
 8007bcc:	40020000 	.word	0x40020000

08007bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007bde:	e155      	b.n	8007e8c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2101      	movs	r1, #1
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	4091      	lsls	r1, r2
 8007bea:	000a      	movs	r2, r1
 8007bec:	4013      	ands	r3, r2
 8007bee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d100      	bne.n	8007bf8 <HAL_GPIO_Init+0x28>
 8007bf6:	e146      	b.n	8007e86 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	2203      	movs	r2, #3
 8007bfe:	4013      	ands	r3, r2
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d005      	beq.n	8007c10 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	2203      	movs	r2, #3
 8007c0a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d130      	bne.n	8007c72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	005b      	lsls	r3, r3, #1
 8007c1a:	2203      	movs	r2, #3
 8007c1c:	409a      	lsls	r2, r3
 8007c1e:	0013      	movs	r3, r2
 8007c20:	43da      	mvns	r2, r3
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	4013      	ands	r3, r2
 8007c26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	68da      	ldr	r2, [r3, #12]
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	005b      	lsls	r3, r3, #1
 8007c30:	409a      	lsls	r2, r3
 8007c32:	0013      	movs	r3, r2
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	693a      	ldr	r2, [r7, #16]
 8007c3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007c46:	2201      	movs	r2, #1
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	409a      	lsls	r2, r3
 8007c4c:	0013      	movs	r3, r2
 8007c4e:	43da      	mvns	r2, r3
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	4013      	ands	r3, r2
 8007c54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	091b      	lsrs	r3, r3, #4
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	401a      	ands	r2, r3
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	409a      	lsls	r2, r3
 8007c64:	0013      	movs	r3, r2
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	693a      	ldr	r2, [r7, #16]
 8007c70:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	2203      	movs	r2, #3
 8007c78:	4013      	ands	r3, r2
 8007c7a:	2b03      	cmp	r3, #3
 8007c7c:	d017      	beq.n	8007cae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	005b      	lsls	r3, r3, #1
 8007c88:	2203      	movs	r2, #3
 8007c8a:	409a      	lsls	r2, r3
 8007c8c:	0013      	movs	r3, r2
 8007c8e:	43da      	mvns	r2, r3
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	4013      	ands	r3, r2
 8007c94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	689a      	ldr	r2, [r3, #8]
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	005b      	lsls	r3, r3, #1
 8007c9e:	409a      	lsls	r2, r3
 8007ca0:	0013      	movs	r3, r2
 8007ca2:	693a      	ldr	r2, [r7, #16]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	693a      	ldr	r2, [r7, #16]
 8007cac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	2203      	movs	r2, #3
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d123      	bne.n	8007d02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	08da      	lsrs	r2, r3, #3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	3208      	adds	r2, #8
 8007cc2:	0092      	lsls	r2, r2, #2
 8007cc4:	58d3      	ldr	r3, [r2, r3]
 8007cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	2207      	movs	r2, #7
 8007ccc:	4013      	ands	r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	220f      	movs	r2, #15
 8007cd2:	409a      	lsls	r2, r3
 8007cd4:	0013      	movs	r3, r2
 8007cd6:	43da      	mvns	r2, r3
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	4013      	ands	r3, r2
 8007cdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	691a      	ldr	r2, [r3, #16]
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	2107      	movs	r1, #7
 8007ce6:	400b      	ands	r3, r1
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	409a      	lsls	r2, r3
 8007cec:	0013      	movs	r3, r2
 8007cee:	693a      	ldr	r2, [r7, #16]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	08da      	lsrs	r2, r3, #3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	3208      	adds	r2, #8
 8007cfc:	0092      	lsls	r2, r2, #2
 8007cfe:	6939      	ldr	r1, [r7, #16]
 8007d00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	005b      	lsls	r3, r3, #1
 8007d0c:	2203      	movs	r2, #3
 8007d0e:	409a      	lsls	r2, r3
 8007d10:	0013      	movs	r3, r2
 8007d12:	43da      	mvns	r2, r3
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	4013      	ands	r3, r2
 8007d18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	2203      	movs	r2, #3
 8007d20:	401a      	ands	r2, r3
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	005b      	lsls	r3, r3, #1
 8007d26:	409a      	lsls	r2, r3
 8007d28:	0013      	movs	r3, r2
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	693a      	ldr	r2, [r7, #16]
 8007d34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	685a      	ldr	r2, [r3, #4]
 8007d3a:	23c0      	movs	r3, #192	; 0xc0
 8007d3c:	029b      	lsls	r3, r3, #10
 8007d3e:	4013      	ands	r3, r2
 8007d40:	d100      	bne.n	8007d44 <HAL_GPIO_Init+0x174>
 8007d42:	e0a0      	b.n	8007e86 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d44:	4b57      	ldr	r3, [pc, #348]	; (8007ea4 <HAL_GPIO_Init+0x2d4>)
 8007d46:	699a      	ldr	r2, [r3, #24]
 8007d48:	4b56      	ldr	r3, [pc, #344]	; (8007ea4 <HAL_GPIO_Init+0x2d4>)
 8007d4a:	2101      	movs	r1, #1
 8007d4c:	430a      	orrs	r2, r1
 8007d4e:	619a      	str	r2, [r3, #24]
 8007d50:	4b54      	ldr	r3, [pc, #336]	; (8007ea4 <HAL_GPIO_Init+0x2d4>)
 8007d52:	699b      	ldr	r3, [r3, #24]
 8007d54:	2201      	movs	r2, #1
 8007d56:	4013      	ands	r3, r2
 8007d58:	60bb      	str	r3, [r7, #8]
 8007d5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007d5c:	4a52      	ldr	r2, [pc, #328]	; (8007ea8 <HAL_GPIO_Init+0x2d8>)
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	089b      	lsrs	r3, r3, #2
 8007d62:	3302      	adds	r3, #2
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	589b      	ldr	r3, [r3, r2]
 8007d68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	2203      	movs	r2, #3
 8007d6e:	4013      	ands	r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	220f      	movs	r2, #15
 8007d74:	409a      	lsls	r2, r3
 8007d76:	0013      	movs	r3, r2
 8007d78:	43da      	mvns	r2, r3
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	2390      	movs	r3, #144	; 0x90
 8007d84:	05db      	lsls	r3, r3, #23
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d019      	beq.n	8007dbe <HAL_GPIO_Init+0x1ee>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a47      	ldr	r2, [pc, #284]	; (8007eac <HAL_GPIO_Init+0x2dc>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d013      	beq.n	8007dba <HAL_GPIO_Init+0x1ea>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a46      	ldr	r2, [pc, #280]	; (8007eb0 <HAL_GPIO_Init+0x2e0>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d00d      	beq.n	8007db6 <HAL_GPIO_Init+0x1e6>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a45      	ldr	r2, [pc, #276]	; (8007eb4 <HAL_GPIO_Init+0x2e4>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d007      	beq.n	8007db2 <HAL_GPIO_Init+0x1e2>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a44      	ldr	r2, [pc, #272]	; (8007eb8 <HAL_GPIO_Init+0x2e8>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d101      	bne.n	8007dae <HAL_GPIO_Init+0x1de>
 8007daa:	2304      	movs	r3, #4
 8007dac:	e008      	b.n	8007dc0 <HAL_GPIO_Init+0x1f0>
 8007dae:	2305      	movs	r3, #5
 8007db0:	e006      	b.n	8007dc0 <HAL_GPIO_Init+0x1f0>
 8007db2:	2303      	movs	r3, #3
 8007db4:	e004      	b.n	8007dc0 <HAL_GPIO_Init+0x1f0>
 8007db6:	2302      	movs	r3, #2
 8007db8:	e002      	b.n	8007dc0 <HAL_GPIO_Init+0x1f0>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e000      	b.n	8007dc0 <HAL_GPIO_Init+0x1f0>
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	697a      	ldr	r2, [r7, #20]
 8007dc2:	2103      	movs	r1, #3
 8007dc4:	400a      	ands	r2, r1
 8007dc6:	0092      	lsls	r2, r2, #2
 8007dc8:	4093      	lsls	r3, r2
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007dd0:	4935      	ldr	r1, [pc, #212]	; (8007ea8 <HAL_GPIO_Init+0x2d8>)
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	089b      	lsrs	r3, r3, #2
 8007dd6:	3302      	adds	r3, #2
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007dde:	4b37      	ldr	r3, [pc, #220]	; (8007ebc <HAL_GPIO_Init+0x2ec>)
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	43da      	mvns	r2, r3
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	4013      	ands	r3, r2
 8007dec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	685a      	ldr	r2, [r3, #4]
 8007df2:	2380      	movs	r3, #128	; 0x80
 8007df4:	035b      	lsls	r3, r3, #13
 8007df6:	4013      	ands	r3, r2
 8007df8:	d003      	beq.n	8007e02 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8007dfa:	693a      	ldr	r2, [r7, #16]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007e02:	4b2e      	ldr	r3, [pc, #184]	; (8007ebc <HAL_GPIO_Init+0x2ec>)
 8007e04:	693a      	ldr	r2, [r7, #16]
 8007e06:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8007e08:	4b2c      	ldr	r3, [pc, #176]	; (8007ebc <HAL_GPIO_Init+0x2ec>)
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	43da      	mvns	r2, r3
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	4013      	ands	r3, r2
 8007e16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	2380      	movs	r3, #128	; 0x80
 8007e1e:	039b      	lsls	r3, r3, #14
 8007e20:	4013      	ands	r3, r2
 8007e22:	d003      	beq.n	8007e2c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007e2c:	4b23      	ldr	r3, [pc, #140]	; (8007ebc <HAL_GPIO_Init+0x2ec>)
 8007e2e:	693a      	ldr	r2, [r7, #16]
 8007e30:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8007e32:	4b22      	ldr	r3, [pc, #136]	; (8007ebc <HAL_GPIO_Init+0x2ec>)
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	43da      	mvns	r2, r3
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	4013      	ands	r3, r2
 8007e40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	685a      	ldr	r2, [r3, #4]
 8007e46:	2380      	movs	r3, #128	; 0x80
 8007e48:	029b      	lsls	r3, r3, #10
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	d003      	beq.n	8007e56 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007e56:	4b19      	ldr	r3, [pc, #100]	; (8007ebc <HAL_GPIO_Init+0x2ec>)
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8007e5c:	4b17      	ldr	r3, [pc, #92]	; (8007ebc <HAL_GPIO_Init+0x2ec>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	43da      	mvns	r2, r3
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	4013      	ands	r3, r2
 8007e6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	685a      	ldr	r2, [r3, #4]
 8007e70:	2380      	movs	r3, #128	; 0x80
 8007e72:	025b      	lsls	r3, r3, #9
 8007e74:	4013      	ands	r3, r2
 8007e76:	d003      	beq.n	8007e80 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007e80:	4b0e      	ldr	r3, [pc, #56]	; (8007ebc <HAL_GPIO_Init+0x2ec>)
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	40da      	lsrs	r2, r3
 8007e94:	1e13      	subs	r3, r2, #0
 8007e96:	d000      	beq.n	8007e9a <HAL_GPIO_Init+0x2ca>
 8007e98:	e6a2      	b.n	8007be0 <HAL_GPIO_Init+0x10>
  } 
}
 8007e9a:	46c0      	nop			; (mov r8, r8)
 8007e9c:	46c0      	nop			; (mov r8, r8)
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	b006      	add	sp, #24
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	40021000 	.word	0x40021000
 8007ea8:	40010000 	.word	0x40010000
 8007eac:	48000400 	.word	0x48000400
 8007eb0:	48000800 	.word	0x48000800
 8007eb4:	48000c00 	.word	0x48000c00
 8007eb8:	48001000 	.word	0x48001000
 8007ebc:	40010400 	.word	0x40010400

08007ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	0008      	movs	r0, r1
 8007eca:	0011      	movs	r1, r2
 8007ecc:	1cbb      	adds	r3, r7, #2
 8007ece:	1c02      	adds	r2, r0, #0
 8007ed0:	801a      	strh	r2, [r3, #0]
 8007ed2:	1c7b      	adds	r3, r7, #1
 8007ed4:	1c0a      	adds	r2, r1, #0
 8007ed6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007ed8:	1c7b      	adds	r3, r7, #1
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d004      	beq.n	8007eea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007ee0:	1cbb      	adds	r3, r7, #2
 8007ee2:	881a      	ldrh	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007ee8:	e003      	b.n	8007ef2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007eea:	1cbb      	adds	r3, r7, #2
 8007eec:	881a      	ldrh	r2, [r3, #0]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007ef2:	46c0      	nop			; (mov r8, r8)
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	b002      	add	sp, #8
 8007ef8:	bd80      	pop	{r7, pc}
	...

08007efc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d101      	bne.n	8007f0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e082      	b.n	8008014 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2241      	movs	r2, #65	; 0x41
 8007f12:	5c9b      	ldrb	r3, [r3, r2]
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d107      	bne.n	8007f2a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2240      	movs	r2, #64	; 0x40
 8007f1e:	2100      	movs	r1, #0
 8007f20:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	0018      	movs	r0, r3
 8007f26:	f7fe fb81 	bl	800662c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2241      	movs	r2, #65	; 0x41
 8007f2e:	2124      	movs	r1, #36	; 0x24
 8007f30:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2101      	movs	r1, #1
 8007f3e:	438a      	bics	r2, r1
 8007f40:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	685a      	ldr	r2, [r3, #4]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4934      	ldr	r1, [pc, #208]	; (800801c <HAL_I2C_Init+0x120>)
 8007f4c:	400a      	ands	r2, r1
 8007f4e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	689a      	ldr	r2, [r3, #8]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4931      	ldr	r1, [pc, #196]	; (8008020 <HAL_I2C_Init+0x124>)
 8007f5c:	400a      	ands	r2, r1
 8007f5e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d108      	bne.n	8007f7a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	689a      	ldr	r2, [r3, #8]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2180      	movs	r1, #128	; 0x80
 8007f72:	0209      	lsls	r1, r1, #8
 8007f74:	430a      	orrs	r2, r1
 8007f76:	609a      	str	r2, [r3, #8]
 8007f78:	e007      	b.n	8007f8a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	689a      	ldr	r2, [r3, #8]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2184      	movs	r1, #132	; 0x84
 8007f84:	0209      	lsls	r1, r1, #8
 8007f86:	430a      	orrs	r2, r1
 8007f88:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d104      	bne.n	8007f9c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2280      	movs	r2, #128	; 0x80
 8007f98:	0112      	lsls	r2, r2, #4
 8007f9a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	685a      	ldr	r2, [r3, #4]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	491f      	ldr	r1, [pc, #124]	; (8008024 <HAL_I2C_Init+0x128>)
 8007fa8:	430a      	orrs	r2, r1
 8007faa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68da      	ldr	r2, [r3, #12]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	491a      	ldr	r1, [pc, #104]	; (8008020 <HAL_I2C_Init+0x124>)
 8007fb8:	400a      	ands	r2, r1
 8007fba:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	691a      	ldr	r2, [r3, #16]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	695b      	ldr	r3, [r3, #20]
 8007fc4:	431a      	orrs	r2, r3
 8007fc6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	430a      	orrs	r2, r1
 8007fd4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	69d9      	ldr	r1, [r3, #28]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a1a      	ldr	r2, [r3, #32]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	430a      	orrs	r2, r1
 8007fe4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2101      	movs	r1, #1
 8007ff2:	430a      	orrs	r2, r1
 8007ff4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2241      	movs	r2, #65	; 0x41
 8008000:	2120      	movs	r1, #32
 8008002:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2242      	movs	r2, #66	; 0x42
 800800e:	2100      	movs	r1, #0
 8008010:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	0018      	movs	r0, r3
 8008016:	46bd      	mov	sp, r7
 8008018:	b002      	add	sp, #8
 800801a:	bd80      	pop	{r7, pc}
 800801c:	f0ffffff 	.word	0xf0ffffff
 8008020:	ffff7fff 	.word	0xffff7fff
 8008024:	02008000 	.word	0x02008000

08008028 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008028:	b590      	push	{r4, r7, lr}
 800802a:	b089      	sub	sp, #36	; 0x24
 800802c:	af02      	add	r7, sp, #8
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	000c      	movs	r4, r1
 8008032:	0010      	movs	r0, r2
 8008034:	0019      	movs	r1, r3
 8008036:	230a      	movs	r3, #10
 8008038:	18fb      	adds	r3, r7, r3
 800803a:	1c22      	adds	r2, r4, #0
 800803c:	801a      	strh	r2, [r3, #0]
 800803e:	2308      	movs	r3, #8
 8008040:	18fb      	adds	r3, r7, r3
 8008042:	1c02      	adds	r2, r0, #0
 8008044:	801a      	strh	r2, [r3, #0]
 8008046:	1dbb      	adds	r3, r7, #6
 8008048:	1c0a      	adds	r2, r1, #0
 800804a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2241      	movs	r2, #65	; 0x41
 8008050:	5c9b      	ldrb	r3, [r3, r2]
 8008052:	b2db      	uxtb	r3, r3
 8008054:	2b20      	cmp	r3, #32
 8008056:	d000      	beq.n	800805a <HAL_I2C_Mem_Write+0x32>
 8008058:	e10c      	b.n	8008274 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800805a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805c:	2b00      	cmp	r3, #0
 800805e:	d004      	beq.n	800806a <HAL_I2C_Mem_Write+0x42>
 8008060:	232c      	movs	r3, #44	; 0x2c
 8008062:	18fb      	adds	r3, r7, r3
 8008064:	881b      	ldrh	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d105      	bne.n	8008076 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2280      	movs	r2, #128	; 0x80
 800806e:	0092      	lsls	r2, r2, #2
 8008070:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e0ff      	b.n	8008276 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2240      	movs	r2, #64	; 0x40
 800807a:	5c9b      	ldrb	r3, [r3, r2]
 800807c:	2b01      	cmp	r3, #1
 800807e:	d101      	bne.n	8008084 <HAL_I2C_Mem_Write+0x5c>
 8008080:	2302      	movs	r3, #2
 8008082:	e0f8      	b.n	8008276 <HAL_I2C_Mem_Write+0x24e>
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2240      	movs	r2, #64	; 0x40
 8008088:	2101      	movs	r1, #1
 800808a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800808c:	f7fe febe 	bl	8006e0c <HAL_GetTick>
 8008090:	0003      	movs	r3, r0
 8008092:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008094:	2380      	movs	r3, #128	; 0x80
 8008096:	0219      	lsls	r1, r3, #8
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	2319      	movs	r3, #25
 80080a0:	2201      	movs	r2, #1
 80080a2:	f000 f975 	bl	8008390 <I2C_WaitOnFlagUntilTimeout>
 80080a6:	1e03      	subs	r3, r0, #0
 80080a8:	d001      	beq.n	80080ae <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	e0e3      	b.n	8008276 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2241      	movs	r2, #65	; 0x41
 80080b2:	2121      	movs	r1, #33	; 0x21
 80080b4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2242      	movs	r2, #66	; 0x42
 80080ba:	2140      	movs	r1, #64	; 0x40
 80080bc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	222c      	movs	r2, #44	; 0x2c
 80080ce:	18ba      	adds	r2, r7, r2
 80080d0:	8812      	ldrh	r2, [r2, #0]
 80080d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2200      	movs	r2, #0
 80080d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80080da:	1dbb      	adds	r3, r7, #6
 80080dc:	881c      	ldrh	r4, [r3, #0]
 80080de:	2308      	movs	r3, #8
 80080e0:	18fb      	adds	r3, r7, r3
 80080e2:	881a      	ldrh	r2, [r3, #0]
 80080e4:	230a      	movs	r3, #10
 80080e6:	18fb      	adds	r3, r7, r3
 80080e8:	8819      	ldrh	r1, [r3, #0]
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	9301      	str	r3, [sp, #4]
 80080f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f2:	9300      	str	r3, [sp, #0]
 80080f4:	0023      	movs	r3, r4
 80080f6:	f000 f8c5 	bl	8008284 <I2C_RequestMemoryWrite>
 80080fa:	1e03      	subs	r3, r0, #0
 80080fc:	d005      	beq.n	800810a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2240      	movs	r2, #64	; 0x40
 8008102:	2100      	movs	r1, #0
 8008104:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e0b5      	b.n	8008276 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800810e:	b29b      	uxth	r3, r3
 8008110:	2bff      	cmp	r3, #255	; 0xff
 8008112:	d911      	bls.n	8008138 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	22ff      	movs	r2, #255	; 0xff
 8008118:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800811e:	b2da      	uxtb	r2, r3
 8008120:	2380      	movs	r3, #128	; 0x80
 8008122:	045c      	lsls	r4, r3, #17
 8008124:	230a      	movs	r3, #10
 8008126:	18fb      	adds	r3, r7, r3
 8008128:	8819      	ldrh	r1, [r3, #0]
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	2300      	movs	r3, #0
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	0023      	movs	r3, r4
 8008132:	f000 fb05 	bl	8008740 <I2C_TransferConfig>
 8008136:	e012      	b.n	800815e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800813c:	b29a      	uxth	r2, r3
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008146:	b2da      	uxtb	r2, r3
 8008148:	2380      	movs	r3, #128	; 0x80
 800814a:	049c      	lsls	r4, r3, #18
 800814c:	230a      	movs	r3, #10
 800814e:	18fb      	adds	r3, r7, r3
 8008150:	8819      	ldrh	r1, [r3, #0]
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	2300      	movs	r3, #0
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	0023      	movs	r3, r4
 800815a:	f000 faf1 	bl	8008740 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	0018      	movs	r0, r3
 8008166:	f000 f961 	bl	800842c <I2C_WaitOnTXISFlagUntilTimeout>
 800816a:	1e03      	subs	r3, r0, #0
 800816c:	d001      	beq.n	8008172 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	e081      	b.n	8008276 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008176:	781a      	ldrb	r2, [r3, #0]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008182:	1c5a      	adds	r2, r3, #1
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800818c:	b29b      	uxth	r3, r3
 800818e:	3b01      	subs	r3, #1
 8008190:	b29a      	uxth	r2, r3
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800819a:	3b01      	subs	r3, #1
 800819c:	b29a      	uxth	r2, r3
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d03a      	beq.n	8008222 <HAL_I2C_Mem_Write+0x1fa>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d136      	bne.n	8008222 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80081b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	0013      	movs	r3, r2
 80081be:	2200      	movs	r2, #0
 80081c0:	2180      	movs	r1, #128	; 0x80
 80081c2:	f000 f8e5 	bl	8008390 <I2C_WaitOnFlagUntilTimeout>
 80081c6:	1e03      	subs	r3, r0, #0
 80081c8:	d001      	beq.n	80081ce <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	e053      	b.n	8008276 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	2bff      	cmp	r3, #255	; 0xff
 80081d6:	d911      	bls.n	80081fc <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	22ff      	movs	r2, #255	; 0xff
 80081dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081e2:	b2da      	uxtb	r2, r3
 80081e4:	2380      	movs	r3, #128	; 0x80
 80081e6:	045c      	lsls	r4, r3, #17
 80081e8:	230a      	movs	r3, #10
 80081ea:	18fb      	adds	r3, r7, r3
 80081ec:	8819      	ldrh	r1, [r3, #0]
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	2300      	movs	r3, #0
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	0023      	movs	r3, r4
 80081f6:	f000 faa3 	bl	8008740 <I2C_TransferConfig>
 80081fa:	e012      	b.n	8008222 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008200:	b29a      	uxth	r2, r3
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800820a:	b2da      	uxtb	r2, r3
 800820c:	2380      	movs	r3, #128	; 0x80
 800820e:	049c      	lsls	r4, r3, #18
 8008210:	230a      	movs	r3, #10
 8008212:	18fb      	adds	r3, r7, r3
 8008214:	8819      	ldrh	r1, [r3, #0]
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	2300      	movs	r3, #0
 800821a:	9300      	str	r3, [sp, #0]
 800821c:	0023      	movs	r3, r4
 800821e:	f000 fa8f 	bl	8008740 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008226:	b29b      	uxth	r3, r3
 8008228:	2b00      	cmp	r3, #0
 800822a:	d198      	bne.n	800815e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800822c:	697a      	ldr	r2, [r7, #20]
 800822e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	0018      	movs	r0, r3
 8008234:	f000 f940 	bl	80084b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008238:	1e03      	subs	r3, r0, #0
 800823a:	d001      	beq.n	8008240 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	e01a      	b.n	8008276 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2220      	movs	r2, #32
 8008246:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	685a      	ldr	r2, [r3, #4]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	490b      	ldr	r1, [pc, #44]	; (8008280 <HAL_I2C_Mem_Write+0x258>)
 8008254:	400a      	ands	r2, r1
 8008256:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2241      	movs	r2, #65	; 0x41
 800825c:	2120      	movs	r1, #32
 800825e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2242      	movs	r2, #66	; 0x42
 8008264:	2100      	movs	r1, #0
 8008266:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2240      	movs	r2, #64	; 0x40
 800826c:	2100      	movs	r1, #0
 800826e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008270:	2300      	movs	r3, #0
 8008272:	e000      	b.n	8008276 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8008274:	2302      	movs	r3, #2
  }
}
 8008276:	0018      	movs	r0, r3
 8008278:	46bd      	mov	sp, r7
 800827a:	b007      	add	sp, #28
 800827c:	bd90      	pop	{r4, r7, pc}
 800827e:	46c0      	nop			; (mov r8, r8)
 8008280:	fe00e800 	.word	0xfe00e800

08008284 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008284:	b5b0      	push	{r4, r5, r7, lr}
 8008286:	b086      	sub	sp, #24
 8008288:	af02      	add	r7, sp, #8
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	000c      	movs	r4, r1
 800828e:	0010      	movs	r0, r2
 8008290:	0019      	movs	r1, r3
 8008292:	250a      	movs	r5, #10
 8008294:	197b      	adds	r3, r7, r5
 8008296:	1c22      	adds	r2, r4, #0
 8008298:	801a      	strh	r2, [r3, #0]
 800829a:	2308      	movs	r3, #8
 800829c:	18fb      	adds	r3, r7, r3
 800829e:	1c02      	adds	r2, r0, #0
 80082a0:	801a      	strh	r2, [r3, #0]
 80082a2:	1dbb      	adds	r3, r7, #6
 80082a4:	1c0a      	adds	r2, r1, #0
 80082a6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80082a8:	1dbb      	adds	r3, r7, #6
 80082aa:	881b      	ldrh	r3, [r3, #0]
 80082ac:	b2da      	uxtb	r2, r3
 80082ae:	2380      	movs	r3, #128	; 0x80
 80082b0:	045c      	lsls	r4, r3, #17
 80082b2:	197b      	adds	r3, r7, r5
 80082b4:	8819      	ldrh	r1, [r3, #0]
 80082b6:	68f8      	ldr	r0, [r7, #12]
 80082b8:	4b23      	ldr	r3, [pc, #140]	; (8008348 <I2C_RequestMemoryWrite+0xc4>)
 80082ba:	9300      	str	r3, [sp, #0]
 80082bc:	0023      	movs	r3, r4
 80082be:	f000 fa3f 	bl	8008740 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082c4:	6a39      	ldr	r1, [r7, #32]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	0018      	movs	r0, r3
 80082ca:	f000 f8af 	bl	800842c <I2C_WaitOnTXISFlagUntilTimeout>
 80082ce:	1e03      	subs	r3, r0, #0
 80082d0:	d001      	beq.n	80082d6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	e033      	b.n	800833e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80082d6:	1dbb      	adds	r3, r7, #6
 80082d8:	881b      	ldrh	r3, [r3, #0]
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d107      	bne.n	80082ee <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80082de:	2308      	movs	r3, #8
 80082e0:	18fb      	adds	r3, r7, r3
 80082e2:	881b      	ldrh	r3, [r3, #0]
 80082e4:	b2da      	uxtb	r2, r3
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	629a      	str	r2, [r3, #40]	; 0x28
 80082ec:	e019      	b.n	8008322 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80082ee:	2308      	movs	r3, #8
 80082f0:	18fb      	adds	r3, r7, r3
 80082f2:	881b      	ldrh	r3, [r3, #0]
 80082f4:	0a1b      	lsrs	r3, r3, #8
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	b2da      	uxtb	r2, r3
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008302:	6a39      	ldr	r1, [r7, #32]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	0018      	movs	r0, r3
 8008308:	f000 f890 	bl	800842c <I2C_WaitOnTXISFlagUntilTimeout>
 800830c:	1e03      	subs	r3, r0, #0
 800830e:	d001      	beq.n	8008314 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e014      	b.n	800833e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008314:	2308      	movs	r3, #8
 8008316:	18fb      	adds	r3, r7, r3
 8008318:	881b      	ldrh	r3, [r3, #0]
 800831a:	b2da      	uxtb	r2, r3
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008322:	6a3a      	ldr	r2, [r7, #32]
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008328:	9300      	str	r3, [sp, #0]
 800832a:	0013      	movs	r3, r2
 800832c:	2200      	movs	r2, #0
 800832e:	2180      	movs	r1, #128	; 0x80
 8008330:	f000 f82e 	bl	8008390 <I2C_WaitOnFlagUntilTimeout>
 8008334:	1e03      	subs	r3, r0, #0
 8008336:	d001      	beq.n	800833c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	e000      	b.n	800833e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	0018      	movs	r0, r3
 8008340:	46bd      	mov	sp, r7
 8008342:	b004      	add	sp, #16
 8008344:	bdb0      	pop	{r4, r5, r7, pc}
 8008346:	46c0      	nop			; (mov r8, r8)
 8008348:	80002000 	.word	0x80002000

0800834c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	2202      	movs	r2, #2
 800835c:	4013      	ands	r3, r2
 800835e:	2b02      	cmp	r3, #2
 8008360:	d103      	bne.n	800836a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2200      	movs	r2, #0
 8008368:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	699b      	ldr	r3, [r3, #24]
 8008370:	2201      	movs	r2, #1
 8008372:	4013      	ands	r3, r2
 8008374:	2b01      	cmp	r3, #1
 8008376:	d007      	beq.n	8008388 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	699a      	ldr	r2, [r3, #24]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2101      	movs	r1, #1
 8008384:	430a      	orrs	r2, r1
 8008386:	619a      	str	r2, [r3, #24]
  }
}
 8008388:	46c0      	nop			; (mov r8, r8)
 800838a:	46bd      	mov	sp, r7
 800838c:	b002      	add	sp, #8
 800838e:	bd80      	pop	{r7, pc}

08008390 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	603b      	str	r3, [r7, #0]
 800839c:	1dfb      	adds	r3, r7, #7
 800839e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80083a0:	e030      	b.n	8008404 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	3301      	adds	r3, #1
 80083a6:	d02d      	beq.n	8008404 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083a8:	f7fe fd30 	bl	8006e0c <HAL_GetTick>
 80083ac:	0002      	movs	r2, r0
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	683a      	ldr	r2, [r7, #0]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d302      	bcc.n	80083be <I2C_WaitOnFlagUntilTimeout+0x2e>
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d122      	bne.n	8008404 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	699b      	ldr	r3, [r3, #24]
 80083c4:	68ba      	ldr	r2, [r7, #8]
 80083c6:	4013      	ands	r3, r2
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	1ad3      	subs	r3, r2, r3
 80083cc:	425a      	negs	r2, r3
 80083ce:	4153      	adcs	r3, r2
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	001a      	movs	r2, r3
 80083d4:	1dfb      	adds	r3, r7, #7
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d113      	bne.n	8008404 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083e0:	2220      	movs	r2, #32
 80083e2:	431a      	orrs	r2, r3
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2241      	movs	r2, #65	; 0x41
 80083ec:	2120      	movs	r1, #32
 80083ee:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2242      	movs	r2, #66	; 0x42
 80083f4:	2100      	movs	r1, #0
 80083f6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2240      	movs	r2, #64	; 0x40
 80083fc:	2100      	movs	r1, #0
 80083fe:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e00f      	b.n	8008424 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	699b      	ldr	r3, [r3, #24]
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	4013      	ands	r3, r2
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	1ad3      	subs	r3, r2, r3
 8008412:	425a      	negs	r2, r3
 8008414:	4153      	adcs	r3, r2
 8008416:	b2db      	uxtb	r3, r3
 8008418:	001a      	movs	r2, r3
 800841a:	1dfb      	adds	r3, r7, #7
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	429a      	cmp	r2, r3
 8008420:	d0bf      	beq.n	80083a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	0018      	movs	r0, r3
 8008426:	46bd      	mov	sp, r7
 8008428:	b004      	add	sp, #16
 800842a:	bd80      	pop	{r7, pc}

0800842c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008438:	e032      	b.n	80084a0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	68b9      	ldr	r1, [r7, #8]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	0018      	movs	r0, r3
 8008442:	f000 f87d 	bl	8008540 <I2C_IsErrorOccurred>
 8008446:	1e03      	subs	r3, r0, #0
 8008448:	d001      	beq.n	800844e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e030      	b.n	80084b0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	3301      	adds	r3, #1
 8008452:	d025      	beq.n	80084a0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008454:	f7fe fcda 	bl	8006e0c <HAL_GetTick>
 8008458:	0002      	movs	r2, r0
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	429a      	cmp	r2, r3
 8008462:	d302      	bcc.n	800846a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d11a      	bne.n	80084a0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	2202      	movs	r2, #2
 8008472:	4013      	ands	r3, r2
 8008474:	2b02      	cmp	r3, #2
 8008476:	d013      	beq.n	80084a0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800847c:	2220      	movs	r2, #32
 800847e:	431a      	orrs	r2, r3
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2241      	movs	r2, #65	; 0x41
 8008488:	2120      	movs	r1, #32
 800848a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2242      	movs	r2, #66	; 0x42
 8008490:	2100      	movs	r1, #0
 8008492:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2240      	movs	r2, #64	; 0x40
 8008498:	2100      	movs	r1, #0
 800849a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e007      	b.n	80084b0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	699b      	ldr	r3, [r3, #24]
 80084a6:	2202      	movs	r2, #2
 80084a8:	4013      	ands	r3, r2
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d1c5      	bne.n	800843a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80084ae:	2300      	movs	r3, #0
}
 80084b0:	0018      	movs	r0, r3
 80084b2:	46bd      	mov	sp, r7
 80084b4:	b004      	add	sp, #16
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80084c4:	e02f      	b.n	8008526 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	68b9      	ldr	r1, [r7, #8]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	0018      	movs	r0, r3
 80084ce:	f000 f837 	bl	8008540 <I2C_IsErrorOccurred>
 80084d2:	1e03      	subs	r3, r0, #0
 80084d4:	d001      	beq.n	80084da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	e02d      	b.n	8008536 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084da:	f7fe fc97 	bl	8006e0c <HAL_GetTick>
 80084de:	0002      	movs	r2, r0
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	68ba      	ldr	r2, [r7, #8]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d302      	bcc.n	80084f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d11a      	bne.n	8008526 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	2220      	movs	r2, #32
 80084f8:	4013      	ands	r3, r2
 80084fa:	2b20      	cmp	r3, #32
 80084fc:	d013      	beq.n	8008526 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008502:	2220      	movs	r2, #32
 8008504:	431a      	orrs	r2, r3
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2241      	movs	r2, #65	; 0x41
 800850e:	2120      	movs	r1, #32
 8008510:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2242      	movs	r2, #66	; 0x42
 8008516:	2100      	movs	r1, #0
 8008518:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2240      	movs	r2, #64	; 0x40
 800851e:	2100      	movs	r1, #0
 8008520:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e007      	b.n	8008536 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	2220      	movs	r2, #32
 800852e:	4013      	ands	r3, r2
 8008530:	2b20      	cmp	r3, #32
 8008532:	d1c8      	bne.n	80084c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	0018      	movs	r0, r3
 8008538:	46bd      	mov	sp, r7
 800853a:	b004      	add	sp, #16
 800853c:	bd80      	pop	{r7, pc}
	...

08008540 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008540:	b590      	push	{r4, r7, lr}
 8008542:	b08b      	sub	sp, #44	; 0x2c
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800854c:	2327      	movs	r3, #39	; 0x27
 800854e:	18fb      	adds	r3, r7, r3
 8008550:	2200      	movs	r2, #0
 8008552:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800855c:	2300      	movs	r3, #0
 800855e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	2210      	movs	r2, #16
 8008568:	4013      	ands	r3, r2
 800856a:	d100      	bne.n	800856e <I2C_IsErrorOccurred+0x2e>
 800856c:	e082      	b.n	8008674 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2210      	movs	r2, #16
 8008574:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008576:	e060      	b.n	800863a <I2C_IsErrorOccurred+0xfa>
 8008578:	2427      	movs	r4, #39	; 0x27
 800857a:	193b      	adds	r3, r7, r4
 800857c:	193a      	adds	r2, r7, r4
 800857e:	7812      	ldrb	r2, [r2, #0]
 8008580:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	3301      	adds	r3, #1
 8008586:	d058      	beq.n	800863a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008588:	f7fe fc40 	bl	8006e0c <HAL_GetTick>
 800858c:	0002      	movs	r2, r0
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	429a      	cmp	r2, r3
 8008596:	d306      	bcc.n	80085a6 <I2C_IsErrorOccurred+0x66>
 8008598:	193b      	adds	r3, r7, r4
 800859a:	193a      	adds	r2, r7, r4
 800859c:	7812      	ldrb	r2, [r2, #0]
 800859e:	701a      	strb	r2, [r3, #0]
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d149      	bne.n	800863a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	685a      	ldr	r2, [r3, #4]
 80085ac:	2380      	movs	r3, #128	; 0x80
 80085ae:	01db      	lsls	r3, r3, #7
 80085b0:	4013      	ands	r3, r2
 80085b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80085b4:	2013      	movs	r0, #19
 80085b6:	183b      	adds	r3, r7, r0
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	2142      	movs	r1, #66	; 0x42
 80085bc:	5c52      	ldrb	r2, [r2, r1]
 80085be:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	699a      	ldr	r2, [r3, #24]
 80085c6:	2380      	movs	r3, #128	; 0x80
 80085c8:	021b      	lsls	r3, r3, #8
 80085ca:	401a      	ands	r2, r3
 80085cc:	2380      	movs	r3, #128	; 0x80
 80085ce:	021b      	lsls	r3, r3, #8
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d126      	bne.n	8008622 <I2C_IsErrorOccurred+0xe2>
 80085d4:	697a      	ldr	r2, [r7, #20]
 80085d6:	2380      	movs	r3, #128	; 0x80
 80085d8:	01db      	lsls	r3, r3, #7
 80085da:	429a      	cmp	r2, r3
 80085dc:	d021      	beq.n	8008622 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80085de:	183b      	adds	r3, r7, r0
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	2b20      	cmp	r3, #32
 80085e4:	d01d      	beq.n	8008622 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	685a      	ldr	r2, [r3, #4]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2180      	movs	r1, #128	; 0x80
 80085f2:	01c9      	lsls	r1, r1, #7
 80085f4:	430a      	orrs	r2, r1
 80085f6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80085f8:	f7fe fc08 	bl	8006e0c <HAL_GetTick>
 80085fc:	0003      	movs	r3, r0
 80085fe:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008600:	e00f      	b.n	8008622 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008602:	f7fe fc03 	bl	8006e0c <HAL_GetTick>
 8008606:	0002      	movs	r2, r0
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	2b19      	cmp	r3, #25
 800860e:	d908      	bls.n	8008622 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008610:	6a3b      	ldr	r3, [r7, #32]
 8008612:	2220      	movs	r2, #32
 8008614:	4313      	orrs	r3, r2
 8008616:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008618:	2327      	movs	r3, #39	; 0x27
 800861a:	18fb      	adds	r3, r7, r3
 800861c:	2201      	movs	r2, #1
 800861e:	701a      	strb	r2, [r3, #0]

              break;
 8008620:	e00b      	b.n	800863a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	699b      	ldr	r3, [r3, #24]
 8008628:	2220      	movs	r2, #32
 800862a:	4013      	ands	r3, r2
 800862c:	2127      	movs	r1, #39	; 0x27
 800862e:	187a      	adds	r2, r7, r1
 8008630:	1879      	adds	r1, r7, r1
 8008632:	7809      	ldrb	r1, [r1, #0]
 8008634:	7011      	strb	r1, [r2, #0]
 8008636:	2b20      	cmp	r3, #32
 8008638:	d1e3      	bne.n	8008602 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	699b      	ldr	r3, [r3, #24]
 8008640:	2220      	movs	r2, #32
 8008642:	4013      	ands	r3, r2
 8008644:	2b20      	cmp	r3, #32
 8008646:	d004      	beq.n	8008652 <I2C_IsErrorOccurred+0x112>
 8008648:	2327      	movs	r3, #39	; 0x27
 800864a:	18fb      	adds	r3, r7, r3
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d092      	beq.n	8008578 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008652:	2327      	movs	r3, #39	; 0x27
 8008654:	18fb      	adds	r3, r7, r3
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d103      	bne.n	8008664 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2220      	movs	r2, #32
 8008662:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008664:	6a3b      	ldr	r3, [r7, #32]
 8008666:	2204      	movs	r2, #4
 8008668:	4313      	orrs	r3, r2
 800866a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800866c:	2327      	movs	r3, #39	; 0x27
 800866e:	18fb      	adds	r3, r7, r3
 8008670:	2201      	movs	r2, #1
 8008672:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	699b      	ldr	r3, [r3, #24]
 800867a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800867c:	69ba      	ldr	r2, [r7, #24]
 800867e:	2380      	movs	r3, #128	; 0x80
 8008680:	005b      	lsls	r3, r3, #1
 8008682:	4013      	ands	r3, r2
 8008684:	d00c      	beq.n	80086a0 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008686:	6a3b      	ldr	r3, [r7, #32]
 8008688:	2201      	movs	r2, #1
 800868a:	4313      	orrs	r3, r2
 800868c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	2280      	movs	r2, #128	; 0x80
 8008694:	0052      	lsls	r2, r2, #1
 8008696:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008698:	2327      	movs	r3, #39	; 0x27
 800869a:	18fb      	adds	r3, r7, r3
 800869c:	2201      	movs	r2, #1
 800869e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80086a0:	69ba      	ldr	r2, [r7, #24]
 80086a2:	2380      	movs	r3, #128	; 0x80
 80086a4:	00db      	lsls	r3, r3, #3
 80086a6:	4013      	ands	r3, r2
 80086a8:	d00c      	beq.n	80086c4 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80086aa:	6a3b      	ldr	r3, [r7, #32]
 80086ac:	2208      	movs	r2, #8
 80086ae:	4313      	orrs	r3, r2
 80086b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2280      	movs	r2, #128	; 0x80
 80086b8:	00d2      	lsls	r2, r2, #3
 80086ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80086bc:	2327      	movs	r3, #39	; 0x27
 80086be:	18fb      	adds	r3, r7, r3
 80086c0:	2201      	movs	r2, #1
 80086c2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80086c4:	69ba      	ldr	r2, [r7, #24]
 80086c6:	2380      	movs	r3, #128	; 0x80
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	4013      	ands	r3, r2
 80086cc:	d00c      	beq.n	80086e8 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80086ce:	6a3b      	ldr	r3, [r7, #32]
 80086d0:	2202      	movs	r2, #2
 80086d2:	4313      	orrs	r3, r2
 80086d4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2280      	movs	r2, #128	; 0x80
 80086dc:	0092      	lsls	r2, r2, #2
 80086de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80086e0:	2327      	movs	r3, #39	; 0x27
 80086e2:	18fb      	adds	r3, r7, r3
 80086e4:	2201      	movs	r2, #1
 80086e6:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80086e8:	2327      	movs	r3, #39	; 0x27
 80086ea:	18fb      	adds	r3, r7, r3
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d01d      	beq.n	800872e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	0018      	movs	r0, r3
 80086f6:	f7ff fe29 	bl	800834c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	685a      	ldr	r2, [r3, #4]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	490d      	ldr	r1, [pc, #52]	; (800873c <I2C_IsErrorOccurred+0x1fc>)
 8008706:	400a      	ands	r2, r1
 8008708:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800870e:	6a3b      	ldr	r3, [r7, #32]
 8008710:	431a      	orrs	r2, r3
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2241      	movs	r2, #65	; 0x41
 800871a:	2120      	movs	r1, #32
 800871c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2242      	movs	r2, #66	; 0x42
 8008722:	2100      	movs	r1, #0
 8008724:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2240      	movs	r2, #64	; 0x40
 800872a:	2100      	movs	r1, #0
 800872c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800872e:	2327      	movs	r3, #39	; 0x27
 8008730:	18fb      	adds	r3, r7, r3
 8008732:	781b      	ldrb	r3, [r3, #0]
}
 8008734:	0018      	movs	r0, r3
 8008736:	46bd      	mov	sp, r7
 8008738:	b00b      	add	sp, #44	; 0x2c
 800873a:	bd90      	pop	{r4, r7, pc}
 800873c:	fe00e800 	.word	0xfe00e800

08008740 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008740:	b590      	push	{r4, r7, lr}
 8008742:	b087      	sub	sp, #28
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	0008      	movs	r0, r1
 800874a:	0011      	movs	r1, r2
 800874c:	607b      	str	r3, [r7, #4]
 800874e:	240a      	movs	r4, #10
 8008750:	193b      	adds	r3, r7, r4
 8008752:	1c02      	adds	r2, r0, #0
 8008754:	801a      	strh	r2, [r3, #0]
 8008756:	2009      	movs	r0, #9
 8008758:	183b      	adds	r3, r7, r0
 800875a:	1c0a      	adds	r2, r1, #0
 800875c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800875e:	193b      	adds	r3, r7, r4
 8008760:	881b      	ldrh	r3, [r3, #0]
 8008762:	059b      	lsls	r3, r3, #22
 8008764:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008766:	183b      	adds	r3, r7, r0
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	0419      	lsls	r1, r3, #16
 800876c:	23ff      	movs	r3, #255	; 0xff
 800876e:	041b      	lsls	r3, r3, #16
 8008770:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008772:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877a:	4313      	orrs	r3, r2
 800877c:	005b      	lsls	r3, r3, #1
 800877e:	085b      	lsrs	r3, r3, #1
 8008780:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800878a:	0d51      	lsrs	r1, r2, #21
 800878c:	2280      	movs	r2, #128	; 0x80
 800878e:	00d2      	lsls	r2, r2, #3
 8008790:	400a      	ands	r2, r1
 8008792:	4907      	ldr	r1, [pc, #28]	; (80087b0 <I2C_TransferConfig+0x70>)
 8008794:	430a      	orrs	r2, r1
 8008796:	43d2      	mvns	r2, r2
 8008798:	401a      	ands	r2, r3
 800879a:	0011      	movs	r1, r2
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	697a      	ldr	r2, [r7, #20]
 80087a2:	430a      	orrs	r2, r1
 80087a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80087a6:	46c0      	nop			; (mov r8, r8)
 80087a8:	46bd      	mov	sp, r7
 80087aa:	b007      	add	sp, #28
 80087ac:	bd90      	pop	{r4, r7, pc}
 80087ae:	46c0      	nop			; (mov r8, r8)
 80087b0:	03ff63ff 	.word	0x03ff63ff

080087b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2241      	movs	r2, #65	; 0x41
 80087c2:	5c9b      	ldrb	r3, [r3, r2]
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	2b20      	cmp	r3, #32
 80087c8:	d138      	bne.n	800883c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2240      	movs	r2, #64	; 0x40
 80087ce:	5c9b      	ldrb	r3, [r3, r2]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d101      	bne.n	80087d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80087d4:	2302      	movs	r3, #2
 80087d6:	e032      	b.n	800883e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2240      	movs	r2, #64	; 0x40
 80087dc:	2101      	movs	r1, #1
 80087de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2241      	movs	r2, #65	; 0x41
 80087e4:	2124      	movs	r1, #36	; 0x24
 80087e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2101      	movs	r1, #1
 80087f4:	438a      	bics	r2, r1
 80087f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4911      	ldr	r1, [pc, #68]	; (8008848 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8008804:	400a      	ands	r2, r1
 8008806:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	6819      	ldr	r1, [r3, #0]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	683a      	ldr	r2, [r7, #0]
 8008814:	430a      	orrs	r2, r1
 8008816:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2101      	movs	r1, #1
 8008824:	430a      	orrs	r2, r1
 8008826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2241      	movs	r2, #65	; 0x41
 800882c:	2120      	movs	r1, #32
 800882e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2240      	movs	r2, #64	; 0x40
 8008834:	2100      	movs	r1, #0
 8008836:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008838:	2300      	movs	r3, #0
 800883a:	e000      	b.n	800883e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800883c:	2302      	movs	r3, #2
  }
}
 800883e:	0018      	movs	r0, r3
 8008840:	46bd      	mov	sp, r7
 8008842:	b002      	add	sp, #8
 8008844:	bd80      	pop	{r7, pc}
 8008846:	46c0      	nop			; (mov r8, r8)
 8008848:	ffffefff 	.word	0xffffefff

0800884c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2241      	movs	r2, #65	; 0x41
 800885a:	5c9b      	ldrb	r3, [r3, r2]
 800885c:	b2db      	uxtb	r3, r3
 800885e:	2b20      	cmp	r3, #32
 8008860:	d139      	bne.n	80088d6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2240      	movs	r2, #64	; 0x40
 8008866:	5c9b      	ldrb	r3, [r3, r2]
 8008868:	2b01      	cmp	r3, #1
 800886a:	d101      	bne.n	8008870 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800886c:	2302      	movs	r3, #2
 800886e:	e033      	b.n	80088d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2240      	movs	r2, #64	; 0x40
 8008874:	2101      	movs	r1, #1
 8008876:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2241      	movs	r2, #65	; 0x41
 800887c:	2124      	movs	r1, #36	; 0x24
 800887e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2101      	movs	r1, #1
 800888c:	438a      	bics	r2, r1
 800888e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	4a11      	ldr	r2, [pc, #68]	; (80088e0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800889c:	4013      	ands	r3, r2
 800889e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	021b      	lsls	r3, r3, #8
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2101      	movs	r1, #1
 80088be:	430a      	orrs	r2, r1
 80088c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2241      	movs	r2, #65	; 0x41
 80088c6:	2120      	movs	r1, #32
 80088c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2240      	movs	r2, #64	; 0x40
 80088ce:	2100      	movs	r1, #0
 80088d0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80088d2:	2300      	movs	r3, #0
 80088d4:	e000      	b.n	80088d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80088d6:	2302      	movs	r3, #2
  }
}
 80088d8:	0018      	movs	r0, r3
 80088da:	46bd      	mov	sp, r7
 80088dc:	b004      	add	sp, #16
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	fffff0ff 	.word	0xfffff0ff

080088e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b088      	sub	sp, #32
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d102      	bne.n	80088f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	f000 fb76 	bl	8008fe4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2201      	movs	r2, #1
 80088fe:	4013      	ands	r3, r2
 8008900:	d100      	bne.n	8008904 <HAL_RCC_OscConfig+0x20>
 8008902:	e08e      	b.n	8008a22 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8008904:	4bc5      	ldr	r3, [pc, #788]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	220c      	movs	r2, #12
 800890a:	4013      	ands	r3, r2
 800890c:	2b04      	cmp	r3, #4
 800890e:	d00e      	beq.n	800892e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008910:	4bc2      	ldr	r3, [pc, #776]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	220c      	movs	r2, #12
 8008916:	4013      	ands	r3, r2
 8008918:	2b08      	cmp	r3, #8
 800891a:	d117      	bne.n	800894c <HAL_RCC_OscConfig+0x68>
 800891c:	4bbf      	ldr	r3, [pc, #764]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 800891e:	685a      	ldr	r2, [r3, #4]
 8008920:	23c0      	movs	r3, #192	; 0xc0
 8008922:	025b      	lsls	r3, r3, #9
 8008924:	401a      	ands	r2, r3
 8008926:	2380      	movs	r3, #128	; 0x80
 8008928:	025b      	lsls	r3, r3, #9
 800892a:	429a      	cmp	r2, r3
 800892c:	d10e      	bne.n	800894c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800892e:	4bbb      	ldr	r3, [pc, #748]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	2380      	movs	r3, #128	; 0x80
 8008934:	029b      	lsls	r3, r3, #10
 8008936:	4013      	ands	r3, r2
 8008938:	d100      	bne.n	800893c <HAL_RCC_OscConfig+0x58>
 800893a:	e071      	b.n	8008a20 <HAL_RCC_OscConfig+0x13c>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d000      	beq.n	8008946 <HAL_RCC_OscConfig+0x62>
 8008944:	e06c      	b.n	8008a20 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	f000 fb4c 	bl	8008fe4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	2b01      	cmp	r3, #1
 8008952:	d107      	bne.n	8008964 <HAL_RCC_OscConfig+0x80>
 8008954:	4bb1      	ldr	r3, [pc, #708]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	4bb0      	ldr	r3, [pc, #704]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 800895a:	2180      	movs	r1, #128	; 0x80
 800895c:	0249      	lsls	r1, r1, #9
 800895e:	430a      	orrs	r2, r1
 8008960:	601a      	str	r2, [r3, #0]
 8008962:	e02f      	b.n	80089c4 <HAL_RCC_OscConfig+0xe0>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d10c      	bne.n	8008986 <HAL_RCC_OscConfig+0xa2>
 800896c:	4bab      	ldr	r3, [pc, #684]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	4baa      	ldr	r3, [pc, #680]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008972:	49ab      	ldr	r1, [pc, #684]	; (8008c20 <HAL_RCC_OscConfig+0x33c>)
 8008974:	400a      	ands	r2, r1
 8008976:	601a      	str	r2, [r3, #0]
 8008978:	4ba8      	ldr	r3, [pc, #672]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	4ba7      	ldr	r3, [pc, #668]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 800897e:	49a9      	ldr	r1, [pc, #676]	; (8008c24 <HAL_RCC_OscConfig+0x340>)
 8008980:	400a      	ands	r2, r1
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	e01e      	b.n	80089c4 <HAL_RCC_OscConfig+0xe0>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	2b05      	cmp	r3, #5
 800898c:	d10e      	bne.n	80089ac <HAL_RCC_OscConfig+0xc8>
 800898e:	4ba3      	ldr	r3, [pc, #652]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	4ba2      	ldr	r3, [pc, #648]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008994:	2180      	movs	r1, #128	; 0x80
 8008996:	02c9      	lsls	r1, r1, #11
 8008998:	430a      	orrs	r2, r1
 800899a:	601a      	str	r2, [r3, #0]
 800899c:	4b9f      	ldr	r3, [pc, #636]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	4b9e      	ldr	r3, [pc, #632]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 80089a2:	2180      	movs	r1, #128	; 0x80
 80089a4:	0249      	lsls	r1, r1, #9
 80089a6:	430a      	orrs	r2, r1
 80089a8:	601a      	str	r2, [r3, #0]
 80089aa:	e00b      	b.n	80089c4 <HAL_RCC_OscConfig+0xe0>
 80089ac:	4b9b      	ldr	r3, [pc, #620]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	4b9a      	ldr	r3, [pc, #616]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 80089b2:	499b      	ldr	r1, [pc, #620]	; (8008c20 <HAL_RCC_OscConfig+0x33c>)
 80089b4:	400a      	ands	r2, r1
 80089b6:	601a      	str	r2, [r3, #0]
 80089b8:	4b98      	ldr	r3, [pc, #608]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	4b97      	ldr	r3, [pc, #604]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 80089be:	4999      	ldr	r1, [pc, #612]	; (8008c24 <HAL_RCC_OscConfig+0x340>)
 80089c0:	400a      	ands	r2, r1
 80089c2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d014      	beq.n	80089f6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089cc:	f7fe fa1e 	bl	8006e0c <HAL_GetTick>
 80089d0:	0003      	movs	r3, r0
 80089d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089d4:	e008      	b.n	80089e8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80089d6:	f7fe fa19 	bl	8006e0c <HAL_GetTick>
 80089da:	0002      	movs	r2, r0
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	2b64      	cmp	r3, #100	; 0x64
 80089e2:	d901      	bls.n	80089e8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e2fd      	b.n	8008fe4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089e8:	4b8c      	ldr	r3, [pc, #560]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	2380      	movs	r3, #128	; 0x80
 80089ee:	029b      	lsls	r3, r3, #10
 80089f0:	4013      	ands	r3, r2
 80089f2:	d0f0      	beq.n	80089d6 <HAL_RCC_OscConfig+0xf2>
 80089f4:	e015      	b.n	8008a22 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089f6:	f7fe fa09 	bl	8006e0c <HAL_GetTick>
 80089fa:	0003      	movs	r3, r0
 80089fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089fe:	e008      	b.n	8008a12 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a00:	f7fe fa04 	bl	8006e0c <HAL_GetTick>
 8008a04:	0002      	movs	r2, r0
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	2b64      	cmp	r3, #100	; 0x64
 8008a0c:	d901      	bls.n	8008a12 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	e2e8      	b.n	8008fe4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a12:	4b82      	ldr	r3, [pc, #520]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	2380      	movs	r3, #128	; 0x80
 8008a18:	029b      	lsls	r3, r3, #10
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	d1f0      	bne.n	8008a00 <HAL_RCC_OscConfig+0x11c>
 8008a1e:	e000      	b.n	8008a22 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a20:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2202      	movs	r2, #2
 8008a28:	4013      	ands	r3, r2
 8008a2a:	d100      	bne.n	8008a2e <HAL_RCC_OscConfig+0x14a>
 8008a2c:	e06c      	b.n	8008b08 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8008a2e:	4b7b      	ldr	r3, [pc, #492]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	220c      	movs	r2, #12
 8008a34:	4013      	ands	r3, r2
 8008a36:	d00e      	beq.n	8008a56 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8008a38:	4b78      	ldr	r3, [pc, #480]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	220c      	movs	r2, #12
 8008a3e:	4013      	ands	r3, r2
 8008a40:	2b08      	cmp	r3, #8
 8008a42:	d11f      	bne.n	8008a84 <HAL_RCC_OscConfig+0x1a0>
 8008a44:	4b75      	ldr	r3, [pc, #468]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008a46:	685a      	ldr	r2, [r3, #4]
 8008a48:	23c0      	movs	r3, #192	; 0xc0
 8008a4a:	025b      	lsls	r3, r3, #9
 8008a4c:	401a      	ands	r2, r3
 8008a4e:	2380      	movs	r3, #128	; 0x80
 8008a50:	021b      	lsls	r3, r3, #8
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d116      	bne.n	8008a84 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a56:	4b71      	ldr	r3, [pc, #452]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2202      	movs	r2, #2
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	d005      	beq.n	8008a6c <HAL_RCC_OscConfig+0x188>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d001      	beq.n	8008a6c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e2bb      	b.n	8008fe4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a6c:	4b6b      	ldr	r3, [pc, #428]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	22f8      	movs	r2, #248	; 0xf8
 8008a72:	4393      	bics	r3, r2
 8008a74:	0019      	movs	r1, r3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	00da      	lsls	r2, r3, #3
 8008a7c:	4b67      	ldr	r3, [pc, #412]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008a7e:	430a      	orrs	r2, r1
 8008a80:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a82:	e041      	b.n	8008b08 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d024      	beq.n	8008ad6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a8c:	4b63      	ldr	r3, [pc, #396]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	4b62      	ldr	r3, [pc, #392]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008a92:	2101      	movs	r1, #1
 8008a94:	430a      	orrs	r2, r1
 8008a96:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a98:	f7fe f9b8 	bl	8006e0c <HAL_GetTick>
 8008a9c:	0003      	movs	r3, r0
 8008a9e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008aa0:	e008      	b.n	8008ab4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008aa2:	f7fe f9b3 	bl	8006e0c <HAL_GetTick>
 8008aa6:	0002      	movs	r2, r0
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	1ad3      	subs	r3, r2, r3
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d901      	bls.n	8008ab4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	e297      	b.n	8008fe4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ab4:	4b59      	ldr	r3, [pc, #356]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2202      	movs	r2, #2
 8008aba:	4013      	ands	r3, r2
 8008abc:	d0f1      	beq.n	8008aa2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008abe:	4b57      	ldr	r3, [pc, #348]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	22f8      	movs	r2, #248	; 0xf8
 8008ac4:	4393      	bics	r3, r2
 8008ac6:	0019      	movs	r1, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	00da      	lsls	r2, r3, #3
 8008ace:	4b53      	ldr	r3, [pc, #332]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008ad0:	430a      	orrs	r2, r1
 8008ad2:	601a      	str	r2, [r3, #0]
 8008ad4:	e018      	b.n	8008b08 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ad6:	4b51      	ldr	r3, [pc, #324]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	4b50      	ldr	r3, [pc, #320]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008adc:	2101      	movs	r1, #1
 8008ade:	438a      	bics	r2, r1
 8008ae0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ae2:	f7fe f993 	bl	8006e0c <HAL_GetTick>
 8008ae6:	0003      	movs	r3, r0
 8008ae8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008aea:	e008      	b.n	8008afe <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008aec:	f7fe f98e 	bl	8006e0c <HAL_GetTick>
 8008af0:	0002      	movs	r2, r0
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d901      	bls.n	8008afe <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8008afa:	2303      	movs	r3, #3
 8008afc:	e272      	b.n	8008fe4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008afe:	4b47      	ldr	r3, [pc, #284]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2202      	movs	r2, #2
 8008b04:	4013      	ands	r3, r2
 8008b06:	d1f1      	bne.n	8008aec <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2208      	movs	r2, #8
 8008b0e:	4013      	ands	r3, r2
 8008b10:	d036      	beq.n	8008b80 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	69db      	ldr	r3, [r3, #28]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d019      	beq.n	8008b4e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b1a:	4b40      	ldr	r3, [pc, #256]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008b1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b1e:	4b3f      	ldr	r3, [pc, #252]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008b20:	2101      	movs	r1, #1
 8008b22:	430a      	orrs	r2, r1
 8008b24:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b26:	f7fe f971 	bl	8006e0c <HAL_GetTick>
 8008b2a:	0003      	movs	r3, r0
 8008b2c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b2e:	e008      	b.n	8008b42 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b30:	f7fe f96c 	bl	8006e0c <HAL_GetTick>
 8008b34:	0002      	movs	r2, r0
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	1ad3      	subs	r3, r2, r3
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d901      	bls.n	8008b42 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8008b3e:	2303      	movs	r3, #3
 8008b40:	e250      	b.n	8008fe4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b42:	4b36      	ldr	r3, [pc, #216]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b46:	2202      	movs	r2, #2
 8008b48:	4013      	ands	r3, r2
 8008b4a:	d0f1      	beq.n	8008b30 <HAL_RCC_OscConfig+0x24c>
 8008b4c:	e018      	b.n	8008b80 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b4e:	4b33      	ldr	r3, [pc, #204]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008b50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b52:	4b32      	ldr	r3, [pc, #200]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008b54:	2101      	movs	r1, #1
 8008b56:	438a      	bics	r2, r1
 8008b58:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b5a:	f7fe f957 	bl	8006e0c <HAL_GetTick>
 8008b5e:	0003      	movs	r3, r0
 8008b60:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b62:	e008      	b.n	8008b76 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b64:	f7fe f952 	bl	8006e0c <HAL_GetTick>
 8008b68:	0002      	movs	r2, r0
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	1ad3      	subs	r3, r2, r3
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d901      	bls.n	8008b76 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8008b72:	2303      	movs	r3, #3
 8008b74:	e236      	b.n	8008fe4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b76:	4b29      	ldr	r3, [pc, #164]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7a:	2202      	movs	r2, #2
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	d1f1      	bne.n	8008b64 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2204      	movs	r2, #4
 8008b86:	4013      	ands	r3, r2
 8008b88:	d100      	bne.n	8008b8c <HAL_RCC_OscConfig+0x2a8>
 8008b8a:	e0b5      	b.n	8008cf8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b8c:	201f      	movs	r0, #31
 8008b8e:	183b      	adds	r3, r7, r0
 8008b90:	2200      	movs	r2, #0
 8008b92:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b94:	4b21      	ldr	r3, [pc, #132]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008b96:	69da      	ldr	r2, [r3, #28]
 8008b98:	2380      	movs	r3, #128	; 0x80
 8008b9a:	055b      	lsls	r3, r3, #21
 8008b9c:	4013      	ands	r3, r2
 8008b9e:	d110      	bne.n	8008bc2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ba0:	4b1e      	ldr	r3, [pc, #120]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008ba2:	69da      	ldr	r2, [r3, #28]
 8008ba4:	4b1d      	ldr	r3, [pc, #116]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008ba6:	2180      	movs	r1, #128	; 0x80
 8008ba8:	0549      	lsls	r1, r1, #21
 8008baa:	430a      	orrs	r2, r1
 8008bac:	61da      	str	r2, [r3, #28]
 8008bae:	4b1b      	ldr	r3, [pc, #108]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008bb0:	69da      	ldr	r2, [r3, #28]
 8008bb2:	2380      	movs	r3, #128	; 0x80
 8008bb4:	055b      	lsls	r3, r3, #21
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	60fb      	str	r3, [r7, #12]
 8008bba:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008bbc:	183b      	adds	r3, r7, r0
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008bc2:	4b19      	ldr	r3, [pc, #100]	; (8008c28 <HAL_RCC_OscConfig+0x344>)
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	2380      	movs	r3, #128	; 0x80
 8008bc8:	005b      	lsls	r3, r3, #1
 8008bca:	4013      	ands	r3, r2
 8008bcc:	d11a      	bne.n	8008c04 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008bce:	4b16      	ldr	r3, [pc, #88]	; (8008c28 <HAL_RCC_OscConfig+0x344>)
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	4b15      	ldr	r3, [pc, #84]	; (8008c28 <HAL_RCC_OscConfig+0x344>)
 8008bd4:	2180      	movs	r1, #128	; 0x80
 8008bd6:	0049      	lsls	r1, r1, #1
 8008bd8:	430a      	orrs	r2, r1
 8008bda:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008bdc:	f7fe f916 	bl	8006e0c <HAL_GetTick>
 8008be0:	0003      	movs	r3, r0
 8008be2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008be4:	e008      	b.n	8008bf8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008be6:	f7fe f911 	bl	8006e0c <HAL_GetTick>
 8008bea:	0002      	movs	r2, r0
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	2b64      	cmp	r3, #100	; 0x64
 8008bf2:	d901      	bls.n	8008bf8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8008bf4:	2303      	movs	r3, #3
 8008bf6:	e1f5      	b.n	8008fe4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008bf8:	4b0b      	ldr	r3, [pc, #44]	; (8008c28 <HAL_RCC_OscConfig+0x344>)
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	2380      	movs	r3, #128	; 0x80
 8008bfe:	005b      	lsls	r3, r3, #1
 8008c00:	4013      	ands	r3, r2
 8008c02:	d0f0      	beq.n	8008be6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d10f      	bne.n	8008c2c <HAL_RCC_OscConfig+0x348>
 8008c0c:	4b03      	ldr	r3, [pc, #12]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008c0e:	6a1a      	ldr	r2, [r3, #32]
 8008c10:	4b02      	ldr	r3, [pc, #8]	; (8008c1c <HAL_RCC_OscConfig+0x338>)
 8008c12:	2101      	movs	r1, #1
 8008c14:	430a      	orrs	r2, r1
 8008c16:	621a      	str	r2, [r3, #32]
 8008c18:	e036      	b.n	8008c88 <HAL_RCC_OscConfig+0x3a4>
 8008c1a:	46c0      	nop			; (mov r8, r8)
 8008c1c:	40021000 	.word	0x40021000
 8008c20:	fffeffff 	.word	0xfffeffff
 8008c24:	fffbffff 	.word	0xfffbffff
 8008c28:	40007000 	.word	0x40007000
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d10c      	bne.n	8008c4e <HAL_RCC_OscConfig+0x36a>
 8008c34:	4bca      	ldr	r3, [pc, #808]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008c36:	6a1a      	ldr	r2, [r3, #32]
 8008c38:	4bc9      	ldr	r3, [pc, #804]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008c3a:	2101      	movs	r1, #1
 8008c3c:	438a      	bics	r2, r1
 8008c3e:	621a      	str	r2, [r3, #32]
 8008c40:	4bc7      	ldr	r3, [pc, #796]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008c42:	6a1a      	ldr	r2, [r3, #32]
 8008c44:	4bc6      	ldr	r3, [pc, #792]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008c46:	2104      	movs	r1, #4
 8008c48:	438a      	bics	r2, r1
 8008c4a:	621a      	str	r2, [r3, #32]
 8008c4c:	e01c      	b.n	8008c88 <HAL_RCC_OscConfig+0x3a4>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	2b05      	cmp	r3, #5
 8008c54:	d10c      	bne.n	8008c70 <HAL_RCC_OscConfig+0x38c>
 8008c56:	4bc2      	ldr	r3, [pc, #776]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008c58:	6a1a      	ldr	r2, [r3, #32]
 8008c5a:	4bc1      	ldr	r3, [pc, #772]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008c5c:	2104      	movs	r1, #4
 8008c5e:	430a      	orrs	r2, r1
 8008c60:	621a      	str	r2, [r3, #32]
 8008c62:	4bbf      	ldr	r3, [pc, #764]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008c64:	6a1a      	ldr	r2, [r3, #32]
 8008c66:	4bbe      	ldr	r3, [pc, #760]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008c68:	2101      	movs	r1, #1
 8008c6a:	430a      	orrs	r2, r1
 8008c6c:	621a      	str	r2, [r3, #32]
 8008c6e:	e00b      	b.n	8008c88 <HAL_RCC_OscConfig+0x3a4>
 8008c70:	4bbb      	ldr	r3, [pc, #748]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008c72:	6a1a      	ldr	r2, [r3, #32]
 8008c74:	4bba      	ldr	r3, [pc, #744]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008c76:	2101      	movs	r1, #1
 8008c78:	438a      	bics	r2, r1
 8008c7a:	621a      	str	r2, [r3, #32]
 8008c7c:	4bb8      	ldr	r3, [pc, #736]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008c7e:	6a1a      	ldr	r2, [r3, #32]
 8008c80:	4bb7      	ldr	r3, [pc, #732]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008c82:	2104      	movs	r1, #4
 8008c84:	438a      	bics	r2, r1
 8008c86:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d014      	beq.n	8008cba <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c90:	f7fe f8bc 	bl	8006e0c <HAL_GetTick>
 8008c94:	0003      	movs	r3, r0
 8008c96:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c98:	e009      	b.n	8008cae <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c9a:	f7fe f8b7 	bl	8006e0c <HAL_GetTick>
 8008c9e:	0002      	movs	r2, r0
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	1ad3      	subs	r3, r2, r3
 8008ca4:	4aaf      	ldr	r2, [pc, #700]	; (8008f64 <HAL_RCC_OscConfig+0x680>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d901      	bls.n	8008cae <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8008caa:	2303      	movs	r3, #3
 8008cac:	e19a      	b.n	8008fe4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cae:	4bac      	ldr	r3, [pc, #688]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008cb0:	6a1b      	ldr	r3, [r3, #32]
 8008cb2:	2202      	movs	r2, #2
 8008cb4:	4013      	ands	r3, r2
 8008cb6:	d0f0      	beq.n	8008c9a <HAL_RCC_OscConfig+0x3b6>
 8008cb8:	e013      	b.n	8008ce2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008cba:	f7fe f8a7 	bl	8006e0c <HAL_GetTick>
 8008cbe:	0003      	movs	r3, r0
 8008cc0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008cc2:	e009      	b.n	8008cd8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008cc4:	f7fe f8a2 	bl	8006e0c <HAL_GetTick>
 8008cc8:	0002      	movs	r2, r0
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	4aa5      	ldr	r2, [pc, #660]	; (8008f64 <HAL_RCC_OscConfig+0x680>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d901      	bls.n	8008cd8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	e185      	b.n	8008fe4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008cd8:	4ba1      	ldr	r3, [pc, #644]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008cda:	6a1b      	ldr	r3, [r3, #32]
 8008cdc:	2202      	movs	r2, #2
 8008cde:	4013      	ands	r3, r2
 8008ce0:	d1f0      	bne.n	8008cc4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008ce2:	231f      	movs	r3, #31
 8008ce4:	18fb      	adds	r3, r7, r3
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d105      	bne.n	8008cf8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008cec:	4b9c      	ldr	r3, [pc, #624]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008cee:	69da      	ldr	r2, [r3, #28]
 8008cf0:	4b9b      	ldr	r3, [pc, #620]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008cf2:	499d      	ldr	r1, [pc, #628]	; (8008f68 <HAL_RCC_OscConfig+0x684>)
 8008cf4:	400a      	ands	r2, r1
 8008cf6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2210      	movs	r2, #16
 8008cfe:	4013      	ands	r3, r2
 8008d00:	d063      	beq.n	8008dca <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	695b      	ldr	r3, [r3, #20]
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d12a      	bne.n	8008d60 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8008d0a:	4b95      	ldr	r3, [pc, #596]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d0e:	4b94      	ldr	r3, [pc, #592]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008d10:	2104      	movs	r1, #4
 8008d12:	430a      	orrs	r2, r1
 8008d14:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8008d16:	4b92      	ldr	r3, [pc, #584]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008d18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d1a:	4b91      	ldr	r3, [pc, #580]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008d1c:	2101      	movs	r1, #1
 8008d1e:	430a      	orrs	r2, r1
 8008d20:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d22:	f7fe f873 	bl	8006e0c <HAL_GetTick>
 8008d26:	0003      	movs	r3, r0
 8008d28:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8008d2a:	e008      	b.n	8008d3e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8008d2c:	f7fe f86e 	bl	8006e0c <HAL_GetTick>
 8008d30:	0002      	movs	r2, r0
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	1ad3      	subs	r3, r2, r3
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d901      	bls.n	8008d3e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	e152      	b.n	8008fe4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8008d3e:	4b88      	ldr	r3, [pc, #544]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d42:	2202      	movs	r2, #2
 8008d44:	4013      	ands	r3, r2
 8008d46:	d0f1      	beq.n	8008d2c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8008d48:	4b85      	ldr	r3, [pc, #532]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d4c:	22f8      	movs	r2, #248	; 0xf8
 8008d4e:	4393      	bics	r3, r2
 8008d50:	0019      	movs	r1, r3
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	699b      	ldr	r3, [r3, #24]
 8008d56:	00da      	lsls	r2, r3, #3
 8008d58:	4b81      	ldr	r3, [pc, #516]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008d5a:	430a      	orrs	r2, r1
 8008d5c:	635a      	str	r2, [r3, #52]	; 0x34
 8008d5e:	e034      	b.n	8008dca <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	695b      	ldr	r3, [r3, #20]
 8008d64:	3305      	adds	r3, #5
 8008d66:	d111      	bne.n	8008d8c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8008d68:	4b7d      	ldr	r3, [pc, #500]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d6c:	4b7c      	ldr	r3, [pc, #496]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008d6e:	2104      	movs	r1, #4
 8008d70:	438a      	bics	r2, r1
 8008d72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8008d74:	4b7a      	ldr	r3, [pc, #488]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d78:	22f8      	movs	r2, #248	; 0xf8
 8008d7a:	4393      	bics	r3, r2
 8008d7c:	0019      	movs	r1, r3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	699b      	ldr	r3, [r3, #24]
 8008d82:	00da      	lsls	r2, r3, #3
 8008d84:	4b76      	ldr	r3, [pc, #472]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008d86:	430a      	orrs	r2, r1
 8008d88:	635a      	str	r2, [r3, #52]	; 0x34
 8008d8a:	e01e      	b.n	8008dca <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8008d8c:	4b74      	ldr	r3, [pc, #464]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008d8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d90:	4b73      	ldr	r3, [pc, #460]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008d92:	2104      	movs	r1, #4
 8008d94:	430a      	orrs	r2, r1
 8008d96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8008d98:	4b71      	ldr	r3, [pc, #452]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008d9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d9c:	4b70      	ldr	r3, [pc, #448]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008d9e:	2101      	movs	r1, #1
 8008da0:	438a      	bics	r2, r1
 8008da2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008da4:	f7fe f832 	bl	8006e0c <HAL_GetTick>
 8008da8:	0003      	movs	r3, r0
 8008daa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8008dac:	e008      	b.n	8008dc0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8008dae:	f7fe f82d 	bl	8006e0c <HAL_GetTick>
 8008db2:	0002      	movs	r2, r0
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	1ad3      	subs	r3, r2, r3
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d901      	bls.n	8008dc0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	e111      	b.n	8008fe4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8008dc0:	4b67      	ldr	r3, [pc, #412]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc4:	2202      	movs	r2, #2
 8008dc6:	4013      	ands	r3, r2
 8008dc8:	d1f1      	bne.n	8008dae <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2220      	movs	r2, #32
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	d05c      	beq.n	8008e8e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8008dd4:	4b62      	ldr	r3, [pc, #392]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	220c      	movs	r2, #12
 8008dda:	4013      	ands	r3, r2
 8008ddc:	2b0c      	cmp	r3, #12
 8008dde:	d00e      	beq.n	8008dfe <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8008de0:	4b5f      	ldr	r3, [pc, #380]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	220c      	movs	r2, #12
 8008de6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8008de8:	2b08      	cmp	r3, #8
 8008dea:	d114      	bne.n	8008e16 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8008dec:	4b5c      	ldr	r3, [pc, #368]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008dee:	685a      	ldr	r2, [r3, #4]
 8008df0:	23c0      	movs	r3, #192	; 0xc0
 8008df2:	025b      	lsls	r3, r3, #9
 8008df4:	401a      	ands	r2, r3
 8008df6:	23c0      	movs	r3, #192	; 0xc0
 8008df8:	025b      	lsls	r3, r3, #9
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d10b      	bne.n	8008e16 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8008dfe:	4b58      	ldr	r3, [pc, #352]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008e00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e02:	2380      	movs	r3, #128	; 0x80
 8008e04:	029b      	lsls	r3, r3, #10
 8008e06:	4013      	ands	r3, r2
 8008e08:	d040      	beq.n	8008e8c <HAL_RCC_OscConfig+0x5a8>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6a1b      	ldr	r3, [r3, #32]
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d03c      	beq.n	8008e8c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e0e6      	b.n	8008fe4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a1b      	ldr	r3, [r3, #32]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d01b      	beq.n	8008e56 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8008e1e:	4b50      	ldr	r3, [pc, #320]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008e20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e22:	4b4f      	ldr	r3, [pc, #316]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008e24:	2180      	movs	r1, #128	; 0x80
 8008e26:	0249      	lsls	r1, r1, #9
 8008e28:	430a      	orrs	r2, r1
 8008e2a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e2c:	f7fd ffee 	bl	8006e0c <HAL_GetTick>
 8008e30:	0003      	movs	r3, r0
 8008e32:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8008e34:	e008      	b.n	8008e48 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008e36:	f7fd ffe9 	bl	8006e0c <HAL_GetTick>
 8008e3a:	0002      	movs	r2, r0
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	1ad3      	subs	r3, r2, r3
 8008e40:	2b02      	cmp	r3, #2
 8008e42:	d901      	bls.n	8008e48 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8008e44:	2303      	movs	r3, #3
 8008e46:	e0cd      	b.n	8008fe4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8008e48:	4b45      	ldr	r3, [pc, #276]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008e4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e4c:	2380      	movs	r3, #128	; 0x80
 8008e4e:	029b      	lsls	r3, r3, #10
 8008e50:	4013      	ands	r3, r2
 8008e52:	d0f0      	beq.n	8008e36 <HAL_RCC_OscConfig+0x552>
 8008e54:	e01b      	b.n	8008e8e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8008e56:	4b42      	ldr	r3, [pc, #264]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008e58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e5a:	4b41      	ldr	r3, [pc, #260]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008e5c:	4943      	ldr	r1, [pc, #268]	; (8008f6c <HAL_RCC_OscConfig+0x688>)
 8008e5e:	400a      	ands	r2, r1
 8008e60:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e62:	f7fd ffd3 	bl	8006e0c <HAL_GetTick>
 8008e66:	0003      	movs	r3, r0
 8008e68:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8008e6a:	e008      	b.n	8008e7e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008e6c:	f7fd ffce 	bl	8006e0c <HAL_GetTick>
 8008e70:	0002      	movs	r2, r0
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	1ad3      	subs	r3, r2, r3
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	d901      	bls.n	8008e7e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8008e7a:	2303      	movs	r3, #3
 8008e7c:	e0b2      	b.n	8008fe4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8008e7e:	4b38      	ldr	r3, [pc, #224]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008e80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e82:	2380      	movs	r3, #128	; 0x80
 8008e84:	029b      	lsls	r3, r3, #10
 8008e86:	4013      	ands	r3, r2
 8008e88:	d1f0      	bne.n	8008e6c <HAL_RCC_OscConfig+0x588>
 8008e8a:	e000      	b.n	8008e8e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8008e8c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d100      	bne.n	8008e98 <HAL_RCC_OscConfig+0x5b4>
 8008e96:	e0a4      	b.n	8008fe2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008e98:	4b31      	ldr	r3, [pc, #196]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	220c      	movs	r2, #12
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	2b08      	cmp	r3, #8
 8008ea2:	d100      	bne.n	8008ea6 <HAL_RCC_OscConfig+0x5c2>
 8008ea4:	e078      	b.n	8008f98 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d14c      	bne.n	8008f48 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008eae:	4b2c      	ldr	r3, [pc, #176]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	4b2b      	ldr	r3, [pc, #172]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008eb4:	492e      	ldr	r1, [pc, #184]	; (8008f70 <HAL_RCC_OscConfig+0x68c>)
 8008eb6:	400a      	ands	r2, r1
 8008eb8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008eba:	f7fd ffa7 	bl	8006e0c <HAL_GetTick>
 8008ebe:	0003      	movs	r3, r0
 8008ec0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008ec2:	e008      	b.n	8008ed6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ec4:	f7fd ffa2 	bl	8006e0c <HAL_GetTick>
 8008ec8:	0002      	movs	r2, r0
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	1ad3      	subs	r3, r2, r3
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	d901      	bls.n	8008ed6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	e086      	b.n	8008fe4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008ed6:	4b22      	ldr	r3, [pc, #136]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	2380      	movs	r3, #128	; 0x80
 8008edc:	049b      	lsls	r3, r3, #18
 8008ede:	4013      	ands	r3, r2
 8008ee0:	d1f0      	bne.n	8008ec4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ee2:	4b1f      	ldr	r3, [pc, #124]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee6:	220f      	movs	r2, #15
 8008ee8:	4393      	bics	r3, r2
 8008eea:	0019      	movs	r1, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ef0:	4b1b      	ldr	r3, [pc, #108]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008ef2:	430a      	orrs	r2, r1
 8008ef4:	62da      	str	r2, [r3, #44]	; 0x2c
 8008ef6:	4b1a      	ldr	r3, [pc, #104]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	4a1e      	ldr	r2, [pc, #120]	; (8008f74 <HAL_RCC_OscConfig+0x690>)
 8008efc:	4013      	ands	r3, r2
 8008efe:	0019      	movs	r1, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f08:	431a      	orrs	r2, r3
 8008f0a:	4b15      	ldr	r3, [pc, #84]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008f0c:	430a      	orrs	r2, r1
 8008f0e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f10:	4b13      	ldr	r3, [pc, #76]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	4b12      	ldr	r3, [pc, #72]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008f16:	2180      	movs	r1, #128	; 0x80
 8008f18:	0449      	lsls	r1, r1, #17
 8008f1a:	430a      	orrs	r2, r1
 8008f1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f1e:	f7fd ff75 	bl	8006e0c <HAL_GetTick>
 8008f22:	0003      	movs	r3, r0
 8008f24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008f26:	e008      	b.n	8008f3a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f28:	f7fd ff70 	bl	8006e0c <HAL_GetTick>
 8008f2c:	0002      	movs	r2, r0
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	1ad3      	subs	r3, r2, r3
 8008f32:	2b02      	cmp	r3, #2
 8008f34:	d901      	bls.n	8008f3a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8008f36:	2303      	movs	r3, #3
 8008f38:	e054      	b.n	8008fe4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008f3a:	4b09      	ldr	r3, [pc, #36]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	2380      	movs	r3, #128	; 0x80
 8008f40:	049b      	lsls	r3, r3, #18
 8008f42:	4013      	ands	r3, r2
 8008f44:	d0f0      	beq.n	8008f28 <HAL_RCC_OscConfig+0x644>
 8008f46:	e04c      	b.n	8008fe2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f48:	4b05      	ldr	r3, [pc, #20]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	4b04      	ldr	r3, [pc, #16]	; (8008f60 <HAL_RCC_OscConfig+0x67c>)
 8008f4e:	4908      	ldr	r1, [pc, #32]	; (8008f70 <HAL_RCC_OscConfig+0x68c>)
 8008f50:	400a      	ands	r2, r1
 8008f52:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f54:	f7fd ff5a 	bl	8006e0c <HAL_GetTick>
 8008f58:	0003      	movs	r3, r0
 8008f5a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008f5c:	e015      	b.n	8008f8a <HAL_RCC_OscConfig+0x6a6>
 8008f5e:	46c0      	nop			; (mov r8, r8)
 8008f60:	40021000 	.word	0x40021000
 8008f64:	00001388 	.word	0x00001388
 8008f68:	efffffff 	.word	0xefffffff
 8008f6c:	fffeffff 	.word	0xfffeffff
 8008f70:	feffffff 	.word	0xfeffffff
 8008f74:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f78:	f7fd ff48 	bl	8006e0c <HAL_GetTick>
 8008f7c:	0002      	movs	r2, r0
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	2b02      	cmp	r3, #2
 8008f84:	d901      	bls.n	8008f8a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8008f86:	2303      	movs	r3, #3
 8008f88:	e02c      	b.n	8008fe4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008f8a:	4b18      	ldr	r3, [pc, #96]	; (8008fec <HAL_RCC_OscConfig+0x708>)
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	2380      	movs	r3, #128	; 0x80
 8008f90:	049b      	lsls	r3, r3, #18
 8008f92:	4013      	ands	r3, r2
 8008f94:	d1f0      	bne.n	8008f78 <HAL_RCC_OscConfig+0x694>
 8008f96:	e024      	b.n	8008fe2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d101      	bne.n	8008fa4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	e01f      	b.n	8008fe4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8008fa4:	4b11      	ldr	r3, [pc, #68]	; (8008fec <HAL_RCC_OscConfig+0x708>)
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8008faa:	4b10      	ldr	r3, [pc, #64]	; (8008fec <HAL_RCC_OscConfig+0x708>)
 8008fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fae:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fb0:	697a      	ldr	r2, [r7, #20]
 8008fb2:	23c0      	movs	r3, #192	; 0xc0
 8008fb4:	025b      	lsls	r3, r3, #9
 8008fb6:	401a      	ands	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d10e      	bne.n	8008fde <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	220f      	movs	r2, #15
 8008fc4:	401a      	ands	r2, r3
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d107      	bne.n	8008fde <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8008fce:	697a      	ldr	r2, [r7, #20]
 8008fd0:	23f0      	movs	r3, #240	; 0xf0
 8008fd2:	039b      	lsls	r3, r3, #14
 8008fd4:	401a      	ands	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d001      	beq.n	8008fe2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e000      	b.n	8008fe4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	0018      	movs	r0, r3
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	b008      	add	sp, #32
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	40021000 	.word	0x40021000

08008ff0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d101      	bne.n	8009004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	e0bf      	b.n	8009184 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009004:	4b61      	ldr	r3, [pc, #388]	; (800918c <HAL_RCC_ClockConfig+0x19c>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2201      	movs	r2, #1
 800900a:	4013      	ands	r3, r2
 800900c:	683a      	ldr	r2, [r7, #0]
 800900e:	429a      	cmp	r2, r3
 8009010:	d911      	bls.n	8009036 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009012:	4b5e      	ldr	r3, [pc, #376]	; (800918c <HAL_RCC_ClockConfig+0x19c>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2201      	movs	r2, #1
 8009018:	4393      	bics	r3, r2
 800901a:	0019      	movs	r1, r3
 800901c:	4b5b      	ldr	r3, [pc, #364]	; (800918c <HAL_RCC_ClockConfig+0x19c>)
 800901e:	683a      	ldr	r2, [r7, #0]
 8009020:	430a      	orrs	r2, r1
 8009022:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009024:	4b59      	ldr	r3, [pc, #356]	; (800918c <HAL_RCC_ClockConfig+0x19c>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2201      	movs	r2, #1
 800902a:	4013      	ands	r3, r2
 800902c:	683a      	ldr	r2, [r7, #0]
 800902e:	429a      	cmp	r2, r3
 8009030:	d001      	beq.n	8009036 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e0a6      	b.n	8009184 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2202      	movs	r2, #2
 800903c:	4013      	ands	r3, r2
 800903e:	d015      	beq.n	800906c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2204      	movs	r2, #4
 8009046:	4013      	ands	r3, r2
 8009048:	d006      	beq.n	8009058 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800904a:	4b51      	ldr	r3, [pc, #324]	; (8009190 <HAL_RCC_ClockConfig+0x1a0>)
 800904c:	685a      	ldr	r2, [r3, #4]
 800904e:	4b50      	ldr	r3, [pc, #320]	; (8009190 <HAL_RCC_ClockConfig+0x1a0>)
 8009050:	21e0      	movs	r1, #224	; 0xe0
 8009052:	00c9      	lsls	r1, r1, #3
 8009054:	430a      	orrs	r2, r1
 8009056:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009058:	4b4d      	ldr	r3, [pc, #308]	; (8009190 <HAL_RCC_ClockConfig+0x1a0>)
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	22f0      	movs	r2, #240	; 0xf0
 800905e:	4393      	bics	r3, r2
 8009060:	0019      	movs	r1, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	689a      	ldr	r2, [r3, #8]
 8009066:	4b4a      	ldr	r3, [pc, #296]	; (8009190 <HAL_RCC_ClockConfig+0x1a0>)
 8009068:	430a      	orrs	r2, r1
 800906a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2201      	movs	r2, #1
 8009072:	4013      	ands	r3, r2
 8009074:	d04c      	beq.n	8009110 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	2b01      	cmp	r3, #1
 800907c:	d107      	bne.n	800908e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800907e:	4b44      	ldr	r3, [pc, #272]	; (8009190 <HAL_RCC_ClockConfig+0x1a0>)
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	2380      	movs	r3, #128	; 0x80
 8009084:	029b      	lsls	r3, r3, #10
 8009086:	4013      	ands	r3, r2
 8009088:	d120      	bne.n	80090cc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	e07a      	b.n	8009184 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	2b02      	cmp	r3, #2
 8009094:	d107      	bne.n	80090a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009096:	4b3e      	ldr	r3, [pc, #248]	; (8009190 <HAL_RCC_ClockConfig+0x1a0>)
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	2380      	movs	r3, #128	; 0x80
 800909c:	049b      	lsls	r3, r3, #18
 800909e:	4013      	ands	r3, r2
 80090a0:	d114      	bne.n	80090cc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	e06e      	b.n	8009184 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	2b03      	cmp	r3, #3
 80090ac:	d107      	bne.n	80090be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80090ae:	4b38      	ldr	r3, [pc, #224]	; (8009190 <HAL_RCC_ClockConfig+0x1a0>)
 80090b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090b2:	2380      	movs	r3, #128	; 0x80
 80090b4:	029b      	lsls	r3, r3, #10
 80090b6:	4013      	ands	r3, r2
 80090b8:	d108      	bne.n	80090cc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	e062      	b.n	8009184 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090be:	4b34      	ldr	r3, [pc, #208]	; (8009190 <HAL_RCC_ClockConfig+0x1a0>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2202      	movs	r2, #2
 80090c4:	4013      	ands	r3, r2
 80090c6:	d101      	bne.n	80090cc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	e05b      	b.n	8009184 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80090cc:	4b30      	ldr	r3, [pc, #192]	; (8009190 <HAL_RCC_ClockConfig+0x1a0>)
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	2203      	movs	r2, #3
 80090d2:	4393      	bics	r3, r2
 80090d4:	0019      	movs	r1, r3
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	685a      	ldr	r2, [r3, #4]
 80090da:	4b2d      	ldr	r3, [pc, #180]	; (8009190 <HAL_RCC_ClockConfig+0x1a0>)
 80090dc:	430a      	orrs	r2, r1
 80090de:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80090e0:	f7fd fe94 	bl	8006e0c <HAL_GetTick>
 80090e4:	0003      	movs	r3, r0
 80090e6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090e8:	e009      	b.n	80090fe <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090ea:	f7fd fe8f 	bl	8006e0c <HAL_GetTick>
 80090ee:	0002      	movs	r2, r0
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	1ad3      	subs	r3, r2, r3
 80090f4:	4a27      	ldr	r2, [pc, #156]	; (8009194 <HAL_RCC_ClockConfig+0x1a4>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d901      	bls.n	80090fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80090fa:	2303      	movs	r3, #3
 80090fc:	e042      	b.n	8009184 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090fe:	4b24      	ldr	r3, [pc, #144]	; (8009190 <HAL_RCC_ClockConfig+0x1a0>)
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	220c      	movs	r2, #12
 8009104:	401a      	ands	r2, r3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	429a      	cmp	r2, r3
 800910e:	d1ec      	bne.n	80090ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009110:	4b1e      	ldr	r3, [pc, #120]	; (800918c <HAL_RCC_ClockConfig+0x19c>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2201      	movs	r2, #1
 8009116:	4013      	ands	r3, r2
 8009118:	683a      	ldr	r2, [r7, #0]
 800911a:	429a      	cmp	r2, r3
 800911c:	d211      	bcs.n	8009142 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800911e:	4b1b      	ldr	r3, [pc, #108]	; (800918c <HAL_RCC_ClockConfig+0x19c>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2201      	movs	r2, #1
 8009124:	4393      	bics	r3, r2
 8009126:	0019      	movs	r1, r3
 8009128:	4b18      	ldr	r3, [pc, #96]	; (800918c <HAL_RCC_ClockConfig+0x19c>)
 800912a:	683a      	ldr	r2, [r7, #0]
 800912c:	430a      	orrs	r2, r1
 800912e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009130:	4b16      	ldr	r3, [pc, #88]	; (800918c <HAL_RCC_ClockConfig+0x19c>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2201      	movs	r2, #1
 8009136:	4013      	ands	r3, r2
 8009138:	683a      	ldr	r2, [r7, #0]
 800913a:	429a      	cmp	r2, r3
 800913c:	d001      	beq.n	8009142 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e020      	b.n	8009184 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2204      	movs	r2, #4
 8009148:	4013      	ands	r3, r2
 800914a:	d009      	beq.n	8009160 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800914c:	4b10      	ldr	r3, [pc, #64]	; (8009190 <HAL_RCC_ClockConfig+0x1a0>)
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	4a11      	ldr	r2, [pc, #68]	; (8009198 <HAL_RCC_ClockConfig+0x1a8>)
 8009152:	4013      	ands	r3, r2
 8009154:	0019      	movs	r1, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	68da      	ldr	r2, [r3, #12]
 800915a:	4b0d      	ldr	r3, [pc, #52]	; (8009190 <HAL_RCC_ClockConfig+0x1a0>)
 800915c:	430a      	orrs	r2, r1
 800915e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8009160:	f000 f820 	bl	80091a4 <HAL_RCC_GetSysClockFreq>
 8009164:	0001      	movs	r1, r0
 8009166:	4b0a      	ldr	r3, [pc, #40]	; (8009190 <HAL_RCC_ClockConfig+0x1a0>)
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	091b      	lsrs	r3, r3, #4
 800916c:	220f      	movs	r2, #15
 800916e:	4013      	ands	r3, r2
 8009170:	4a0a      	ldr	r2, [pc, #40]	; (800919c <HAL_RCC_ClockConfig+0x1ac>)
 8009172:	5cd3      	ldrb	r3, [r2, r3]
 8009174:	000a      	movs	r2, r1
 8009176:	40da      	lsrs	r2, r3
 8009178:	4b09      	ldr	r3, [pc, #36]	; (80091a0 <HAL_RCC_ClockConfig+0x1b0>)
 800917a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800917c:	2003      	movs	r0, #3
 800917e:	f7fd fc37 	bl	80069f0 <HAL_InitTick>
  
  return HAL_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	0018      	movs	r0, r3
 8009186:	46bd      	mov	sp, r7
 8009188:	b004      	add	sp, #16
 800918a:	bd80      	pop	{r7, pc}
 800918c:	40022000 	.word	0x40022000
 8009190:	40021000 	.word	0x40021000
 8009194:	00001388 	.word	0x00001388
 8009198:	fffff8ff 	.word	0xfffff8ff
 800919c:	080109b8 	.word	0x080109b8
 80091a0:	20000010 	.word	0x20000010

080091a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80091aa:	2300      	movs	r3, #0
 80091ac:	60fb      	str	r3, [r7, #12]
 80091ae:	2300      	movs	r3, #0
 80091b0:	60bb      	str	r3, [r7, #8]
 80091b2:	2300      	movs	r3, #0
 80091b4:	617b      	str	r3, [r7, #20]
 80091b6:	2300      	movs	r3, #0
 80091b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80091ba:	2300      	movs	r3, #0
 80091bc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80091be:	4b2d      	ldr	r3, [pc, #180]	; (8009274 <HAL_RCC_GetSysClockFreq+0xd0>)
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	220c      	movs	r2, #12
 80091c8:	4013      	ands	r3, r2
 80091ca:	2b0c      	cmp	r3, #12
 80091cc:	d046      	beq.n	800925c <HAL_RCC_GetSysClockFreq+0xb8>
 80091ce:	d848      	bhi.n	8009262 <HAL_RCC_GetSysClockFreq+0xbe>
 80091d0:	2b04      	cmp	r3, #4
 80091d2:	d002      	beq.n	80091da <HAL_RCC_GetSysClockFreq+0x36>
 80091d4:	2b08      	cmp	r3, #8
 80091d6:	d003      	beq.n	80091e0 <HAL_RCC_GetSysClockFreq+0x3c>
 80091d8:	e043      	b.n	8009262 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80091da:	4b27      	ldr	r3, [pc, #156]	; (8009278 <HAL_RCC_GetSysClockFreq+0xd4>)
 80091dc:	613b      	str	r3, [r7, #16]
      break;
 80091de:	e043      	b.n	8009268 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	0c9b      	lsrs	r3, r3, #18
 80091e4:	220f      	movs	r2, #15
 80091e6:	4013      	ands	r3, r2
 80091e8:	4a24      	ldr	r2, [pc, #144]	; (800927c <HAL_RCC_GetSysClockFreq+0xd8>)
 80091ea:	5cd3      	ldrb	r3, [r2, r3]
 80091ec:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80091ee:	4b21      	ldr	r3, [pc, #132]	; (8009274 <HAL_RCC_GetSysClockFreq+0xd0>)
 80091f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f2:	220f      	movs	r2, #15
 80091f4:	4013      	ands	r3, r2
 80091f6:	4a22      	ldr	r2, [pc, #136]	; (8009280 <HAL_RCC_GetSysClockFreq+0xdc>)
 80091f8:	5cd3      	ldrb	r3, [r2, r3]
 80091fa:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	23c0      	movs	r3, #192	; 0xc0
 8009200:	025b      	lsls	r3, r3, #9
 8009202:	401a      	ands	r2, r3
 8009204:	2380      	movs	r3, #128	; 0x80
 8009206:	025b      	lsls	r3, r3, #9
 8009208:	429a      	cmp	r2, r3
 800920a:	d109      	bne.n	8009220 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800920c:	68b9      	ldr	r1, [r7, #8]
 800920e:	481a      	ldr	r0, [pc, #104]	; (8009278 <HAL_RCC_GetSysClockFreq+0xd4>)
 8009210:	f7f6 ffa0 	bl	8000154 <__udivsi3>
 8009214:	0003      	movs	r3, r0
 8009216:	001a      	movs	r2, r3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4353      	muls	r3, r2
 800921c:	617b      	str	r3, [r7, #20]
 800921e:	e01a      	b.n	8009256 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	23c0      	movs	r3, #192	; 0xc0
 8009224:	025b      	lsls	r3, r3, #9
 8009226:	401a      	ands	r2, r3
 8009228:	23c0      	movs	r3, #192	; 0xc0
 800922a:	025b      	lsls	r3, r3, #9
 800922c:	429a      	cmp	r2, r3
 800922e:	d109      	bne.n	8009244 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8009230:	68b9      	ldr	r1, [r7, #8]
 8009232:	4814      	ldr	r0, [pc, #80]	; (8009284 <HAL_RCC_GetSysClockFreq+0xe0>)
 8009234:	f7f6 ff8e 	bl	8000154 <__udivsi3>
 8009238:	0003      	movs	r3, r0
 800923a:	001a      	movs	r2, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	4353      	muls	r3, r2
 8009240:	617b      	str	r3, [r7, #20]
 8009242:	e008      	b.n	8009256 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8009244:	68b9      	ldr	r1, [r7, #8]
 8009246:	480c      	ldr	r0, [pc, #48]	; (8009278 <HAL_RCC_GetSysClockFreq+0xd4>)
 8009248:	f7f6 ff84 	bl	8000154 <__udivsi3>
 800924c:	0003      	movs	r3, r0
 800924e:	001a      	movs	r2, r3
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4353      	muls	r3, r2
 8009254:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	613b      	str	r3, [r7, #16]
      break;
 800925a:	e005      	b.n	8009268 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800925c:	4b09      	ldr	r3, [pc, #36]	; (8009284 <HAL_RCC_GetSysClockFreq+0xe0>)
 800925e:	613b      	str	r3, [r7, #16]
      break;
 8009260:	e002      	b.n	8009268 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009262:	4b05      	ldr	r3, [pc, #20]	; (8009278 <HAL_RCC_GetSysClockFreq+0xd4>)
 8009264:	613b      	str	r3, [r7, #16]
      break;
 8009266:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8009268:	693b      	ldr	r3, [r7, #16]
}
 800926a:	0018      	movs	r0, r3
 800926c:	46bd      	mov	sp, r7
 800926e:	b006      	add	sp, #24
 8009270:	bd80      	pop	{r7, pc}
 8009272:	46c0      	nop			; (mov r8, r8)
 8009274:	40021000 	.word	0x40021000
 8009278:	007a1200 	.word	0x007a1200
 800927c:	080109d0 	.word	0x080109d0
 8009280:	080109e0 	.word	0x080109e0
 8009284:	02dc6c00 	.word	0x02dc6c00

08009288 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800928c:	4b02      	ldr	r3, [pc, #8]	; (8009298 <HAL_RCC_GetHCLKFreq+0x10>)
 800928e:	681b      	ldr	r3, [r3, #0]
}
 8009290:	0018      	movs	r0, r3
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	46c0      	nop			; (mov r8, r8)
 8009298:	20000010 	.word	0x20000010

0800929c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80092a0:	f7ff fff2 	bl	8009288 <HAL_RCC_GetHCLKFreq>
 80092a4:	0001      	movs	r1, r0
 80092a6:	4b06      	ldr	r3, [pc, #24]	; (80092c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	0a1b      	lsrs	r3, r3, #8
 80092ac:	2207      	movs	r2, #7
 80092ae:	4013      	ands	r3, r2
 80092b0:	4a04      	ldr	r2, [pc, #16]	; (80092c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80092b2:	5cd3      	ldrb	r3, [r2, r3]
 80092b4:	40d9      	lsrs	r1, r3
 80092b6:	000b      	movs	r3, r1
}    
 80092b8:	0018      	movs	r0, r3
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	46c0      	nop			; (mov r8, r8)
 80092c0:	40021000 	.word	0x40021000
 80092c4:	080109c8 	.word	0x080109c8

080092c8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2207      	movs	r2, #7
 80092d6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80092d8:	4b0e      	ldr	r3, [pc, #56]	; (8009314 <HAL_RCC_GetClockConfig+0x4c>)
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	2203      	movs	r2, #3
 80092de:	401a      	ands	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80092e4:	4b0b      	ldr	r3, [pc, #44]	; (8009314 <HAL_RCC_GetClockConfig+0x4c>)
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	22f0      	movs	r2, #240	; 0xf0
 80092ea:	401a      	ands	r2, r3
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80092f0:	4b08      	ldr	r3, [pc, #32]	; (8009314 <HAL_RCC_GetClockConfig+0x4c>)
 80092f2:	685a      	ldr	r2, [r3, #4]
 80092f4:	23e0      	movs	r3, #224	; 0xe0
 80092f6:	00db      	lsls	r3, r3, #3
 80092f8:	401a      	ands	r2, r3
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 80092fe:	4b06      	ldr	r3, [pc, #24]	; (8009318 <HAL_RCC_GetClockConfig+0x50>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2201      	movs	r2, #1
 8009304:	401a      	ands	r2, r3
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	601a      	str	r2, [r3, #0]
}
 800930a:	46c0      	nop			; (mov r8, r8)
 800930c:	46bd      	mov	sp, r7
 800930e:	b002      	add	sp, #8
 8009310:	bd80      	pop	{r7, pc}
 8009312:	46c0      	nop			; (mov r8, r8)
 8009314:	40021000 	.word	0x40021000
 8009318:	40022000 	.word	0x40022000

0800931c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b086      	sub	sp, #24
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009324:	2300      	movs	r3, #0
 8009326:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8009328:	2300      	movs	r3, #0
 800932a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	2380      	movs	r3, #128	; 0x80
 8009332:	025b      	lsls	r3, r3, #9
 8009334:	4013      	ands	r3, r2
 8009336:	d100      	bne.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8009338:	e08e      	b.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800933a:	2017      	movs	r0, #23
 800933c:	183b      	adds	r3, r7, r0
 800933e:	2200      	movs	r2, #0
 8009340:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009342:	4b6e      	ldr	r3, [pc, #440]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009344:	69da      	ldr	r2, [r3, #28]
 8009346:	2380      	movs	r3, #128	; 0x80
 8009348:	055b      	lsls	r3, r3, #21
 800934a:	4013      	ands	r3, r2
 800934c:	d110      	bne.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800934e:	4b6b      	ldr	r3, [pc, #428]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009350:	69da      	ldr	r2, [r3, #28]
 8009352:	4b6a      	ldr	r3, [pc, #424]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009354:	2180      	movs	r1, #128	; 0x80
 8009356:	0549      	lsls	r1, r1, #21
 8009358:	430a      	orrs	r2, r1
 800935a:	61da      	str	r2, [r3, #28]
 800935c:	4b67      	ldr	r3, [pc, #412]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800935e:	69da      	ldr	r2, [r3, #28]
 8009360:	2380      	movs	r3, #128	; 0x80
 8009362:	055b      	lsls	r3, r3, #21
 8009364:	4013      	ands	r3, r2
 8009366:	60bb      	str	r3, [r7, #8]
 8009368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800936a:	183b      	adds	r3, r7, r0
 800936c:	2201      	movs	r2, #1
 800936e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009370:	4b63      	ldr	r3, [pc, #396]	; (8009500 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	2380      	movs	r3, #128	; 0x80
 8009376:	005b      	lsls	r3, r3, #1
 8009378:	4013      	ands	r3, r2
 800937a:	d11a      	bne.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800937c:	4b60      	ldr	r3, [pc, #384]	; (8009500 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	4b5f      	ldr	r3, [pc, #380]	; (8009500 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009382:	2180      	movs	r1, #128	; 0x80
 8009384:	0049      	lsls	r1, r1, #1
 8009386:	430a      	orrs	r2, r1
 8009388:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800938a:	f7fd fd3f 	bl	8006e0c <HAL_GetTick>
 800938e:	0003      	movs	r3, r0
 8009390:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009392:	e008      	b.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009394:	f7fd fd3a 	bl	8006e0c <HAL_GetTick>
 8009398:	0002      	movs	r2, r0
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	1ad3      	subs	r3, r2, r3
 800939e:	2b64      	cmp	r3, #100	; 0x64
 80093a0:	d901      	bls.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80093a2:	2303      	movs	r3, #3
 80093a4:	e0a6      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093a6:	4b56      	ldr	r3, [pc, #344]	; (8009500 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	2380      	movs	r3, #128	; 0x80
 80093ac:	005b      	lsls	r3, r3, #1
 80093ae:	4013      	ands	r3, r2
 80093b0:	d0f0      	beq.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80093b2:	4b52      	ldr	r3, [pc, #328]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80093b4:	6a1a      	ldr	r2, [r3, #32]
 80093b6:	23c0      	movs	r3, #192	; 0xc0
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	4013      	ands	r3, r2
 80093bc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d034      	beq.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	685a      	ldr	r2, [r3, #4]
 80093c8:	23c0      	movs	r3, #192	; 0xc0
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	4013      	ands	r3, r2
 80093ce:	68fa      	ldr	r2, [r7, #12]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d02c      	beq.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80093d4:	4b49      	ldr	r3, [pc, #292]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80093d6:	6a1b      	ldr	r3, [r3, #32]
 80093d8:	4a4a      	ldr	r2, [pc, #296]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80093da:	4013      	ands	r3, r2
 80093dc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80093de:	4b47      	ldr	r3, [pc, #284]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80093e0:	6a1a      	ldr	r2, [r3, #32]
 80093e2:	4b46      	ldr	r3, [pc, #280]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80093e4:	2180      	movs	r1, #128	; 0x80
 80093e6:	0249      	lsls	r1, r1, #9
 80093e8:	430a      	orrs	r2, r1
 80093ea:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80093ec:	4b43      	ldr	r3, [pc, #268]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80093ee:	6a1a      	ldr	r2, [r3, #32]
 80093f0:	4b42      	ldr	r3, [pc, #264]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80093f2:	4945      	ldr	r1, [pc, #276]	; (8009508 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80093f4:	400a      	ands	r2, r1
 80093f6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80093f8:	4b40      	ldr	r3, [pc, #256]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80093fa:	68fa      	ldr	r2, [r7, #12]
 80093fc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2201      	movs	r2, #1
 8009402:	4013      	ands	r3, r2
 8009404:	d013      	beq.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009406:	f7fd fd01 	bl	8006e0c <HAL_GetTick>
 800940a:	0003      	movs	r3, r0
 800940c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800940e:	e009      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009410:	f7fd fcfc 	bl	8006e0c <HAL_GetTick>
 8009414:	0002      	movs	r2, r0
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	4a3c      	ldr	r2, [pc, #240]	; (800950c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d901      	bls.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8009420:	2303      	movs	r3, #3
 8009422:	e067      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009424:	4b35      	ldr	r3, [pc, #212]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009426:	6a1b      	ldr	r3, [r3, #32]
 8009428:	2202      	movs	r2, #2
 800942a:	4013      	ands	r3, r2
 800942c:	d0f0      	beq.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800942e:	4b33      	ldr	r3, [pc, #204]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009430:	6a1b      	ldr	r3, [r3, #32]
 8009432:	4a34      	ldr	r2, [pc, #208]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8009434:	4013      	ands	r3, r2
 8009436:	0019      	movs	r1, r3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	685a      	ldr	r2, [r3, #4]
 800943c:	4b2f      	ldr	r3, [pc, #188]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800943e:	430a      	orrs	r2, r1
 8009440:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009442:	2317      	movs	r3, #23
 8009444:	18fb      	adds	r3, r7, r3
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	2b01      	cmp	r3, #1
 800944a:	d105      	bne.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800944c:	4b2b      	ldr	r3, [pc, #172]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800944e:	69da      	ldr	r2, [r3, #28]
 8009450:	4b2a      	ldr	r3, [pc, #168]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009452:	492f      	ldr	r1, [pc, #188]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8009454:	400a      	ands	r2, r1
 8009456:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2201      	movs	r2, #1
 800945e:	4013      	ands	r3, r2
 8009460:	d009      	beq.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009462:	4b26      	ldr	r3, [pc, #152]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009466:	2203      	movs	r2, #3
 8009468:	4393      	bics	r3, r2
 800946a:	0019      	movs	r1, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	689a      	ldr	r2, [r3, #8]
 8009470:	4b22      	ldr	r3, [pc, #136]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009472:	430a      	orrs	r2, r1
 8009474:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2202      	movs	r2, #2
 800947c:	4013      	ands	r3, r2
 800947e:	d009      	beq.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009480:	4b1e      	ldr	r3, [pc, #120]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009484:	4a23      	ldr	r2, [pc, #140]	; (8009514 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009486:	4013      	ands	r3, r2
 8009488:	0019      	movs	r1, r3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	68da      	ldr	r2, [r3, #12]
 800948e:	4b1b      	ldr	r3, [pc, #108]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009490:	430a      	orrs	r2, r1
 8009492:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2220      	movs	r2, #32
 800949a:	4013      	ands	r3, r2
 800949c:	d009      	beq.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800949e:	4b17      	ldr	r3, [pc, #92]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80094a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a2:	2210      	movs	r2, #16
 80094a4:	4393      	bics	r3, r2
 80094a6:	0019      	movs	r1, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	691a      	ldr	r2, [r3, #16]
 80094ac:	4b13      	ldr	r3, [pc, #76]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80094ae:	430a      	orrs	r2, r1
 80094b0:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	2380      	movs	r3, #128	; 0x80
 80094b8:	029b      	lsls	r3, r3, #10
 80094ba:	4013      	ands	r3, r2
 80094bc:	d009      	beq.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80094be:	4b0f      	ldr	r3, [pc, #60]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80094c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c2:	2280      	movs	r2, #128	; 0x80
 80094c4:	4393      	bics	r3, r2
 80094c6:	0019      	movs	r1, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	699a      	ldr	r2, [r3, #24]
 80094cc:	4b0b      	ldr	r3, [pc, #44]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80094ce:	430a      	orrs	r2, r1
 80094d0:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	2380      	movs	r3, #128	; 0x80
 80094d8:	00db      	lsls	r3, r3, #3
 80094da:	4013      	ands	r3, r2
 80094dc:	d009      	beq.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80094de:	4b07      	ldr	r3, [pc, #28]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80094e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094e2:	2240      	movs	r2, #64	; 0x40
 80094e4:	4393      	bics	r3, r2
 80094e6:	0019      	movs	r1, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	695a      	ldr	r2, [r3, #20]
 80094ec:	4b03      	ldr	r3, [pc, #12]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80094ee:	430a      	orrs	r2, r1
 80094f0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	0018      	movs	r0, r3
 80094f6:	46bd      	mov	sp, r7
 80094f8:	b006      	add	sp, #24
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	40021000 	.word	0x40021000
 8009500:	40007000 	.word	0x40007000
 8009504:	fffffcff 	.word	0xfffffcff
 8009508:	fffeffff 	.word	0xfffeffff
 800950c:	00001388 	.word	0x00001388
 8009510:	efffffff 	.word	0xefffffff
 8009514:	fffcffff 	.word	0xfffcffff

08009518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d101      	bne.n	800952a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009526:	2301      	movs	r3, #1
 8009528:	e042      	b.n	80095b0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	223d      	movs	r2, #61	; 0x3d
 800952e:	5c9b      	ldrb	r3, [r3, r2]
 8009530:	b2db      	uxtb	r3, r3
 8009532:	2b00      	cmp	r3, #0
 8009534:	d107      	bne.n	8009546 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	223c      	movs	r2, #60	; 0x3c
 800953a:	2100      	movs	r1, #0
 800953c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	0018      	movs	r0, r3
 8009542:	f7fd f8c1 	bl	80066c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	223d      	movs	r2, #61	; 0x3d
 800954a:	2102      	movs	r1, #2
 800954c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	3304      	adds	r3, #4
 8009556:	0019      	movs	r1, r3
 8009558:	0010      	movs	r0, r2
 800955a:	f000 fe8f 	bl	800a27c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2246      	movs	r2, #70	; 0x46
 8009562:	2101      	movs	r1, #1
 8009564:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	223e      	movs	r2, #62	; 0x3e
 800956a:	2101      	movs	r1, #1
 800956c:	5499      	strb	r1, [r3, r2]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	223f      	movs	r2, #63	; 0x3f
 8009572:	2101      	movs	r1, #1
 8009574:	5499      	strb	r1, [r3, r2]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2240      	movs	r2, #64	; 0x40
 800957a:	2101      	movs	r1, #1
 800957c:	5499      	strb	r1, [r3, r2]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2241      	movs	r2, #65	; 0x41
 8009582:	2101      	movs	r1, #1
 8009584:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2242      	movs	r2, #66	; 0x42
 800958a:	2101      	movs	r1, #1
 800958c:	5499      	strb	r1, [r3, r2]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2243      	movs	r2, #67	; 0x43
 8009592:	2101      	movs	r1, #1
 8009594:	5499      	strb	r1, [r3, r2]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2244      	movs	r2, #68	; 0x44
 800959a:	2101      	movs	r1, #1
 800959c:	5499      	strb	r1, [r3, r2]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2245      	movs	r2, #69	; 0x45
 80095a2:	2101      	movs	r1, #1
 80095a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	223d      	movs	r2, #61	; 0x3d
 80095aa:	2101      	movs	r1, #1
 80095ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	0018      	movs	r0, r3
 80095b2:	46bd      	mov	sp, r7
 80095b4:	b002      	add	sp, #8
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	223d      	movs	r2, #61	; 0x3d
 80095c4:	5c9b      	ldrb	r3, [r3, r2]
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d001      	beq.n	80095d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	e03b      	b.n	8009648 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	223d      	movs	r2, #61	; 0x3d
 80095d4:	2102      	movs	r1, #2
 80095d6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68da      	ldr	r2, [r3, #12]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2101      	movs	r1, #1
 80095e4:	430a      	orrs	r2, r1
 80095e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a18      	ldr	r2, [pc, #96]	; (8009650 <HAL_TIM_Base_Start_IT+0x98>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d00f      	beq.n	8009612 <HAL_TIM_Base_Start_IT+0x5a>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	2380      	movs	r3, #128	; 0x80
 80095f8:	05db      	lsls	r3, r3, #23
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d009      	beq.n	8009612 <HAL_TIM_Base_Start_IT+0x5a>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a14      	ldr	r2, [pc, #80]	; (8009654 <HAL_TIM_Base_Start_IT+0x9c>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d004      	beq.n	8009612 <HAL_TIM_Base_Start_IT+0x5a>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a12      	ldr	r2, [pc, #72]	; (8009658 <HAL_TIM_Base_Start_IT+0xa0>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d111      	bne.n	8009636 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	2207      	movs	r2, #7
 800961a:	4013      	ands	r3, r2
 800961c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2b06      	cmp	r3, #6
 8009622:	d010      	beq.n	8009646 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2101      	movs	r1, #1
 8009630:	430a      	orrs	r2, r1
 8009632:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009634:	e007      	b.n	8009646 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2101      	movs	r1, #1
 8009642:	430a      	orrs	r2, r1
 8009644:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	0018      	movs	r0, r3
 800964a:	46bd      	mov	sp, r7
 800964c:	b004      	add	sp, #16
 800964e:	bd80      	pop	{r7, pc}
 8009650:	40012c00 	.word	0x40012c00
 8009654:	40000400 	.word	0x40000400
 8009658:	40014000 	.word	0x40014000

0800965c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d101      	bne.n	800966e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	e042      	b.n	80096f4 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	223d      	movs	r2, #61	; 0x3d
 8009672:	5c9b      	ldrb	r3, [r3, r2]
 8009674:	b2db      	uxtb	r3, r3
 8009676:	2b00      	cmp	r3, #0
 8009678:	d107      	bne.n	800968a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	223c      	movs	r2, #60	; 0x3c
 800967e:	2100      	movs	r1, #0
 8009680:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	0018      	movs	r0, r3
 8009686:	f000 f839 	bl	80096fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	223d      	movs	r2, #61	; 0x3d
 800968e:	2102      	movs	r1, #2
 8009690:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	3304      	adds	r3, #4
 800969a:	0019      	movs	r1, r3
 800969c:	0010      	movs	r0, r2
 800969e:	f000 fded 	bl	800a27c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2246      	movs	r2, #70	; 0x46
 80096a6:	2101      	movs	r1, #1
 80096a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	223e      	movs	r2, #62	; 0x3e
 80096ae:	2101      	movs	r1, #1
 80096b0:	5499      	strb	r1, [r3, r2]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	223f      	movs	r2, #63	; 0x3f
 80096b6:	2101      	movs	r1, #1
 80096b8:	5499      	strb	r1, [r3, r2]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2240      	movs	r2, #64	; 0x40
 80096be:	2101      	movs	r1, #1
 80096c0:	5499      	strb	r1, [r3, r2]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2241      	movs	r2, #65	; 0x41
 80096c6:	2101      	movs	r1, #1
 80096c8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2242      	movs	r2, #66	; 0x42
 80096ce:	2101      	movs	r1, #1
 80096d0:	5499      	strb	r1, [r3, r2]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2243      	movs	r2, #67	; 0x43
 80096d6:	2101      	movs	r1, #1
 80096d8:	5499      	strb	r1, [r3, r2]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2244      	movs	r2, #68	; 0x44
 80096de:	2101      	movs	r1, #1
 80096e0:	5499      	strb	r1, [r3, r2]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2245      	movs	r2, #69	; 0x45
 80096e6:	2101      	movs	r1, #1
 80096e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	223d      	movs	r2, #61	; 0x3d
 80096ee:	2101      	movs	r1, #1
 80096f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80096f2:	2300      	movs	r3, #0
}
 80096f4:	0018      	movs	r0, r3
 80096f6:	46bd      	mov	sp, r7
 80096f8:	b002      	add	sp, #8
 80096fa:	bd80      	pop	{r7, pc}

080096fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009704:	46c0      	nop			; (mov r8, r8)
 8009706:	46bd      	mov	sp, r7
 8009708:	b002      	add	sp, #8
 800970a:	bd80      	pop	{r7, pc}

0800970c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d101      	bne.n	800971e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e042      	b.n	80097a4 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	223d      	movs	r2, #61	; 0x3d
 8009722:	5c9b      	ldrb	r3, [r3, r2]
 8009724:	b2db      	uxtb	r3, r3
 8009726:	2b00      	cmp	r3, #0
 8009728:	d107      	bne.n	800973a <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	223c      	movs	r2, #60	; 0x3c
 800972e:	2100      	movs	r1, #0
 8009730:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	0018      	movs	r0, r3
 8009736:	f000 f839 	bl	80097ac <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	223d      	movs	r2, #61	; 0x3d
 800973e:	2102      	movs	r1, #2
 8009740:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	3304      	adds	r3, #4
 800974a:	0019      	movs	r1, r3
 800974c:	0010      	movs	r0, r2
 800974e:	f000 fd95 	bl	800a27c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2246      	movs	r2, #70	; 0x46
 8009756:	2101      	movs	r1, #1
 8009758:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	223e      	movs	r2, #62	; 0x3e
 800975e:	2101      	movs	r1, #1
 8009760:	5499      	strb	r1, [r3, r2]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	223f      	movs	r2, #63	; 0x3f
 8009766:	2101      	movs	r1, #1
 8009768:	5499      	strb	r1, [r3, r2]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2240      	movs	r2, #64	; 0x40
 800976e:	2101      	movs	r1, #1
 8009770:	5499      	strb	r1, [r3, r2]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2241      	movs	r2, #65	; 0x41
 8009776:	2101      	movs	r1, #1
 8009778:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2242      	movs	r2, #66	; 0x42
 800977e:	2101      	movs	r1, #1
 8009780:	5499      	strb	r1, [r3, r2]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2243      	movs	r2, #67	; 0x43
 8009786:	2101      	movs	r1, #1
 8009788:	5499      	strb	r1, [r3, r2]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2244      	movs	r2, #68	; 0x44
 800978e:	2101      	movs	r1, #1
 8009790:	5499      	strb	r1, [r3, r2]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2245      	movs	r2, #69	; 0x45
 8009796:	2101      	movs	r1, #1
 8009798:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	223d      	movs	r2, #61	; 0x3d
 800979e:	2101      	movs	r1, #1
 80097a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	0018      	movs	r0, r3
 80097a6:	46bd      	mov	sp, r7
 80097a8:	b002      	add	sp, #8
 80097aa:	bd80      	pop	{r7, pc}

080097ac <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80097b4:	46c0      	nop			; (mov r8, r8)
 80097b6:	46bd      	mov	sp, r7
 80097b8:	b002      	add	sp, #8
 80097ba:	bd80      	pop	{r7, pc}

080097bc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80097c6:	230f      	movs	r3, #15
 80097c8:	18fb      	adds	r3, r7, r3
 80097ca:	2200      	movs	r2, #0
 80097cc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d104      	bne.n	80097de <HAL_TIM_IC_Start_IT+0x22>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	223e      	movs	r2, #62	; 0x3e
 80097d8:	5c9b      	ldrb	r3, [r3, r2]
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	e013      	b.n	8009806 <HAL_TIM_IC_Start_IT+0x4a>
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	2b04      	cmp	r3, #4
 80097e2:	d104      	bne.n	80097ee <HAL_TIM_IC_Start_IT+0x32>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	223f      	movs	r2, #63	; 0x3f
 80097e8:	5c9b      	ldrb	r3, [r3, r2]
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	e00b      	b.n	8009806 <HAL_TIM_IC_Start_IT+0x4a>
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	2b08      	cmp	r3, #8
 80097f2:	d104      	bne.n	80097fe <HAL_TIM_IC_Start_IT+0x42>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2240      	movs	r2, #64	; 0x40
 80097f8:	5c9b      	ldrb	r3, [r3, r2]
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	e003      	b.n	8009806 <HAL_TIM_IC_Start_IT+0x4a>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2241      	movs	r2, #65	; 0x41
 8009802:	5c9b      	ldrb	r3, [r3, r2]
 8009804:	b2db      	uxtb	r3, r3
 8009806:	220e      	movs	r2, #14
 8009808:	18ba      	adds	r2, r7, r2
 800980a:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d104      	bne.n	800981c <HAL_TIM_IC_Start_IT+0x60>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2242      	movs	r2, #66	; 0x42
 8009816:	5c9b      	ldrb	r3, [r3, r2]
 8009818:	b2db      	uxtb	r3, r3
 800981a:	e013      	b.n	8009844 <HAL_TIM_IC_Start_IT+0x88>
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	2b04      	cmp	r3, #4
 8009820:	d104      	bne.n	800982c <HAL_TIM_IC_Start_IT+0x70>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2243      	movs	r2, #67	; 0x43
 8009826:	5c9b      	ldrb	r3, [r3, r2]
 8009828:	b2db      	uxtb	r3, r3
 800982a:	e00b      	b.n	8009844 <HAL_TIM_IC_Start_IT+0x88>
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	2b08      	cmp	r3, #8
 8009830:	d104      	bne.n	800983c <HAL_TIM_IC_Start_IT+0x80>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2244      	movs	r2, #68	; 0x44
 8009836:	5c9b      	ldrb	r3, [r3, r2]
 8009838:	b2db      	uxtb	r3, r3
 800983a:	e003      	b.n	8009844 <HAL_TIM_IC_Start_IT+0x88>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2245      	movs	r2, #69	; 0x45
 8009840:	5c9b      	ldrb	r3, [r3, r2]
 8009842:	b2db      	uxtb	r3, r3
 8009844:	210d      	movs	r1, #13
 8009846:	187a      	adds	r2, r7, r1
 8009848:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800984a:	230e      	movs	r3, #14
 800984c:	18fb      	adds	r3, r7, r3
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	2b01      	cmp	r3, #1
 8009852:	d103      	bne.n	800985c <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009854:	187b      	adds	r3, r7, r1
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	2b01      	cmp	r3, #1
 800985a:	d001      	beq.n	8009860 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	e0b1      	b.n	80099c4 <HAL_TIM_IC_Start_IT+0x208>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d104      	bne.n	8009870 <HAL_TIM_IC_Start_IT+0xb4>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	223e      	movs	r2, #62	; 0x3e
 800986a:	2102      	movs	r1, #2
 800986c:	5499      	strb	r1, [r3, r2]
 800986e:	e013      	b.n	8009898 <HAL_TIM_IC_Start_IT+0xdc>
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	2b04      	cmp	r3, #4
 8009874:	d104      	bne.n	8009880 <HAL_TIM_IC_Start_IT+0xc4>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	223f      	movs	r2, #63	; 0x3f
 800987a:	2102      	movs	r1, #2
 800987c:	5499      	strb	r1, [r3, r2]
 800987e:	e00b      	b.n	8009898 <HAL_TIM_IC_Start_IT+0xdc>
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	2b08      	cmp	r3, #8
 8009884:	d104      	bne.n	8009890 <HAL_TIM_IC_Start_IT+0xd4>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2240      	movs	r2, #64	; 0x40
 800988a:	2102      	movs	r1, #2
 800988c:	5499      	strb	r1, [r3, r2]
 800988e:	e003      	b.n	8009898 <HAL_TIM_IC_Start_IT+0xdc>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2241      	movs	r2, #65	; 0x41
 8009894:	2102      	movs	r1, #2
 8009896:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d104      	bne.n	80098a8 <HAL_TIM_IC_Start_IT+0xec>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2242      	movs	r2, #66	; 0x42
 80098a2:	2102      	movs	r1, #2
 80098a4:	5499      	strb	r1, [r3, r2]
 80098a6:	e013      	b.n	80098d0 <HAL_TIM_IC_Start_IT+0x114>
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	2b04      	cmp	r3, #4
 80098ac:	d104      	bne.n	80098b8 <HAL_TIM_IC_Start_IT+0xfc>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2243      	movs	r2, #67	; 0x43
 80098b2:	2102      	movs	r1, #2
 80098b4:	5499      	strb	r1, [r3, r2]
 80098b6:	e00b      	b.n	80098d0 <HAL_TIM_IC_Start_IT+0x114>
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	2b08      	cmp	r3, #8
 80098bc:	d104      	bne.n	80098c8 <HAL_TIM_IC_Start_IT+0x10c>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2244      	movs	r2, #68	; 0x44
 80098c2:	2102      	movs	r1, #2
 80098c4:	5499      	strb	r1, [r3, r2]
 80098c6:	e003      	b.n	80098d0 <HAL_TIM_IC_Start_IT+0x114>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2245      	movs	r2, #69	; 0x45
 80098cc:	2102      	movs	r1, #2
 80098ce:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	2b0c      	cmp	r3, #12
 80098d4:	d02a      	beq.n	800992c <HAL_TIM_IC_Start_IT+0x170>
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	2b0c      	cmp	r3, #12
 80098da:	d830      	bhi.n	800993e <HAL_TIM_IC_Start_IT+0x182>
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	2b08      	cmp	r3, #8
 80098e0:	d01b      	beq.n	800991a <HAL_TIM_IC_Start_IT+0x15e>
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	2b08      	cmp	r3, #8
 80098e6:	d82a      	bhi.n	800993e <HAL_TIM_IC_Start_IT+0x182>
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d003      	beq.n	80098f6 <HAL_TIM_IC_Start_IT+0x13a>
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	2b04      	cmp	r3, #4
 80098f2:	d009      	beq.n	8009908 <HAL_TIM_IC_Start_IT+0x14c>
 80098f4:	e023      	b.n	800993e <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	68da      	ldr	r2, [r3, #12]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2102      	movs	r1, #2
 8009902:	430a      	orrs	r2, r1
 8009904:	60da      	str	r2, [r3, #12]
      break;
 8009906:	e01f      	b.n	8009948 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	68da      	ldr	r2, [r3, #12]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2104      	movs	r1, #4
 8009914:	430a      	orrs	r2, r1
 8009916:	60da      	str	r2, [r3, #12]
      break;
 8009918:	e016      	b.n	8009948 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	68da      	ldr	r2, [r3, #12]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2108      	movs	r1, #8
 8009926:	430a      	orrs	r2, r1
 8009928:	60da      	str	r2, [r3, #12]
      break;
 800992a:	e00d      	b.n	8009948 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68da      	ldr	r2, [r3, #12]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2110      	movs	r1, #16
 8009938:	430a      	orrs	r2, r1
 800993a:	60da      	str	r2, [r3, #12]
      break;
 800993c:	e004      	b.n	8009948 <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 800993e:	230f      	movs	r3, #15
 8009940:	18fb      	adds	r3, r7, r3
 8009942:	2201      	movs	r2, #1
 8009944:	701a      	strb	r2, [r3, #0]
      break;
 8009946:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8009948:	230f      	movs	r3, #15
 800994a:	18fb      	adds	r3, r7, r3
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d135      	bne.n	80099be <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	6839      	ldr	r1, [r7, #0]
 8009958:	2201      	movs	r2, #1
 800995a:	0018      	movs	r0, r3
 800995c:	f001 f8c8 	bl	800aaf0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a19      	ldr	r2, [pc, #100]	; (80099cc <HAL_TIM_IC_Start_IT+0x210>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d00f      	beq.n	800998a <HAL_TIM_IC_Start_IT+0x1ce>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	2380      	movs	r3, #128	; 0x80
 8009970:	05db      	lsls	r3, r3, #23
 8009972:	429a      	cmp	r2, r3
 8009974:	d009      	beq.n	800998a <HAL_TIM_IC_Start_IT+0x1ce>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4a15      	ldr	r2, [pc, #84]	; (80099d0 <HAL_TIM_IC_Start_IT+0x214>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d004      	beq.n	800998a <HAL_TIM_IC_Start_IT+0x1ce>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a13      	ldr	r2, [pc, #76]	; (80099d4 <HAL_TIM_IC_Start_IT+0x218>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d111      	bne.n	80099ae <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	2207      	movs	r2, #7
 8009992:	4013      	ands	r3, r2
 8009994:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	2b06      	cmp	r3, #6
 800999a:	d010      	beq.n	80099be <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2101      	movs	r1, #1
 80099a8:	430a      	orrs	r2, r1
 80099aa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099ac:	e007      	b.n	80099be <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2101      	movs	r1, #1
 80099ba:	430a      	orrs	r2, r1
 80099bc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80099be:	230f      	movs	r3, #15
 80099c0:	18fb      	adds	r3, r7, r3
 80099c2:	781b      	ldrb	r3, [r3, #0]
}
 80099c4:	0018      	movs	r0, r3
 80099c6:	46bd      	mov	sp, r7
 80099c8:	b004      	add	sp, #16
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	40012c00 	.word	0x40012c00
 80099d0:	40000400 	.word	0x40000400
 80099d4:	40014000 	.word	0x40014000

080099d8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d101      	bne.n	80099ec <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80099e8:	2301      	movs	r3, #1
 80099ea:	e042      	b.n	8009a72 <HAL_TIM_OnePulse_Init+0x9a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	223d      	movs	r2, #61	; 0x3d
 80099f0:	5c9b      	ldrb	r3, [r3, r2]
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d107      	bne.n	8009a08 <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	223c      	movs	r2, #60	; 0x3c
 80099fc:	2100      	movs	r1, #0
 80099fe:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	0018      	movs	r0, r3
 8009a04:	f000 f839 	bl	8009a7a <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	223d      	movs	r2, #61	; 0x3d
 8009a0c:	2102      	movs	r1, #2
 8009a0e:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	3304      	adds	r3, #4
 8009a18:	0019      	movs	r1, r3
 8009a1a:	0010      	movs	r0, r2
 8009a1c:	f000 fc2e 	bl	800a27c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	2108      	movs	r1, #8
 8009a2c:	438a      	bics	r2, r1
 8009a2e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	6819      	ldr	r1, [r3, #0]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	683a      	ldr	r2, [r7, #0]
 8009a3c:	430a      	orrs	r2, r1
 8009a3e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2246      	movs	r2, #70	; 0x46
 8009a44:	2101      	movs	r1, #1
 8009a46:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	223e      	movs	r2, #62	; 0x3e
 8009a4c:	2101      	movs	r1, #1
 8009a4e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	223f      	movs	r2, #63	; 0x3f
 8009a54:	2101      	movs	r1, #1
 8009a56:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2242      	movs	r2, #66	; 0x42
 8009a5c:	2101      	movs	r1, #1
 8009a5e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2243      	movs	r2, #67	; 0x43
 8009a64:	2101      	movs	r1, #1
 8009a66:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	223d      	movs	r2, #61	; 0x3d
 8009a6c:	2101      	movs	r1, #1
 8009a6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	0018      	movs	r0, r3
 8009a74:	46bd      	mov	sp, r7
 8009a76:	b002      	add	sp, #8
 8009a78:	bd80      	pop	{r7, pc}

08009a7a <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8009a7a:	b580      	push	{r7, lr}
 8009a7c:	b082      	sub	sp, #8
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8009a82:	46c0      	nop			; (mov r8, r8)
 8009a84:	46bd      	mov	sp, r7
 8009a86:	b002      	add	sp, #8
 8009a88:	bd80      	pop	{r7, pc}
	...

08009a8c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a8e:	b085      	sub	sp, #20
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009a96:	200f      	movs	r0, #15
 8009a98:	183b      	adds	r3, r7, r0
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	213e      	movs	r1, #62	; 0x3e
 8009a9e:	5c52      	ldrb	r2, [r2, r1]
 8009aa0:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009aa2:	240e      	movs	r4, #14
 8009aa4:	193b      	adds	r3, r7, r4
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	213f      	movs	r1, #63	; 0x3f
 8009aaa:	5c52      	ldrb	r2, [r2, r1]
 8009aac:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009aae:	250d      	movs	r5, #13
 8009ab0:	197b      	adds	r3, r7, r5
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	2142      	movs	r1, #66	; 0x42
 8009ab6:	5c52      	ldrb	r2, [r2, r1]
 8009ab8:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009aba:	260c      	movs	r6, #12
 8009abc:	19bb      	adds	r3, r7, r6
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	2143      	movs	r1, #67	; 0x43
 8009ac2:	5c52      	ldrb	r2, [r2, r1]
 8009ac4:	701a      	strb	r2, [r3, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009ac6:	183b      	adds	r3, r7, r0
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d10b      	bne.n	8009ae6 <HAL_TIM_OnePulse_Start_IT+0x5a>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009ace:	193b      	adds	r3, r7, r4
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d107      	bne.n	8009ae6 <HAL_TIM_OnePulse_Start_IT+0x5a>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009ad6:	197b      	adds	r3, r7, r5
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d103      	bne.n	8009ae6 <HAL_TIM_OnePulse_Start_IT+0x5a>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009ade:	19bb      	adds	r3, r7, r6
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d001      	beq.n	8009aea <HAL_TIM_OnePulse_Start_IT+0x5e>
  {
    return HAL_ERROR;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e050      	b.n	8009b8c <HAL_TIM_OnePulse_Start_IT+0x100>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	223e      	movs	r2, #62	; 0x3e
 8009aee:	2102      	movs	r1, #2
 8009af0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	223f      	movs	r2, #63	; 0x3f
 8009af6:	2102      	movs	r1, #2
 8009af8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2242      	movs	r2, #66	; 0x42
 8009afe:	2102      	movs	r1, #2
 8009b00:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2243      	movs	r2, #67	; 0x43
 8009b06:	2102      	movs	r1, #2
 8009b08:	5499      	strb	r1, [r3, r2]

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68da      	ldr	r2, [r3, #12]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2102      	movs	r1, #2
 8009b16:	430a      	orrs	r2, r1
 8009b18:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	68da      	ldr	r2, [r3, #12]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2104      	movs	r1, #4
 8009b26:	430a      	orrs	r2, r1
 8009b28:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	2100      	movs	r1, #0
 8009b32:	0018      	movs	r0, r3
 8009b34:	f000 ffdc 	bl	800aaf0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	2104      	movs	r1, #4
 8009b40:	0018      	movs	r0, r3
 8009b42:	f000 ffd5 	bl	800aaf0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a12      	ldr	r2, [pc, #72]	; (8009b94 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d00e      	beq.n	8009b6e <HAL_TIM_OnePulse_Start_IT+0xe2>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a10      	ldr	r2, [pc, #64]	; (8009b98 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d009      	beq.n	8009b6e <HAL_TIM_OnePulse_Start_IT+0xe2>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a0f      	ldr	r2, [pc, #60]	; (8009b9c <HAL_TIM_OnePulse_Start_IT+0x110>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d004      	beq.n	8009b6e <HAL_TIM_OnePulse_Start_IT+0xe2>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a0d      	ldr	r2, [pc, #52]	; (8009ba0 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d101      	bne.n	8009b72 <HAL_TIM_OnePulse_Start_IT+0xe6>
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e000      	b.n	8009b74 <HAL_TIM_OnePulse_Start_IT+0xe8>
 8009b72:	2300      	movs	r3, #0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d008      	beq.n	8009b8a <HAL_TIM_OnePulse_Start_IT+0xfe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	2180      	movs	r1, #128	; 0x80
 8009b84:	0209      	lsls	r1, r1, #8
 8009b86:	430a      	orrs	r2, r1
 8009b88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	0018      	movs	r0, r3
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	b005      	add	sp, #20
 8009b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b94:	40012c00 	.word	0x40012c00
 8009b98:	40014000 	.word	0x40014000
 8009b9c:	40014400 	.word	0x40014400
 8009ba0:	40014800 	.word	0x40014800

08009ba4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	691b      	ldr	r3, [r3, #16]
 8009bb2:	2202      	movs	r2, #2
 8009bb4:	4013      	ands	r3, r2
 8009bb6:	2b02      	cmp	r3, #2
 8009bb8:	d124      	bne.n	8009c04 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	2202      	movs	r2, #2
 8009bc2:	4013      	ands	r3, r2
 8009bc4:	2b02      	cmp	r3, #2
 8009bc6:	d11d      	bne.n	8009c04 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	2203      	movs	r2, #3
 8009bce:	4252      	negs	r2, r2
 8009bd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	699b      	ldr	r3, [r3, #24]
 8009bde:	2203      	movs	r2, #3
 8009be0:	4013      	ands	r3, r2
 8009be2:	d004      	beq.n	8009bee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	0018      	movs	r0, r3
 8009be8:	f7fa fd40 	bl	800466c <HAL_TIM_IC_CaptureCallback>
 8009bec:	e007      	b.n	8009bfe <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	0018      	movs	r0, r3
 8009bf2:	f000 fb2b 	bl	800a24c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	0018      	movs	r0, r3
 8009bfa:	f000 fb2f 	bl	800a25c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	691b      	ldr	r3, [r3, #16]
 8009c0a:	2204      	movs	r2, #4
 8009c0c:	4013      	ands	r3, r2
 8009c0e:	2b04      	cmp	r3, #4
 8009c10:	d125      	bne.n	8009c5e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	2204      	movs	r2, #4
 8009c1a:	4013      	ands	r3, r2
 8009c1c:	2b04      	cmp	r3, #4
 8009c1e:	d11e      	bne.n	8009c5e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	2205      	movs	r2, #5
 8009c26:	4252      	negs	r2, r2
 8009c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2202      	movs	r2, #2
 8009c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	699a      	ldr	r2, [r3, #24]
 8009c36:	23c0      	movs	r3, #192	; 0xc0
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	d004      	beq.n	8009c48 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	0018      	movs	r0, r3
 8009c42:	f7fa fd13 	bl	800466c <HAL_TIM_IC_CaptureCallback>
 8009c46:	e007      	b.n	8009c58 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	0018      	movs	r0, r3
 8009c4c:	f000 fafe 	bl	800a24c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	0018      	movs	r0, r3
 8009c54:	f000 fb02 	bl	800a25c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	691b      	ldr	r3, [r3, #16]
 8009c64:	2208      	movs	r2, #8
 8009c66:	4013      	ands	r3, r2
 8009c68:	2b08      	cmp	r3, #8
 8009c6a:	d124      	bne.n	8009cb6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	68db      	ldr	r3, [r3, #12]
 8009c72:	2208      	movs	r2, #8
 8009c74:	4013      	ands	r3, r2
 8009c76:	2b08      	cmp	r3, #8
 8009c78:	d11d      	bne.n	8009cb6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2209      	movs	r2, #9
 8009c80:	4252      	negs	r2, r2
 8009c82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2204      	movs	r2, #4
 8009c88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	69db      	ldr	r3, [r3, #28]
 8009c90:	2203      	movs	r2, #3
 8009c92:	4013      	ands	r3, r2
 8009c94:	d004      	beq.n	8009ca0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	0018      	movs	r0, r3
 8009c9a:	f7fa fce7 	bl	800466c <HAL_TIM_IC_CaptureCallback>
 8009c9e:	e007      	b.n	8009cb0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	0018      	movs	r0, r3
 8009ca4:	f000 fad2 	bl	800a24c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	0018      	movs	r0, r3
 8009cac:	f000 fad6 	bl	800a25c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	691b      	ldr	r3, [r3, #16]
 8009cbc:	2210      	movs	r2, #16
 8009cbe:	4013      	ands	r3, r2
 8009cc0:	2b10      	cmp	r3, #16
 8009cc2:	d125      	bne.n	8009d10 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	2210      	movs	r2, #16
 8009ccc:	4013      	ands	r3, r2
 8009cce:	2b10      	cmp	r3, #16
 8009cd0:	d11e      	bne.n	8009d10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2211      	movs	r2, #17
 8009cd8:	4252      	negs	r2, r2
 8009cda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2208      	movs	r2, #8
 8009ce0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	69da      	ldr	r2, [r3, #28]
 8009ce8:	23c0      	movs	r3, #192	; 0xc0
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	4013      	ands	r3, r2
 8009cee:	d004      	beq.n	8009cfa <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	0018      	movs	r0, r3
 8009cf4:	f7fa fcba 	bl	800466c <HAL_TIM_IC_CaptureCallback>
 8009cf8:	e007      	b.n	8009d0a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	0018      	movs	r0, r3
 8009cfe:	f000 faa5 	bl	800a24c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	0018      	movs	r0, r3
 8009d06:	f000 faa9 	bl	800a25c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	691b      	ldr	r3, [r3, #16]
 8009d16:	2201      	movs	r2, #1
 8009d18:	4013      	ands	r3, r2
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d10f      	bne.n	8009d3e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	2201      	movs	r2, #1
 8009d26:	4013      	ands	r3, r2
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d108      	bne.n	8009d3e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2202      	movs	r2, #2
 8009d32:	4252      	negs	r2, r2
 8009d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	0018      	movs	r0, r3
 8009d3a:	f7fb f9cd 	bl	80050d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	2280      	movs	r2, #128	; 0x80
 8009d46:	4013      	ands	r3, r2
 8009d48:	2b80      	cmp	r3, #128	; 0x80
 8009d4a:	d10f      	bne.n	8009d6c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	2280      	movs	r2, #128	; 0x80
 8009d54:	4013      	ands	r3, r2
 8009d56:	2b80      	cmp	r3, #128	; 0x80
 8009d58:	d108      	bne.n	8009d6c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	2281      	movs	r2, #129	; 0x81
 8009d60:	4252      	negs	r2, r2
 8009d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	0018      	movs	r0, r3
 8009d68:	f000 ffaa 	bl	800acc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	691b      	ldr	r3, [r3, #16]
 8009d72:	2240      	movs	r2, #64	; 0x40
 8009d74:	4013      	ands	r3, r2
 8009d76:	2b40      	cmp	r3, #64	; 0x40
 8009d78:	d10f      	bne.n	8009d9a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	2240      	movs	r2, #64	; 0x40
 8009d82:	4013      	ands	r3, r2
 8009d84:	2b40      	cmp	r3, #64	; 0x40
 8009d86:	d108      	bne.n	8009d9a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2241      	movs	r2, #65	; 0x41
 8009d8e:	4252      	negs	r2, r2
 8009d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	0018      	movs	r0, r3
 8009d96:	f000 fa69 	bl	800a26c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	691b      	ldr	r3, [r3, #16]
 8009da0:	2220      	movs	r2, #32
 8009da2:	4013      	ands	r3, r2
 8009da4:	2b20      	cmp	r3, #32
 8009da6:	d10f      	bne.n	8009dc8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	2220      	movs	r2, #32
 8009db0:	4013      	ands	r3, r2
 8009db2:	2b20      	cmp	r3, #32
 8009db4:	d108      	bne.n	8009dc8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2221      	movs	r2, #33	; 0x21
 8009dbc:	4252      	negs	r2, r2
 8009dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	0018      	movs	r0, r3
 8009dc4:	f000 ff74 	bl	800acb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009dc8:	46c0      	nop			; (mov r8, r8)
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	b002      	add	sp, #8
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b086      	sub	sp, #24
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ddc:	2317      	movs	r3, #23
 8009dde:	18fb      	adds	r3, r7, r3
 8009de0:	2200      	movs	r2, #0
 8009de2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	223c      	movs	r2, #60	; 0x3c
 8009de8:	5c9b      	ldrb	r3, [r3, r2]
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d101      	bne.n	8009df2 <HAL_TIM_IC_ConfigChannel+0x22>
 8009dee:	2302      	movs	r3, #2
 8009df0:	e08c      	b.n	8009f0c <HAL_TIM_IC_ConfigChannel+0x13c>
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	223c      	movs	r2, #60	; 0x3c
 8009df6:	2101      	movs	r1, #1
 8009df8:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d11b      	bne.n	8009e38 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6818      	ldr	r0, [r3, #0]
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	6819      	ldr	r1, [r3, #0]
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	685a      	ldr	r2, [r3, #4]
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	68db      	ldr	r3, [r3, #12]
 8009e10:	f000 fcb0 	bl	800a774 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	699a      	ldr	r2, [r3, #24]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	210c      	movs	r1, #12
 8009e20:	438a      	bics	r2, r1
 8009e22:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	6999      	ldr	r1, [r3, #24]
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	689a      	ldr	r2, [r3, #8]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	430a      	orrs	r2, r1
 8009e34:	619a      	str	r2, [r3, #24]
 8009e36:	e062      	b.n	8009efe <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2b04      	cmp	r3, #4
 8009e3c:	d11c      	bne.n	8009e78 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6818      	ldr	r0, [r3, #0]
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	6819      	ldr	r1, [r3, #0]
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	685a      	ldr	r2, [r3, #4]
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	68db      	ldr	r3, [r3, #12]
 8009e4e:	f000 fd1b 	bl	800a888 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	699a      	ldr	r2, [r3, #24]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	492d      	ldr	r1, [pc, #180]	; (8009f14 <HAL_TIM_IC_ConfigChannel+0x144>)
 8009e5e:	400a      	ands	r2, r1
 8009e60:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	6999      	ldr	r1, [r3, #24]
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	689b      	ldr	r3, [r3, #8]
 8009e6c:	021a      	lsls	r2, r3, #8
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	430a      	orrs	r2, r1
 8009e74:	619a      	str	r2, [r3, #24]
 8009e76:	e042      	b.n	8009efe <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2b08      	cmp	r3, #8
 8009e7c:	d11b      	bne.n	8009eb6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	6818      	ldr	r0, [r3, #0]
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	6819      	ldr	r1, [r3, #0]
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	685a      	ldr	r2, [r3, #4]
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	f000 fd6f 	bl	800a970 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	69da      	ldr	r2, [r3, #28]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	210c      	movs	r1, #12
 8009e9e:	438a      	bics	r2, r1
 8009ea0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	69d9      	ldr	r1, [r3, #28]
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	689a      	ldr	r2, [r3, #8]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	430a      	orrs	r2, r1
 8009eb2:	61da      	str	r2, [r3, #28]
 8009eb4:	e023      	b.n	8009efe <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2b0c      	cmp	r3, #12
 8009eba:	d11c      	bne.n	8009ef6 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6818      	ldr	r0, [r3, #0]
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	6819      	ldr	r1, [r3, #0]
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	685a      	ldr	r2, [r3, #4]
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	f000 fd90 	bl	800a9f0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	69da      	ldr	r2, [r3, #28]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	490e      	ldr	r1, [pc, #56]	; (8009f14 <HAL_TIM_IC_ConfigChannel+0x144>)
 8009edc:	400a      	ands	r2, r1
 8009ede:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	69d9      	ldr	r1, [r3, #28]
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	021a      	lsls	r2, r3, #8
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	430a      	orrs	r2, r1
 8009ef2:	61da      	str	r2, [r3, #28]
 8009ef4:	e003      	b.n	8009efe <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8009ef6:	2317      	movs	r3, #23
 8009ef8:	18fb      	adds	r3, r7, r3
 8009efa:	2201      	movs	r2, #1
 8009efc:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	223c      	movs	r2, #60	; 0x3c
 8009f02:	2100      	movs	r1, #0
 8009f04:	5499      	strb	r1, [r3, r2]

  return status;
 8009f06:	2317      	movs	r3, #23
 8009f08:	18fb      	adds	r3, r7, r3
 8009f0a:	781b      	ldrb	r3, [r3, #0]
}
 8009f0c:	0018      	movs	r0, r3
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	b006      	add	sp, #24
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	fffff3ff 	.word	0xfffff3ff

08009f18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b086      	sub	sp, #24
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f24:	2317      	movs	r3, #23
 8009f26:	18fb      	adds	r3, r7, r3
 8009f28:	2200      	movs	r2, #0
 8009f2a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	223c      	movs	r2, #60	; 0x3c
 8009f30:	5c9b      	ldrb	r3, [r3, r2]
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d101      	bne.n	8009f3a <HAL_TIM_PWM_ConfigChannel+0x22>
 8009f36:	2302      	movs	r3, #2
 8009f38:	e0ad      	b.n	800a096 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	223c      	movs	r2, #60	; 0x3c
 8009f3e:	2101      	movs	r1, #1
 8009f40:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2b0c      	cmp	r3, #12
 8009f46:	d100      	bne.n	8009f4a <HAL_TIM_PWM_ConfigChannel+0x32>
 8009f48:	e076      	b.n	800a038 <HAL_TIM_PWM_ConfigChannel+0x120>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2b0c      	cmp	r3, #12
 8009f4e:	d900      	bls.n	8009f52 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8009f50:	e095      	b.n	800a07e <HAL_TIM_PWM_ConfigChannel+0x166>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2b08      	cmp	r3, #8
 8009f56:	d04e      	beq.n	8009ff6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2b08      	cmp	r3, #8
 8009f5c:	d900      	bls.n	8009f60 <HAL_TIM_PWM_ConfigChannel+0x48>
 8009f5e:	e08e      	b.n	800a07e <HAL_TIM_PWM_ConfigChannel+0x166>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d003      	beq.n	8009f6e <HAL_TIM_PWM_ConfigChannel+0x56>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2b04      	cmp	r3, #4
 8009f6a:	d021      	beq.n	8009fb0 <HAL_TIM_PWM_ConfigChannel+0x98>
 8009f6c:	e087      	b.n	800a07e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	68ba      	ldr	r2, [r7, #8]
 8009f74:	0011      	movs	r1, r2
 8009f76:	0018      	movs	r0, r3
 8009f78:	f000 fa00 	bl	800a37c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	699a      	ldr	r2, [r3, #24]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	2108      	movs	r1, #8
 8009f88:	430a      	orrs	r2, r1
 8009f8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	699a      	ldr	r2, [r3, #24]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2104      	movs	r1, #4
 8009f98:	438a      	bics	r2, r1
 8009f9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	6999      	ldr	r1, [r3, #24]
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	691a      	ldr	r2, [r3, #16]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	430a      	orrs	r2, r1
 8009fac:	619a      	str	r2, [r3, #24]
      break;
 8009fae:	e06b      	b.n	800a088 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	68ba      	ldr	r2, [r7, #8]
 8009fb6:	0011      	movs	r1, r2
 8009fb8:	0018      	movs	r0, r3
 8009fba:	f000 fa67 	bl	800a48c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	699a      	ldr	r2, [r3, #24]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	2180      	movs	r1, #128	; 0x80
 8009fca:	0109      	lsls	r1, r1, #4
 8009fcc:	430a      	orrs	r2, r1
 8009fce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	699a      	ldr	r2, [r3, #24]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4931      	ldr	r1, [pc, #196]	; (800a0a0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8009fdc:	400a      	ands	r2, r1
 8009fde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	6999      	ldr	r1, [r3, #24]
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	021a      	lsls	r2, r3, #8
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	430a      	orrs	r2, r1
 8009ff2:	619a      	str	r2, [r3, #24]
      break;
 8009ff4:	e048      	b.n	800a088 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	0011      	movs	r1, r2
 8009ffe:	0018      	movs	r0, r3
 800a000:	f000 fac8 	bl	800a594 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	69da      	ldr	r2, [r3, #28]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2108      	movs	r1, #8
 800a010:	430a      	orrs	r2, r1
 800a012:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	69da      	ldr	r2, [r3, #28]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2104      	movs	r1, #4
 800a020:	438a      	bics	r2, r1
 800a022:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	69d9      	ldr	r1, [r3, #28]
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	691a      	ldr	r2, [r3, #16]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	430a      	orrs	r2, r1
 800a034:	61da      	str	r2, [r3, #28]
      break;
 800a036:	e027      	b.n	800a088 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	68ba      	ldr	r2, [r7, #8]
 800a03e:	0011      	movs	r1, r2
 800a040:	0018      	movs	r0, r3
 800a042:	f000 fb2d 	bl	800a6a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	69da      	ldr	r2, [r3, #28]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2180      	movs	r1, #128	; 0x80
 800a052:	0109      	lsls	r1, r1, #4
 800a054:	430a      	orrs	r2, r1
 800a056:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	69da      	ldr	r2, [r3, #28]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	490f      	ldr	r1, [pc, #60]	; (800a0a0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800a064:	400a      	ands	r2, r1
 800a066:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	69d9      	ldr	r1, [r3, #28]
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	691b      	ldr	r3, [r3, #16]
 800a072:	021a      	lsls	r2, r3, #8
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	430a      	orrs	r2, r1
 800a07a:	61da      	str	r2, [r3, #28]
      break;
 800a07c:	e004      	b.n	800a088 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800a07e:	2317      	movs	r3, #23
 800a080:	18fb      	adds	r3, r7, r3
 800a082:	2201      	movs	r2, #1
 800a084:	701a      	strb	r2, [r3, #0]
      break;
 800a086:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	223c      	movs	r2, #60	; 0x3c
 800a08c:	2100      	movs	r1, #0
 800a08e:	5499      	strb	r1, [r3, r2]

  return status;
 800a090:	2317      	movs	r3, #23
 800a092:	18fb      	adds	r3, r7, r3
 800a094:	781b      	ldrb	r3, [r3, #0]
}
 800a096:	0018      	movs	r0, r3
 800a098:	46bd      	mov	sp, r7
 800a09a:	b006      	add	sp, #24
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	46c0      	nop			; (mov r8, r8)
 800a0a0:	fffffbff 	.word	0xfffffbff

0800a0a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a0ae:	230f      	movs	r3, #15
 800a0b0:	18fb      	adds	r3, r7, r3
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	223c      	movs	r2, #60	; 0x3c
 800a0ba:	5c9b      	ldrb	r3, [r3, r2]
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d101      	bne.n	800a0c4 <HAL_TIM_ConfigClockSource+0x20>
 800a0c0:	2302      	movs	r3, #2
 800a0c2:	e0bc      	b.n	800a23e <HAL_TIM_ConfigClockSource+0x19a>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	223c      	movs	r2, #60	; 0x3c
 800a0c8:	2101      	movs	r1, #1
 800a0ca:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	223d      	movs	r2, #61	; 0x3d
 800a0d0:	2102      	movs	r1, #2
 800a0d2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	2277      	movs	r2, #119	; 0x77
 800a0e0:	4393      	bics	r3, r2
 800a0e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	4a58      	ldr	r2, [pc, #352]	; (800a248 <HAL_TIM_ConfigClockSource+0x1a4>)
 800a0e8:	4013      	ands	r3, r2
 800a0ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	68ba      	ldr	r2, [r7, #8]
 800a0f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	2280      	movs	r2, #128	; 0x80
 800a0fa:	0192      	lsls	r2, r2, #6
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d040      	beq.n	800a182 <HAL_TIM_ConfigClockSource+0xde>
 800a100:	2280      	movs	r2, #128	; 0x80
 800a102:	0192      	lsls	r2, r2, #6
 800a104:	4293      	cmp	r3, r2
 800a106:	d900      	bls.n	800a10a <HAL_TIM_ConfigClockSource+0x66>
 800a108:	e088      	b.n	800a21c <HAL_TIM_ConfigClockSource+0x178>
 800a10a:	2280      	movs	r2, #128	; 0x80
 800a10c:	0152      	lsls	r2, r2, #5
 800a10e:	4293      	cmp	r3, r2
 800a110:	d100      	bne.n	800a114 <HAL_TIM_ConfigClockSource+0x70>
 800a112:	e088      	b.n	800a226 <HAL_TIM_ConfigClockSource+0x182>
 800a114:	2280      	movs	r2, #128	; 0x80
 800a116:	0152      	lsls	r2, r2, #5
 800a118:	4293      	cmp	r3, r2
 800a11a:	d900      	bls.n	800a11e <HAL_TIM_ConfigClockSource+0x7a>
 800a11c:	e07e      	b.n	800a21c <HAL_TIM_ConfigClockSource+0x178>
 800a11e:	2b70      	cmp	r3, #112	; 0x70
 800a120:	d018      	beq.n	800a154 <HAL_TIM_ConfigClockSource+0xb0>
 800a122:	d900      	bls.n	800a126 <HAL_TIM_ConfigClockSource+0x82>
 800a124:	e07a      	b.n	800a21c <HAL_TIM_ConfigClockSource+0x178>
 800a126:	2b60      	cmp	r3, #96	; 0x60
 800a128:	d04f      	beq.n	800a1ca <HAL_TIM_ConfigClockSource+0x126>
 800a12a:	d900      	bls.n	800a12e <HAL_TIM_ConfigClockSource+0x8a>
 800a12c:	e076      	b.n	800a21c <HAL_TIM_ConfigClockSource+0x178>
 800a12e:	2b50      	cmp	r3, #80	; 0x50
 800a130:	d03b      	beq.n	800a1aa <HAL_TIM_ConfigClockSource+0x106>
 800a132:	d900      	bls.n	800a136 <HAL_TIM_ConfigClockSource+0x92>
 800a134:	e072      	b.n	800a21c <HAL_TIM_ConfigClockSource+0x178>
 800a136:	2b40      	cmp	r3, #64	; 0x40
 800a138:	d057      	beq.n	800a1ea <HAL_TIM_ConfigClockSource+0x146>
 800a13a:	d900      	bls.n	800a13e <HAL_TIM_ConfigClockSource+0x9a>
 800a13c:	e06e      	b.n	800a21c <HAL_TIM_ConfigClockSource+0x178>
 800a13e:	2b30      	cmp	r3, #48	; 0x30
 800a140:	d063      	beq.n	800a20a <HAL_TIM_ConfigClockSource+0x166>
 800a142:	d86b      	bhi.n	800a21c <HAL_TIM_ConfigClockSource+0x178>
 800a144:	2b20      	cmp	r3, #32
 800a146:	d060      	beq.n	800a20a <HAL_TIM_ConfigClockSource+0x166>
 800a148:	d868      	bhi.n	800a21c <HAL_TIM_ConfigClockSource+0x178>
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d05d      	beq.n	800a20a <HAL_TIM_ConfigClockSource+0x166>
 800a14e:	2b10      	cmp	r3, #16
 800a150:	d05b      	beq.n	800a20a <HAL_TIM_ConfigClockSource+0x166>
 800a152:	e063      	b.n	800a21c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6818      	ldr	r0, [r3, #0]
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	6899      	ldr	r1, [r3, #8]
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	685a      	ldr	r2, [r3, #4]
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	f000 fca4 	bl	800aab0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	2277      	movs	r2, #119	; 0x77
 800a174:	4313      	orrs	r3, r2
 800a176:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	68ba      	ldr	r2, [r7, #8]
 800a17e:	609a      	str	r2, [r3, #8]
      break;
 800a180:	e052      	b.n	800a228 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6818      	ldr	r0, [r3, #0]
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	6899      	ldr	r1, [r3, #8]
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	685a      	ldr	r2, [r3, #4]
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	68db      	ldr	r3, [r3, #12]
 800a192:	f000 fc8d 	bl	800aab0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	689a      	ldr	r2, [r3, #8]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2180      	movs	r1, #128	; 0x80
 800a1a2:	01c9      	lsls	r1, r1, #7
 800a1a4:	430a      	orrs	r2, r1
 800a1a6:	609a      	str	r2, [r3, #8]
      break;
 800a1a8:	e03e      	b.n	800a228 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6818      	ldr	r0, [r3, #0]
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	6859      	ldr	r1, [r3, #4]
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	001a      	movs	r2, r3
 800a1b8:	f000 fb38 	bl	800a82c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	2150      	movs	r1, #80	; 0x50
 800a1c2:	0018      	movs	r0, r3
 800a1c4:	f000 fc5a 	bl	800aa7c <TIM_ITRx_SetConfig>
      break;
 800a1c8:	e02e      	b.n	800a228 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6818      	ldr	r0, [r3, #0]
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	6859      	ldr	r1, [r3, #4]
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	68db      	ldr	r3, [r3, #12]
 800a1d6:	001a      	movs	r2, r3
 800a1d8:	f000 fb98 	bl	800a90c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2160      	movs	r1, #96	; 0x60
 800a1e2:	0018      	movs	r0, r3
 800a1e4:	f000 fc4a 	bl	800aa7c <TIM_ITRx_SetConfig>
      break;
 800a1e8:	e01e      	b.n	800a228 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6818      	ldr	r0, [r3, #0]
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	6859      	ldr	r1, [r3, #4]
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	68db      	ldr	r3, [r3, #12]
 800a1f6:	001a      	movs	r2, r3
 800a1f8:	f000 fb18 	bl	800a82c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	2140      	movs	r1, #64	; 0x40
 800a202:	0018      	movs	r0, r3
 800a204:	f000 fc3a 	bl	800aa7c <TIM_ITRx_SetConfig>
      break;
 800a208:	e00e      	b.n	800a228 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	0019      	movs	r1, r3
 800a214:	0010      	movs	r0, r2
 800a216:	f000 fc31 	bl	800aa7c <TIM_ITRx_SetConfig>
      break;
 800a21a:	e005      	b.n	800a228 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800a21c:	230f      	movs	r3, #15
 800a21e:	18fb      	adds	r3, r7, r3
 800a220:	2201      	movs	r2, #1
 800a222:	701a      	strb	r2, [r3, #0]
      break;
 800a224:	e000      	b.n	800a228 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800a226:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	223d      	movs	r2, #61	; 0x3d
 800a22c:	2101      	movs	r1, #1
 800a22e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	223c      	movs	r2, #60	; 0x3c
 800a234:	2100      	movs	r1, #0
 800a236:	5499      	strb	r1, [r3, r2]

  return status;
 800a238:	230f      	movs	r3, #15
 800a23a:	18fb      	adds	r3, r7, r3
 800a23c:	781b      	ldrb	r3, [r3, #0]
}
 800a23e:	0018      	movs	r0, r3
 800a240:	46bd      	mov	sp, r7
 800a242:	b004      	add	sp, #16
 800a244:	bd80      	pop	{r7, pc}
 800a246:	46c0      	nop			; (mov r8, r8)
 800a248:	ffff00ff 	.word	0xffff00ff

0800a24c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a254:	46c0      	nop			; (mov r8, r8)
 800a256:	46bd      	mov	sp, r7
 800a258:	b002      	add	sp, #8
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a264:	46c0      	nop			; (mov r8, r8)
 800a266:	46bd      	mov	sp, r7
 800a268:	b002      	add	sp, #8
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a274:	46c0      	nop			; (mov r8, r8)
 800a276:	46bd      	mov	sp, r7
 800a278:	b002      	add	sp, #8
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	4a34      	ldr	r2, [pc, #208]	; (800a360 <TIM_Base_SetConfig+0xe4>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d008      	beq.n	800a2a6 <TIM_Base_SetConfig+0x2a>
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	2380      	movs	r3, #128	; 0x80
 800a298:	05db      	lsls	r3, r3, #23
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d003      	beq.n	800a2a6 <TIM_Base_SetConfig+0x2a>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	4a30      	ldr	r2, [pc, #192]	; (800a364 <TIM_Base_SetConfig+0xe8>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d108      	bne.n	800a2b8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2270      	movs	r2, #112	; 0x70
 800a2aa:	4393      	bics	r3, r2
 800a2ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	68fa      	ldr	r2, [r7, #12]
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	4a29      	ldr	r2, [pc, #164]	; (800a360 <TIM_Base_SetConfig+0xe4>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d018      	beq.n	800a2f2 <TIM_Base_SetConfig+0x76>
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	2380      	movs	r3, #128	; 0x80
 800a2c4:	05db      	lsls	r3, r3, #23
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d013      	beq.n	800a2f2 <TIM_Base_SetConfig+0x76>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4a25      	ldr	r2, [pc, #148]	; (800a364 <TIM_Base_SetConfig+0xe8>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d00f      	beq.n	800a2f2 <TIM_Base_SetConfig+0x76>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4a24      	ldr	r2, [pc, #144]	; (800a368 <TIM_Base_SetConfig+0xec>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d00b      	beq.n	800a2f2 <TIM_Base_SetConfig+0x76>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	4a23      	ldr	r2, [pc, #140]	; (800a36c <TIM_Base_SetConfig+0xf0>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d007      	beq.n	800a2f2 <TIM_Base_SetConfig+0x76>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	4a22      	ldr	r2, [pc, #136]	; (800a370 <TIM_Base_SetConfig+0xf4>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d003      	beq.n	800a2f2 <TIM_Base_SetConfig+0x76>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	4a21      	ldr	r2, [pc, #132]	; (800a374 <TIM_Base_SetConfig+0xf8>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d108      	bne.n	800a304 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	4a20      	ldr	r2, [pc, #128]	; (800a378 <TIM_Base_SetConfig+0xfc>)
 800a2f6:	4013      	ands	r3, r2
 800a2f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	4313      	orrs	r3, r2
 800a302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2280      	movs	r2, #128	; 0x80
 800a308:	4393      	bics	r3, r2
 800a30a:	001a      	movs	r2, r3
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	695b      	ldr	r3, [r3, #20]
 800a310:	4313      	orrs	r3, r2
 800a312:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	68fa      	ldr	r2, [r7, #12]
 800a318:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	689a      	ldr	r2, [r3, #8]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	4a0c      	ldr	r2, [pc, #48]	; (800a360 <TIM_Base_SetConfig+0xe4>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d00b      	beq.n	800a34a <TIM_Base_SetConfig+0xce>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	4a0d      	ldr	r2, [pc, #52]	; (800a36c <TIM_Base_SetConfig+0xf0>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d007      	beq.n	800a34a <TIM_Base_SetConfig+0xce>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	4a0c      	ldr	r2, [pc, #48]	; (800a370 <TIM_Base_SetConfig+0xf4>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d003      	beq.n	800a34a <TIM_Base_SetConfig+0xce>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4a0b      	ldr	r2, [pc, #44]	; (800a374 <TIM_Base_SetConfig+0xf8>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d103      	bne.n	800a352 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	691a      	ldr	r2, [r3, #16]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2201      	movs	r2, #1
 800a356:	615a      	str	r2, [r3, #20]
}
 800a358:	46c0      	nop			; (mov r8, r8)
 800a35a:	46bd      	mov	sp, r7
 800a35c:	b004      	add	sp, #16
 800a35e:	bd80      	pop	{r7, pc}
 800a360:	40012c00 	.word	0x40012c00
 800a364:	40000400 	.word	0x40000400
 800a368:	40002000 	.word	0x40002000
 800a36c:	40014000 	.word	0x40014000
 800a370:	40014400 	.word	0x40014400
 800a374:	40014800 	.word	0x40014800
 800a378:	fffffcff 	.word	0xfffffcff

0800a37c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b086      	sub	sp, #24
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6a1b      	ldr	r3, [r3, #32]
 800a38a:	2201      	movs	r2, #1
 800a38c:	4393      	bics	r3, r2
 800a38e:	001a      	movs	r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6a1b      	ldr	r3, [r3, #32]
 800a398:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	699b      	ldr	r3, [r3, #24]
 800a3a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2270      	movs	r2, #112	; 0x70
 800a3aa:	4393      	bics	r3, r2
 800a3ac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2203      	movs	r2, #3
 800a3b2:	4393      	bics	r3, r2
 800a3b4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	68fa      	ldr	r2, [r7, #12]
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	2202      	movs	r2, #2
 800a3c4:	4393      	bics	r3, r2
 800a3c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	697a      	ldr	r2, [r7, #20]
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	4a27      	ldr	r2, [pc, #156]	; (800a474 <TIM_OC1_SetConfig+0xf8>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d00b      	beq.n	800a3f2 <TIM_OC1_SetConfig+0x76>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	4a26      	ldr	r2, [pc, #152]	; (800a478 <TIM_OC1_SetConfig+0xfc>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d007      	beq.n	800a3f2 <TIM_OC1_SetConfig+0x76>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	4a25      	ldr	r2, [pc, #148]	; (800a47c <TIM_OC1_SetConfig+0x100>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d003      	beq.n	800a3f2 <TIM_OC1_SetConfig+0x76>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	4a24      	ldr	r2, [pc, #144]	; (800a480 <TIM_OC1_SetConfig+0x104>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d10c      	bne.n	800a40c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	2208      	movs	r2, #8
 800a3f6:	4393      	bics	r3, r2
 800a3f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	68db      	ldr	r3, [r3, #12]
 800a3fe:	697a      	ldr	r2, [r7, #20]
 800a400:	4313      	orrs	r3, r2
 800a402:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	2204      	movs	r2, #4
 800a408:	4393      	bics	r3, r2
 800a40a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	4a19      	ldr	r2, [pc, #100]	; (800a474 <TIM_OC1_SetConfig+0xf8>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d00b      	beq.n	800a42c <TIM_OC1_SetConfig+0xb0>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	4a18      	ldr	r2, [pc, #96]	; (800a478 <TIM_OC1_SetConfig+0xfc>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d007      	beq.n	800a42c <TIM_OC1_SetConfig+0xb0>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	4a17      	ldr	r2, [pc, #92]	; (800a47c <TIM_OC1_SetConfig+0x100>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d003      	beq.n	800a42c <TIM_OC1_SetConfig+0xb0>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	4a16      	ldr	r2, [pc, #88]	; (800a480 <TIM_OC1_SetConfig+0x104>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d111      	bne.n	800a450 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	4a15      	ldr	r2, [pc, #84]	; (800a484 <TIM_OC1_SetConfig+0x108>)
 800a430:	4013      	ands	r3, r2
 800a432:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	4a14      	ldr	r2, [pc, #80]	; (800a488 <TIM_OC1_SetConfig+0x10c>)
 800a438:	4013      	ands	r3, r2
 800a43a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	695b      	ldr	r3, [r3, #20]
 800a440:	693a      	ldr	r2, [r7, #16]
 800a442:	4313      	orrs	r3, r2
 800a444:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	699b      	ldr	r3, [r3, #24]
 800a44a:	693a      	ldr	r2, [r7, #16]
 800a44c:	4313      	orrs	r3, r2
 800a44e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	693a      	ldr	r2, [r7, #16]
 800a454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	685a      	ldr	r2, [r3, #4]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	697a      	ldr	r2, [r7, #20]
 800a468:	621a      	str	r2, [r3, #32]
}
 800a46a:	46c0      	nop			; (mov r8, r8)
 800a46c:	46bd      	mov	sp, r7
 800a46e:	b006      	add	sp, #24
 800a470:	bd80      	pop	{r7, pc}
 800a472:	46c0      	nop			; (mov r8, r8)
 800a474:	40012c00 	.word	0x40012c00
 800a478:	40014000 	.word	0x40014000
 800a47c:	40014400 	.word	0x40014400
 800a480:	40014800 	.word	0x40014800
 800a484:	fffffeff 	.word	0xfffffeff
 800a488:	fffffdff 	.word	0xfffffdff

0800a48c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b086      	sub	sp, #24
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6a1b      	ldr	r3, [r3, #32]
 800a49a:	2210      	movs	r2, #16
 800a49c:	4393      	bics	r3, r2
 800a49e:	001a      	movs	r2, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6a1b      	ldr	r3, [r3, #32]
 800a4a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	699b      	ldr	r3, [r3, #24]
 800a4b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	4a2e      	ldr	r2, [pc, #184]	; (800a574 <TIM_OC2_SetConfig+0xe8>)
 800a4ba:	4013      	ands	r3, r2
 800a4bc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	4a2d      	ldr	r2, [pc, #180]	; (800a578 <TIM_OC2_SetConfig+0xec>)
 800a4c2:	4013      	ands	r3, r2
 800a4c4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	021b      	lsls	r3, r3, #8
 800a4cc:	68fa      	ldr	r2, [r7, #12]
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	2220      	movs	r2, #32
 800a4d6:	4393      	bics	r3, r2
 800a4d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	689b      	ldr	r3, [r3, #8]
 800a4de:	011b      	lsls	r3, r3, #4
 800a4e0:	697a      	ldr	r2, [r7, #20]
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4a24      	ldr	r2, [pc, #144]	; (800a57c <TIM_OC2_SetConfig+0xf0>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d10d      	bne.n	800a50a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	2280      	movs	r2, #128	; 0x80
 800a4f2:	4393      	bics	r3, r2
 800a4f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	68db      	ldr	r3, [r3, #12]
 800a4fa:	011b      	lsls	r3, r3, #4
 800a4fc:	697a      	ldr	r2, [r7, #20]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	2240      	movs	r2, #64	; 0x40
 800a506:	4393      	bics	r3, r2
 800a508:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4a1b      	ldr	r2, [pc, #108]	; (800a57c <TIM_OC2_SetConfig+0xf0>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d00b      	beq.n	800a52a <TIM_OC2_SetConfig+0x9e>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4a1a      	ldr	r2, [pc, #104]	; (800a580 <TIM_OC2_SetConfig+0xf4>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d007      	beq.n	800a52a <TIM_OC2_SetConfig+0x9e>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4a19      	ldr	r2, [pc, #100]	; (800a584 <TIM_OC2_SetConfig+0xf8>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d003      	beq.n	800a52a <TIM_OC2_SetConfig+0x9e>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4a18      	ldr	r2, [pc, #96]	; (800a588 <TIM_OC2_SetConfig+0xfc>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d113      	bne.n	800a552 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	4a17      	ldr	r2, [pc, #92]	; (800a58c <TIM_OC2_SetConfig+0x100>)
 800a52e:	4013      	ands	r3, r2
 800a530:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	4a16      	ldr	r2, [pc, #88]	; (800a590 <TIM_OC2_SetConfig+0x104>)
 800a536:	4013      	ands	r3, r2
 800a538:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	695b      	ldr	r3, [r3, #20]
 800a53e:	009b      	lsls	r3, r3, #2
 800a540:	693a      	ldr	r2, [r7, #16]
 800a542:	4313      	orrs	r3, r2
 800a544:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	699b      	ldr	r3, [r3, #24]
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	693a      	ldr	r2, [r7, #16]
 800a54e:	4313      	orrs	r3, r2
 800a550:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	693a      	ldr	r2, [r7, #16]
 800a556:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	685a      	ldr	r2, [r3, #4]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	697a      	ldr	r2, [r7, #20]
 800a56a:	621a      	str	r2, [r3, #32]
}
 800a56c:	46c0      	nop			; (mov r8, r8)
 800a56e:	46bd      	mov	sp, r7
 800a570:	b006      	add	sp, #24
 800a572:	bd80      	pop	{r7, pc}
 800a574:	ffff8fff 	.word	0xffff8fff
 800a578:	fffffcff 	.word	0xfffffcff
 800a57c:	40012c00 	.word	0x40012c00
 800a580:	40014000 	.word	0x40014000
 800a584:	40014400 	.word	0x40014400
 800a588:	40014800 	.word	0x40014800
 800a58c:	fffffbff 	.word	0xfffffbff
 800a590:	fffff7ff 	.word	0xfffff7ff

0800a594 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b086      	sub	sp, #24
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a1b      	ldr	r3, [r3, #32]
 800a5a2:	4a35      	ldr	r2, [pc, #212]	; (800a678 <TIM_OC3_SetConfig+0xe4>)
 800a5a4:	401a      	ands	r2, r3
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6a1b      	ldr	r3, [r3, #32]
 800a5ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	69db      	ldr	r3, [r3, #28]
 800a5ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2270      	movs	r2, #112	; 0x70
 800a5c0:	4393      	bics	r3, r2
 800a5c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2203      	movs	r2, #3
 800a5c8:	4393      	bics	r3, r2
 800a5ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	68fa      	ldr	r2, [r7, #12]
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	4a28      	ldr	r2, [pc, #160]	; (800a67c <TIM_OC3_SetConfig+0xe8>)
 800a5da:	4013      	ands	r3, r2
 800a5dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	689b      	ldr	r3, [r3, #8]
 800a5e2:	021b      	lsls	r3, r3, #8
 800a5e4:	697a      	ldr	r2, [r7, #20]
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	4a24      	ldr	r2, [pc, #144]	; (800a680 <TIM_OC3_SetConfig+0xec>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d10d      	bne.n	800a60e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	4a23      	ldr	r2, [pc, #140]	; (800a684 <TIM_OC3_SetConfig+0xf0>)
 800a5f6:	4013      	ands	r3, r2
 800a5f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	68db      	ldr	r3, [r3, #12]
 800a5fe:	021b      	lsls	r3, r3, #8
 800a600:	697a      	ldr	r2, [r7, #20]
 800a602:	4313      	orrs	r3, r2
 800a604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	4a1f      	ldr	r2, [pc, #124]	; (800a688 <TIM_OC3_SetConfig+0xf4>)
 800a60a:	4013      	ands	r3, r2
 800a60c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	4a1b      	ldr	r2, [pc, #108]	; (800a680 <TIM_OC3_SetConfig+0xec>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d00b      	beq.n	800a62e <TIM_OC3_SetConfig+0x9a>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	4a1c      	ldr	r2, [pc, #112]	; (800a68c <TIM_OC3_SetConfig+0xf8>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d007      	beq.n	800a62e <TIM_OC3_SetConfig+0x9a>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	4a1b      	ldr	r2, [pc, #108]	; (800a690 <TIM_OC3_SetConfig+0xfc>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d003      	beq.n	800a62e <TIM_OC3_SetConfig+0x9a>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4a1a      	ldr	r2, [pc, #104]	; (800a694 <TIM_OC3_SetConfig+0x100>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d113      	bne.n	800a656 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	4a19      	ldr	r2, [pc, #100]	; (800a698 <TIM_OC3_SetConfig+0x104>)
 800a632:	4013      	ands	r3, r2
 800a634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	4a18      	ldr	r2, [pc, #96]	; (800a69c <TIM_OC3_SetConfig+0x108>)
 800a63a:	4013      	ands	r3, r2
 800a63c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	695b      	ldr	r3, [r3, #20]
 800a642:	011b      	lsls	r3, r3, #4
 800a644:	693a      	ldr	r2, [r7, #16]
 800a646:	4313      	orrs	r3, r2
 800a648:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	699b      	ldr	r3, [r3, #24]
 800a64e:	011b      	lsls	r3, r3, #4
 800a650:	693a      	ldr	r2, [r7, #16]
 800a652:	4313      	orrs	r3, r2
 800a654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	693a      	ldr	r2, [r7, #16]
 800a65a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	68fa      	ldr	r2, [r7, #12]
 800a660:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	685a      	ldr	r2, [r3, #4]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	697a      	ldr	r2, [r7, #20]
 800a66e:	621a      	str	r2, [r3, #32]
}
 800a670:	46c0      	nop			; (mov r8, r8)
 800a672:	46bd      	mov	sp, r7
 800a674:	b006      	add	sp, #24
 800a676:	bd80      	pop	{r7, pc}
 800a678:	fffffeff 	.word	0xfffffeff
 800a67c:	fffffdff 	.word	0xfffffdff
 800a680:	40012c00 	.word	0x40012c00
 800a684:	fffff7ff 	.word	0xfffff7ff
 800a688:	fffffbff 	.word	0xfffffbff
 800a68c:	40014000 	.word	0x40014000
 800a690:	40014400 	.word	0x40014400
 800a694:	40014800 	.word	0x40014800
 800a698:	ffffefff 	.word	0xffffefff
 800a69c:	ffffdfff 	.word	0xffffdfff

0800a6a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b086      	sub	sp, #24
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a1b      	ldr	r3, [r3, #32]
 800a6ae:	4a28      	ldr	r2, [pc, #160]	; (800a750 <TIM_OC4_SetConfig+0xb0>)
 800a6b0:	401a      	ands	r2, r3
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6a1b      	ldr	r3, [r3, #32]
 800a6ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	69db      	ldr	r3, [r3, #28]
 800a6c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	4a22      	ldr	r2, [pc, #136]	; (800a754 <TIM_OC4_SetConfig+0xb4>)
 800a6cc:	4013      	ands	r3, r2
 800a6ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	4a21      	ldr	r2, [pc, #132]	; (800a758 <TIM_OC4_SetConfig+0xb8>)
 800a6d4:	4013      	ands	r3, r2
 800a6d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	021b      	lsls	r3, r3, #8
 800a6de:	68fa      	ldr	r2, [r7, #12]
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	4a1d      	ldr	r2, [pc, #116]	; (800a75c <TIM_OC4_SetConfig+0xbc>)
 800a6e8:	4013      	ands	r3, r2
 800a6ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	031b      	lsls	r3, r3, #12
 800a6f2:	693a      	ldr	r2, [r7, #16]
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	4a19      	ldr	r2, [pc, #100]	; (800a760 <TIM_OC4_SetConfig+0xc0>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d00b      	beq.n	800a718 <TIM_OC4_SetConfig+0x78>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	4a18      	ldr	r2, [pc, #96]	; (800a764 <TIM_OC4_SetConfig+0xc4>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d007      	beq.n	800a718 <TIM_OC4_SetConfig+0x78>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	4a17      	ldr	r2, [pc, #92]	; (800a768 <TIM_OC4_SetConfig+0xc8>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d003      	beq.n	800a718 <TIM_OC4_SetConfig+0x78>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	4a16      	ldr	r2, [pc, #88]	; (800a76c <TIM_OC4_SetConfig+0xcc>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d109      	bne.n	800a72c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	4a15      	ldr	r2, [pc, #84]	; (800a770 <TIM_OC4_SetConfig+0xd0>)
 800a71c:	4013      	ands	r3, r2
 800a71e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	695b      	ldr	r3, [r3, #20]
 800a724:	019b      	lsls	r3, r3, #6
 800a726:	697a      	ldr	r2, [r7, #20]
 800a728:	4313      	orrs	r3, r2
 800a72a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	697a      	ldr	r2, [r7, #20]
 800a730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	68fa      	ldr	r2, [r7, #12]
 800a736:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	685a      	ldr	r2, [r3, #4]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	693a      	ldr	r2, [r7, #16]
 800a744:	621a      	str	r2, [r3, #32]
}
 800a746:	46c0      	nop			; (mov r8, r8)
 800a748:	46bd      	mov	sp, r7
 800a74a:	b006      	add	sp, #24
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	46c0      	nop			; (mov r8, r8)
 800a750:	ffffefff 	.word	0xffffefff
 800a754:	ffff8fff 	.word	0xffff8fff
 800a758:	fffffcff 	.word	0xfffffcff
 800a75c:	ffffdfff 	.word	0xffffdfff
 800a760:	40012c00 	.word	0x40012c00
 800a764:	40014000 	.word	0x40014000
 800a768:	40014400 	.word	0x40014400
 800a76c:	40014800 	.word	0x40014800
 800a770:	ffffbfff 	.word	0xffffbfff

0800a774 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b086      	sub	sp, #24
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	607a      	str	r2, [r7, #4]
 800a780:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	6a1b      	ldr	r3, [r3, #32]
 800a786:	2201      	movs	r2, #1
 800a788:	4393      	bics	r3, r2
 800a78a:	001a      	movs	r2, r3
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	699b      	ldr	r3, [r3, #24]
 800a794:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	6a1b      	ldr	r3, [r3, #32]
 800a79a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	4a20      	ldr	r2, [pc, #128]	; (800a820 <TIM_TI1_SetConfig+0xac>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d00c      	beq.n	800a7be <TIM_TI1_SetConfig+0x4a>
 800a7a4:	68fa      	ldr	r2, [r7, #12]
 800a7a6:	2380      	movs	r3, #128	; 0x80
 800a7a8:	05db      	lsls	r3, r3, #23
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d007      	beq.n	800a7be <TIM_TI1_SetConfig+0x4a>
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	4a1c      	ldr	r2, [pc, #112]	; (800a824 <TIM_TI1_SetConfig+0xb0>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d003      	beq.n	800a7be <TIM_TI1_SetConfig+0x4a>
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	4a1b      	ldr	r2, [pc, #108]	; (800a828 <TIM_TI1_SetConfig+0xb4>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d101      	bne.n	800a7c2 <TIM_TI1_SetConfig+0x4e>
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e000      	b.n	800a7c4 <TIM_TI1_SetConfig+0x50>
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d008      	beq.n	800a7da <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	2203      	movs	r2, #3
 800a7cc:	4393      	bics	r3, r2
 800a7ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a7d0:	697a      	ldr	r2, [r7, #20]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	617b      	str	r3, [r7, #20]
 800a7d8:	e003      	b.n	800a7e2 <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	2201      	movs	r2, #1
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	22f0      	movs	r2, #240	; 0xf0
 800a7e6:	4393      	bics	r3, r2
 800a7e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	011b      	lsls	r3, r3, #4
 800a7ee:	22ff      	movs	r2, #255	; 0xff
 800a7f0:	4013      	ands	r3, r2
 800a7f2:	697a      	ldr	r2, [r7, #20]
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	220a      	movs	r2, #10
 800a7fc:	4393      	bics	r3, r2
 800a7fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	220a      	movs	r2, #10
 800a804:	4013      	ands	r3, r2
 800a806:	693a      	ldr	r2, [r7, #16]
 800a808:	4313      	orrs	r3, r2
 800a80a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	697a      	ldr	r2, [r7, #20]
 800a810:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	693a      	ldr	r2, [r7, #16]
 800a816:	621a      	str	r2, [r3, #32]
}
 800a818:	46c0      	nop			; (mov r8, r8)
 800a81a:	46bd      	mov	sp, r7
 800a81c:	b006      	add	sp, #24
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	40012c00 	.word	0x40012c00
 800a824:	40000400 	.word	0x40000400
 800a828:	40014000 	.word	0x40014000

0800a82c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b086      	sub	sp, #24
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	6a1b      	ldr	r3, [r3, #32]
 800a83c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	6a1b      	ldr	r3, [r3, #32]
 800a842:	2201      	movs	r2, #1
 800a844:	4393      	bics	r3, r2
 800a846:	001a      	movs	r2, r3
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	699b      	ldr	r3, [r3, #24]
 800a850:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	22f0      	movs	r2, #240	; 0xf0
 800a856:	4393      	bics	r3, r2
 800a858:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	011b      	lsls	r3, r3, #4
 800a85e:	693a      	ldr	r2, [r7, #16]
 800a860:	4313      	orrs	r3, r2
 800a862:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	220a      	movs	r2, #10
 800a868:	4393      	bics	r3, r2
 800a86a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a86c:	697a      	ldr	r2, [r7, #20]
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	4313      	orrs	r3, r2
 800a872:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	693a      	ldr	r2, [r7, #16]
 800a878:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	697a      	ldr	r2, [r7, #20]
 800a87e:	621a      	str	r2, [r3, #32]
}
 800a880:	46c0      	nop			; (mov r8, r8)
 800a882:	46bd      	mov	sp, r7
 800a884:	b006      	add	sp, #24
 800a886:	bd80      	pop	{r7, pc}

0800a888 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b086      	sub	sp, #24
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	60b9      	str	r1, [r7, #8]
 800a892:	607a      	str	r2, [r7, #4]
 800a894:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6a1b      	ldr	r3, [r3, #32]
 800a89a:	2210      	movs	r2, #16
 800a89c:	4393      	bics	r3, r2
 800a89e:	001a      	movs	r2, r3
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	699b      	ldr	r3, [r3, #24]
 800a8a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	6a1b      	ldr	r3, [r3, #32]
 800a8ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	4a14      	ldr	r2, [pc, #80]	; (800a904 <TIM_TI2_SetConfig+0x7c>)
 800a8b4:	4013      	ands	r3, r2
 800a8b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	021b      	lsls	r3, r3, #8
 800a8bc:	697a      	ldr	r2, [r7, #20]
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	4a10      	ldr	r2, [pc, #64]	; (800a908 <TIM_TI2_SetConfig+0x80>)
 800a8c6:	4013      	ands	r3, r2
 800a8c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	031b      	lsls	r3, r3, #12
 800a8ce:	041b      	lsls	r3, r3, #16
 800a8d0:	0c1b      	lsrs	r3, r3, #16
 800a8d2:	697a      	ldr	r2, [r7, #20]
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	22a0      	movs	r2, #160	; 0xa0
 800a8dc:	4393      	bics	r3, r2
 800a8de:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	011b      	lsls	r3, r3, #4
 800a8e4:	22a0      	movs	r2, #160	; 0xa0
 800a8e6:	4013      	ands	r3, r2
 800a8e8:	693a      	ldr	r2, [r7, #16]
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	697a      	ldr	r2, [r7, #20]
 800a8f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	693a      	ldr	r2, [r7, #16]
 800a8f8:	621a      	str	r2, [r3, #32]
}
 800a8fa:	46c0      	nop			; (mov r8, r8)
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	b006      	add	sp, #24
 800a900:	bd80      	pop	{r7, pc}
 800a902:	46c0      	nop			; (mov r8, r8)
 800a904:	fffffcff 	.word	0xfffffcff
 800a908:	ffff0fff 	.word	0xffff0fff

0800a90c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b086      	sub	sp, #24
 800a910:	af00      	add	r7, sp, #0
 800a912:	60f8      	str	r0, [r7, #12]
 800a914:	60b9      	str	r1, [r7, #8]
 800a916:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	6a1b      	ldr	r3, [r3, #32]
 800a91c:	2210      	movs	r2, #16
 800a91e:	4393      	bics	r3, r2
 800a920:	001a      	movs	r2, r3
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	699b      	ldr	r3, [r3, #24]
 800a92a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	6a1b      	ldr	r3, [r3, #32]
 800a930:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	4a0d      	ldr	r2, [pc, #52]	; (800a96c <TIM_TI2_ConfigInputStage+0x60>)
 800a936:	4013      	ands	r3, r2
 800a938:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	031b      	lsls	r3, r3, #12
 800a93e:	697a      	ldr	r2, [r7, #20]
 800a940:	4313      	orrs	r3, r2
 800a942:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	22a0      	movs	r2, #160	; 0xa0
 800a948:	4393      	bics	r3, r2
 800a94a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	011b      	lsls	r3, r3, #4
 800a950:	693a      	ldr	r2, [r7, #16]
 800a952:	4313      	orrs	r3, r2
 800a954:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	697a      	ldr	r2, [r7, #20]
 800a95a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	693a      	ldr	r2, [r7, #16]
 800a960:	621a      	str	r2, [r3, #32]
}
 800a962:	46c0      	nop			; (mov r8, r8)
 800a964:	46bd      	mov	sp, r7
 800a966:	b006      	add	sp, #24
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	46c0      	nop			; (mov r8, r8)
 800a96c:	ffff0fff 	.word	0xffff0fff

0800a970 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]
 800a97c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	6a1b      	ldr	r3, [r3, #32]
 800a982:	4a19      	ldr	r2, [pc, #100]	; (800a9e8 <TIM_TI3_SetConfig+0x78>)
 800a984:	401a      	ands	r2, r3
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	69db      	ldr	r3, [r3, #28]
 800a98e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	6a1b      	ldr	r3, [r3, #32]
 800a994:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	2203      	movs	r2, #3
 800a99a:	4393      	bics	r3, r2
 800a99c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a99e:	697a      	ldr	r2, [r7, #20]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	22f0      	movs	r2, #240	; 0xf0
 800a9aa:	4393      	bics	r3, r2
 800a9ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	011b      	lsls	r3, r3, #4
 800a9b2:	22ff      	movs	r2, #255	; 0xff
 800a9b4:	4013      	ands	r3, r2
 800a9b6:	697a      	ldr	r2, [r7, #20]
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	4a0b      	ldr	r2, [pc, #44]	; (800a9ec <TIM_TI3_SetConfig+0x7c>)
 800a9c0:	4013      	ands	r3, r2
 800a9c2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	021a      	lsls	r2, r3, #8
 800a9c8:	23a0      	movs	r3, #160	; 0xa0
 800a9ca:	011b      	lsls	r3, r3, #4
 800a9cc:	4013      	ands	r3, r2
 800a9ce:	693a      	ldr	r2, [r7, #16]
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	697a      	ldr	r2, [r7, #20]
 800a9d8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	693a      	ldr	r2, [r7, #16]
 800a9de:	621a      	str	r2, [r3, #32]
}
 800a9e0:	46c0      	nop			; (mov r8, r8)
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	b006      	add	sp, #24
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	fffffeff 	.word	0xfffffeff
 800a9ec:	fffff5ff 	.word	0xfffff5ff

0800a9f0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b086      	sub	sp, #24
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	60f8      	str	r0, [r7, #12]
 800a9f8:	60b9      	str	r1, [r7, #8]
 800a9fa:	607a      	str	r2, [r7, #4]
 800a9fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	6a1b      	ldr	r3, [r3, #32]
 800aa02:	4a1a      	ldr	r2, [pc, #104]	; (800aa6c <TIM_TI4_SetConfig+0x7c>)
 800aa04:	401a      	ands	r2, r3
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	69db      	ldr	r3, [r3, #28]
 800aa0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	6a1b      	ldr	r3, [r3, #32]
 800aa14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	4a15      	ldr	r2, [pc, #84]	; (800aa70 <TIM_TI4_SetConfig+0x80>)
 800aa1a:	4013      	ands	r3, r2
 800aa1c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	021b      	lsls	r3, r3, #8
 800aa22:	697a      	ldr	r2, [r7, #20]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	4a12      	ldr	r2, [pc, #72]	; (800aa74 <TIM_TI4_SetConfig+0x84>)
 800aa2c:	4013      	ands	r3, r2
 800aa2e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	031b      	lsls	r3, r3, #12
 800aa34:	041b      	lsls	r3, r3, #16
 800aa36:	0c1b      	lsrs	r3, r3, #16
 800aa38:	697a      	ldr	r2, [r7, #20]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	4a0d      	ldr	r2, [pc, #52]	; (800aa78 <TIM_TI4_SetConfig+0x88>)
 800aa42:	4013      	ands	r3, r2
 800aa44:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	031a      	lsls	r2, r3, #12
 800aa4a:	23a0      	movs	r3, #160	; 0xa0
 800aa4c:	021b      	lsls	r3, r3, #8
 800aa4e:	4013      	ands	r3, r2
 800aa50:	693a      	ldr	r2, [r7, #16]
 800aa52:	4313      	orrs	r3, r2
 800aa54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	697a      	ldr	r2, [r7, #20]
 800aa5a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	693a      	ldr	r2, [r7, #16]
 800aa60:	621a      	str	r2, [r3, #32]
}
 800aa62:	46c0      	nop			; (mov r8, r8)
 800aa64:	46bd      	mov	sp, r7
 800aa66:	b006      	add	sp, #24
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	46c0      	nop			; (mov r8, r8)
 800aa6c:	ffffefff 	.word	0xffffefff
 800aa70:	fffffcff 	.word	0xfffffcff
 800aa74:	ffff0fff 	.word	0xffff0fff
 800aa78:	ffff5fff 	.word	0xffff5fff

0800aa7c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	689b      	ldr	r3, [r3, #8]
 800aa8a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2270      	movs	r2, #112	; 0x70
 800aa90:	4393      	bics	r3, r2
 800aa92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa94:	683a      	ldr	r2, [r7, #0]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	2207      	movs	r2, #7
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	68fa      	ldr	r2, [r7, #12]
 800aaa4:	609a      	str	r2, [r3, #8]
}
 800aaa6:	46c0      	nop			; (mov r8, r8)
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	b004      	add	sp, #16
 800aaac:	bd80      	pop	{r7, pc}
	...

0800aab0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b086      	sub	sp, #24
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	60f8      	str	r0, [r7, #12]
 800aab8:	60b9      	str	r1, [r7, #8]
 800aaba:	607a      	str	r2, [r7, #4]
 800aabc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	689b      	ldr	r3, [r3, #8]
 800aac2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	4a09      	ldr	r2, [pc, #36]	; (800aaec <TIM_ETR_SetConfig+0x3c>)
 800aac8:	4013      	ands	r3, r2
 800aaca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	021a      	lsls	r2, r3, #8
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	431a      	orrs	r2, r3
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	4313      	orrs	r3, r2
 800aad8:	697a      	ldr	r2, [r7, #20]
 800aada:	4313      	orrs	r3, r2
 800aadc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	697a      	ldr	r2, [r7, #20]
 800aae2:	609a      	str	r2, [r3, #8]
}
 800aae4:	46c0      	nop			; (mov r8, r8)
 800aae6:	46bd      	mov	sp, r7
 800aae8:	b006      	add	sp, #24
 800aaea:	bd80      	pop	{r7, pc}
 800aaec:	ffff00ff 	.word	0xffff00ff

0800aaf0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b086      	sub	sp, #24
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	60f8      	str	r0, [r7, #12]
 800aaf8:	60b9      	str	r1, [r7, #8]
 800aafa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	221f      	movs	r2, #31
 800ab00:	4013      	ands	r3, r2
 800ab02:	2201      	movs	r2, #1
 800ab04:	409a      	lsls	r2, r3
 800ab06:	0013      	movs	r3, r2
 800ab08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	6a1b      	ldr	r3, [r3, #32]
 800ab0e:	697a      	ldr	r2, [r7, #20]
 800ab10:	43d2      	mvns	r2, r2
 800ab12:	401a      	ands	r2, r3
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6a1a      	ldr	r2, [r3, #32]
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	211f      	movs	r1, #31
 800ab20:	400b      	ands	r3, r1
 800ab22:	6879      	ldr	r1, [r7, #4]
 800ab24:	4099      	lsls	r1, r3
 800ab26:	000b      	movs	r3, r1
 800ab28:	431a      	orrs	r2, r3
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	621a      	str	r2, [r3, #32]
}
 800ab2e:	46c0      	nop			; (mov r8, r8)
 800ab30:	46bd      	mov	sp, r7
 800ab32:	b006      	add	sp, #24
 800ab34:	bd80      	pop	{r7, pc}
	...

0800ab38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	223c      	movs	r2, #60	; 0x3c
 800ab46:	5c9b      	ldrb	r3, [r3, r2]
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	d101      	bne.n	800ab50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab4c:	2302      	movs	r3, #2
 800ab4e:	e047      	b.n	800abe0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	223c      	movs	r2, #60	; 0x3c
 800ab54:	2101      	movs	r1, #1
 800ab56:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	223d      	movs	r2, #61	; 0x3d
 800ab5c:	2102      	movs	r1, #2
 800ab5e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	689b      	ldr	r3, [r3, #8]
 800ab6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2270      	movs	r2, #112	; 0x70
 800ab74:	4393      	bics	r3, r2
 800ab76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4a16      	ldr	r2, [pc, #88]	; (800abe8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d00f      	beq.n	800abb4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	2380      	movs	r3, #128	; 0x80
 800ab9a:	05db      	lsls	r3, r3, #23
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d009      	beq.n	800abb4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4a11      	ldr	r2, [pc, #68]	; (800abec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d004      	beq.n	800abb4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4a10      	ldr	r2, [pc, #64]	; (800abf0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d10c      	bne.n	800abce <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	2280      	movs	r2, #128	; 0x80
 800abb8:	4393      	bics	r3, r2
 800abba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	68ba      	ldr	r2, [r7, #8]
 800abc2:	4313      	orrs	r3, r2
 800abc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	68ba      	ldr	r2, [r7, #8]
 800abcc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	223d      	movs	r2, #61	; 0x3d
 800abd2:	2101      	movs	r1, #1
 800abd4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	223c      	movs	r2, #60	; 0x3c
 800abda:	2100      	movs	r1, #0
 800abdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800abde:	2300      	movs	r3, #0
}
 800abe0:	0018      	movs	r0, r3
 800abe2:	46bd      	mov	sp, r7
 800abe4:	b004      	add	sp, #16
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	40012c00 	.word	0x40012c00
 800abec:	40000400 	.word	0x40000400
 800abf0:	40014000 	.word	0x40014000

0800abf4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800abfe:	2300      	movs	r3, #0
 800ac00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	223c      	movs	r2, #60	; 0x3c
 800ac06:	5c9b      	ldrb	r3, [r3, r2]
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	d101      	bne.n	800ac10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ac0c:	2302      	movs	r3, #2
 800ac0e:	e03e      	b.n	800ac8e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	223c      	movs	r2, #60	; 0x3c
 800ac14:	2101      	movs	r1, #1
 800ac16:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	22ff      	movs	r2, #255	; 0xff
 800ac1c:	4393      	bics	r3, r2
 800ac1e:	001a      	movs	r2, r3
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	68db      	ldr	r3, [r3, #12]
 800ac24:	4313      	orrs	r3, r2
 800ac26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	4a1b      	ldr	r2, [pc, #108]	; (800ac98 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 800ac2c:	401a      	ands	r2, r3
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	4313      	orrs	r3, r2
 800ac34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	4a18      	ldr	r2, [pc, #96]	; (800ac9c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800ac3a:	401a      	ands	r2, r3
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	4313      	orrs	r3, r2
 800ac42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	4a16      	ldr	r2, [pc, #88]	; (800aca0 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800ac48:	401a      	ands	r2, r3
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	4a13      	ldr	r2, [pc, #76]	; (800aca4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800ac56:	401a      	ands	r2, r3
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	691b      	ldr	r3, [r3, #16]
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	4a11      	ldr	r2, [pc, #68]	; (800aca8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 800ac64:	401a      	ands	r2, r3
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	695b      	ldr	r3, [r3, #20]
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	4a0e      	ldr	r2, [pc, #56]	; (800acac <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800ac72:	401a      	ands	r2, r3
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	69db      	ldr	r3, [r3, #28]
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	223c      	movs	r2, #60	; 0x3c
 800ac88:	2100      	movs	r1, #0
 800ac8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ac8c:	2300      	movs	r3, #0
}
 800ac8e:	0018      	movs	r0, r3
 800ac90:	46bd      	mov	sp, r7
 800ac92:	b004      	add	sp, #16
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	46c0      	nop			; (mov r8, r8)
 800ac98:	fffffcff 	.word	0xfffffcff
 800ac9c:	fffffbff 	.word	0xfffffbff
 800aca0:	fffff7ff 	.word	0xfffff7ff
 800aca4:	ffffefff 	.word	0xffffefff
 800aca8:	ffffdfff 	.word	0xffffdfff
 800acac:	ffffbfff 	.word	0xffffbfff

0800acb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800acb8:	46c0      	nop			; (mov r8, r8)
 800acba:	46bd      	mov	sp, r7
 800acbc:	b002      	add	sp, #8
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800acc8:	46c0      	nop			; (mov r8, r8)
 800acca:	46bd      	mov	sp, r7
 800accc:	b002      	add	sp, #8
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d101      	bne.n	800ace2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800acde:	2301      	movs	r3, #1
 800ace0:	e044      	b.n	800ad6c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d107      	bne.n	800acfa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2278      	movs	r2, #120	; 0x78
 800acee:	2100      	movs	r1, #0
 800acf0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	0018      	movs	r0, r3
 800acf6:	f7fb fde3 	bl	80068c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2224      	movs	r2, #36	; 0x24
 800acfe:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	681a      	ldr	r2, [r3, #0]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	2101      	movs	r1, #1
 800ad0c:	438a      	bics	r2, r1
 800ad0e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	0018      	movs	r0, r3
 800ad14:	f000 fc9c 	bl	800b650 <UART_SetConfig>
 800ad18:	0003      	movs	r3, r0
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d101      	bne.n	800ad22 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	e024      	b.n	800ad6c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d003      	beq.n	800ad32 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	0018      	movs	r0, r3
 800ad2e:	f000 fe17 	bl	800b960 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	685a      	ldr	r2, [r3, #4]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	490d      	ldr	r1, [pc, #52]	; (800ad74 <HAL_UART_Init+0xa4>)
 800ad3e:	400a      	ands	r2, r1
 800ad40:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	689a      	ldr	r2, [r3, #8]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	212a      	movs	r1, #42	; 0x2a
 800ad4e:	438a      	bics	r2, r1
 800ad50:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	681a      	ldr	r2, [r3, #0]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	2101      	movs	r1, #1
 800ad5e:	430a      	orrs	r2, r1
 800ad60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	0018      	movs	r0, r3
 800ad66:	f000 feaf 	bl	800bac8 <UART_CheckIdleState>
 800ad6a:	0003      	movs	r3, r0
}
 800ad6c:	0018      	movs	r0, r3
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	b002      	add	sp, #8
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	ffffb7ff 	.word	0xffffb7ff

0800ad78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b08a      	sub	sp, #40	; 0x28
 800ad7c:	af02      	add	r7, sp, #8
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	60b9      	str	r1, [r7, #8]
 800ad82:	603b      	str	r3, [r7, #0]
 800ad84:	1dbb      	adds	r3, r7, #6
 800ad86:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad8c:	2b20      	cmp	r3, #32
 800ad8e:	d000      	beq.n	800ad92 <HAL_UART_Transmit+0x1a>
 800ad90:	e08d      	b.n	800aeae <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d003      	beq.n	800ada0 <HAL_UART_Transmit+0x28>
 800ad98:	1dbb      	adds	r3, r7, #6
 800ad9a:	881b      	ldrh	r3, [r3, #0]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d101      	bne.n	800ada4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ada0:	2301      	movs	r3, #1
 800ada2:	e085      	b.n	800aeb0 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	689a      	ldr	r2, [r3, #8]
 800ada8:	2380      	movs	r3, #128	; 0x80
 800adaa:	015b      	lsls	r3, r3, #5
 800adac:	429a      	cmp	r2, r3
 800adae:	d109      	bne.n	800adc4 <HAL_UART_Transmit+0x4c>
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	691b      	ldr	r3, [r3, #16]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d105      	bne.n	800adc4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	2201      	movs	r2, #1
 800adbc:	4013      	ands	r3, r2
 800adbe:	d001      	beq.n	800adc4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800adc0:	2301      	movs	r3, #1
 800adc2:	e075      	b.n	800aeb0 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	2284      	movs	r2, #132	; 0x84
 800adc8:	2100      	movs	r1, #0
 800adca:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2221      	movs	r2, #33	; 0x21
 800add0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800add2:	f7fc f81b 	bl	8006e0c <HAL_GetTick>
 800add6:	0003      	movs	r3, r0
 800add8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	1dba      	adds	r2, r7, #6
 800adde:	2150      	movs	r1, #80	; 0x50
 800ade0:	8812      	ldrh	r2, [r2, #0]
 800ade2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	1dba      	adds	r2, r7, #6
 800ade8:	2152      	movs	r1, #82	; 0x52
 800adea:	8812      	ldrh	r2, [r2, #0]
 800adec:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	689a      	ldr	r2, [r3, #8]
 800adf2:	2380      	movs	r3, #128	; 0x80
 800adf4:	015b      	lsls	r3, r3, #5
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d108      	bne.n	800ae0c <HAL_UART_Transmit+0x94>
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	691b      	ldr	r3, [r3, #16]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d104      	bne.n	800ae0c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800ae02:	2300      	movs	r3, #0
 800ae04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	61bb      	str	r3, [r7, #24]
 800ae0a:	e003      	b.n	800ae14 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ae10:	2300      	movs	r3, #0
 800ae12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ae14:	e030      	b.n	800ae78 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ae16:	697a      	ldr	r2, [r7, #20]
 800ae18:	68f8      	ldr	r0, [r7, #12]
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	9300      	str	r3, [sp, #0]
 800ae1e:	0013      	movs	r3, r2
 800ae20:	2200      	movs	r2, #0
 800ae22:	2180      	movs	r1, #128	; 0x80
 800ae24:	f000 fef8 	bl	800bc18 <UART_WaitOnFlagUntilTimeout>
 800ae28:	1e03      	subs	r3, r0, #0
 800ae2a:	d004      	beq.n	800ae36 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	2220      	movs	r2, #32
 800ae30:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800ae32:	2303      	movs	r3, #3
 800ae34:	e03c      	b.n	800aeb0 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 800ae36:	69fb      	ldr	r3, [r7, #28]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d10b      	bne.n	800ae54 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ae3c:	69bb      	ldr	r3, [r7, #24]
 800ae3e:	881a      	ldrh	r2, [r3, #0]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	05d2      	lsls	r2, r2, #23
 800ae46:	0dd2      	lsrs	r2, r2, #23
 800ae48:	b292      	uxth	r2, r2
 800ae4a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ae4c:	69bb      	ldr	r3, [r7, #24]
 800ae4e:	3302      	adds	r3, #2
 800ae50:	61bb      	str	r3, [r7, #24]
 800ae52:	e008      	b.n	800ae66 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	781a      	ldrb	r2, [r3, #0]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	b292      	uxth	r2, r2
 800ae5e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ae60:	69fb      	ldr	r3, [r7, #28]
 800ae62:	3301      	adds	r3, #1
 800ae64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2252      	movs	r2, #82	; 0x52
 800ae6a:	5a9b      	ldrh	r3, [r3, r2]
 800ae6c:	b29b      	uxth	r3, r3
 800ae6e:	3b01      	subs	r3, #1
 800ae70:	b299      	uxth	r1, r3
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2252      	movs	r2, #82	; 0x52
 800ae76:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2252      	movs	r2, #82	; 0x52
 800ae7c:	5a9b      	ldrh	r3, [r3, r2]
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d1c8      	bne.n	800ae16 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ae84:	697a      	ldr	r2, [r7, #20]
 800ae86:	68f8      	ldr	r0, [r7, #12]
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	9300      	str	r3, [sp, #0]
 800ae8c:	0013      	movs	r3, r2
 800ae8e:	2200      	movs	r2, #0
 800ae90:	2140      	movs	r1, #64	; 0x40
 800ae92:	f000 fec1 	bl	800bc18 <UART_WaitOnFlagUntilTimeout>
 800ae96:	1e03      	subs	r3, r0, #0
 800ae98:	d004      	beq.n	800aea4 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2220      	movs	r2, #32
 800ae9e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800aea0:	2303      	movs	r3, #3
 800aea2:	e005      	b.n	800aeb0 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2220      	movs	r2, #32
 800aea8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	e000      	b.n	800aeb0 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800aeae:	2302      	movs	r3, #2
  }
}
 800aeb0:	0018      	movs	r0, r3
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	b008      	add	sp, #32
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b088      	sub	sp, #32
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	60b9      	str	r1, [r7, #8]
 800aec2:	1dbb      	adds	r3, r7, #6
 800aec4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aeca:	2b20      	cmp	r3, #32
 800aecc:	d15b      	bne.n	800af86 <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d003      	beq.n	800aedc <HAL_UART_Transmit_IT+0x24>
 800aed4:	1dbb      	adds	r3, r7, #6
 800aed6:	881b      	ldrh	r3, [r3, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d101      	bne.n	800aee0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800aedc:	2301      	movs	r3, #1
 800aede:	e053      	b.n	800af88 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	689a      	ldr	r2, [r3, #8]
 800aee4:	2380      	movs	r3, #128	; 0x80
 800aee6:	015b      	lsls	r3, r3, #5
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d109      	bne.n	800af00 <HAL_UART_Transmit_IT+0x48>
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	691b      	ldr	r3, [r3, #16]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d105      	bne.n	800af00 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	2201      	movs	r2, #1
 800aef8:	4013      	ands	r3, r2
 800aefa:	d001      	beq.n	800af00 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 800aefc:	2301      	movs	r3, #1
 800aefe:	e043      	b.n	800af88 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	68ba      	ldr	r2, [r7, #8]
 800af04:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	1dba      	adds	r2, r7, #6
 800af0a:	2150      	movs	r1, #80	; 0x50
 800af0c:	8812      	ldrh	r2, [r2, #0]
 800af0e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	1dba      	adds	r2, r7, #6
 800af14:	2152      	movs	r1, #82	; 0x52
 800af16:	8812      	ldrh	r2, [r2, #0]
 800af18:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2200      	movs	r2, #0
 800af1e:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2284      	movs	r2, #132	; 0x84
 800af24:	2100      	movs	r1, #0
 800af26:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2221      	movs	r2, #33	; 0x21
 800af2c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	689a      	ldr	r2, [r3, #8]
 800af32:	2380      	movs	r3, #128	; 0x80
 800af34:	015b      	lsls	r3, r3, #5
 800af36:	429a      	cmp	r2, r3
 800af38:	d107      	bne.n	800af4a <HAL_UART_Transmit_IT+0x92>
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	691b      	ldr	r3, [r3, #16]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d103      	bne.n	800af4a <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	4a12      	ldr	r2, [pc, #72]	; (800af90 <HAL_UART_Transmit_IT+0xd8>)
 800af46:	66da      	str	r2, [r3, #108]	; 0x6c
 800af48:	e002      	b.n	800af50 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	4a11      	ldr	r2, [pc, #68]	; (800af94 <HAL_UART_Transmit_IT+0xdc>)
 800af4e:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af50:	f3ef 8310 	mrs	r3, PRIMASK
 800af54:	613b      	str	r3, [r7, #16]
  return(result);
 800af56:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800af58:	61fb      	str	r3, [r7, #28]
 800af5a:	2301      	movs	r3, #1
 800af5c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	f383 8810 	msr	PRIMASK, r3
}
 800af64:	46c0      	nop			; (mov r8, r8)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	681a      	ldr	r2, [r3, #0]
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2180      	movs	r1, #128	; 0x80
 800af72:	430a      	orrs	r2, r1
 800af74:	601a      	str	r2, [r3, #0]
 800af76:	69fb      	ldr	r3, [r7, #28]
 800af78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af7a:	69bb      	ldr	r3, [r7, #24]
 800af7c:	f383 8810 	msr	PRIMASK, r3
}
 800af80:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 800af82:	2300      	movs	r3, #0
 800af84:	e000      	b.n	800af88 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 800af86:	2302      	movs	r3, #2
  }
}
 800af88:	0018      	movs	r0, r3
 800af8a:	46bd      	mov	sp, r7
 800af8c:	b008      	add	sp, #32
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	0800c02b 	.word	0x0800c02b
 800af94:	0800bf77 	.word	0x0800bf77

0800af98 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b088      	sub	sp, #32
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	1dbb      	adds	r3, r7, #6
 800afa4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2280      	movs	r2, #128	; 0x80
 800afaa:	589b      	ldr	r3, [r3, r2]
 800afac:	2b20      	cmp	r3, #32
 800afae:	d145      	bne.n	800b03c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d003      	beq.n	800afbe <HAL_UART_Receive_IT+0x26>
 800afb6:	1dbb      	adds	r3, r7, #6
 800afb8:	881b      	ldrh	r3, [r3, #0]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d101      	bne.n	800afc2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800afbe:	2301      	movs	r3, #1
 800afc0:	e03d      	b.n	800b03e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	689a      	ldr	r2, [r3, #8]
 800afc6:	2380      	movs	r3, #128	; 0x80
 800afc8:	015b      	lsls	r3, r3, #5
 800afca:	429a      	cmp	r2, r3
 800afcc:	d109      	bne.n	800afe2 <HAL_UART_Receive_IT+0x4a>
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	691b      	ldr	r3, [r3, #16]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d105      	bne.n	800afe2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	2201      	movs	r2, #1
 800afda:	4013      	ands	r3, r2
 800afdc:	d001      	beq.n	800afe2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800afde:	2301      	movs	r3, #1
 800afe0:	e02d      	b.n	800b03e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2200      	movs	r2, #0
 800afe6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	685a      	ldr	r2, [r3, #4]
 800afee:	2380      	movs	r3, #128	; 0x80
 800aff0:	041b      	lsls	r3, r3, #16
 800aff2:	4013      	ands	r3, r2
 800aff4:	d019      	beq.n	800b02a <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aff6:	f3ef 8310 	mrs	r3, PRIMASK
 800affa:	613b      	str	r3, [r7, #16]
  return(result);
 800affc:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800affe:	61fb      	str	r3, [r7, #28]
 800b000:	2301      	movs	r3, #1
 800b002:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	f383 8810 	msr	PRIMASK, r3
}
 800b00a:	46c0      	nop			; (mov r8, r8)
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	2180      	movs	r1, #128	; 0x80
 800b018:	04c9      	lsls	r1, r1, #19
 800b01a:	430a      	orrs	r2, r1
 800b01c:	601a      	str	r2, [r3, #0]
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b022:	69bb      	ldr	r3, [r7, #24]
 800b024:	f383 8810 	msr	PRIMASK, r3
}
 800b028:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b02a:	1dbb      	adds	r3, r7, #6
 800b02c:	881a      	ldrh	r2, [r3, #0]
 800b02e:	68b9      	ldr	r1, [r7, #8]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	0018      	movs	r0, r3
 800b034:	f000 fe5a 	bl	800bcec <UART_Start_Receive_IT>
 800b038:	0003      	movs	r3, r0
 800b03a:	e000      	b.n	800b03e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800b03c:	2302      	movs	r3, #2
  }
}
 800b03e:	0018      	movs	r0, r3
 800b040:	46bd      	mov	sp, r7
 800b042:	b008      	add	sp, #32
 800b044:	bd80      	pop	{r7, pc}
	...

0800b048 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b048:	b590      	push	{r4, r7, lr}
 800b04a:	b0ab      	sub	sp, #172	; 0xac
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	69db      	ldr	r3, [r3, #28]
 800b056:	22a4      	movs	r2, #164	; 0xa4
 800b058:	18b9      	adds	r1, r7, r2
 800b05a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	20a0      	movs	r0, #160	; 0xa0
 800b064:	1839      	adds	r1, r7, r0
 800b066:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	689b      	ldr	r3, [r3, #8]
 800b06e:	219c      	movs	r1, #156	; 0x9c
 800b070:	1879      	adds	r1, r7, r1
 800b072:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b074:	0011      	movs	r1, r2
 800b076:	18bb      	adds	r3, r7, r2
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4a99      	ldr	r2, [pc, #612]	; (800b2e0 <HAL_UART_IRQHandler+0x298>)
 800b07c:	4013      	ands	r3, r2
 800b07e:	2298      	movs	r2, #152	; 0x98
 800b080:	18bc      	adds	r4, r7, r2
 800b082:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800b084:	18bb      	adds	r3, r7, r2
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d114      	bne.n	800b0b6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b08c:	187b      	adds	r3, r7, r1
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	2220      	movs	r2, #32
 800b092:	4013      	ands	r3, r2
 800b094:	d00f      	beq.n	800b0b6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b096:	183b      	adds	r3, r7, r0
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2220      	movs	r2, #32
 800b09c:	4013      	ands	r3, r2
 800b09e:	d00a      	beq.n	800b0b6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d100      	bne.n	800b0aa <HAL_UART_IRQHandler+0x62>
 800b0a8:	e29e      	b.n	800b5e8 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	0010      	movs	r0, r2
 800b0b2:	4798      	blx	r3
      }
      return;
 800b0b4:	e298      	b.n	800b5e8 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b0b6:	2398      	movs	r3, #152	; 0x98
 800b0b8:	18fb      	adds	r3, r7, r3
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d100      	bne.n	800b0c2 <HAL_UART_IRQHandler+0x7a>
 800b0c0:	e114      	b.n	800b2ec <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b0c2:	239c      	movs	r3, #156	; 0x9c
 800b0c4:	18fb      	adds	r3, r7, r3
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	4013      	ands	r3, r2
 800b0cc:	d106      	bne.n	800b0dc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b0ce:	23a0      	movs	r3, #160	; 0xa0
 800b0d0:	18fb      	adds	r3, r7, r3
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a83      	ldr	r2, [pc, #524]	; (800b2e4 <HAL_UART_IRQHandler+0x29c>)
 800b0d6:	4013      	ands	r3, r2
 800b0d8:	d100      	bne.n	800b0dc <HAL_UART_IRQHandler+0x94>
 800b0da:	e107      	b.n	800b2ec <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b0dc:	23a4      	movs	r3, #164	; 0xa4
 800b0de:	18fb      	adds	r3, r7, r3
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	4013      	ands	r3, r2
 800b0e6:	d012      	beq.n	800b10e <HAL_UART_IRQHandler+0xc6>
 800b0e8:	23a0      	movs	r3, #160	; 0xa0
 800b0ea:	18fb      	adds	r3, r7, r3
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	2380      	movs	r3, #128	; 0x80
 800b0f0:	005b      	lsls	r3, r3, #1
 800b0f2:	4013      	ands	r3, r2
 800b0f4:	d00b      	beq.n	800b10e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2284      	movs	r2, #132	; 0x84
 800b102:	589b      	ldr	r3, [r3, r2]
 800b104:	2201      	movs	r2, #1
 800b106:	431a      	orrs	r2, r3
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2184      	movs	r1, #132	; 0x84
 800b10c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b10e:	23a4      	movs	r3, #164	; 0xa4
 800b110:	18fb      	adds	r3, r7, r3
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	2202      	movs	r2, #2
 800b116:	4013      	ands	r3, r2
 800b118:	d011      	beq.n	800b13e <HAL_UART_IRQHandler+0xf6>
 800b11a:	239c      	movs	r3, #156	; 0x9c
 800b11c:	18fb      	adds	r3, r7, r3
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2201      	movs	r2, #1
 800b122:	4013      	ands	r3, r2
 800b124:	d00b      	beq.n	800b13e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	2202      	movs	r2, #2
 800b12c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2284      	movs	r2, #132	; 0x84
 800b132:	589b      	ldr	r3, [r3, r2]
 800b134:	2204      	movs	r2, #4
 800b136:	431a      	orrs	r2, r3
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2184      	movs	r1, #132	; 0x84
 800b13c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b13e:	23a4      	movs	r3, #164	; 0xa4
 800b140:	18fb      	adds	r3, r7, r3
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	2204      	movs	r2, #4
 800b146:	4013      	ands	r3, r2
 800b148:	d011      	beq.n	800b16e <HAL_UART_IRQHandler+0x126>
 800b14a:	239c      	movs	r3, #156	; 0x9c
 800b14c:	18fb      	adds	r3, r7, r3
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	2201      	movs	r2, #1
 800b152:	4013      	ands	r3, r2
 800b154:	d00b      	beq.n	800b16e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2204      	movs	r2, #4
 800b15c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2284      	movs	r2, #132	; 0x84
 800b162:	589b      	ldr	r3, [r3, r2]
 800b164:	2202      	movs	r2, #2
 800b166:	431a      	orrs	r2, r3
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2184      	movs	r1, #132	; 0x84
 800b16c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b16e:	23a4      	movs	r3, #164	; 0xa4
 800b170:	18fb      	adds	r3, r7, r3
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	2208      	movs	r2, #8
 800b176:	4013      	ands	r3, r2
 800b178:	d017      	beq.n	800b1aa <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b17a:	23a0      	movs	r3, #160	; 0xa0
 800b17c:	18fb      	adds	r3, r7, r3
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	2220      	movs	r2, #32
 800b182:	4013      	ands	r3, r2
 800b184:	d105      	bne.n	800b192 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b186:	239c      	movs	r3, #156	; 0x9c
 800b188:	18fb      	adds	r3, r7, r3
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	2201      	movs	r2, #1
 800b18e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b190:	d00b      	beq.n	800b1aa <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	2208      	movs	r2, #8
 800b198:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2284      	movs	r2, #132	; 0x84
 800b19e:	589b      	ldr	r3, [r3, r2]
 800b1a0:	2208      	movs	r2, #8
 800b1a2:	431a      	orrs	r2, r3
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2184      	movs	r1, #132	; 0x84
 800b1a8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b1aa:	23a4      	movs	r3, #164	; 0xa4
 800b1ac:	18fb      	adds	r3, r7, r3
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	2380      	movs	r3, #128	; 0x80
 800b1b2:	011b      	lsls	r3, r3, #4
 800b1b4:	4013      	ands	r3, r2
 800b1b6:	d013      	beq.n	800b1e0 <HAL_UART_IRQHandler+0x198>
 800b1b8:	23a0      	movs	r3, #160	; 0xa0
 800b1ba:	18fb      	adds	r3, r7, r3
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	2380      	movs	r3, #128	; 0x80
 800b1c0:	04db      	lsls	r3, r3, #19
 800b1c2:	4013      	ands	r3, r2
 800b1c4:	d00c      	beq.n	800b1e0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	2280      	movs	r2, #128	; 0x80
 800b1cc:	0112      	lsls	r2, r2, #4
 800b1ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2284      	movs	r2, #132	; 0x84
 800b1d4:	589b      	ldr	r3, [r3, r2]
 800b1d6:	2220      	movs	r2, #32
 800b1d8:	431a      	orrs	r2, r3
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2184      	movs	r1, #132	; 0x84
 800b1de:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2284      	movs	r2, #132	; 0x84
 800b1e4:	589b      	ldr	r3, [r3, r2]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d100      	bne.n	800b1ec <HAL_UART_IRQHandler+0x1a4>
 800b1ea:	e1ff      	b.n	800b5ec <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b1ec:	23a4      	movs	r3, #164	; 0xa4
 800b1ee:	18fb      	adds	r3, r7, r3
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	2220      	movs	r2, #32
 800b1f4:	4013      	ands	r3, r2
 800b1f6:	d00e      	beq.n	800b216 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b1f8:	23a0      	movs	r3, #160	; 0xa0
 800b1fa:	18fb      	adds	r3, r7, r3
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	2220      	movs	r2, #32
 800b200:	4013      	ands	r3, r2
 800b202:	d008      	beq.n	800b216 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d004      	beq.n	800b216 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	0010      	movs	r0, r2
 800b214:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2284      	movs	r2, #132	; 0x84
 800b21a:	589b      	ldr	r3, [r3, r2]
 800b21c:	2194      	movs	r1, #148	; 0x94
 800b21e:	187a      	adds	r2, r7, r1
 800b220:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	689b      	ldr	r3, [r3, #8]
 800b228:	2240      	movs	r2, #64	; 0x40
 800b22a:	4013      	ands	r3, r2
 800b22c:	2b40      	cmp	r3, #64	; 0x40
 800b22e:	d004      	beq.n	800b23a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b230:	187b      	adds	r3, r7, r1
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2228      	movs	r2, #40	; 0x28
 800b236:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b238:	d047      	beq.n	800b2ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	0018      	movs	r0, r3
 800b23e:	f000 fe1f 	bl	800be80 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	689b      	ldr	r3, [r3, #8]
 800b248:	2240      	movs	r2, #64	; 0x40
 800b24a:	4013      	ands	r3, r2
 800b24c:	2b40      	cmp	r3, #64	; 0x40
 800b24e:	d137      	bne.n	800b2c0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b250:	f3ef 8310 	mrs	r3, PRIMASK
 800b254:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800b256:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b258:	2090      	movs	r0, #144	; 0x90
 800b25a:	183a      	adds	r2, r7, r0
 800b25c:	6013      	str	r3, [r2, #0]
 800b25e:	2301      	movs	r3, #1
 800b260:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b262:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b264:	f383 8810 	msr	PRIMASK, r3
}
 800b268:	46c0      	nop			; (mov r8, r8)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	689a      	ldr	r2, [r3, #8]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	2140      	movs	r1, #64	; 0x40
 800b276:	438a      	bics	r2, r1
 800b278:	609a      	str	r2, [r3, #8]
 800b27a:	183b      	adds	r3, r7, r0
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b280:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b282:	f383 8810 	msr	PRIMASK, r3
}
 800b286:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d012      	beq.n	800b2b6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b294:	4a14      	ldr	r2, [pc, #80]	; (800b2e8 <HAL_UART_IRQHandler+0x2a0>)
 800b296:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b29c:	0018      	movs	r0, r3
 800b29e:	f7fc fb67 	bl	8007970 <HAL_DMA_Abort_IT>
 800b2a2:	1e03      	subs	r3, r0, #0
 800b2a4:	d01a      	beq.n	800b2dc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2b0:	0018      	movs	r0, r3
 800b2b2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2b4:	e012      	b.n	800b2dc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	0018      	movs	r0, r3
 800b2ba:	f000 f9b5 	bl	800b628 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2be:	e00d      	b.n	800b2dc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	0018      	movs	r0, r3
 800b2c4:	f000 f9b0 	bl	800b628 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2c8:	e008      	b.n	800b2dc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	0018      	movs	r0, r3
 800b2ce:	f000 f9ab 	bl	800b628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2284      	movs	r2, #132	; 0x84
 800b2d6:	2100      	movs	r1, #0
 800b2d8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800b2da:	e187      	b.n	800b5ec <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2dc:	46c0      	nop			; (mov r8, r8)
    return;
 800b2de:	e185      	b.n	800b5ec <HAL_UART_IRQHandler+0x5a4>
 800b2e0:	0000080f 	.word	0x0000080f
 800b2e4:	04000120 	.word	0x04000120
 800b2e8:	0800bf49 	.word	0x0800bf49

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	d000      	beq.n	800b2f6 <HAL_UART_IRQHandler+0x2ae>
 800b2f4:	e139      	b.n	800b56a <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b2f6:	23a4      	movs	r3, #164	; 0xa4
 800b2f8:	18fb      	adds	r3, r7, r3
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	2210      	movs	r2, #16
 800b2fe:	4013      	ands	r3, r2
 800b300:	d100      	bne.n	800b304 <HAL_UART_IRQHandler+0x2bc>
 800b302:	e132      	b.n	800b56a <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b304:	23a0      	movs	r3, #160	; 0xa0
 800b306:	18fb      	adds	r3, r7, r3
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	2210      	movs	r2, #16
 800b30c:	4013      	ands	r3, r2
 800b30e:	d100      	bne.n	800b312 <HAL_UART_IRQHandler+0x2ca>
 800b310:	e12b      	b.n	800b56a <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	2210      	movs	r2, #16
 800b318:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	2240      	movs	r2, #64	; 0x40
 800b322:	4013      	ands	r3, r2
 800b324:	2b40      	cmp	r3, #64	; 0x40
 800b326:	d000      	beq.n	800b32a <HAL_UART_IRQHandler+0x2e2>
 800b328:	e09f      	b.n	800b46a <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	685a      	ldr	r2, [r3, #4]
 800b332:	217e      	movs	r1, #126	; 0x7e
 800b334:	187b      	adds	r3, r7, r1
 800b336:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800b338:	187b      	adds	r3, r7, r1
 800b33a:	881b      	ldrh	r3, [r3, #0]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d100      	bne.n	800b342 <HAL_UART_IRQHandler+0x2fa>
 800b340:	e156      	b.n	800b5f0 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2258      	movs	r2, #88	; 0x58
 800b346:	5a9b      	ldrh	r3, [r3, r2]
 800b348:	187a      	adds	r2, r7, r1
 800b34a:	8812      	ldrh	r2, [r2, #0]
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d300      	bcc.n	800b352 <HAL_UART_IRQHandler+0x30a>
 800b350:	e14e      	b.n	800b5f0 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	187a      	adds	r2, r7, r1
 800b356:	215a      	movs	r1, #90	; 0x5a
 800b358:	8812      	ldrh	r2, [r2, #0]
 800b35a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b360:	699b      	ldr	r3, [r3, #24]
 800b362:	2b20      	cmp	r3, #32
 800b364:	d06f      	beq.n	800b446 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b366:	f3ef 8310 	mrs	r3, PRIMASK
 800b36a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800b36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b36e:	67bb      	str	r3, [r7, #120]	; 0x78
 800b370:	2301      	movs	r3, #1
 800b372:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b376:	f383 8810 	msr	PRIMASK, r3
}
 800b37a:	46c0      	nop			; (mov r8, r8)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	681a      	ldr	r2, [r3, #0]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	499e      	ldr	r1, [pc, #632]	; (800b600 <HAL_UART_IRQHandler+0x5b8>)
 800b388:	400a      	ands	r2, r1
 800b38a:	601a      	str	r2, [r3, #0]
 800b38c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b38e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b392:	f383 8810 	msr	PRIMASK, r3
}
 800b396:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b398:	f3ef 8310 	mrs	r3, PRIMASK
 800b39c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800b39e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3a0:	677b      	str	r3, [r7, #116]	; 0x74
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3a8:	f383 8810 	msr	PRIMASK, r3
}
 800b3ac:	46c0      	nop			; (mov r8, r8)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	689a      	ldr	r2, [r3, #8]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	2101      	movs	r1, #1
 800b3ba:	438a      	bics	r2, r1
 800b3bc:	609a      	str	r2, [r3, #8]
 800b3be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b3c0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3c4:	f383 8810 	msr	PRIMASK, r3
}
 800b3c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3ca:	f3ef 8310 	mrs	r3, PRIMASK
 800b3ce:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800b3d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3d2:	673b      	str	r3, [r7, #112]	; 0x70
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3da:	f383 8810 	msr	PRIMASK, r3
}
 800b3de:	46c0      	nop			; (mov r8, r8)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	689a      	ldr	r2, [r3, #8]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	2140      	movs	r1, #64	; 0x40
 800b3ec:	438a      	bics	r2, r1
 800b3ee:	609a      	str	r2, [r3, #8]
 800b3f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b3f2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3f6:	f383 8810 	msr	PRIMASK, r3
}
 800b3fa:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2280      	movs	r2, #128	; 0x80
 800b400:	2120      	movs	r1, #32
 800b402:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b40a:	f3ef 8310 	mrs	r3, PRIMASK
 800b40e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800b410:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b412:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b414:	2301      	movs	r3, #1
 800b416:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b418:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b41a:	f383 8810 	msr	PRIMASK, r3
}
 800b41e:	46c0      	nop			; (mov r8, r8)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	681a      	ldr	r2, [r3, #0]
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	2110      	movs	r1, #16
 800b42c:	438a      	bics	r2, r1
 800b42e:	601a      	str	r2, [r3, #0]
 800b430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b432:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b434:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b436:	f383 8810 	msr	PRIMASK, r3
}
 800b43a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b440:	0018      	movs	r0, r3
 800b442:	f7fc fa5d 	bl	8007900 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2202      	movs	r2, #2
 800b44a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2258      	movs	r2, #88	; 0x58
 800b450:	5a9a      	ldrh	r2, [r3, r2]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	215a      	movs	r1, #90	; 0x5a
 800b456:	5a5b      	ldrh	r3, [r3, r1]
 800b458:	b29b      	uxth	r3, r3
 800b45a:	1ad3      	subs	r3, r2, r3
 800b45c:	b29a      	uxth	r2, r3
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	0011      	movs	r1, r2
 800b462:	0018      	movs	r0, r3
 800b464:	f000 f8e8 	bl	800b638 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b468:	e0c2      	b.n	800b5f0 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2258      	movs	r2, #88	; 0x58
 800b46e:	5a99      	ldrh	r1, [r3, r2]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	225a      	movs	r2, #90	; 0x5a
 800b474:	5a9b      	ldrh	r3, [r3, r2]
 800b476:	b29a      	uxth	r2, r3
 800b478:	208e      	movs	r0, #142	; 0x8e
 800b47a:	183b      	adds	r3, r7, r0
 800b47c:	1a8a      	subs	r2, r1, r2
 800b47e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	225a      	movs	r2, #90	; 0x5a
 800b484:	5a9b      	ldrh	r3, [r3, r2]
 800b486:	b29b      	uxth	r3, r3
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d100      	bne.n	800b48e <HAL_UART_IRQHandler+0x446>
 800b48c:	e0b2      	b.n	800b5f4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 800b48e:	183b      	adds	r3, r7, r0
 800b490:	881b      	ldrh	r3, [r3, #0]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d100      	bne.n	800b498 <HAL_UART_IRQHandler+0x450>
 800b496:	e0ad      	b.n	800b5f4 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b498:	f3ef 8310 	mrs	r3, PRIMASK
 800b49c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b49e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b4a0:	2488      	movs	r4, #136	; 0x88
 800b4a2:	193a      	adds	r2, r7, r4
 800b4a4:	6013      	str	r3, [r2, #0]
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	f383 8810 	msr	PRIMASK, r3
}
 800b4b0:	46c0      	nop			; (mov r8, r8)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	681a      	ldr	r2, [r3, #0]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	4951      	ldr	r1, [pc, #324]	; (800b604 <HAL_UART_IRQHandler+0x5bc>)
 800b4be:	400a      	ands	r2, r1
 800b4c0:	601a      	str	r2, [r3, #0]
 800b4c2:	193b      	adds	r3, r7, r4
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	f383 8810 	msr	PRIMASK, r3
}
 800b4ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4d0:	f3ef 8310 	mrs	r3, PRIMASK
 800b4d4:	61bb      	str	r3, [r7, #24]
  return(result);
 800b4d6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4d8:	2484      	movs	r4, #132	; 0x84
 800b4da:	193a      	adds	r2, r7, r4
 800b4dc:	6013      	str	r3, [r2, #0]
 800b4de:	2301      	movs	r3, #1
 800b4e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4e2:	69fb      	ldr	r3, [r7, #28]
 800b4e4:	f383 8810 	msr	PRIMASK, r3
}
 800b4e8:	46c0      	nop			; (mov r8, r8)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	689a      	ldr	r2, [r3, #8]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	2101      	movs	r1, #1
 800b4f6:	438a      	bics	r2, r1
 800b4f8:	609a      	str	r2, [r3, #8]
 800b4fa:	193b      	adds	r3, r7, r4
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b500:	6a3b      	ldr	r3, [r7, #32]
 800b502:	f383 8810 	msr	PRIMASK, r3
}
 800b506:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2280      	movs	r2, #128	; 0x80
 800b50c:	2120      	movs	r1, #32
 800b50e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2200      	movs	r2, #0
 800b514:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2200      	movs	r2, #0
 800b51a:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b51c:	f3ef 8310 	mrs	r3, PRIMASK
 800b520:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800b522:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b524:	2480      	movs	r4, #128	; 0x80
 800b526:	193a      	adds	r2, r7, r4
 800b528:	6013      	str	r3, [r2, #0]
 800b52a:	2301      	movs	r3, #1
 800b52c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b530:	f383 8810 	msr	PRIMASK, r3
}
 800b534:	46c0      	nop			; (mov r8, r8)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	2110      	movs	r1, #16
 800b542:	438a      	bics	r2, r1
 800b544:	601a      	str	r2, [r3, #0]
 800b546:	193b      	adds	r3, r7, r4
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b54e:	f383 8810 	msr	PRIMASK, r3
}
 800b552:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2202      	movs	r2, #2
 800b558:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b55a:	183b      	adds	r3, r7, r0
 800b55c:	881a      	ldrh	r2, [r3, #0]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	0011      	movs	r1, r2
 800b562:	0018      	movs	r0, r3
 800b564:	f000 f868 	bl	800b638 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b568:	e044      	b.n	800b5f4 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b56a:	23a4      	movs	r3, #164	; 0xa4
 800b56c:	18fb      	adds	r3, r7, r3
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	2380      	movs	r3, #128	; 0x80
 800b572:	035b      	lsls	r3, r3, #13
 800b574:	4013      	ands	r3, r2
 800b576:	d010      	beq.n	800b59a <HAL_UART_IRQHandler+0x552>
 800b578:	239c      	movs	r3, #156	; 0x9c
 800b57a:	18fb      	adds	r3, r7, r3
 800b57c:	681a      	ldr	r2, [r3, #0]
 800b57e:	2380      	movs	r3, #128	; 0x80
 800b580:	03db      	lsls	r3, r3, #15
 800b582:	4013      	ands	r3, r2
 800b584:	d009      	beq.n	800b59a <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	2280      	movs	r2, #128	; 0x80
 800b58c:	0352      	lsls	r2, r2, #13
 800b58e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	0018      	movs	r0, r3
 800b594:	f000 ff80 	bl	800c498 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b598:	e02f      	b.n	800b5fa <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b59a:	23a4      	movs	r3, #164	; 0xa4
 800b59c:	18fb      	adds	r3, r7, r3
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	2280      	movs	r2, #128	; 0x80
 800b5a2:	4013      	ands	r3, r2
 800b5a4:	d00f      	beq.n	800b5c6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b5a6:	23a0      	movs	r3, #160	; 0xa0
 800b5a8:	18fb      	adds	r3, r7, r3
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	2280      	movs	r2, #128	; 0x80
 800b5ae:	4013      	ands	r3, r2
 800b5b0:	d009      	beq.n	800b5c6 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d01e      	beq.n	800b5f8 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	0010      	movs	r0, r2
 800b5c2:	4798      	blx	r3
    }
    return;
 800b5c4:	e018      	b.n	800b5f8 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b5c6:	23a4      	movs	r3, #164	; 0xa4
 800b5c8:	18fb      	adds	r3, r7, r3
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	2240      	movs	r2, #64	; 0x40
 800b5ce:	4013      	ands	r3, r2
 800b5d0:	d013      	beq.n	800b5fa <HAL_UART_IRQHandler+0x5b2>
 800b5d2:	23a0      	movs	r3, #160	; 0xa0
 800b5d4:	18fb      	adds	r3, r7, r3
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2240      	movs	r2, #64	; 0x40
 800b5da:	4013      	ands	r3, r2
 800b5dc:	d00d      	beq.n	800b5fa <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	0018      	movs	r0, r3
 800b5e2:	f000 fd80 	bl	800c0e6 <UART_EndTransmit_IT>
    return;
 800b5e6:	e008      	b.n	800b5fa <HAL_UART_IRQHandler+0x5b2>
      return;
 800b5e8:	46c0      	nop			; (mov r8, r8)
 800b5ea:	e006      	b.n	800b5fa <HAL_UART_IRQHandler+0x5b2>
    return;
 800b5ec:	46c0      	nop			; (mov r8, r8)
 800b5ee:	e004      	b.n	800b5fa <HAL_UART_IRQHandler+0x5b2>
      return;
 800b5f0:	46c0      	nop			; (mov r8, r8)
 800b5f2:	e002      	b.n	800b5fa <HAL_UART_IRQHandler+0x5b2>
      return;
 800b5f4:	46c0      	nop			; (mov r8, r8)
 800b5f6:	e000      	b.n	800b5fa <HAL_UART_IRQHandler+0x5b2>
    return;
 800b5f8:	46c0      	nop			; (mov r8, r8)
  }

}
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	b02b      	add	sp, #172	; 0xac
 800b5fe:	bd90      	pop	{r4, r7, pc}
 800b600:	fffffeff 	.word	0xfffffeff
 800b604:	fffffedf 	.word	0xfffffedf

0800b608 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b610:	46c0      	nop			; (mov r8, r8)
 800b612:	46bd      	mov	sp, r7
 800b614:	b002      	add	sp, #8
 800b616:	bd80      	pop	{r7, pc}

0800b618 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b082      	sub	sp, #8
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b620:	46c0      	nop			; (mov r8, r8)
 800b622:	46bd      	mov	sp, r7
 800b624:	b002      	add	sp, #8
 800b626:	bd80      	pop	{r7, pc}

0800b628 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b082      	sub	sp, #8
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b630:	46c0      	nop			; (mov r8, r8)
 800b632:	46bd      	mov	sp, r7
 800b634:	b002      	add	sp, #8
 800b636:	bd80      	pop	{r7, pc}

0800b638 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	000a      	movs	r2, r1
 800b642:	1cbb      	adds	r3, r7, #2
 800b644:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b646:	46c0      	nop			; (mov r8, r8)
 800b648:	46bd      	mov	sp, r7
 800b64a:	b002      	add	sp, #8
 800b64c:	bd80      	pop	{r7, pc}
	...

0800b650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b088      	sub	sp, #32
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b658:	231e      	movs	r3, #30
 800b65a:	18fb      	adds	r3, r7, r3
 800b65c:	2200      	movs	r2, #0
 800b65e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	689a      	ldr	r2, [r3, #8]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	691b      	ldr	r3, [r3, #16]
 800b668:	431a      	orrs	r2, r3
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	695b      	ldr	r3, [r3, #20]
 800b66e:	431a      	orrs	r2, r3
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	69db      	ldr	r3, [r3, #28]
 800b674:	4313      	orrs	r3, r2
 800b676:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	4aaf      	ldr	r2, [pc, #700]	; (800b93c <UART_SetConfig+0x2ec>)
 800b680:	4013      	ands	r3, r2
 800b682:	0019      	movs	r1, r3
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	697a      	ldr	r2, [r7, #20]
 800b68a:	430a      	orrs	r2, r1
 800b68c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	4aaa      	ldr	r2, [pc, #680]	; (800b940 <UART_SetConfig+0x2f0>)
 800b696:	4013      	ands	r3, r2
 800b698:	0019      	movs	r1, r3
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	68da      	ldr	r2, [r3, #12]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	430a      	orrs	r2, r1
 800b6a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	699b      	ldr	r3, [r3, #24]
 800b6aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6a1b      	ldr	r3, [r3, #32]
 800b6b0:	697a      	ldr	r2, [r7, #20]
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	689b      	ldr	r3, [r3, #8]
 800b6bc:	4aa1      	ldr	r2, [pc, #644]	; (800b944 <UART_SetConfig+0x2f4>)
 800b6be:	4013      	ands	r3, r2
 800b6c0:	0019      	movs	r1, r3
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	697a      	ldr	r2, [r7, #20]
 800b6c8:	430a      	orrs	r2, r1
 800b6ca:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4a9d      	ldr	r2, [pc, #628]	; (800b948 <UART_SetConfig+0x2f8>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d127      	bne.n	800b726 <UART_SetConfig+0xd6>
 800b6d6:	4b9d      	ldr	r3, [pc, #628]	; (800b94c <UART_SetConfig+0x2fc>)
 800b6d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6da:	2203      	movs	r2, #3
 800b6dc:	4013      	ands	r3, r2
 800b6de:	2b03      	cmp	r3, #3
 800b6e0:	d00d      	beq.n	800b6fe <UART_SetConfig+0xae>
 800b6e2:	d81b      	bhi.n	800b71c <UART_SetConfig+0xcc>
 800b6e4:	2b02      	cmp	r3, #2
 800b6e6:	d014      	beq.n	800b712 <UART_SetConfig+0xc2>
 800b6e8:	d818      	bhi.n	800b71c <UART_SetConfig+0xcc>
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d002      	beq.n	800b6f4 <UART_SetConfig+0xa4>
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d00a      	beq.n	800b708 <UART_SetConfig+0xb8>
 800b6f2:	e013      	b.n	800b71c <UART_SetConfig+0xcc>
 800b6f4:	231f      	movs	r3, #31
 800b6f6:	18fb      	adds	r3, r7, r3
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	701a      	strb	r2, [r3, #0]
 800b6fc:	e065      	b.n	800b7ca <UART_SetConfig+0x17a>
 800b6fe:	231f      	movs	r3, #31
 800b700:	18fb      	adds	r3, r7, r3
 800b702:	2202      	movs	r2, #2
 800b704:	701a      	strb	r2, [r3, #0]
 800b706:	e060      	b.n	800b7ca <UART_SetConfig+0x17a>
 800b708:	231f      	movs	r3, #31
 800b70a:	18fb      	adds	r3, r7, r3
 800b70c:	2204      	movs	r2, #4
 800b70e:	701a      	strb	r2, [r3, #0]
 800b710:	e05b      	b.n	800b7ca <UART_SetConfig+0x17a>
 800b712:	231f      	movs	r3, #31
 800b714:	18fb      	adds	r3, r7, r3
 800b716:	2208      	movs	r2, #8
 800b718:	701a      	strb	r2, [r3, #0]
 800b71a:	e056      	b.n	800b7ca <UART_SetConfig+0x17a>
 800b71c:	231f      	movs	r3, #31
 800b71e:	18fb      	adds	r3, r7, r3
 800b720:	2210      	movs	r2, #16
 800b722:	701a      	strb	r2, [r3, #0]
 800b724:	e051      	b.n	800b7ca <UART_SetConfig+0x17a>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a89      	ldr	r2, [pc, #548]	; (800b950 <UART_SetConfig+0x300>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d134      	bne.n	800b79a <UART_SetConfig+0x14a>
 800b730:	4b86      	ldr	r3, [pc, #536]	; (800b94c <UART_SetConfig+0x2fc>)
 800b732:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b734:	23c0      	movs	r3, #192	; 0xc0
 800b736:	029b      	lsls	r3, r3, #10
 800b738:	4013      	ands	r3, r2
 800b73a:	22c0      	movs	r2, #192	; 0xc0
 800b73c:	0292      	lsls	r2, r2, #10
 800b73e:	4293      	cmp	r3, r2
 800b740:	d017      	beq.n	800b772 <UART_SetConfig+0x122>
 800b742:	22c0      	movs	r2, #192	; 0xc0
 800b744:	0292      	lsls	r2, r2, #10
 800b746:	4293      	cmp	r3, r2
 800b748:	d822      	bhi.n	800b790 <UART_SetConfig+0x140>
 800b74a:	2280      	movs	r2, #128	; 0x80
 800b74c:	0292      	lsls	r2, r2, #10
 800b74e:	4293      	cmp	r3, r2
 800b750:	d019      	beq.n	800b786 <UART_SetConfig+0x136>
 800b752:	2280      	movs	r2, #128	; 0x80
 800b754:	0292      	lsls	r2, r2, #10
 800b756:	4293      	cmp	r3, r2
 800b758:	d81a      	bhi.n	800b790 <UART_SetConfig+0x140>
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d004      	beq.n	800b768 <UART_SetConfig+0x118>
 800b75e:	2280      	movs	r2, #128	; 0x80
 800b760:	0252      	lsls	r2, r2, #9
 800b762:	4293      	cmp	r3, r2
 800b764:	d00a      	beq.n	800b77c <UART_SetConfig+0x12c>
 800b766:	e013      	b.n	800b790 <UART_SetConfig+0x140>
 800b768:	231f      	movs	r3, #31
 800b76a:	18fb      	adds	r3, r7, r3
 800b76c:	2200      	movs	r2, #0
 800b76e:	701a      	strb	r2, [r3, #0]
 800b770:	e02b      	b.n	800b7ca <UART_SetConfig+0x17a>
 800b772:	231f      	movs	r3, #31
 800b774:	18fb      	adds	r3, r7, r3
 800b776:	2202      	movs	r2, #2
 800b778:	701a      	strb	r2, [r3, #0]
 800b77a:	e026      	b.n	800b7ca <UART_SetConfig+0x17a>
 800b77c:	231f      	movs	r3, #31
 800b77e:	18fb      	adds	r3, r7, r3
 800b780:	2204      	movs	r2, #4
 800b782:	701a      	strb	r2, [r3, #0]
 800b784:	e021      	b.n	800b7ca <UART_SetConfig+0x17a>
 800b786:	231f      	movs	r3, #31
 800b788:	18fb      	adds	r3, r7, r3
 800b78a:	2208      	movs	r2, #8
 800b78c:	701a      	strb	r2, [r3, #0]
 800b78e:	e01c      	b.n	800b7ca <UART_SetConfig+0x17a>
 800b790:	231f      	movs	r3, #31
 800b792:	18fb      	adds	r3, r7, r3
 800b794:	2210      	movs	r2, #16
 800b796:	701a      	strb	r2, [r3, #0]
 800b798:	e017      	b.n	800b7ca <UART_SetConfig+0x17a>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4a6d      	ldr	r2, [pc, #436]	; (800b954 <UART_SetConfig+0x304>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d104      	bne.n	800b7ae <UART_SetConfig+0x15e>
 800b7a4:	231f      	movs	r3, #31
 800b7a6:	18fb      	adds	r3, r7, r3
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	701a      	strb	r2, [r3, #0]
 800b7ac:	e00d      	b.n	800b7ca <UART_SetConfig+0x17a>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	4a69      	ldr	r2, [pc, #420]	; (800b958 <UART_SetConfig+0x308>)
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d104      	bne.n	800b7c2 <UART_SetConfig+0x172>
 800b7b8:	231f      	movs	r3, #31
 800b7ba:	18fb      	adds	r3, r7, r3
 800b7bc:	2200      	movs	r2, #0
 800b7be:	701a      	strb	r2, [r3, #0]
 800b7c0:	e003      	b.n	800b7ca <UART_SetConfig+0x17a>
 800b7c2:	231f      	movs	r3, #31
 800b7c4:	18fb      	adds	r3, r7, r3
 800b7c6:	2210      	movs	r2, #16
 800b7c8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	69da      	ldr	r2, [r3, #28]
 800b7ce:	2380      	movs	r3, #128	; 0x80
 800b7d0:	021b      	lsls	r3, r3, #8
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d15c      	bne.n	800b890 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 800b7d6:	231f      	movs	r3, #31
 800b7d8:	18fb      	adds	r3, r7, r3
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	2b08      	cmp	r3, #8
 800b7de:	d015      	beq.n	800b80c <UART_SetConfig+0x1bc>
 800b7e0:	dc18      	bgt.n	800b814 <UART_SetConfig+0x1c4>
 800b7e2:	2b04      	cmp	r3, #4
 800b7e4:	d00d      	beq.n	800b802 <UART_SetConfig+0x1b2>
 800b7e6:	dc15      	bgt.n	800b814 <UART_SetConfig+0x1c4>
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d002      	beq.n	800b7f2 <UART_SetConfig+0x1a2>
 800b7ec:	2b02      	cmp	r3, #2
 800b7ee:	d005      	beq.n	800b7fc <UART_SetConfig+0x1ac>
 800b7f0:	e010      	b.n	800b814 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7f2:	f7fd fd53 	bl	800929c <HAL_RCC_GetPCLK1Freq>
 800b7f6:	0003      	movs	r3, r0
 800b7f8:	61bb      	str	r3, [r7, #24]
        break;
 800b7fa:	e012      	b.n	800b822 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b7fc:	4b57      	ldr	r3, [pc, #348]	; (800b95c <UART_SetConfig+0x30c>)
 800b7fe:	61bb      	str	r3, [r7, #24]
        break;
 800b800:	e00f      	b.n	800b822 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b802:	f7fd fccf 	bl	80091a4 <HAL_RCC_GetSysClockFreq>
 800b806:	0003      	movs	r3, r0
 800b808:	61bb      	str	r3, [r7, #24]
        break;
 800b80a:	e00a      	b.n	800b822 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b80c:	2380      	movs	r3, #128	; 0x80
 800b80e:	021b      	lsls	r3, r3, #8
 800b810:	61bb      	str	r3, [r7, #24]
        break;
 800b812:	e006      	b.n	800b822 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800b814:	2300      	movs	r3, #0
 800b816:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b818:	231e      	movs	r3, #30
 800b81a:	18fb      	adds	r3, r7, r3
 800b81c:	2201      	movs	r2, #1
 800b81e:	701a      	strb	r2, [r3, #0]
        break;
 800b820:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b822:	69bb      	ldr	r3, [r7, #24]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d100      	bne.n	800b82a <UART_SetConfig+0x1da>
 800b828:	e07a      	b.n	800b920 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b82a:	69bb      	ldr	r3, [r7, #24]
 800b82c:	005a      	lsls	r2, r3, #1
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	085b      	lsrs	r3, r3, #1
 800b834:	18d2      	adds	r2, r2, r3
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	0019      	movs	r1, r3
 800b83c:	0010      	movs	r0, r2
 800b83e:	f7f4 fc89 	bl	8000154 <__udivsi3>
 800b842:	0003      	movs	r3, r0
 800b844:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	2b0f      	cmp	r3, #15
 800b84a:	d91c      	bls.n	800b886 <UART_SetConfig+0x236>
 800b84c:	693a      	ldr	r2, [r7, #16]
 800b84e:	2380      	movs	r3, #128	; 0x80
 800b850:	025b      	lsls	r3, r3, #9
 800b852:	429a      	cmp	r2, r3
 800b854:	d217      	bcs.n	800b886 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	b29a      	uxth	r2, r3
 800b85a:	200e      	movs	r0, #14
 800b85c:	183b      	adds	r3, r7, r0
 800b85e:	210f      	movs	r1, #15
 800b860:	438a      	bics	r2, r1
 800b862:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	085b      	lsrs	r3, r3, #1
 800b868:	b29b      	uxth	r3, r3
 800b86a:	2207      	movs	r2, #7
 800b86c:	4013      	ands	r3, r2
 800b86e:	b299      	uxth	r1, r3
 800b870:	183b      	adds	r3, r7, r0
 800b872:	183a      	adds	r2, r7, r0
 800b874:	8812      	ldrh	r2, [r2, #0]
 800b876:	430a      	orrs	r2, r1
 800b878:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	183a      	adds	r2, r7, r0
 800b880:	8812      	ldrh	r2, [r2, #0]
 800b882:	60da      	str	r2, [r3, #12]
 800b884:	e04c      	b.n	800b920 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800b886:	231e      	movs	r3, #30
 800b888:	18fb      	adds	r3, r7, r3
 800b88a:	2201      	movs	r2, #1
 800b88c:	701a      	strb	r2, [r3, #0]
 800b88e:	e047      	b.n	800b920 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b890:	231f      	movs	r3, #31
 800b892:	18fb      	adds	r3, r7, r3
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	2b08      	cmp	r3, #8
 800b898:	d015      	beq.n	800b8c6 <UART_SetConfig+0x276>
 800b89a:	dc18      	bgt.n	800b8ce <UART_SetConfig+0x27e>
 800b89c:	2b04      	cmp	r3, #4
 800b89e:	d00d      	beq.n	800b8bc <UART_SetConfig+0x26c>
 800b8a0:	dc15      	bgt.n	800b8ce <UART_SetConfig+0x27e>
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d002      	beq.n	800b8ac <UART_SetConfig+0x25c>
 800b8a6:	2b02      	cmp	r3, #2
 800b8a8:	d005      	beq.n	800b8b6 <UART_SetConfig+0x266>
 800b8aa:	e010      	b.n	800b8ce <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8ac:	f7fd fcf6 	bl	800929c <HAL_RCC_GetPCLK1Freq>
 800b8b0:	0003      	movs	r3, r0
 800b8b2:	61bb      	str	r3, [r7, #24]
        break;
 800b8b4:	e012      	b.n	800b8dc <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b8b6:	4b29      	ldr	r3, [pc, #164]	; (800b95c <UART_SetConfig+0x30c>)
 800b8b8:	61bb      	str	r3, [r7, #24]
        break;
 800b8ba:	e00f      	b.n	800b8dc <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b8bc:	f7fd fc72 	bl	80091a4 <HAL_RCC_GetSysClockFreq>
 800b8c0:	0003      	movs	r3, r0
 800b8c2:	61bb      	str	r3, [r7, #24]
        break;
 800b8c4:	e00a      	b.n	800b8dc <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8c6:	2380      	movs	r3, #128	; 0x80
 800b8c8:	021b      	lsls	r3, r3, #8
 800b8ca:	61bb      	str	r3, [r7, #24]
        break;
 800b8cc:	e006      	b.n	800b8dc <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b8d2:	231e      	movs	r3, #30
 800b8d4:	18fb      	adds	r3, r7, r3
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	701a      	strb	r2, [r3, #0]
        break;
 800b8da:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800b8dc:	69bb      	ldr	r3, [r7, #24]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d01e      	beq.n	800b920 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	085a      	lsrs	r2, r3, #1
 800b8e8:	69bb      	ldr	r3, [r7, #24]
 800b8ea:	18d2      	adds	r2, r2, r3
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	0019      	movs	r1, r3
 800b8f2:	0010      	movs	r0, r2
 800b8f4:	f7f4 fc2e 	bl	8000154 <__udivsi3>
 800b8f8:	0003      	movs	r3, r0
 800b8fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	2b0f      	cmp	r3, #15
 800b900:	d90a      	bls.n	800b918 <UART_SetConfig+0x2c8>
 800b902:	693a      	ldr	r2, [r7, #16]
 800b904:	2380      	movs	r3, #128	; 0x80
 800b906:	025b      	lsls	r3, r3, #9
 800b908:	429a      	cmp	r2, r3
 800b90a:	d205      	bcs.n	800b918 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	b29a      	uxth	r2, r3
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	60da      	str	r2, [r3, #12]
 800b916:	e003      	b.n	800b920 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800b918:	231e      	movs	r3, #30
 800b91a:	18fb      	adds	r3, r7, r3
 800b91c:	2201      	movs	r2, #1
 800b91e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2200      	movs	r2, #0
 800b92a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800b92c:	231e      	movs	r3, #30
 800b92e:	18fb      	adds	r3, r7, r3
 800b930:	781b      	ldrb	r3, [r3, #0]
}
 800b932:	0018      	movs	r0, r3
 800b934:	46bd      	mov	sp, r7
 800b936:	b008      	add	sp, #32
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	46c0      	nop			; (mov r8, r8)
 800b93c:	efff69f3 	.word	0xefff69f3
 800b940:	ffffcfff 	.word	0xffffcfff
 800b944:	fffff4ff 	.word	0xfffff4ff
 800b948:	40013800 	.word	0x40013800
 800b94c:	40021000 	.word	0x40021000
 800b950:	40004400 	.word	0x40004400
 800b954:	40004800 	.word	0x40004800
 800b958:	40004c00 	.word	0x40004c00
 800b95c:	007a1200 	.word	0x007a1200

0800b960 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b96c:	2201      	movs	r2, #1
 800b96e:	4013      	ands	r3, r2
 800b970:	d00b      	beq.n	800b98a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	4a4a      	ldr	r2, [pc, #296]	; (800baa4 <UART_AdvFeatureConfig+0x144>)
 800b97a:	4013      	ands	r3, r2
 800b97c:	0019      	movs	r1, r3
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	430a      	orrs	r2, r1
 800b988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b98e:	2202      	movs	r2, #2
 800b990:	4013      	ands	r3, r2
 800b992:	d00b      	beq.n	800b9ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	4a43      	ldr	r2, [pc, #268]	; (800baa8 <UART_AdvFeatureConfig+0x148>)
 800b99c:	4013      	ands	r3, r2
 800b99e:	0019      	movs	r1, r3
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	430a      	orrs	r2, r1
 800b9aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b0:	2204      	movs	r2, #4
 800b9b2:	4013      	ands	r3, r2
 800b9b4:	d00b      	beq.n	800b9ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	4a3b      	ldr	r2, [pc, #236]	; (800baac <UART_AdvFeatureConfig+0x14c>)
 800b9be:	4013      	ands	r3, r2
 800b9c0:	0019      	movs	r1, r3
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	430a      	orrs	r2, r1
 800b9cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d2:	2208      	movs	r2, #8
 800b9d4:	4013      	ands	r3, r2
 800b9d6:	d00b      	beq.n	800b9f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	685b      	ldr	r3, [r3, #4]
 800b9de:	4a34      	ldr	r2, [pc, #208]	; (800bab0 <UART_AdvFeatureConfig+0x150>)
 800b9e0:	4013      	ands	r3, r2
 800b9e2:	0019      	movs	r1, r3
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	430a      	orrs	r2, r1
 800b9ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f4:	2210      	movs	r2, #16
 800b9f6:	4013      	ands	r3, r2
 800b9f8:	d00b      	beq.n	800ba12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	4a2c      	ldr	r2, [pc, #176]	; (800bab4 <UART_AdvFeatureConfig+0x154>)
 800ba02:	4013      	ands	r3, r2
 800ba04:	0019      	movs	r1, r3
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	430a      	orrs	r2, r1
 800ba10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba16:	2220      	movs	r2, #32
 800ba18:	4013      	ands	r3, r2
 800ba1a:	d00b      	beq.n	800ba34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	689b      	ldr	r3, [r3, #8]
 800ba22:	4a25      	ldr	r2, [pc, #148]	; (800bab8 <UART_AdvFeatureConfig+0x158>)
 800ba24:	4013      	ands	r3, r2
 800ba26:	0019      	movs	r1, r3
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	430a      	orrs	r2, r1
 800ba32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba38:	2240      	movs	r2, #64	; 0x40
 800ba3a:	4013      	ands	r3, r2
 800ba3c:	d01d      	beq.n	800ba7a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	685b      	ldr	r3, [r3, #4]
 800ba44:	4a1d      	ldr	r2, [pc, #116]	; (800babc <UART_AdvFeatureConfig+0x15c>)
 800ba46:	4013      	ands	r3, r2
 800ba48:	0019      	movs	r1, r3
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	430a      	orrs	r2, r1
 800ba54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba5a:	2380      	movs	r3, #128	; 0x80
 800ba5c:	035b      	lsls	r3, r3, #13
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	d10b      	bne.n	800ba7a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	4a15      	ldr	r2, [pc, #84]	; (800bac0 <UART_AdvFeatureConfig+0x160>)
 800ba6a:	4013      	ands	r3, r2
 800ba6c:	0019      	movs	r1, r3
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	430a      	orrs	r2, r1
 800ba78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba7e:	2280      	movs	r2, #128	; 0x80
 800ba80:	4013      	ands	r3, r2
 800ba82:	d00b      	beq.n	800ba9c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	685b      	ldr	r3, [r3, #4]
 800ba8a:	4a0e      	ldr	r2, [pc, #56]	; (800bac4 <UART_AdvFeatureConfig+0x164>)
 800ba8c:	4013      	ands	r3, r2
 800ba8e:	0019      	movs	r1, r3
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	430a      	orrs	r2, r1
 800ba9a:	605a      	str	r2, [r3, #4]
  }
}
 800ba9c:	46c0      	nop			; (mov r8, r8)
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	b002      	add	sp, #8
 800baa2:	bd80      	pop	{r7, pc}
 800baa4:	fffdffff 	.word	0xfffdffff
 800baa8:	fffeffff 	.word	0xfffeffff
 800baac:	fffbffff 	.word	0xfffbffff
 800bab0:	ffff7fff 	.word	0xffff7fff
 800bab4:	ffffefff 	.word	0xffffefff
 800bab8:	ffffdfff 	.word	0xffffdfff
 800babc:	ffefffff 	.word	0xffefffff
 800bac0:	ff9fffff 	.word	0xff9fffff
 800bac4:	fff7ffff 	.word	0xfff7ffff

0800bac8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b092      	sub	sp, #72	; 0x48
 800bacc:	af02      	add	r7, sp, #8
 800bace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2284      	movs	r2, #132	; 0x84
 800bad4:	2100      	movs	r1, #0
 800bad6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bad8:	f7fb f998 	bl	8006e0c <HAL_GetTick>
 800badc:	0003      	movs	r3, r0
 800bade:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	2208      	movs	r2, #8
 800bae8:	4013      	ands	r3, r2
 800baea:	2b08      	cmp	r3, #8
 800baec:	d12c      	bne.n	800bb48 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800baee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800baf0:	2280      	movs	r2, #128	; 0x80
 800baf2:	0391      	lsls	r1, r2, #14
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	4a46      	ldr	r2, [pc, #280]	; (800bc10 <UART_CheckIdleState+0x148>)
 800baf8:	9200      	str	r2, [sp, #0]
 800bafa:	2200      	movs	r2, #0
 800bafc:	f000 f88c 	bl	800bc18 <UART_WaitOnFlagUntilTimeout>
 800bb00:	1e03      	subs	r3, r0, #0
 800bb02:	d021      	beq.n	800bb48 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb04:	f3ef 8310 	mrs	r3, PRIMASK
 800bb08:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800bb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800bb0c:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb0e:	2301      	movs	r3, #1
 800bb10:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb14:	f383 8810 	msr	PRIMASK, r3
}
 800bb18:	46c0      	nop			; (mov r8, r8)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	681a      	ldr	r2, [r3, #0]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	2180      	movs	r1, #128	; 0x80
 800bb26:	438a      	bics	r2, r1
 800bb28:	601a      	str	r2, [r3, #0]
 800bb2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb30:	f383 8810 	msr	PRIMASK, r3
}
 800bb34:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2220      	movs	r2, #32
 800bb3a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2278      	movs	r2, #120	; 0x78
 800bb40:	2100      	movs	r1, #0
 800bb42:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb44:	2303      	movs	r3, #3
 800bb46:	e05f      	b.n	800bc08 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	2204      	movs	r2, #4
 800bb50:	4013      	ands	r3, r2
 800bb52:	2b04      	cmp	r3, #4
 800bb54:	d146      	bne.n	800bbe4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb58:	2280      	movs	r2, #128	; 0x80
 800bb5a:	03d1      	lsls	r1, r2, #15
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	4a2c      	ldr	r2, [pc, #176]	; (800bc10 <UART_CheckIdleState+0x148>)
 800bb60:	9200      	str	r2, [sp, #0]
 800bb62:	2200      	movs	r2, #0
 800bb64:	f000 f858 	bl	800bc18 <UART_WaitOnFlagUntilTimeout>
 800bb68:	1e03      	subs	r3, r0, #0
 800bb6a:	d03b      	beq.n	800bbe4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb6c:	f3ef 8310 	mrs	r3, PRIMASK
 800bb70:	60fb      	str	r3, [r7, #12]
  return(result);
 800bb72:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bb74:	637b      	str	r3, [r7, #52]	; 0x34
 800bb76:	2301      	movs	r3, #1
 800bb78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	f383 8810 	msr	PRIMASK, r3
}
 800bb80:	46c0      	nop			; (mov r8, r8)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	681a      	ldr	r2, [r3, #0]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4921      	ldr	r1, [pc, #132]	; (800bc14 <UART_CheckIdleState+0x14c>)
 800bb8e:	400a      	ands	r2, r1
 800bb90:	601a      	str	r2, [r3, #0]
 800bb92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	f383 8810 	msr	PRIMASK, r3
}
 800bb9c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb9e:	f3ef 8310 	mrs	r3, PRIMASK
 800bba2:	61bb      	str	r3, [r7, #24]
  return(result);
 800bba4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bba6:	633b      	str	r3, [r7, #48]	; 0x30
 800bba8:	2301      	movs	r3, #1
 800bbaa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbac:	69fb      	ldr	r3, [r7, #28]
 800bbae:	f383 8810 	msr	PRIMASK, r3
}
 800bbb2:	46c0      	nop			; (mov r8, r8)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	689a      	ldr	r2, [r3, #8]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2101      	movs	r1, #1
 800bbc0:	438a      	bics	r2, r1
 800bbc2:	609a      	str	r2, [r3, #8]
 800bbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbc8:	6a3b      	ldr	r3, [r7, #32]
 800bbca:	f383 8810 	msr	PRIMASK, r3
}
 800bbce:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2280      	movs	r2, #128	; 0x80
 800bbd4:	2120      	movs	r1, #32
 800bbd6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2278      	movs	r2, #120	; 0x78
 800bbdc:	2100      	movs	r1, #0
 800bbde:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bbe0:	2303      	movs	r3, #3
 800bbe2:	e011      	b.n	800bc08 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2220      	movs	r2, #32
 800bbe8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2280      	movs	r2, #128	; 0x80
 800bbee:	2120      	movs	r1, #32
 800bbf0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2278      	movs	r2, #120	; 0x78
 800bc02:	2100      	movs	r1, #0
 800bc04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bc06:	2300      	movs	r3, #0
}
 800bc08:	0018      	movs	r0, r3
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	b010      	add	sp, #64	; 0x40
 800bc0e:	bd80      	pop	{r7, pc}
 800bc10:	01ffffff 	.word	0x01ffffff
 800bc14:	fffffedf 	.word	0xfffffedf

0800bc18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b084      	sub	sp, #16
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	60b9      	str	r1, [r7, #8]
 800bc22:	603b      	str	r3, [r7, #0]
 800bc24:	1dfb      	adds	r3, r7, #7
 800bc26:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc28:	e04b      	b.n	800bcc2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc2a:	69bb      	ldr	r3, [r7, #24]
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	d048      	beq.n	800bcc2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc30:	f7fb f8ec 	bl	8006e0c <HAL_GetTick>
 800bc34:	0002      	movs	r2, r0
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	1ad3      	subs	r3, r2, r3
 800bc3a:	69ba      	ldr	r2, [r7, #24]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d302      	bcc.n	800bc46 <UART_WaitOnFlagUntilTimeout+0x2e>
 800bc40:	69bb      	ldr	r3, [r7, #24]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d101      	bne.n	800bc4a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800bc46:	2303      	movs	r3, #3
 800bc48:	e04b      	b.n	800bce2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2204      	movs	r2, #4
 800bc52:	4013      	ands	r3, r2
 800bc54:	d035      	beq.n	800bcc2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	69db      	ldr	r3, [r3, #28]
 800bc5c:	2208      	movs	r2, #8
 800bc5e:	4013      	ands	r3, r2
 800bc60:	2b08      	cmp	r3, #8
 800bc62:	d111      	bne.n	800bc88 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	2208      	movs	r2, #8
 800bc6a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	0018      	movs	r0, r3
 800bc70:	f000 f906 	bl	800be80 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2284      	movs	r2, #132	; 0x84
 800bc78:	2108      	movs	r1, #8
 800bc7a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	2278      	movs	r2, #120	; 0x78
 800bc80:	2100      	movs	r1, #0
 800bc82:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800bc84:	2301      	movs	r3, #1
 800bc86:	e02c      	b.n	800bce2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	69da      	ldr	r2, [r3, #28]
 800bc8e:	2380      	movs	r3, #128	; 0x80
 800bc90:	011b      	lsls	r3, r3, #4
 800bc92:	401a      	ands	r2, r3
 800bc94:	2380      	movs	r3, #128	; 0x80
 800bc96:	011b      	lsls	r3, r3, #4
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d112      	bne.n	800bcc2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2280      	movs	r2, #128	; 0x80
 800bca2:	0112      	lsls	r2, r2, #4
 800bca4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	0018      	movs	r0, r3
 800bcaa:	f000 f8e9 	bl	800be80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2284      	movs	r2, #132	; 0x84
 800bcb2:	2120      	movs	r1, #32
 800bcb4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2278      	movs	r2, #120	; 0x78
 800bcba:	2100      	movs	r1, #0
 800bcbc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800bcbe:	2303      	movs	r3, #3
 800bcc0:	e00f      	b.n	800bce2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	69db      	ldr	r3, [r3, #28]
 800bcc8:	68ba      	ldr	r2, [r7, #8]
 800bcca:	4013      	ands	r3, r2
 800bccc:	68ba      	ldr	r2, [r7, #8]
 800bcce:	1ad3      	subs	r3, r2, r3
 800bcd0:	425a      	negs	r2, r3
 800bcd2:	4153      	adcs	r3, r2
 800bcd4:	b2db      	uxtb	r3, r3
 800bcd6:	001a      	movs	r2, r3
 800bcd8:	1dfb      	adds	r3, r7, #7
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d0a4      	beq.n	800bc2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bce0:	2300      	movs	r3, #0
}
 800bce2:	0018      	movs	r0, r3
 800bce4:	46bd      	mov	sp, r7
 800bce6:	b004      	add	sp, #16
 800bce8:	bd80      	pop	{r7, pc}
	...

0800bcec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b090      	sub	sp, #64	; 0x40
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	60f8      	str	r0, [r7, #12]
 800bcf4:	60b9      	str	r1, [r7, #8]
 800bcf6:	1dbb      	adds	r3, r7, #6
 800bcf8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	68ba      	ldr	r2, [r7, #8]
 800bcfe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	1dba      	adds	r2, r7, #6
 800bd04:	2158      	movs	r1, #88	; 0x58
 800bd06:	8812      	ldrh	r2, [r2, #0]
 800bd08:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	1dba      	adds	r2, r7, #6
 800bd0e:	215a      	movs	r1, #90	; 0x5a
 800bd10:	8812      	ldrh	r2, [r2, #0]
 800bd12:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	2200      	movs	r2, #0
 800bd18:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	689a      	ldr	r2, [r3, #8]
 800bd1e:	2380      	movs	r3, #128	; 0x80
 800bd20:	015b      	lsls	r3, r3, #5
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d10d      	bne.n	800bd42 <UART_Start_Receive_IT+0x56>
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	691b      	ldr	r3, [r3, #16]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d104      	bne.n	800bd38 <UART_Start_Receive_IT+0x4c>
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	225c      	movs	r2, #92	; 0x5c
 800bd32:	4950      	ldr	r1, [pc, #320]	; (800be74 <UART_Start_Receive_IT+0x188>)
 800bd34:	5299      	strh	r1, [r3, r2]
 800bd36:	e02e      	b.n	800bd96 <UART_Start_Receive_IT+0xaa>
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	225c      	movs	r2, #92	; 0x5c
 800bd3c:	21ff      	movs	r1, #255	; 0xff
 800bd3e:	5299      	strh	r1, [r3, r2]
 800bd40:	e029      	b.n	800bd96 <UART_Start_Receive_IT+0xaa>
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	689b      	ldr	r3, [r3, #8]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d10d      	bne.n	800bd66 <UART_Start_Receive_IT+0x7a>
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	691b      	ldr	r3, [r3, #16]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d104      	bne.n	800bd5c <UART_Start_Receive_IT+0x70>
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	225c      	movs	r2, #92	; 0x5c
 800bd56:	21ff      	movs	r1, #255	; 0xff
 800bd58:	5299      	strh	r1, [r3, r2]
 800bd5a:	e01c      	b.n	800bd96 <UART_Start_Receive_IT+0xaa>
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	225c      	movs	r2, #92	; 0x5c
 800bd60:	217f      	movs	r1, #127	; 0x7f
 800bd62:	5299      	strh	r1, [r3, r2]
 800bd64:	e017      	b.n	800bd96 <UART_Start_Receive_IT+0xaa>
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	689a      	ldr	r2, [r3, #8]
 800bd6a:	2380      	movs	r3, #128	; 0x80
 800bd6c:	055b      	lsls	r3, r3, #21
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d10d      	bne.n	800bd8e <UART_Start_Receive_IT+0xa2>
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	691b      	ldr	r3, [r3, #16]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d104      	bne.n	800bd84 <UART_Start_Receive_IT+0x98>
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	225c      	movs	r2, #92	; 0x5c
 800bd7e:	217f      	movs	r1, #127	; 0x7f
 800bd80:	5299      	strh	r1, [r3, r2]
 800bd82:	e008      	b.n	800bd96 <UART_Start_Receive_IT+0xaa>
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	225c      	movs	r2, #92	; 0x5c
 800bd88:	213f      	movs	r1, #63	; 0x3f
 800bd8a:	5299      	strh	r1, [r3, r2]
 800bd8c:	e003      	b.n	800bd96 <UART_Start_Receive_IT+0xaa>
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	225c      	movs	r2, #92	; 0x5c
 800bd92:	2100      	movs	r1, #0
 800bd94:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2284      	movs	r2, #132	; 0x84
 800bd9a:	2100      	movs	r1, #0
 800bd9c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2280      	movs	r2, #128	; 0x80
 800bda2:	2122      	movs	r1, #34	; 0x22
 800bda4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bda6:	f3ef 8310 	mrs	r3, PRIMASK
 800bdaa:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800bdac:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb6:	f383 8810 	msr	PRIMASK, r3
}
 800bdba:	46c0      	nop			; (mov r8, r8)
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	689a      	ldr	r2, [r3, #8]
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	2101      	movs	r1, #1
 800bdc8:	430a      	orrs	r2, r1
 800bdca:	609a      	str	r2, [r3, #8]
 800bdcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdce:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bdd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd2:	f383 8810 	msr	PRIMASK, r3
}
 800bdd6:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	689a      	ldr	r2, [r3, #8]
 800bddc:	2380      	movs	r3, #128	; 0x80
 800bdde:	015b      	lsls	r3, r3, #5
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d107      	bne.n	800bdf4 <UART_Start_Receive_IT+0x108>
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	691b      	ldr	r3, [r3, #16]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d103      	bne.n	800bdf4 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	4a22      	ldr	r2, [pc, #136]	; (800be78 <UART_Start_Receive_IT+0x18c>)
 800bdf0:	669a      	str	r2, [r3, #104]	; 0x68
 800bdf2:	e002      	b.n	800bdfa <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	4a21      	ldr	r2, [pc, #132]	; (800be7c <UART_Start_Receive_IT+0x190>)
 800bdf8:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	691b      	ldr	r3, [r3, #16]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d019      	beq.n	800be36 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be02:	f3ef 8310 	mrs	r3, PRIMASK
 800be06:	61fb      	str	r3, [r7, #28]
  return(result);
 800be08:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800be0a:	637b      	str	r3, [r7, #52]	; 0x34
 800be0c:	2301      	movs	r3, #1
 800be0e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be10:	6a3b      	ldr	r3, [r7, #32]
 800be12:	f383 8810 	msr	PRIMASK, r3
}
 800be16:	46c0      	nop			; (mov r8, r8)
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	681a      	ldr	r2, [r3, #0]
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	2190      	movs	r1, #144	; 0x90
 800be24:	0049      	lsls	r1, r1, #1
 800be26:	430a      	orrs	r2, r1
 800be28:	601a      	str	r2, [r3, #0]
 800be2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be2c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be30:	f383 8810 	msr	PRIMASK, r3
}
 800be34:	e018      	b.n	800be68 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be36:	f3ef 8310 	mrs	r3, PRIMASK
 800be3a:	613b      	str	r3, [r7, #16]
  return(result);
 800be3c:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800be3e:	63bb      	str	r3, [r7, #56]	; 0x38
 800be40:	2301      	movs	r3, #1
 800be42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	f383 8810 	msr	PRIMASK, r3
}
 800be4a:	46c0      	nop			; (mov r8, r8)
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	681a      	ldr	r2, [r3, #0]
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	2120      	movs	r1, #32
 800be58:	430a      	orrs	r2, r1
 800be5a:	601a      	str	r2, [r3, #0]
 800be5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be5e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be60:	69bb      	ldr	r3, [r7, #24]
 800be62:	f383 8810 	msr	PRIMASK, r3
}
 800be66:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 800be68:	2300      	movs	r3, #0
}
 800be6a:	0018      	movs	r0, r3
 800be6c:	46bd      	mov	sp, r7
 800be6e:	b010      	add	sp, #64	; 0x40
 800be70:	bd80      	pop	{r7, pc}
 800be72:	46c0      	nop			; (mov r8, r8)
 800be74:	000001ff 	.word	0x000001ff
 800be78:	0800c2e1 	.word	0x0800c2e1
 800be7c:	0800c13d 	.word	0x0800c13d

0800be80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b08e      	sub	sp, #56	; 0x38
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be88:	f3ef 8310 	mrs	r3, PRIMASK
 800be8c:	617b      	str	r3, [r7, #20]
  return(result);
 800be8e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be90:	637b      	str	r3, [r7, #52]	; 0x34
 800be92:	2301      	movs	r3, #1
 800be94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	f383 8810 	msr	PRIMASK, r3
}
 800be9c:	46c0      	nop			; (mov r8, r8)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	681a      	ldr	r2, [r3, #0]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	4926      	ldr	r1, [pc, #152]	; (800bf44 <UART_EndRxTransfer+0xc4>)
 800beaa:	400a      	ands	r2, r1
 800beac:	601a      	str	r2, [r3, #0]
 800beae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800beb2:	69fb      	ldr	r3, [r7, #28]
 800beb4:	f383 8810 	msr	PRIMASK, r3
}
 800beb8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800beba:	f3ef 8310 	mrs	r3, PRIMASK
 800bebe:	623b      	str	r3, [r7, #32]
  return(result);
 800bec0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bec2:	633b      	str	r3, [r7, #48]	; 0x30
 800bec4:	2301      	movs	r3, #1
 800bec6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beca:	f383 8810 	msr	PRIMASK, r3
}
 800bece:	46c0      	nop			; (mov r8, r8)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	689a      	ldr	r2, [r3, #8]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	2101      	movs	r1, #1
 800bedc:	438a      	bics	r2, r1
 800bede:	609a      	str	r2, [r3, #8]
 800bee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee6:	f383 8810 	msr	PRIMASK, r3
}
 800beea:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	d118      	bne.n	800bf26 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bef4:	f3ef 8310 	mrs	r3, PRIMASK
 800bef8:	60bb      	str	r3, [r7, #8]
  return(result);
 800befa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800befc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800befe:	2301      	movs	r3, #1
 800bf00:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	f383 8810 	msr	PRIMASK, r3
}
 800bf08:	46c0      	nop			; (mov r8, r8)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	2110      	movs	r1, #16
 800bf16:	438a      	bics	r2, r1
 800bf18:	601a      	str	r2, [r3, #0]
 800bf1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	f383 8810 	msr	PRIMASK, r3
}
 800bf24:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2280      	movs	r2, #128	; 0x80
 800bf2a:	2120      	movs	r1, #32
 800bf2c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2200      	movs	r2, #0
 800bf32:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2200      	movs	r2, #0
 800bf38:	669a      	str	r2, [r3, #104]	; 0x68
}
 800bf3a:	46c0      	nop			; (mov r8, r8)
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	b00e      	add	sp, #56	; 0x38
 800bf40:	bd80      	pop	{r7, pc}
 800bf42:	46c0      	nop			; (mov r8, r8)
 800bf44:	fffffedf 	.word	0xfffffedf

0800bf48 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	225a      	movs	r2, #90	; 0x5a
 800bf5a:	2100      	movs	r1, #0
 800bf5c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2252      	movs	r2, #82	; 0x52
 800bf62:	2100      	movs	r1, #0
 800bf64:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	0018      	movs	r0, r3
 800bf6a:	f7ff fb5d 	bl	800b628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf6e:	46c0      	nop			; (mov r8, r8)
 800bf70:	46bd      	mov	sp, r7
 800bf72:	b004      	add	sp, #16
 800bf74:	bd80      	pop	{r7, pc}

0800bf76 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bf76:	b580      	push	{r7, lr}
 800bf78:	b08a      	sub	sp, #40	; 0x28
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf82:	2b21      	cmp	r3, #33	; 0x21
 800bf84:	d14d      	bne.n	800c022 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2252      	movs	r2, #82	; 0x52
 800bf8a:	5a9b      	ldrh	r3, [r3, r2]
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d132      	bne.n	800bff8 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf92:	f3ef 8310 	mrs	r3, PRIMASK
 800bf96:	60bb      	str	r3, [r7, #8]
  return(result);
 800bf98:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bf9a:	627b      	str	r3, [r7, #36]	; 0x24
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f383 8810 	msr	PRIMASK, r3
}
 800bfa6:	46c0      	nop			; (mov r8, r8)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	681a      	ldr	r2, [r3, #0]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	2180      	movs	r1, #128	; 0x80
 800bfb4:	438a      	bics	r2, r1
 800bfb6:	601a      	str	r2, [r3, #0]
 800bfb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	f383 8810 	msr	PRIMASK, r3
}
 800bfc2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bfc4:	f3ef 8310 	mrs	r3, PRIMASK
 800bfc8:	617b      	str	r3, [r7, #20]
  return(result);
 800bfca:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bfcc:	623b      	str	r3, [r7, #32]
 800bfce:	2301      	movs	r3, #1
 800bfd0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	f383 8810 	msr	PRIMASK, r3
}
 800bfd8:	46c0      	nop			; (mov r8, r8)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	681a      	ldr	r2, [r3, #0]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	2140      	movs	r1, #64	; 0x40
 800bfe6:	430a      	orrs	r2, r1
 800bfe8:	601a      	str	r2, [r3, #0]
 800bfea:	6a3b      	ldr	r3, [r7, #32]
 800bfec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfee:	69fb      	ldr	r3, [r7, #28]
 800bff0:	f383 8810 	msr	PRIMASK, r3
}
 800bff4:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800bff6:	e014      	b.n	800c022 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bffc:	781a      	ldrb	r2, [r3, #0]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	b292      	uxth	r2, r2
 800c004:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c00a:	1c5a      	adds	r2, r3, #1
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2252      	movs	r2, #82	; 0x52
 800c014:	5a9b      	ldrh	r3, [r3, r2]
 800c016:	b29b      	uxth	r3, r3
 800c018:	3b01      	subs	r3, #1
 800c01a:	b299      	uxth	r1, r3
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2252      	movs	r2, #82	; 0x52
 800c020:	5299      	strh	r1, [r3, r2]
}
 800c022:	46c0      	nop			; (mov r8, r8)
 800c024:	46bd      	mov	sp, r7
 800c026:	b00a      	add	sp, #40	; 0x28
 800c028:	bd80      	pop	{r7, pc}

0800c02a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c02a:	b580      	push	{r7, lr}
 800c02c:	b08c      	sub	sp, #48	; 0x30
 800c02e:	af00      	add	r7, sp, #0
 800c030:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c036:	2b21      	cmp	r3, #33	; 0x21
 800c038:	d151      	bne.n	800c0de <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2252      	movs	r2, #82	; 0x52
 800c03e:	5a9b      	ldrh	r3, [r3, r2]
 800c040:	b29b      	uxth	r3, r3
 800c042:	2b00      	cmp	r3, #0
 800c044:	d132      	bne.n	800c0ac <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c046:	f3ef 8310 	mrs	r3, PRIMASK
 800c04a:	60fb      	str	r3, [r7, #12]
  return(result);
 800c04c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c04e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c050:	2301      	movs	r3, #1
 800c052:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	f383 8810 	msr	PRIMASK, r3
}
 800c05a:	46c0      	nop			; (mov r8, r8)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	681a      	ldr	r2, [r3, #0]
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	2180      	movs	r1, #128	; 0x80
 800c068:	438a      	bics	r2, r1
 800c06a:	601a      	str	r2, [r3, #0]
 800c06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c06e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	f383 8810 	msr	PRIMASK, r3
}
 800c076:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c078:	f3ef 8310 	mrs	r3, PRIMASK
 800c07c:	61bb      	str	r3, [r7, #24]
  return(result);
 800c07e:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c080:	627b      	str	r3, [r7, #36]	; 0x24
 800c082:	2301      	movs	r3, #1
 800c084:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c086:	69fb      	ldr	r3, [r7, #28]
 800c088:	f383 8810 	msr	PRIMASK, r3
}
 800c08c:	46c0      	nop			; (mov r8, r8)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	681a      	ldr	r2, [r3, #0]
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	2140      	movs	r1, #64	; 0x40
 800c09a:	430a      	orrs	r2, r1
 800c09c:	601a      	str	r2, [r3, #0]
 800c09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0a2:	6a3b      	ldr	r3, [r7, #32]
 800c0a4:	f383 8810 	msr	PRIMASK, r3
}
 800c0a8:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c0aa:	e018      	b.n	800c0de <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b4:	881a      	ldrh	r2, [r3, #0]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	05d2      	lsls	r2, r2, #23
 800c0bc:	0dd2      	lsrs	r2, r2, #23
 800c0be:	b292      	uxth	r2, r2
 800c0c0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0c6:	1c9a      	adds	r2, r3, #2
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2252      	movs	r2, #82	; 0x52
 800c0d0:	5a9b      	ldrh	r3, [r3, r2]
 800c0d2:	b29b      	uxth	r3, r3
 800c0d4:	3b01      	subs	r3, #1
 800c0d6:	b299      	uxth	r1, r3
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2252      	movs	r2, #82	; 0x52
 800c0dc:	5299      	strh	r1, [r3, r2]
}
 800c0de:	46c0      	nop			; (mov r8, r8)
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	b00c      	add	sp, #48	; 0x30
 800c0e4:	bd80      	pop	{r7, pc}

0800c0e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c0e6:	b580      	push	{r7, lr}
 800c0e8:	b086      	sub	sp, #24
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c0ee:	f3ef 8310 	mrs	r3, PRIMASK
 800c0f2:	60bb      	str	r3, [r7, #8]
  return(result);
 800c0f4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c0f6:	617b      	str	r3, [r7, #20]
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f383 8810 	msr	PRIMASK, r3
}
 800c102:	46c0      	nop			; (mov r8, r8)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	681a      	ldr	r2, [r3, #0]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	2140      	movs	r1, #64	; 0x40
 800c110:	438a      	bics	r2, r1
 800c112:	601a      	str	r2, [r3, #0]
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	f383 8810 	msr	PRIMASK, r3
}
 800c11e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2220      	movs	r2, #32
 800c124:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2200      	movs	r2, #0
 800c12a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	0018      	movs	r0, r3
 800c130:	f7ff fa6a 	bl	800b608 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c134:	46c0      	nop			; (mov r8, r8)
 800c136:	46bd      	mov	sp, r7
 800c138:	b006      	add	sp, #24
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c13c:	b590      	push	{r4, r7, lr}
 800c13e:	b095      	sub	sp, #84	; 0x54
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c144:	244e      	movs	r4, #78	; 0x4e
 800c146:	193b      	adds	r3, r7, r4
 800c148:	687a      	ldr	r2, [r7, #4]
 800c14a:	215c      	movs	r1, #92	; 0x5c
 800c14c:	5a52      	ldrh	r2, [r2, r1]
 800c14e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2280      	movs	r2, #128	; 0x80
 800c154:	589b      	ldr	r3, [r3, r2]
 800c156:	2b22      	cmp	r3, #34	; 0x22
 800c158:	d000      	beq.n	800c15c <UART_RxISR_8BIT+0x20>
 800c15a:	e0b1      	b.n	800c2c0 <UART_RxISR_8BIT+0x184>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681a      	ldr	r2, [r3, #0]
 800c160:	204c      	movs	r0, #76	; 0x4c
 800c162:	183b      	adds	r3, r7, r0
 800c164:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800c166:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c168:	183b      	adds	r3, r7, r0
 800c16a:	881b      	ldrh	r3, [r3, #0]
 800c16c:	b2da      	uxtb	r2, r3
 800c16e:	193b      	adds	r3, r7, r4
 800c170:	881b      	ldrh	r3, [r3, #0]
 800c172:	b2d9      	uxtb	r1, r3
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c178:	400a      	ands	r2, r1
 800c17a:	b2d2      	uxtb	r2, r2
 800c17c:	701a      	strb	r2, [r3, #0]
    GSM_Receive(uhdata);
 800c17e:	183b      	adds	r3, r7, r0
 800c180:	881b      	ldrh	r3, [r3, #0]
 800c182:	0018      	movs	r0, r3
 800c184:	f7f8 f9a4 	bl	80044d0 <GSM_Receive>

    if (huart->RxXferCount == 0U)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	225a      	movs	r2, #90	; 0x5a
 800c18c:	5a9b      	ldrh	r3, [r3, r2]
 800c18e:	b29b      	uxth	r3, r3
 800c190:	2b00      	cmp	r3, #0
 800c192:	d000      	beq.n	800c196 <UART_RxISR_8BIT+0x5a>
 800c194:	e09c      	b.n	800c2d0 <UART_RxISR_8BIT+0x194>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c196:	f3ef 8310 	mrs	r3, PRIMASK
 800c19a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800c19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c19e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a6:	f383 8810 	msr	PRIMASK, r3
}
 800c1aa:	46c0      	nop			; (mov r8, r8)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	681a      	ldr	r2, [r3, #0]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4948      	ldr	r1, [pc, #288]	; (800c2d8 <UART_RxISR_8BIT+0x19c>)
 800c1b8:	400a      	ands	r2, r1
 800c1ba:	601a      	str	r2, [r3, #0]
 800c1bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1be:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c2:	f383 8810 	msr	PRIMASK, r3
}
 800c1c6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c1c8:	f3ef 8310 	mrs	r3, PRIMASK
 800c1cc:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800c1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1d0:	647b      	str	r3, [r7, #68]	; 0x44
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1d8:	f383 8810 	msr	PRIMASK, r3
}
 800c1dc:	46c0      	nop			; (mov r8, r8)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	689a      	ldr	r2, [r3, #8]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	2101      	movs	r1, #1
 800c1ea:	438a      	bics	r2, r1
 800c1ec:	609a      	str	r2, [r3, #8]
 800c1ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1f0:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f4:	f383 8810 	msr	PRIMASK, r3
}
 800c1f8:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2280      	movs	r2, #128	; 0x80
 800c1fe:	2120      	movs	r1, #32
 800c200:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2200      	movs	r2, #0
 800c206:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2200      	movs	r2, #0
 800c20c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	685a      	ldr	r2, [r3, #4]
 800c214:	2380      	movs	r3, #128	; 0x80
 800c216:	041b      	lsls	r3, r3, #16
 800c218:	4013      	ands	r3, r2
 800c21a:	d018      	beq.n	800c24e <UART_RxISR_8BIT+0x112>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c21c:	f3ef 8310 	mrs	r3, PRIMASK
 800c220:	61bb      	str	r3, [r7, #24]
  return(result);
 800c222:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c224:	643b      	str	r3, [r7, #64]	; 0x40
 800c226:	2301      	movs	r3, #1
 800c228:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c22a:	69fb      	ldr	r3, [r7, #28]
 800c22c:	f383 8810 	msr	PRIMASK, r3
}
 800c230:	46c0      	nop			; (mov r8, r8)
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	681a      	ldr	r2, [r3, #0]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4927      	ldr	r1, [pc, #156]	; (800c2dc <UART_RxISR_8BIT+0x1a0>)
 800c23e:	400a      	ands	r2, r1
 800c240:	601a      	str	r2, [r3, #0]
 800c242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c244:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c246:	6a3b      	ldr	r3, [r7, #32]
 800c248:	f383 8810 	msr	PRIMASK, r3
}
 800c24c:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c252:	2b01      	cmp	r3, #1
 800c254:	d12f      	bne.n	800c2b6 <UART_RxISR_8BIT+0x17a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2200      	movs	r2, #0
 800c25a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c25c:	f3ef 8310 	mrs	r3, PRIMASK
 800c260:	60fb      	str	r3, [r7, #12]
  return(result);
 800c262:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c264:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c266:	2301      	movs	r3, #1
 800c268:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	f383 8810 	msr	PRIMASK, r3
}
 800c270:	46c0      	nop			; (mov r8, r8)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	681a      	ldr	r2, [r3, #0]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	2110      	movs	r1, #16
 800c27e:	438a      	bics	r2, r1
 800c280:	601a      	str	r2, [r3, #0]
 800c282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c284:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	f383 8810 	msr	PRIMASK, r3
}
 800c28c:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	69db      	ldr	r3, [r3, #28]
 800c294:	2210      	movs	r2, #16
 800c296:	4013      	ands	r3, r2
 800c298:	2b10      	cmp	r3, #16
 800c29a:	d103      	bne.n	800c2a4 <UART_RxISR_8BIT+0x168>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	2210      	movs	r2, #16
 800c2a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2258      	movs	r2, #88	; 0x58
 800c2a8:	5a9a      	ldrh	r2, [r3, r2]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	0011      	movs	r1, r2
 800c2ae:	0018      	movs	r0, r3
 800c2b0:	f7ff f9c2 	bl	800b638 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c2b4:	e00c      	b.n	800c2d0 <UART_RxISR_8BIT+0x194>
        HAL_UART_RxCpltCallback(huart);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	0018      	movs	r0, r3
 800c2ba:	f7ff f9ad 	bl	800b618 <HAL_UART_RxCpltCallback>
}
 800c2be:	e007      	b.n	800c2d0 <UART_RxISR_8BIT+0x194>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	699a      	ldr	r2, [r3, #24]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	2108      	movs	r1, #8
 800c2cc:	430a      	orrs	r2, r1
 800c2ce:	619a      	str	r2, [r3, #24]
}
 800c2d0:	46c0      	nop			; (mov r8, r8)
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	b015      	add	sp, #84	; 0x54
 800c2d6:	bd90      	pop	{r4, r7, pc}
 800c2d8:	fffffedf 	.word	0xfffffedf
 800c2dc:	fbffffff 	.word	0xfbffffff

0800c2e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b094      	sub	sp, #80	; 0x50
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c2e8:	204e      	movs	r0, #78	; 0x4e
 800c2ea:	183b      	adds	r3, r7, r0
 800c2ec:	687a      	ldr	r2, [r7, #4]
 800c2ee:	215c      	movs	r1, #92	; 0x5c
 800c2f0:	5a52      	ldrh	r2, [r2, r1]
 800c2f2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2280      	movs	r2, #128	; 0x80
 800c2f8:	589b      	ldr	r3, [r3, r2]
 800c2fa:	2b22      	cmp	r3, #34	; 0x22
 800c2fc:	d000      	beq.n	800c300 <UART_RxISR_16BIT+0x20>
 800c2fe:	e0ba      	b.n	800c476 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	214c      	movs	r1, #76	; 0x4c
 800c306:	187b      	adds	r3, r7, r1
 800c308:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800c30a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c310:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800c312:	187b      	adds	r3, r7, r1
 800c314:	183a      	adds	r2, r7, r0
 800c316:	881b      	ldrh	r3, [r3, #0]
 800c318:	8812      	ldrh	r2, [r2, #0]
 800c31a:	4013      	ands	r3, r2
 800c31c:	b29a      	uxth	r2, r3
 800c31e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c320:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c326:	1c9a      	adds	r2, r3, #2
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	225a      	movs	r2, #90	; 0x5a
 800c330:	5a9b      	ldrh	r3, [r3, r2]
 800c332:	b29b      	uxth	r3, r3
 800c334:	3b01      	subs	r3, #1
 800c336:	b299      	uxth	r1, r3
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	225a      	movs	r2, #90	; 0x5a
 800c33c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	225a      	movs	r2, #90	; 0x5a
 800c342:	5a9b      	ldrh	r3, [r3, r2]
 800c344:	b29b      	uxth	r3, r3
 800c346:	2b00      	cmp	r3, #0
 800c348:	d000      	beq.n	800c34c <UART_RxISR_16BIT+0x6c>
 800c34a:	e09c      	b.n	800c486 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c34c:	f3ef 8310 	mrs	r3, PRIMASK
 800c350:	623b      	str	r3, [r7, #32]
  return(result);
 800c352:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c354:	647b      	str	r3, [r7, #68]	; 0x44
 800c356:	2301      	movs	r3, #1
 800c358:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35c:	f383 8810 	msr	PRIMASK, r3
}
 800c360:	46c0      	nop			; (mov r8, r8)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	681a      	ldr	r2, [r3, #0]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	4948      	ldr	r1, [pc, #288]	; (800c490 <UART_RxISR_16BIT+0x1b0>)
 800c36e:	400a      	ands	r2, r1
 800c370:	601a      	str	r2, [r3, #0]
 800c372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c374:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c378:	f383 8810 	msr	PRIMASK, r3
}
 800c37c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c37e:	f3ef 8310 	mrs	r3, PRIMASK
 800c382:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800c384:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c386:	643b      	str	r3, [r7, #64]	; 0x40
 800c388:	2301      	movs	r3, #1
 800c38a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c38e:	f383 8810 	msr	PRIMASK, r3
}
 800c392:	46c0      	nop			; (mov r8, r8)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	689a      	ldr	r2, [r3, #8]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	2101      	movs	r1, #1
 800c3a0:	438a      	bics	r2, r1
 800c3a2:	609a      	str	r2, [r3, #8]
 800c3a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3a6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3aa:	f383 8810 	msr	PRIMASK, r3
}
 800c3ae:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2280      	movs	r2, #128	; 0x80
 800c3b4:	2120      	movs	r1, #32
 800c3b6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	685a      	ldr	r2, [r3, #4]
 800c3ca:	2380      	movs	r3, #128	; 0x80
 800c3cc:	041b      	lsls	r3, r3, #16
 800c3ce:	4013      	ands	r3, r2
 800c3d0:	d018      	beq.n	800c404 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c3d2:	f3ef 8310 	mrs	r3, PRIMASK
 800c3d6:	617b      	str	r3, [r7, #20]
  return(result);
 800c3d8:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c3da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3dc:	2301      	movs	r3, #1
 800c3de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3e0:	69bb      	ldr	r3, [r7, #24]
 800c3e2:	f383 8810 	msr	PRIMASK, r3
}
 800c3e6:	46c0      	nop			; (mov r8, r8)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	681a      	ldr	r2, [r3, #0]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4928      	ldr	r1, [pc, #160]	; (800c494 <UART_RxISR_16BIT+0x1b4>)
 800c3f4:	400a      	ands	r2, r1
 800c3f6:	601a      	str	r2, [r3, #0]
 800c3f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3fc:	69fb      	ldr	r3, [r7, #28]
 800c3fe:	f383 8810 	msr	PRIMASK, r3
}
 800c402:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c408:	2b01      	cmp	r3, #1
 800c40a:	d12f      	bne.n	800c46c <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2200      	movs	r2, #0
 800c410:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c412:	f3ef 8310 	mrs	r3, PRIMASK
 800c416:	60bb      	str	r3, [r7, #8]
  return(result);
 800c418:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c41a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c41c:	2301      	movs	r3, #1
 800c41e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f383 8810 	msr	PRIMASK, r3
}
 800c426:	46c0      	nop			; (mov r8, r8)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	681a      	ldr	r2, [r3, #0]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	2110      	movs	r1, #16
 800c434:	438a      	bics	r2, r1
 800c436:	601a      	str	r2, [r3, #0]
 800c438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c43a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	f383 8810 	msr	PRIMASK, r3
}
 800c442:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	69db      	ldr	r3, [r3, #28]
 800c44a:	2210      	movs	r2, #16
 800c44c:	4013      	ands	r3, r2
 800c44e:	2b10      	cmp	r3, #16
 800c450:	d103      	bne.n	800c45a <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	2210      	movs	r2, #16
 800c458:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2258      	movs	r2, #88	; 0x58
 800c45e:	5a9a      	ldrh	r2, [r3, r2]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	0011      	movs	r1, r2
 800c464:	0018      	movs	r0, r3
 800c466:	f7ff f8e7 	bl	800b638 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c46a:	e00c      	b.n	800c486 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	0018      	movs	r0, r3
 800c470:	f7ff f8d2 	bl	800b618 <HAL_UART_RxCpltCallback>
}
 800c474:	e007      	b.n	800c486 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	699a      	ldr	r2, [r3, #24]
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	2108      	movs	r1, #8
 800c482:	430a      	orrs	r2, r1
 800c484:	619a      	str	r2, [r3, #24]
}
 800c486:	46c0      	nop			; (mov r8, r8)
 800c488:	46bd      	mov	sp, r7
 800c48a:	b014      	add	sp, #80	; 0x50
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	46c0      	nop			; (mov r8, r8)
 800c490:	fffffedf 	.word	0xfffffedf
 800c494:	fbffffff 	.word	0xfbffffff

0800c498 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b082      	sub	sp, #8
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c4a0:	46c0      	nop			; (mov r8, r8)
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	b002      	add	sp, #8
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <atoi>:
 800c4a8:	b510      	push	{r4, lr}
 800c4aa:	220a      	movs	r2, #10
 800c4ac:	2100      	movs	r1, #0
 800c4ae:	f000 f939 	bl	800c724 <strtol>
 800c4b2:	bd10      	pop	{r4, pc}

0800c4b4 <gcvt>:
 800c4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4b6:	001c      	movs	r4, r3
 800c4b8:	0015      	movs	r5, r2
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	2200      	movs	r2, #0
 800c4be:	b085      	sub	sp, #20
 800c4c0:	0006      	movs	r6, r0
 800c4c2:	000f      	movs	r7, r1
 800c4c4:	f7f3 ffd2 	bl	800046c <__aeabi_dcmplt>
 800c4c8:	0023      	movs	r3, r4
 800c4ca:	2800      	cmp	r0, #0
 800c4cc:	d003      	beq.n	800c4d6 <gcvt+0x22>
 800c4ce:	232d      	movs	r3, #45	; 0x2d
 800c4d0:	3d01      	subs	r5, #1
 800c4d2:	7023      	strb	r3, [r4, #0]
 800c4d4:	1c63      	adds	r3, r4, #1
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	4908      	ldr	r1, [pc, #32]	; (800c4fc <gcvt+0x48>)
 800c4da:	9203      	str	r2, [sp, #12]
 800c4dc:	3267      	adds	r2, #103	; 0x67
 800c4de:	9202      	str	r2, [sp, #8]
 800c4e0:	9301      	str	r3, [sp, #4]
 800c4e2:	9500      	str	r5, [sp, #0]
 800c4e4:	003b      	movs	r3, r7
 800c4e6:	0032      	movs	r2, r6
 800c4e8:	6808      	ldr	r0, [r1, #0]
 800c4ea:	f000 f9a9 	bl	800c840 <_gcvt>
 800c4ee:	1e43      	subs	r3, r0, #1
 800c4f0:	4198      	sbcs	r0, r3
 800c4f2:	4240      	negs	r0, r0
 800c4f4:	4004      	ands	r4, r0
 800c4f6:	0020      	movs	r0, r4
 800c4f8:	b005      	add	sp, #20
 800c4fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4fc:	2000001c 	.word	0x2000001c

0800c500 <__errno>:
 800c500:	4b01      	ldr	r3, [pc, #4]	; (800c508 <__errno+0x8>)
 800c502:	6818      	ldr	r0, [r3, #0]
 800c504:	4770      	bx	lr
 800c506:	46c0      	nop			; (mov r8, r8)
 800c508:	2000001c 	.word	0x2000001c

0800c50c <__libc_init_array>:
 800c50c:	b570      	push	{r4, r5, r6, lr}
 800c50e:	2600      	movs	r6, #0
 800c510:	4d0c      	ldr	r5, [pc, #48]	; (800c544 <__libc_init_array+0x38>)
 800c512:	4c0d      	ldr	r4, [pc, #52]	; (800c548 <__libc_init_array+0x3c>)
 800c514:	1b64      	subs	r4, r4, r5
 800c516:	10a4      	asrs	r4, r4, #2
 800c518:	42a6      	cmp	r6, r4
 800c51a:	d109      	bne.n	800c530 <__libc_init_array+0x24>
 800c51c:	2600      	movs	r6, #0
 800c51e:	f002 fedb 	bl	800f2d8 <_init>
 800c522:	4d0a      	ldr	r5, [pc, #40]	; (800c54c <__libc_init_array+0x40>)
 800c524:	4c0a      	ldr	r4, [pc, #40]	; (800c550 <__libc_init_array+0x44>)
 800c526:	1b64      	subs	r4, r4, r5
 800c528:	10a4      	asrs	r4, r4, #2
 800c52a:	42a6      	cmp	r6, r4
 800c52c:	d105      	bne.n	800c53a <__libc_init_array+0x2e>
 800c52e:	bd70      	pop	{r4, r5, r6, pc}
 800c530:	00b3      	lsls	r3, r6, #2
 800c532:	58eb      	ldr	r3, [r5, r3]
 800c534:	4798      	blx	r3
 800c536:	3601      	adds	r6, #1
 800c538:	e7ee      	b.n	800c518 <__libc_init_array+0xc>
 800c53a:	00b3      	lsls	r3, r6, #2
 800c53c:	58eb      	ldr	r3, [r5, r3]
 800c53e:	4798      	blx	r3
 800c540:	3601      	adds	r6, #1
 800c542:	e7f2      	b.n	800c52a <__libc_init_array+0x1e>
 800c544:	08010db8 	.word	0x08010db8
 800c548:	08010db8 	.word	0x08010db8
 800c54c:	08010db8 	.word	0x08010db8
 800c550:	08010dbc 	.word	0x08010dbc

0800c554 <memcpy>:
 800c554:	2300      	movs	r3, #0
 800c556:	b510      	push	{r4, lr}
 800c558:	429a      	cmp	r2, r3
 800c55a:	d100      	bne.n	800c55e <memcpy+0xa>
 800c55c:	bd10      	pop	{r4, pc}
 800c55e:	5ccc      	ldrb	r4, [r1, r3]
 800c560:	54c4      	strb	r4, [r0, r3]
 800c562:	3301      	adds	r3, #1
 800c564:	e7f8      	b.n	800c558 <memcpy+0x4>

0800c566 <memset>:
 800c566:	0003      	movs	r3, r0
 800c568:	1882      	adds	r2, r0, r2
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d100      	bne.n	800c570 <memset+0xa>
 800c56e:	4770      	bx	lr
 800c570:	7019      	strb	r1, [r3, #0]
 800c572:	3301      	adds	r3, #1
 800c574:	e7f9      	b.n	800c56a <memset+0x4>
	...

0800c578 <siprintf>:
 800c578:	b40e      	push	{r1, r2, r3}
 800c57a:	b500      	push	{lr}
 800c57c:	490b      	ldr	r1, [pc, #44]	; (800c5ac <siprintf+0x34>)
 800c57e:	b09c      	sub	sp, #112	; 0x70
 800c580:	ab1d      	add	r3, sp, #116	; 0x74
 800c582:	9002      	str	r0, [sp, #8]
 800c584:	9006      	str	r0, [sp, #24]
 800c586:	9107      	str	r1, [sp, #28]
 800c588:	9104      	str	r1, [sp, #16]
 800c58a:	4809      	ldr	r0, [pc, #36]	; (800c5b0 <siprintf+0x38>)
 800c58c:	4909      	ldr	r1, [pc, #36]	; (800c5b4 <siprintf+0x3c>)
 800c58e:	cb04      	ldmia	r3!, {r2}
 800c590:	9105      	str	r1, [sp, #20]
 800c592:	6800      	ldr	r0, [r0, #0]
 800c594:	a902      	add	r1, sp, #8
 800c596:	9301      	str	r3, [sp, #4]
 800c598:	f000 ff2e 	bl	800d3f8 <_svfiprintf_r>
 800c59c:	2300      	movs	r3, #0
 800c59e:	9a02      	ldr	r2, [sp, #8]
 800c5a0:	7013      	strb	r3, [r2, #0]
 800c5a2:	b01c      	add	sp, #112	; 0x70
 800c5a4:	bc08      	pop	{r3}
 800c5a6:	b003      	add	sp, #12
 800c5a8:	4718      	bx	r3
 800c5aa:	46c0      	nop			; (mov r8, r8)
 800c5ac:	7fffffff 	.word	0x7fffffff
 800c5b0:	2000001c 	.word	0x2000001c
 800c5b4:	ffff0208 	.word	0xffff0208

0800c5b8 <strcat>:
 800c5b8:	0002      	movs	r2, r0
 800c5ba:	b510      	push	{r4, lr}
 800c5bc:	7813      	ldrb	r3, [r2, #0]
 800c5be:	0014      	movs	r4, r2
 800c5c0:	3201      	adds	r2, #1
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d1fa      	bne.n	800c5bc <strcat+0x4>
 800c5c6:	5cca      	ldrb	r2, [r1, r3]
 800c5c8:	54e2      	strb	r2, [r4, r3]
 800c5ca:	3301      	adds	r3, #1
 800c5cc:	2a00      	cmp	r2, #0
 800c5ce:	d1fa      	bne.n	800c5c6 <strcat+0xe>
 800c5d0:	bd10      	pop	{r4, pc}

0800c5d2 <strcpy>:
 800c5d2:	0003      	movs	r3, r0
 800c5d4:	780a      	ldrb	r2, [r1, #0]
 800c5d6:	3101      	adds	r1, #1
 800c5d8:	701a      	strb	r2, [r3, #0]
 800c5da:	3301      	adds	r3, #1
 800c5dc:	2a00      	cmp	r2, #0
 800c5de:	d1f9      	bne.n	800c5d4 <strcpy+0x2>
 800c5e0:	4770      	bx	lr

0800c5e2 <strncmp>:
 800c5e2:	b530      	push	{r4, r5, lr}
 800c5e4:	0005      	movs	r5, r0
 800c5e6:	1e10      	subs	r0, r2, #0
 800c5e8:	d008      	beq.n	800c5fc <strncmp+0x1a>
 800c5ea:	2400      	movs	r4, #0
 800c5ec:	3a01      	subs	r2, #1
 800c5ee:	5d2b      	ldrb	r3, [r5, r4]
 800c5f0:	5d08      	ldrb	r0, [r1, r4]
 800c5f2:	4283      	cmp	r3, r0
 800c5f4:	d101      	bne.n	800c5fa <strncmp+0x18>
 800c5f6:	4294      	cmp	r4, r2
 800c5f8:	d101      	bne.n	800c5fe <strncmp+0x1c>
 800c5fa:	1a18      	subs	r0, r3, r0
 800c5fc:	bd30      	pop	{r4, r5, pc}
 800c5fe:	3401      	adds	r4, #1
 800c600:	2b00      	cmp	r3, #0
 800c602:	d1f4      	bne.n	800c5ee <strncmp+0xc>
 800c604:	e7f9      	b.n	800c5fa <strncmp+0x18>
	...

0800c608 <_strtol_l.constprop.0>:
 800c608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c60a:	b087      	sub	sp, #28
 800c60c:	001e      	movs	r6, r3
 800c60e:	9005      	str	r0, [sp, #20]
 800c610:	9101      	str	r1, [sp, #4]
 800c612:	9202      	str	r2, [sp, #8]
 800c614:	2b01      	cmp	r3, #1
 800c616:	d045      	beq.n	800c6a4 <_strtol_l.constprop.0+0x9c>
 800c618:	000b      	movs	r3, r1
 800c61a:	2e24      	cmp	r6, #36	; 0x24
 800c61c:	d842      	bhi.n	800c6a4 <_strtol_l.constprop.0+0x9c>
 800c61e:	4a3f      	ldr	r2, [pc, #252]	; (800c71c <_strtol_l.constprop.0+0x114>)
 800c620:	2108      	movs	r1, #8
 800c622:	4694      	mov	ip, r2
 800c624:	001a      	movs	r2, r3
 800c626:	4660      	mov	r0, ip
 800c628:	7814      	ldrb	r4, [r2, #0]
 800c62a:	3301      	adds	r3, #1
 800c62c:	5d00      	ldrb	r0, [r0, r4]
 800c62e:	001d      	movs	r5, r3
 800c630:	0007      	movs	r7, r0
 800c632:	400f      	ands	r7, r1
 800c634:	4208      	tst	r0, r1
 800c636:	d1f5      	bne.n	800c624 <_strtol_l.constprop.0+0x1c>
 800c638:	2c2d      	cmp	r4, #45	; 0x2d
 800c63a:	d13a      	bne.n	800c6b2 <_strtol_l.constprop.0+0xaa>
 800c63c:	2701      	movs	r7, #1
 800c63e:	781c      	ldrb	r4, [r3, #0]
 800c640:	1c95      	adds	r5, r2, #2
 800c642:	2e00      	cmp	r6, #0
 800c644:	d065      	beq.n	800c712 <_strtol_l.constprop.0+0x10a>
 800c646:	2e10      	cmp	r6, #16
 800c648:	d109      	bne.n	800c65e <_strtol_l.constprop.0+0x56>
 800c64a:	2c30      	cmp	r4, #48	; 0x30
 800c64c:	d107      	bne.n	800c65e <_strtol_l.constprop.0+0x56>
 800c64e:	2220      	movs	r2, #32
 800c650:	782b      	ldrb	r3, [r5, #0]
 800c652:	4393      	bics	r3, r2
 800c654:	2b58      	cmp	r3, #88	; 0x58
 800c656:	d157      	bne.n	800c708 <_strtol_l.constprop.0+0x100>
 800c658:	2610      	movs	r6, #16
 800c65a:	786c      	ldrb	r4, [r5, #1]
 800c65c:	3502      	adds	r5, #2
 800c65e:	4b30      	ldr	r3, [pc, #192]	; (800c720 <_strtol_l.constprop.0+0x118>)
 800c660:	0031      	movs	r1, r6
 800c662:	18fb      	adds	r3, r7, r3
 800c664:	0018      	movs	r0, r3
 800c666:	9303      	str	r3, [sp, #12]
 800c668:	f7f3 fdfa 	bl	8000260 <__aeabi_uidivmod>
 800c66c:	2300      	movs	r3, #0
 800c66e:	2201      	movs	r2, #1
 800c670:	4684      	mov	ip, r0
 800c672:	0018      	movs	r0, r3
 800c674:	9104      	str	r1, [sp, #16]
 800c676:	4252      	negs	r2, r2
 800c678:	0021      	movs	r1, r4
 800c67a:	3930      	subs	r1, #48	; 0x30
 800c67c:	2909      	cmp	r1, #9
 800c67e:	d81d      	bhi.n	800c6bc <_strtol_l.constprop.0+0xb4>
 800c680:	000c      	movs	r4, r1
 800c682:	42a6      	cmp	r6, r4
 800c684:	dd28      	ble.n	800c6d8 <_strtol_l.constprop.0+0xd0>
 800c686:	2b00      	cmp	r3, #0
 800c688:	db24      	blt.n	800c6d4 <_strtol_l.constprop.0+0xcc>
 800c68a:	0013      	movs	r3, r2
 800c68c:	4584      	cmp	ip, r0
 800c68e:	d306      	bcc.n	800c69e <_strtol_l.constprop.0+0x96>
 800c690:	d102      	bne.n	800c698 <_strtol_l.constprop.0+0x90>
 800c692:	9904      	ldr	r1, [sp, #16]
 800c694:	42a1      	cmp	r1, r4
 800c696:	db02      	blt.n	800c69e <_strtol_l.constprop.0+0x96>
 800c698:	2301      	movs	r3, #1
 800c69a:	4370      	muls	r0, r6
 800c69c:	1820      	adds	r0, r4, r0
 800c69e:	782c      	ldrb	r4, [r5, #0]
 800c6a0:	3501      	adds	r5, #1
 800c6a2:	e7e9      	b.n	800c678 <_strtol_l.constprop.0+0x70>
 800c6a4:	f7ff ff2c 	bl	800c500 <__errno>
 800c6a8:	2316      	movs	r3, #22
 800c6aa:	6003      	str	r3, [r0, #0]
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	b007      	add	sp, #28
 800c6b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6b2:	2c2b      	cmp	r4, #43	; 0x2b
 800c6b4:	d1c5      	bne.n	800c642 <_strtol_l.constprop.0+0x3a>
 800c6b6:	781c      	ldrb	r4, [r3, #0]
 800c6b8:	1c95      	adds	r5, r2, #2
 800c6ba:	e7c2      	b.n	800c642 <_strtol_l.constprop.0+0x3a>
 800c6bc:	0021      	movs	r1, r4
 800c6be:	3941      	subs	r1, #65	; 0x41
 800c6c0:	2919      	cmp	r1, #25
 800c6c2:	d801      	bhi.n	800c6c8 <_strtol_l.constprop.0+0xc0>
 800c6c4:	3c37      	subs	r4, #55	; 0x37
 800c6c6:	e7dc      	b.n	800c682 <_strtol_l.constprop.0+0x7a>
 800c6c8:	0021      	movs	r1, r4
 800c6ca:	3961      	subs	r1, #97	; 0x61
 800c6cc:	2919      	cmp	r1, #25
 800c6ce:	d803      	bhi.n	800c6d8 <_strtol_l.constprop.0+0xd0>
 800c6d0:	3c57      	subs	r4, #87	; 0x57
 800c6d2:	e7d6      	b.n	800c682 <_strtol_l.constprop.0+0x7a>
 800c6d4:	0013      	movs	r3, r2
 800c6d6:	e7e2      	b.n	800c69e <_strtol_l.constprop.0+0x96>
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	da09      	bge.n	800c6f0 <_strtol_l.constprop.0+0xe8>
 800c6dc:	2322      	movs	r3, #34	; 0x22
 800c6de:	9a05      	ldr	r2, [sp, #20]
 800c6e0:	9803      	ldr	r0, [sp, #12]
 800c6e2:	6013      	str	r3, [r2, #0]
 800c6e4:	9b02      	ldr	r3, [sp, #8]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d0e1      	beq.n	800c6ae <_strtol_l.constprop.0+0xa6>
 800c6ea:	1e6b      	subs	r3, r5, #1
 800c6ec:	9301      	str	r3, [sp, #4]
 800c6ee:	e007      	b.n	800c700 <_strtol_l.constprop.0+0xf8>
 800c6f0:	2f00      	cmp	r7, #0
 800c6f2:	d000      	beq.n	800c6f6 <_strtol_l.constprop.0+0xee>
 800c6f4:	4240      	negs	r0, r0
 800c6f6:	9a02      	ldr	r2, [sp, #8]
 800c6f8:	2a00      	cmp	r2, #0
 800c6fa:	d0d8      	beq.n	800c6ae <_strtol_l.constprop.0+0xa6>
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d1f4      	bne.n	800c6ea <_strtol_l.constprop.0+0xe2>
 800c700:	9b02      	ldr	r3, [sp, #8]
 800c702:	9a01      	ldr	r2, [sp, #4]
 800c704:	601a      	str	r2, [r3, #0]
 800c706:	e7d2      	b.n	800c6ae <_strtol_l.constprop.0+0xa6>
 800c708:	2430      	movs	r4, #48	; 0x30
 800c70a:	2e00      	cmp	r6, #0
 800c70c:	d1a7      	bne.n	800c65e <_strtol_l.constprop.0+0x56>
 800c70e:	3608      	adds	r6, #8
 800c710:	e7a5      	b.n	800c65e <_strtol_l.constprop.0+0x56>
 800c712:	2c30      	cmp	r4, #48	; 0x30
 800c714:	d09b      	beq.n	800c64e <_strtol_l.constprop.0+0x46>
 800c716:	260a      	movs	r6, #10
 800c718:	e7a1      	b.n	800c65e <_strtol_l.constprop.0+0x56>
 800c71a:	46c0      	nop			; (mov r8, r8)
 800c71c:	080109f5 	.word	0x080109f5
 800c720:	7fffffff 	.word	0x7fffffff

0800c724 <strtol>:
 800c724:	b510      	push	{r4, lr}
 800c726:	0013      	movs	r3, r2
 800c728:	000a      	movs	r2, r1
 800c72a:	0001      	movs	r1, r0
 800c72c:	4802      	ldr	r0, [pc, #8]	; (800c738 <strtol+0x14>)
 800c72e:	6800      	ldr	r0, [r0, #0]
 800c730:	f7ff ff6a 	bl	800c608 <_strtol_l.constprop.0>
 800c734:	bd10      	pop	{r4, pc}
 800c736:	46c0      	nop			; (mov r8, r8)
 800c738:	2000001c 	.word	0x2000001c

0800c73c <print_e>:
 800c73c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c73e:	b08b      	sub	sp, #44	; 0x2c
 800c740:	000f      	movs	r7, r1
 800c742:	a910      	add	r1, sp, #64	; 0x40
 800c744:	c920      	ldmia	r1!, {r5}
 800c746:	780e      	ldrb	r6, [r1, #0]
 800c748:	a908      	add	r1, sp, #32
 800c74a:	9104      	str	r1, [sp, #16]
 800c74c:	a907      	add	r1, sp, #28
 800c74e:	9103      	str	r1, [sp, #12]
 800c750:	a909      	add	r1, sp, #36	; 0x24
 800c752:	9102      	str	r1, [sp, #8]
 800c754:	1c69      	adds	r1, r5, #1
 800c756:	9101      	str	r1, [sp, #4]
 800c758:	2102      	movs	r1, #2
 800c75a:	9100      	str	r1, [sp, #0]
 800c75c:	f001 f98a 	bl	800da74 <_dtoa_r>
 800c760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c762:	4b36      	ldr	r3, [pc, #216]	; (800c83c <print_e+0x100>)
 800c764:	0001      	movs	r1, r0
 800c766:	429a      	cmp	r2, r3
 800c768:	d104      	bne.n	800c774 <print_e+0x38>
 800c76a:	0038      	movs	r0, r7
 800c76c:	f7ff ff31 	bl	800c5d2 <strcpy>
 800c770:	b00b      	add	sp, #44	; 0x2c
 800c772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c774:	7801      	ldrb	r1, [r0, #0]
 800c776:	1c43      	adds	r3, r0, #1
 800c778:	1c7c      	adds	r4, r7, #1
 800c77a:	7039      	strb	r1, [r7, #0]
 800c77c:	2d00      	cmp	r5, #0
 800c77e:	dd01      	ble.n	800c784 <print_e+0x48>
 800c780:	2101      	movs	r1, #1
 800c782:	9112      	str	r1, [sp, #72]	; 0x48
 800c784:	212e      	movs	r1, #46	; 0x2e
 800c786:	7818      	ldrb	r0, [r3, #0]
 800c788:	2800      	cmp	r0, #0
 800c78a:	d001      	beq.n	800c790 <print_e+0x54>
 800c78c:	2d00      	cmp	r5, #0
 800c78e:	dc35      	bgt.n	800c7fc <print_e+0xc0>
 800c790:	2e67      	cmp	r6, #103	; 0x67
 800c792:	d04b      	beq.n	800c82c <print_e+0xf0>
 800c794:	2e47      	cmp	r6, #71	; 0x47
 800c796:	d04b      	beq.n	800c830 <print_e+0xf4>
 800c798:	232e      	movs	r3, #46	; 0x2e
 800c79a:	2130      	movs	r1, #48	; 0x30
 800c79c:	2d00      	cmp	r5, #0
 800c79e:	dc3a      	bgt.n	800c816 <print_e+0xda>
 800c7a0:	1e53      	subs	r3, r2, #1
 800c7a2:	7026      	strb	r6, [r4, #0]
 800c7a4:	9309      	str	r3, [sp, #36]	; 0x24
 800c7a6:	1ca5      	adds	r5, r4, #2
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	da43      	bge.n	800c834 <print_e+0xf8>
 800c7ac:	232d      	movs	r3, #45	; 0x2d
 800c7ae:	7063      	strb	r3, [r4, #1]
 800c7b0:	3b2c      	subs	r3, #44	; 0x2c
 800c7b2:	1a9b      	subs	r3, r3, r2
 800c7b4:	9309      	str	r3, [sp, #36]	; 0x24
 800c7b6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c7b8:	2e63      	cmp	r6, #99	; 0x63
 800c7ba:	dd0d      	ble.n	800c7d8 <print_e+0x9c>
 800c7bc:	2164      	movs	r1, #100	; 0x64
 800c7be:	0030      	movs	r0, r6
 800c7c0:	f7f3 fd52 	bl	8000268 <__divsi3>
 800c7c4:	0003      	movs	r3, r0
 800c7c6:	0002      	movs	r2, r0
 800c7c8:	2064      	movs	r0, #100	; 0x64
 800c7ca:	4240      	negs	r0, r0
 800c7cc:	4358      	muls	r0, r3
 800c7ce:	3230      	adds	r2, #48	; 0x30
 800c7d0:	1980      	adds	r0, r0, r6
 800c7d2:	1ce5      	adds	r5, r4, #3
 800c7d4:	70a2      	strb	r2, [r4, #2]
 800c7d6:	9009      	str	r0, [sp, #36]	; 0x24
 800c7d8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c7da:	210a      	movs	r1, #10
 800c7dc:	0020      	movs	r0, r4
 800c7de:	f7f3 fd43 	bl	8000268 <__divsi3>
 800c7e2:	0003      	movs	r3, r0
 800c7e4:	0002      	movs	r2, r0
 800c7e6:	200a      	movs	r0, #10
 800c7e8:	4240      	negs	r0, r0
 800c7ea:	4358      	muls	r0, r3
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	1900      	adds	r0, r0, r4
 800c7f0:	3230      	adds	r2, #48	; 0x30
 800c7f2:	3030      	adds	r0, #48	; 0x30
 800c7f4:	702a      	strb	r2, [r5, #0]
 800c7f6:	7068      	strb	r0, [r5, #1]
 800c7f8:	70ab      	strb	r3, [r5, #2]
 800c7fa:	e7b9      	b.n	800c770 <print_e+0x34>
 800c7fc:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c7fe:	2800      	cmp	r0, #0
 800c800:	d001      	beq.n	800c806 <print_e+0xca>
 800c802:	7021      	strb	r1, [r4, #0]
 800c804:	3401      	adds	r4, #1
 800c806:	7818      	ldrb	r0, [r3, #0]
 800c808:	3d01      	subs	r5, #1
 800c80a:	7020      	strb	r0, [r4, #0]
 800c80c:	2000      	movs	r0, #0
 800c80e:	3301      	adds	r3, #1
 800c810:	3401      	adds	r4, #1
 800c812:	9012      	str	r0, [sp, #72]	; 0x48
 800c814:	e7b7      	b.n	800c786 <print_e+0x4a>
 800c816:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c818:	2800      	cmp	r0, #0
 800c81a:	d001      	beq.n	800c820 <print_e+0xe4>
 800c81c:	7023      	strb	r3, [r4, #0]
 800c81e:	3401      	adds	r4, #1
 800c820:	2000      	movs	r0, #0
 800c822:	7021      	strb	r1, [r4, #0]
 800c824:	3d01      	subs	r5, #1
 800c826:	3401      	adds	r4, #1
 800c828:	9012      	str	r0, [sp, #72]	; 0x48
 800c82a:	e7b7      	b.n	800c79c <print_e+0x60>
 800c82c:	2665      	movs	r6, #101	; 0x65
 800c82e:	e7b7      	b.n	800c7a0 <print_e+0x64>
 800c830:	2645      	movs	r6, #69	; 0x45
 800c832:	e7b5      	b.n	800c7a0 <print_e+0x64>
 800c834:	232b      	movs	r3, #43	; 0x2b
 800c836:	7063      	strb	r3, [r4, #1]
 800c838:	e7bd      	b.n	800c7b6 <print_e+0x7a>
 800c83a:	46c0      	nop			; (mov r8, r8)
 800c83c:	0000270f 	.word	0x0000270f

0800c840 <_gcvt>:
 800c840:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c842:	0016      	movs	r6, r2
 800c844:	001d      	movs	r5, r3
 800c846:	b08d      	sub	sp, #52	; 0x34
 800c848:	ab14      	add	r3, sp, #80	; 0x50
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	0007      	movs	r7, r0
 800c84e:	9307      	str	r3, [sp, #28]
 800c850:	2200      	movs	r2, #0
 800c852:	2300      	movs	r3, #0
 800c854:	0030      	movs	r0, r6
 800c856:	0029      	movs	r1, r5
 800c858:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800c85a:	f7f3 fe07 	bl	800046c <__aeabi_dcmplt>
 800c85e:	2800      	cmp	r0, #0
 800c860:	d002      	beq.n	800c868 <_gcvt+0x28>
 800c862:	2380      	movs	r3, #128	; 0x80
 800c864:	061b      	lsls	r3, r3, #24
 800c866:	18ed      	adds	r5, r5, r3
 800c868:	2200      	movs	r2, #0
 800c86a:	2300      	movs	r3, #0
 800c86c:	0030      	movs	r0, r6
 800c86e:	0029      	movs	r1, r5
 800c870:	f7f3 fdf6 	bl	8000460 <__aeabi_dcmpeq>
 800c874:	2800      	cmp	r0, #0
 800c876:	d006      	beq.n	800c886 <_gcvt+0x46>
 800c878:	2330      	movs	r3, #48	; 0x30
 800c87a:	7023      	strb	r3, [r4, #0]
 800c87c:	2300      	movs	r3, #0
 800c87e:	7063      	strb	r3, [r4, #1]
 800c880:	0020      	movs	r0, r4
 800c882:	b00d      	add	sp, #52	; 0x34
 800c884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c886:	0030      	movs	r0, r6
 800c888:	0029      	movs	r1, r5
 800c88a:	4a52      	ldr	r2, [pc, #328]	; (800c9d4 <_gcvt+0x194>)
 800c88c:	4b52      	ldr	r3, [pc, #328]	; (800c9d8 <_gcvt+0x198>)
 800c88e:	f7f3 fdf7 	bl	8000480 <__aeabi_dcmple>
 800c892:	2800      	cmp	r0, #0
 800c894:	d00d      	beq.n	800c8b2 <_gcvt+0x72>
 800c896:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c898:	0032      	movs	r2, r6
 800c89a:	9302      	str	r3, [sp, #8]
 800c89c:	9b07      	ldr	r3, [sp, #28]
 800c89e:	0021      	movs	r1, r4
 800c8a0:	9301      	str	r3, [sp, #4]
 800c8a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c8a4:	0038      	movs	r0, r7
 800c8a6:	3b01      	subs	r3, #1
 800c8a8:	9300      	str	r3, [sp, #0]
 800c8aa:	002b      	movs	r3, r5
 800c8ac:	f7ff ff46 	bl	800c73c <print_e>
 800c8b0:	e7e6      	b.n	800c880 <_gcvt+0x40>
 800c8b2:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c8b4:	f000 fc30 	bl	800d118 <_mprec_log10>
 800c8b8:	0032      	movs	r2, r6
 800c8ba:	002b      	movs	r3, r5
 800c8bc:	f7f3 fde0 	bl	8000480 <__aeabi_dcmple>
 800c8c0:	2800      	cmp	r0, #0
 800c8c2:	d1e8      	bne.n	800c896 <_gcvt+0x56>
 800c8c4:	ab0b      	add	r3, sp, #44	; 0x2c
 800c8c6:	9304      	str	r3, [sp, #16]
 800c8c8:	ab0a      	add	r3, sp, #40	; 0x28
 800c8ca:	9303      	str	r3, [sp, #12]
 800c8cc:	ab09      	add	r3, sp, #36	; 0x24
 800c8ce:	9302      	str	r3, [sp, #8]
 800c8d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c8d2:	0032      	movs	r2, r6
 800c8d4:	9301      	str	r3, [sp, #4]
 800c8d6:	2302      	movs	r3, #2
 800c8d8:	0038      	movs	r0, r7
 800c8da:	9300      	str	r3, [sp, #0]
 800c8dc:	002b      	movs	r3, r5
 800c8de:	f001 f8c9 	bl	800da74 <_dtoa_r>
 800c8e2:	4b3e      	ldr	r3, [pc, #248]	; (800c9dc <_gcvt+0x19c>)
 800c8e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8e6:	0001      	movs	r1, r0
 800c8e8:	0020      	movs	r0, r4
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d00c      	beq.n	800c908 <_gcvt+0xc8>
 800c8ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c8f0:	18e5      	adds	r5, r4, r3
 800c8f2:	780e      	ldrb	r6, [r1, #0]
 800c8f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8f6:	1a2b      	subs	r3, r5, r0
 800c8f8:	2e00      	cmp	r6, #0
 800c8fa:	d001      	beq.n	800c900 <_gcvt+0xc0>
 800c8fc:	2a00      	cmp	r2, #0
 800c8fe:	dc06      	bgt.n	800c90e <_gcvt+0xce>
 800c900:	2501      	movs	r5, #1
 800c902:	2600      	movs	r6, #0
 800c904:	46ac      	mov	ip, r5
 800c906:	e00d      	b.n	800c924 <_gcvt+0xe4>
 800c908:	f7ff fe63 	bl	800c5d2 <strcpy>
 800c90c:	e7b8      	b.n	800c880 <_gcvt+0x40>
 800c90e:	3a01      	subs	r2, #1
 800c910:	7006      	strb	r6, [r0, #0]
 800c912:	3101      	adds	r1, #1
 800c914:	9209      	str	r2, [sp, #36]	; 0x24
 800c916:	3001      	adds	r0, #1
 800c918:	e7eb      	b.n	800c8f2 <_gcvt+0xb2>
 800c91a:	2530      	movs	r5, #48	; 0x30
 800c91c:	4666      	mov	r6, ip
 800c91e:	7005      	strb	r5, [r0, #0]
 800c920:	3b01      	subs	r3, #1
 800c922:	3001      	adds	r0, #1
 800c924:	0005      	movs	r5, r0
 800c926:	1e17      	subs	r7, r2, #0
 800c928:	dc35      	bgt.n	800c996 <_gcvt+0x156>
 800c92a:	2e00      	cmp	r6, #0
 800c92c:	d000      	beq.n	800c930 <_gcvt+0xf0>
 800c92e:	9209      	str	r2, [sp, #36]	; 0x24
 800c930:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c932:	2a00      	cmp	r2, #0
 800c934:	d102      	bne.n	800c93c <_gcvt+0xfc>
 800c936:	780a      	ldrb	r2, [r1, #0]
 800c938:	2a00      	cmp	r2, #0
 800c93a:	d029      	beq.n	800c990 <_gcvt+0x150>
 800c93c:	4284      	cmp	r4, r0
 800c93e:	d102      	bne.n	800c946 <_gcvt+0x106>
 800c940:	2230      	movs	r2, #48	; 0x30
 800c942:	1c65      	adds	r5, r4, #1
 800c944:	7022      	strb	r2, [r4, #0]
 800c946:	222e      	movs	r2, #46	; 0x2e
 800c948:	702a      	strb	r2, [r5, #0]
 800c94a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c94c:	0028      	movs	r0, r5
 800c94e:	1b57      	subs	r7, r2, r5
 800c950:	9707      	str	r7, [sp, #28]
 800c952:	2701      	movs	r7, #1
 800c954:	2600      	movs	r6, #0
 800c956:	46bc      	mov	ip, r7
 800c958:	9f07      	ldr	r7, [sp, #28]
 800c95a:	42c7      	cmn	r7, r0
 800c95c:	d422      	bmi.n	800c9a4 <_gcvt+0x164>
 800c95e:	2000      	movs	r0, #0
 800c960:	4257      	negs	r7, r2
 800c962:	4282      	cmp	r2, r0
 800c964:	dc00      	bgt.n	800c968 <_gcvt+0x128>
 800c966:	0038      	movs	r0, r7
 800c968:	3001      	adds	r0, #1
 800c96a:	182d      	adds	r5, r5, r0
 800c96c:	2000      	movs	r0, #0
 800c96e:	4282      	cmp	r2, r0
 800c970:	dc00      	bgt.n	800c974 <_gcvt+0x134>
 800c972:	0038      	movs	r0, r7
 800c974:	1810      	adds	r0, r2, r0
 800c976:	2e00      	cmp	r6, #0
 800c978:	d000      	beq.n	800c97c <_gcvt+0x13c>
 800c97a:	9009      	str	r0, [sp, #36]	; 0x24
 800c97c:	002a      	movs	r2, r5
 800c97e:	7808      	ldrb	r0, [r1, #0]
 800c980:	0015      	movs	r5, r2
 800c982:	2800      	cmp	r0, #0
 800c984:	d001      	beq.n	800c98a <_gcvt+0x14a>
 800c986:	2b00      	cmp	r3, #0
 800c988:	dc11      	bgt.n	800c9ae <_gcvt+0x16e>
 800c98a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800c98c:	2900      	cmp	r1, #0
 800c98e:	d11d      	bne.n	800c9cc <_gcvt+0x18c>
 800c990:	2300      	movs	r3, #0
 800c992:	702b      	strb	r3, [r5, #0]
 800c994:	e774      	b.n	800c880 <_gcvt+0x40>
 800c996:	3a01      	subs	r2, #1
 800c998:	2b00      	cmp	r3, #0
 800c99a:	dcbe      	bgt.n	800c91a <_gcvt+0xda>
 800c99c:	2e00      	cmp	r6, #0
 800c99e:	d0c7      	beq.n	800c930 <_gcvt+0xf0>
 800c9a0:	9709      	str	r7, [sp, #36]	; 0x24
 800c9a2:	e7c5      	b.n	800c930 <_gcvt+0xf0>
 800c9a4:	2630      	movs	r6, #48	; 0x30
 800c9a6:	3001      	adds	r0, #1
 800c9a8:	7006      	strb	r6, [r0, #0]
 800c9aa:	4666      	mov	r6, ip
 800c9ac:	e7d4      	b.n	800c958 <_gcvt+0x118>
 800c9ae:	7010      	strb	r0, [r2, #0]
 800c9b0:	3101      	adds	r1, #1
 800c9b2:	3b01      	subs	r3, #1
 800c9b4:	3201      	adds	r2, #1
 800c9b6:	e7e2      	b.n	800c97e <_gcvt+0x13e>
 800c9b8:	700e      	strb	r6, [r1, #0]
 800c9ba:	3101      	adds	r1, #1
 800c9bc:	1a68      	subs	r0, r5, r1
 800c9be:	2800      	cmp	r0, #0
 800c9c0:	dcfa      	bgt.n	800c9b8 <_gcvt+0x178>
 800c9c2:	43dd      	mvns	r5, r3
 800c9c4:	17ed      	asrs	r5, r5, #31
 800c9c6:	401d      	ands	r5, r3
 800c9c8:	1955      	adds	r5, r2, r5
 800c9ca:	e7e1      	b.n	800c990 <_gcvt+0x150>
 800c9cc:	0011      	movs	r1, r2
 800c9ce:	2630      	movs	r6, #48	; 0x30
 800c9d0:	189d      	adds	r5, r3, r2
 800c9d2:	e7f3      	b.n	800c9bc <_gcvt+0x17c>
 800c9d4:	eb1c432d 	.word	0xeb1c432d
 800c9d8:	3f1a36e2 	.word	0x3f1a36e2
 800c9dc:	0000270f 	.word	0x0000270f

0800c9e0 <_Balloc>:
 800c9e0:	b570      	push	{r4, r5, r6, lr}
 800c9e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c9e4:	0006      	movs	r6, r0
 800c9e6:	000c      	movs	r4, r1
 800c9e8:	2d00      	cmp	r5, #0
 800c9ea:	d10e      	bne.n	800ca0a <_Balloc+0x2a>
 800c9ec:	2010      	movs	r0, #16
 800c9ee:	f001 fe6b 	bl	800e6c8 <malloc>
 800c9f2:	1e02      	subs	r2, r0, #0
 800c9f4:	6270      	str	r0, [r6, #36]	; 0x24
 800c9f6:	d104      	bne.n	800ca02 <_Balloc+0x22>
 800c9f8:	2166      	movs	r1, #102	; 0x66
 800c9fa:	4b19      	ldr	r3, [pc, #100]	; (800ca60 <_Balloc+0x80>)
 800c9fc:	4819      	ldr	r0, [pc, #100]	; (800ca64 <_Balloc+0x84>)
 800c9fe:	f000 ff8f 	bl	800d920 <__assert_func>
 800ca02:	6045      	str	r5, [r0, #4]
 800ca04:	6085      	str	r5, [r0, #8]
 800ca06:	6005      	str	r5, [r0, #0]
 800ca08:	60c5      	str	r5, [r0, #12]
 800ca0a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800ca0c:	68eb      	ldr	r3, [r5, #12]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d013      	beq.n	800ca3a <_Balloc+0x5a>
 800ca12:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ca14:	00a2      	lsls	r2, r4, #2
 800ca16:	68db      	ldr	r3, [r3, #12]
 800ca18:	189b      	adds	r3, r3, r2
 800ca1a:	6818      	ldr	r0, [r3, #0]
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	d118      	bne.n	800ca52 <_Balloc+0x72>
 800ca20:	2101      	movs	r1, #1
 800ca22:	000d      	movs	r5, r1
 800ca24:	40a5      	lsls	r5, r4
 800ca26:	1d6a      	adds	r2, r5, #5
 800ca28:	0030      	movs	r0, r6
 800ca2a:	0092      	lsls	r2, r2, #2
 800ca2c:	f000 fb8e 	bl	800d14c <_calloc_r>
 800ca30:	2800      	cmp	r0, #0
 800ca32:	d00c      	beq.n	800ca4e <_Balloc+0x6e>
 800ca34:	6044      	str	r4, [r0, #4]
 800ca36:	6085      	str	r5, [r0, #8]
 800ca38:	e00d      	b.n	800ca56 <_Balloc+0x76>
 800ca3a:	2221      	movs	r2, #33	; 0x21
 800ca3c:	2104      	movs	r1, #4
 800ca3e:	0030      	movs	r0, r6
 800ca40:	f000 fb84 	bl	800d14c <_calloc_r>
 800ca44:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ca46:	60e8      	str	r0, [r5, #12]
 800ca48:	68db      	ldr	r3, [r3, #12]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d1e1      	bne.n	800ca12 <_Balloc+0x32>
 800ca4e:	2000      	movs	r0, #0
 800ca50:	bd70      	pop	{r4, r5, r6, pc}
 800ca52:	6802      	ldr	r2, [r0, #0]
 800ca54:	601a      	str	r2, [r3, #0]
 800ca56:	2300      	movs	r3, #0
 800ca58:	6103      	str	r3, [r0, #16]
 800ca5a:	60c3      	str	r3, [r0, #12]
 800ca5c:	e7f8      	b.n	800ca50 <_Balloc+0x70>
 800ca5e:	46c0      	nop			; (mov r8, r8)
 800ca60:	08010af5 	.word	0x08010af5
 800ca64:	08010b0c 	.word	0x08010b0c

0800ca68 <_Bfree>:
 800ca68:	b570      	push	{r4, r5, r6, lr}
 800ca6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ca6c:	0005      	movs	r5, r0
 800ca6e:	000c      	movs	r4, r1
 800ca70:	2e00      	cmp	r6, #0
 800ca72:	d10e      	bne.n	800ca92 <_Bfree+0x2a>
 800ca74:	2010      	movs	r0, #16
 800ca76:	f001 fe27 	bl	800e6c8 <malloc>
 800ca7a:	1e02      	subs	r2, r0, #0
 800ca7c:	6268      	str	r0, [r5, #36]	; 0x24
 800ca7e:	d104      	bne.n	800ca8a <_Bfree+0x22>
 800ca80:	218a      	movs	r1, #138	; 0x8a
 800ca82:	4b09      	ldr	r3, [pc, #36]	; (800caa8 <_Bfree+0x40>)
 800ca84:	4809      	ldr	r0, [pc, #36]	; (800caac <_Bfree+0x44>)
 800ca86:	f000 ff4b 	bl	800d920 <__assert_func>
 800ca8a:	6046      	str	r6, [r0, #4]
 800ca8c:	6086      	str	r6, [r0, #8]
 800ca8e:	6006      	str	r6, [r0, #0]
 800ca90:	60c6      	str	r6, [r0, #12]
 800ca92:	2c00      	cmp	r4, #0
 800ca94:	d007      	beq.n	800caa6 <_Bfree+0x3e>
 800ca96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ca98:	6862      	ldr	r2, [r4, #4]
 800ca9a:	68db      	ldr	r3, [r3, #12]
 800ca9c:	0092      	lsls	r2, r2, #2
 800ca9e:	189b      	adds	r3, r3, r2
 800caa0:	681a      	ldr	r2, [r3, #0]
 800caa2:	6022      	str	r2, [r4, #0]
 800caa4:	601c      	str	r4, [r3, #0]
 800caa6:	bd70      	pop	{r4, r5, r6, pc}
 800caa8:	08010af5 	.word	0x08010af5
 800caac:	08010b0c 	.word	0x08010b0c

0800cab0 <__multadd>:
 800cab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cab2:	000e      	movs	r6, r1
 800cab4:	9001      	str	r0, [sp, #4]
 800cab6:	000c      	movs	r4, r1
 800cab8:	001d      	movs	r5, r3
 800caba:	2000      	movs	r0, #0
 800cabc:	690f      	ldr	r7, [r1, #16]
 800cabe:	3614      	adds	r6, #20
 800cac0:	6833      	ldr	r3, [r6, #0]
 800cac2:	3001      	adds	r0, #1
 800cac4:	b299      	uxth	r1, r3
 800cac6:	4351      	muls	r1, r2
 800cac8:	0c1b      	lsrs	r3, r3, #16
 800caca:	4353      	muls	r3, r2
 800cacc:	1949      	adds	r1, r1, r5
 800cace:	0c0d      	lsrs	r5, r1, #16
 800cad0:	195b      	adds	r3, r3, r5
 800cad2:	0c1d      	lsrs	r5, r3, #16
 800cad4:	b289      	uxth	r1, r1
 800cad6:	041b      	lsls	r3, r3, #16
 800cad8:	185b      	adds	r3, r3, r1
 800cada:	c608      	stmia	r6!, {r3}
 800cadc:	4287      	cmp	r7, r0
 800cade:	dcef      	bgt.n	800cac0 <__multadd+0x10>
 800cae0:	2d00      	cmp	r5, #0
 800cae2:	d022      	beq.n	800cb2a <__multadd+0x7a>
 800cae4:	68a3      	ldr	r3, [r4, #8]
 800cae6:	42bb      	cmp	r3, r7
 800cae8:	dc19      	bgt.n	800cb1e <__multadd+0x6e>
 800caea:	6863      	ldr	r3, [r4, #4]
 800caec:	9801      	ldr	r0, [sp, #4]
 800caee:	1c59      	adds	r1, r3, #1
 800caf0:	f7ff ff76 	bl	800c9e0 <_Balloc>
 800caf4:	1e06      	subs	r6, r0, #0
 800caf6:	d105      	bne.n	800cb04 <__multadd+0x54>
 800caf8:	0002      	movs	r2, r0
 800cafa:	21b5      	movs	r1, #181	; 0xb5
 800cafc:	4b0c      	ldr	r3, [pc, #48]	; (800cb30 <__multadd+0x80>)
 800cafe:	480d      	ldr	r0, [pc, #52]	; (800cb34 <__multadd+0x84>)
 800cb00:	f000 ff0e 	bl	800d920 <__assert_func>
 800cb04:	0021      	movs	r1, r4
 800cb06:	6923      	ldr	r3, [r4, #16]
 800cb08:	310c      	adds	r1, #12
 800cb0a:	1c9a      	adds	r2, r3, #2
 800cb0c:	0092      	lsls	r2, r2, #2
 800cb0e:	300c      	adds	r0, #12
 800cb10:	f7ff fd20 	bl	800c554 <memcpy>
 800cb14:	0021      	movs	r1, r4
 800cb16:	9801      	ldr	r0, [sp, #4]
 800cb18:	f7ff ffa6 	bl	800ca68 <_Bfree>
 800cb1c:	0034      	movs	r4, r6
 800cb1e:	1d3b      	adds	r3, r7, #4
 800cb20:	009b      	lsls	r3, r3, #2
 800cb22:	18e3      	adds	r3, r4, r3
 800cb24:	605d      	str	r5, [r3, #4]
 800cb26:	1c7b      	adds	r3, r7, #1
 800cb28:	6123      	str	r3, [r4, #16]
 800cb2a:	0020      	movs	r0, r4
 800cb2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cb2e:	46c0      	nop			; (mov r8, r8)
 800cb30:	08010b68 	.word	0x08010b68
 800cb34:	08010b0c 	.word	0x08010b0c

0800cb38 <__hi0bits>:
 800cb38:	0003      	movs	r3, r0
 800cb3a:	0c02      	lsrs	r2, r0, #16
 800cb3c:	2000      	movs	r0, #0
 800cb3e:	4282      	cmp	r2, r0
 800cb40:	d101      	bne.n	800cb46 <__hi0bits+0xe>
 800cb42:	041b      	lsls	r3, r3, #16
 800cb44:	3010      	adds	r0, #16
 800cb46:	0e1a      	lsrs	r2, r3, #24
 800cb48:	d101      	bne.n	800cb4e <__hi0bits+0x16>
 800cb4a:	3008      	adds	r0, #8
 800cb4c:	021b      	lsls	r3, r3, #8
 800cb4e:	0f1a      	lsrs	r2, r3, #28
 800cb50:	d101      	bne.n	800cb56 <__hi0bits+0x1e>
 800cb52:	3004      	adds	r0, #4
 800cb54:	011b      	lsls	r3, r3, #4
 800cb56:	0f9a      	lsrs	r2, r3, #30
 800cb58:	d101      	bne.n	800cb5e <__hi0bits+0x26>
 800cb5a:	3002      	adds	r0, #2
 800cb5c:	009b      	lsls	r3, r3, #2
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	db03      	blt.n	800cb6a <__hi0bits+0x32>
 800cb62:	3001      	adds	r0, #1
 800cb64:	005b      	lsls	r3, r3, #1
 800cb66:	d400      	bmi.n	800cb6a <__hi0bits+0x32>
 800cb68:	2020      	movs	r0, #32
 800cb6a:	4770      	bx	lr

0800cb6c <__lo0bits>:
 800cb6c:	6803      	ldr	r3, [r0, #0]
 800cb6e:	0002      	movs	r2, r0
 800cb70:	2107      	movs	r1, #7
 800cb72:	0018      	movs	r0, r3
 800cb74:	4008      	ands	r0, r1
 800cb76:	420b      	tst	r3, r1
 800cb78:	d00d      	beq.n	800cb96 <__lo0bits+0x2a>
 800cb7a:	3906      	subs	r1, #6
 800cb7c:	2000      	movs	r0, #0
 800cb7e:	420b      	tst	r3, r1
 800cb80:	d105      	bne.n	800cb8e <__lo0bits+0x22>
 800cb82:	3002      	adds	r0, #2
 800cb84:	4203      	tst	r3, r0
 800cb86:	d003      	beq.n	800cb90 <__lo0bits+0x24>
 800cb88:	40cb      	lsrs	r3, r1
 800cb8a:	0008      	movs	r0, r1
 800cb8c:	6013      	str	r3, [r2, #0]
 800cb8e:	4770      	bx	lr
 800cb90:	089b      	lsrs	r3, r3, #2
 800cb92:	6013      	str	r3, [r2, #0]
 800cb94:	e7fb      	b.n	800cb8e <__lo0bits+0x22>
 800cb96:	b299      	uxth	r1, r3
 800cb98:	2900      	cmp	r1, #0
 800cb9a:	d101      	bne.n	800cba0 <__lo0bits+0x34>
 800cb9c:	2010      	movs	r0, #16
 800cb9e:	0c1b      	lsrs	r3, r3, #16
 800cba0:	b2d9      	uxtb	r1, r3
 800cba2:	2900      	cmp	r1, #0
 800cba4:	d101      	bne.n	800cbaa <__lo0bits+0x3e>
 800cba6:	3008      	adds	r0, #8
 800cba8:	0a1b      	lsrs	r3, r3, #8
 800cbaa:	0719      	lsls	r1, r3, #28
 800cbac:	d101      	bne.n	800cbb2 <__lo0bits+0x46>
 800cbae:	3004      	adds	r0, #4
 800cbb0:	091b      	lsrs	r3, r3, #4
 800cbb2:	0799      	lsls	r1, r3, #30
 800cbb4:	d101      	bne.n	800cbba <__lo0bits+0x4e>
 800cbb6:	3002      	adds	r0, #2
 800cbb8:	089b      	lsrs	r3, r3, #2
 800cbba:	07d9      	lsls	r1, r3, #31
 800cbbc:	d4e9      	bmi.n	800cb92 <__lo0bits+0x26>
 800cbbe:	3001      	adds	r0, #1
 800cbc0:	085b      	lsrs	r3, r3, #1
 800cbc2:	d1e6      	bne.n	800cb92 <__lo0bits+0x26>
 800cbc4:	2020      	movs	r0, #32
 800cbc6:	e7e2      	b.n	800cb8e <__lo0bits+0x22>

0800cbc8 <__i2b>:
 800cbc8:	b510      	push	{r4, lr}
 800cbca:	000c      	movs	r4, r1
 800cbcc:	2101      	movs	r1, #1
 800cbce:	f7ff ff07 	bl	800c9e0 <_Balloc>
 800cbd2:	2800      	cmp	r0, #0
 800cbd4:	d106      	bne.n	800cbe4 <__i2b+0x1c>
 800cbd6:	21a0      	movs	r1, #160	; 0xa0
 800cbd8:	0002      	movs	r2, r0
 800cbda:	4b04      	ldr	r3, [pc, #16]	; (800cbec <__i2b+0x24>)
 800cbdc:	4804      	ldr	r0, [pc, #16]	; (800cbf0 <__i2b+0x28>)
 800cbde:	0049      	lsls	r1, r1, #1
 800cbe0:	f000 fe9e 	bl	800d920 <__assert_func>
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	6144      	str	r4, [r0, #20]
 800cbe8:	6103      	str	r3, [r0, #16]
 800cbea:	bd10      	pop	{r4, pc}
 800cbec:	08010b68 	.word	0x08010b68
 800cbf0:	08010b0c 	.word	0x08010b0c

0800cbf4 <__multiply>:
 800cbf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbf6:	690b      	ldr	r3, [r1, #16]
 800cbf8:	0014      	movs	r4, r2
 800cbfa:	6912      	ldr	r2, [r2, #16]
 800cbfc:	000d      	movs	r5, r1
 800cbfe:	b089      	sub	sp, #36	; 0x24
 800cc00:	4293      	cmp	r3, r2
 800cc02:	da01      	bge.n	800cc08 <__multiply+0x14>
 800cc04:	0025      	movs	r5, r4
 800cc06:	000c      	movs	r4, r1
 800cc08:	692f      	ldr	r7, [r5, #16]
 800cc0a:	6926      	ldr	r6, [r4, #16]
 800cc0c:	6869      	ldr	r1, [r5, #4]
 800cc0e:	19bb      	adds	r3, r7, r6
 800cc10:	9302      	str	r3, [sp, #8]
 800cc12:	68ab      	ldr	r3, [r5, #8]
 800cc14:	19ba      	adds	r2, r7, r6
 800cc16:	4293      	cmp	r3, r2
 800cc18:	da00      	bge.n	800cc1c <__multiply+0x28>
 800cc1a:	3101      	adds	r1, #1
 800cc1c:	f7ff fee0 	bl	800c9e0 <_Balloc>
 800cc20:	9001      	str	r0, [sp, #4]
 800cc22:	2800      	cmp	r0, #0
 800cc24:	d106      	bne.n	800cc34 <__multiply+0x40>
 800cc26:	215e      	movs	r1, #94	; 0x5e
 800cc28:	0002      	movs	r2, r0
 800cc2a:	4b48      	ldr	r3, [pc, #288]	; (800cd4c <__multiply+0x158>)
 800cc2c:	4848      	ldr	r0, [pc, #288]	; (800cd50 <__multiply+0x15c>)
 800cc2e:	31ff      	adds	r1, #255	; 0xff
 800cc30:	f000 fe76 	bl	800d920 <__assert_func>
 800cc34:	9b01      	ldr	r3, [sp, #4]
 800cc36:	2200      	movs	r2, #0
 800cc38:	3314      	adds	r3, #20
 800cc3a:	469c      	mov	ip, r3
 800cc3c:	19bb      	adds	r3, r7, r6
 800cc3e:	009b      	lsls	r3, r3, #2
 800cc40:	4463      	add	r3, ip
 800cc42:	9303      	str	r3, [sp, #12]
 800cc44:	4663      	mov	r3, ip
 800cc46:	9903      	ldr	r1, [sp, #12]
 800cc48:	428b      	cmp	r3, r1
 800cc4a:	d32c      	bcc.n	800cca6 <__multiply+0xb2>
 800cc4c:	002b      	movs	r3, r5
 800cc4e:	0022      	movs	r2, r4
 800cc50:	3314      	adds	r3, #20
 800cc52:	00bf      	lsls	r7, r7, #2
 800cc54:	3214      	adds	r2, #20
 800cc56:	9306      	str	r3, [sp, #24]
 800cc58:	00b6      	lsls	r6, r6, #2
 800cc5a:	19db      	adds	r3, r3, r7
 800cc5c:	9304      	str	r3, [sp, #16]
 800cc5e:	1993      	adds	r3, r2, r6
 800cc60:	9307      	str	r3, [sp, #28]
 800cc62:	2304      	movs	r3, #4
 800cc64:	9305      	str	r3, [sp, #20]
 800cc66:	002b      	movs	r3, r5
 800cc68:	9904      	ldr	r1, [sp, #16]
 800cc6a:	3315      	adds	r3, #21
 800cc6c:	9200      	str	r2, [sp, #0]
 800cc6e:	4299      	cmp	r1, r3
 800cc70:	d305      	bcc.n	800cc7e <__multiply+0x8a>
 800cc72:	1b4b      	subs	r3, r1, r5
 800cc74:	3b15      	subs	r3, #21
 800cc76:	089b      	lsrs	r3, r3, #2
 800cc78:	3301      	adds	r3, #1
 800cc7a:	009b      	lsls	r3, r3, #2
 800cc7c:	9305      	str	r3, [sp, #20]
 800cc7e:	9b07      	ldr	r3, [sp, #28]
 800cc80:	9a00      	ldr	r2, [sp, #0]
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d311      	bcc.n	800ccaa <__multiply+0xb6>
 800cc86:	9b02      	ldr	r3, [sp, #8]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	dd06      	ble.n	800cc9a <__multiply+0xa6>
 800cc8c:	9b03      	ldr	r3, [sp, #12]
 800cc8e:	3b04      	subs	r3, #4
 800cc90:	9303      	str	r3, [sp, #12]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	9300      	str	r3, [sp, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d053      	beq.n	800cd42 <__multiply+0x14e>
 800cc9a:	9b01      	ldr	r3, [sp, #4]
 800cc9c:	9a02      	ldr	r2, [sp, #8]
 800cc9e:	0018      	movs	r0, r3
 800cca0:	611a      	str	r2, [r3, #16]
 800cca2:	b009      	add	sp, #36	; 0x24
 800cca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cca6:	c304      	stmia	r3!, {r2}
 800cca8:	e7cd      	b.n	800cc46 <__multiply+0x52>
 800ccaa:	9b00      	ldr	r3, [sp, #0]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	b298      	uxth	r0, r3
 800ccb0:	2800      	cmp	r0, #0
 800ccb2:	d01b      	beq.n	800ccec <__multiply+0xf8>
 800ccb4:	4667      	mov	r7, ip
 800ccb6:	2400      	movs	r4, #0
 800ccb8:	9e06      	ldr	r6, [sp, #24]
 800ccba:	ce02      	ldmia	r6!, {r1}
 800ccbc:	683a      	ldr	r2, [r7, #0]
 800ccbe:	b28b      	uxth	r3, r1
 800ccc0:	4343      	muls	r3, r0
 800ccc2:	b292      	uxth	r2, r2
 800ccc4:	189b      	adds	r3, r3, r2
 800ccc6:	191b      	adds	r3, r3, r4
 800ccc8:	0c0c      	lsrs	r4, r1, #16
 800ccca:	4344      	muls	r4, r0
 800cccc:	683a      	ldr	r2, [r7, #0]
 800ccce:	0c11      	lsrs	r1, r2, #16
 800ccd0:	1861      	adds	r1, r4, r1
 800ccd2:	0c1c      	lsrs	r4, r3, #16
 800ccd4:	1909      	adds	r1, r1, r4
 800ccd6:	0c0c      	lsrs	r4, r1, #16
 800ccd8:	b29b      	uxth	r3, r3
 800ccda:	0409      	lsls	r1, r1, #16
 800ccdc:	430b      	orrs	r3, r1
 800ccde:	c708      	stmia	r7!, {r3}
 800cce0:	9b04      	ldr	r3, [sp, #16]
 800cce2:	42b3      	cmp	r3, r6
 800cce4:	d8e9      	bhi.n	800ccba <__multiply+0xc6>
 800cce6:	4663      	mov	r3, ip
 800cce8:	9a05      	ldr	r2, [sp, #20]
 800ccea:	509c      	str	r4, [r3, r2]
 800ccec:	9b00      	ldr	r3, [sp, #0]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	0c1e      	lsrs	r6, r3, #16
 800ccf2:	d020      	beq.n	800cd36 <__multiply+0x142>
 800ccf4:	4663      	mov	r3, ip
 800ccf6:	002c      	movs	r4, r5
 800ccf8:	4660      	mov	r0, ip
 800ccfa:	2700      	movs	r7, #0
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	3414      	adds	r4, #20
 800cd00:	6822      	ldr	r2, [r4, #0]
 800cd02:	b29b      	uxth	r3, r3
 800cd04:	b291      	uxth	r1, r2
 800cd06:	4371      	muls	r1, r6
 800cd08:	6802      	ldr	r2, [r0, #0]
 800cd0a:	0c12      	lsrs	r2, r2, #16
 800cd0c:	1889      	adds	r1, r1, r2
 800cd0e:	19cf      	adds	r7, r1, r7
 800cd10:	0439      	lsls	r1, r7, #16
 800cd12:	430b      	orrs	r3, r1
 800cd14:	6003      	str	r3, [r0, #0]
 800cd16:	cc02      	ldmia	r4!, {r1}
 800cd18:	6843      	ldr	r3, [r0, #4]
 800cd1a:	0c09      	lsrs	r1, r1, #16
 800cd1c:	4371      	muls	r1, r6
 800cd1e:	b29b      	uxth	r3, r3
 800cd20:	0c3f      	lsrs	r7, r7, #16
 800cd22:	18cb      	adds	r3, r1, r3
 800cd24:	9a04      	ldr	r2, [sp, #16]
 800cd26:	19db      	adds	r3, r3, r7
 800cd28:	0c1f      	lsrs	r7, r3, #16
 800cd2a:	3004      	adds	r0, #4
 800cd2c:	42a2      	cmp	r2, r4
 800cd2e:	d8e7      	bhi.n	800cd00 <__multiply+0x10c>
 800cd30:	4662      	mov	r2, ip
 800cd32:	9905      	ldr	r1, [sp, #20]
 800cd34:	5053      	str	r3, [r2, r1]
 800cd36:	9b00      	ldr	r3, [sp, #0]
 800cd38:	3304      	adds	r3, #4
 800cd3a:	9300      	str	r3, [sp, #0]
 800cd3c:	2304      	movs	r3, #4
 800cd3e:	449c      	add	ip, r3
 800cd40:	e79d      	b.n	800cc7e <__multiply+0x8a>
 800cd42:	9b02      	ldr	r3, [sp, #8]
 800cd44:	3b01      	subs	r3, #1
 800cd46:	9302      	str	r3, [sp, #8]
 800cd48:	e79d      	b.n	800cc86 <__multiply+0x92>
 800cd4a:	46c0      	nop			; (mov r8, r8)
 800cd4c:	08010b68 	.word	0x08010b68
 800cd50:	08010b0c 	.word	0x08010b0c

0800cd54 <__pow5mult>:
 800cd54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd56:	2303      	movs	r3, #3
 800cd58:	0015      	movs	r5, r2
 800cd5a:	0007      	movs	r7, r0
 800cd5c:	000e      	movs	r6, r1
 800cd5e:	401a      	ands	r2, r3
 800cd60:	421d      	tst	r5, r3
 800cd62:	d008      	beq.n	800cd76 <__pow5mult+0x22>
 800cd64:	4925      	ldr	r1, [pc, #148]	; (800cdfc <__pow5mult+0xa8>)
 800cd66:	3a01      	subs	r2, #1
 800cd68:	0092      	lsls	r2, r2, #2
 800cd6a:	5852      	ldr	r2, [r2, r1]
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	0031      	movs	r1, r6
 800cd70:	f7ff fe9e 	bl	800cab0 <__multadd>
 800cd74:	0006      	movs	r6, r0
 800cd76:	10ad      	asrs	r5, r5, #2
 800cd78:	d03d      	beq.n	800cdf6 <__pow5mult+0xa2>
 800cd7a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800cd7c:	2c00      	cmp	r4, #0
 800cd7e:	d10f      	bne.n	800cda0 <__pow5mult+0x4c>
 800cd80:	2010      	movs	r0, #16
 800cd82:	f001 fca1 	bl	800e6c8 <malloc>
 800cd86:	1e02      	subs	r2, r0, #0
 800cd88:	6278      	str	r0, [r7, #36]	; 0x24
 800cd8a:	d105      	bne.n	800cd98 <__pow5mult+0x44>
 800cd8c:	21d7      	movs	r1, #215	; 0xd7
 800cd8e:	4b1c      	ldr	r3, [pc, #112]	; (800ce00 <__pow5mult+0xac>)
 800cd90:	481c      	ldr	r0, [pc, #112]	; (800ce04 <__pow5mult+0xb0>)
 800cd92:	0049      	lsls	r1, r1, #1
 800cd94:	f000 fdc4 	bl	800d920 <__assert_func>
 800cd98:	6044      	str	r4, [r0, #4]
 800cd9a:	6084      	str	r4, [r0, #8]
 800cd9c:	6004      	str	r4, [r0, #0]
 800cd9e:	60c4      	str	r4, [r0, #12]
 800cda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda2:	689c      	ldr	r4, [r3, #8]
 800cda4:	9301      	str	r3, [sp, #4]
 800cda6:	2c00      	cmp	r4, #0
 800cda8:	d108      	bne.n	800cdbc <__pow5mult+0x68>
 800cdaa:	0038      	movs	r0, r7
 800cdac:	4916      	ldr	r1, [pc, #88]	; (800ce08 <__pow5mult+0xb4>)
 800cdae:	f7ff ff0b 	bl	800cbc8 <__i2b>
 800cdb2:	9b01      	ldr	r3, [sp, #4]
 800cdb4:	0004      	movs	r4, r0
 800cdb6:	6098      	str	r0, [r3, #8]
 800cdb8:	2300      	movs	r3, #0
 800cdba:	6003      	str	r3, [r0, #0]
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	421d      	tst	r5, r3
 800cdc0:	d00a      	beq.n	800cdd8 <__pow5mult+0x84>
 800cdc2:	0031      	movs	r1, r6
 800cdc4:	0022      	movs	r2, r4
 800cdc6:	0038      	movs	r0, r7
 800cdc8:	f7ff ff14 	bl	800cbf4 <__multiply>
 800cdcc:	0031      	movs	r1, r6
 800cdce:	9001      	str	r0, [sp, #4]
 800cdd0:	0038      	movs	r0, r7
 800cdd2:	f7ff fe49 	bl	800ca68 <_Bfree>
 800cdd6:	9e01      	ldr	r6, [sp, #4]
 800cdd8:	106d      	asrs	r5, r5, #1
 800cdda:	d00c      	beq.n	800cdf6 <__pow5mult+0xa2>
 800cddc:	6820      	ldr	r0, [r4, #0]
 800cdde:	2800      	cmp	r0, #0
 800cde0:	d107      	bne.n	800cdf2 <__pow5mult+0x9e>
 800cde2:	0022      	movs	r2, r4
 800cde4:	0021      	movs	r1, r4
 800cde6:	0038      	movs	r0, r7
 800cde8:	f7ff ff04 	bl	800cbf4 <__multiply>
 800cdec:	2300      	movs	r3, #0
 800cdee:	6020      	str	r0, [r4, #0]
 800cdf0:	6003      	str	r3, [r0, #0]
 800cdf2:	0004      	movs	r4, r0
 800cdf4:	e7e2      	b.n	800cdbc <__pow5mult+0x68>
 800cdf6:	0030      	movs	r0, r6
 800cdf8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cdfa:	46c0      	nop			; (mov r8, r8)
 800cdfc:	08010c70 	.word	0x08010c70
 800ce00:	08010af5 	.word	0x08010af5
 800ce04:	08010b0c 	.word	0x08010b0c
 800ce08:	00000271 	.word	0x00000271

0800ce0c <__lshift>:
 800ce0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce0e:	000c      	movs	r4, r1
 800ce10:	0017      	movs	r7, r2
 800ce12:	6923      	ldr	r3, [r4, #16]
 800ce14:	1155      	asrs	r5, r2, #5
 800ce16:	b087      	sub	sp, #28
 800ce18:	18eb      	adds	r3, r5, r3
 800ce1a:	9302      	str	r3, [sp, #8]
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	9301      	str	r3, [sp, #4]
 800ce20:	6849      	ldr	r1, [r1, #4]
 800ce22:	68a3      	ldr	r3, [r4, #8]
 800ce24:	9004      	str	r0, [sp, #16]
 800ce26:	9a01      	ldr	r2, [sp, #4]
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	db10      	blt.n	800ce4e <__lshift+0x42>
 800ce2c:	9804      	ldr	r0, [sp, #16]
 800ce2e:	f7ff fdd7 	bl	800c9e0 <_Balloc>
 800ce32:	2300      	movs	r3, #0
 800ce34:	0002      	movs	r2, r0
 800ce36:	0006      	movs	r6, r0
 800ce38:	0019      	movs	r1, r3
 800ce3a:	3214      	adds	r2, #20
 800ce3c:	4298      	cmp	r0, r3
 800ce3e:	d10c      	bne.n	800ce5a <__lshift+0x4e>
 800ce40:	21da      	movs	r1, #218	; 0xda
 800ce42:	0002      	movs	r2, r0
 800ce44:	4b26      	ldr	r3, [pc, #152]	; (800cee0 <__lshift+0xd4>)
 800ce46:	4827      	ldr	r0, [pc, #156]	; (800cee4 <__lshift+0xd8>)
 800ce48:	31ff      	adds	r1, #255	; 0xff
 800ce4a:	f000 fd69 	bl	800d920 <__assert_func>
 800ce4e:	3101      	adds	r1, #1
 800ce50:	005b      	lsls	r3, r3, #1
 800ce52:	e7e8      	b.n	800ce26 <__lshift+0x1a>
 800ce54:	0098      	lsls	r0, r3, #2
 800ce56:	5011      	str	r1, [r2, r0]
 800ce58:	3301      	adds	r3, #1
 800ce5a:	42ab      	cmp	r3, r5
 800ce5c:	dbfa      	blt.n	800ce54 <__lshift+0x48>
 800ce5e:	43eb      	mvns	r3, r5
 800ce60:	17db      	asrs	r3, r3, #31
 800ce62:	401d      	ands	r5, r3
 800ce64:	211f      	movs	r1, #31
 800ce66:	0023      	movs	r3, r4
 800ce68:	0038      	movs	r0, r7
 800ce6a:	00ad      	lsls	r5, r5, #2
 800ce6c:	1955      	adds	r5, r2, r5
 800ce6e:	6922      	ldr	r2, [r4, #16]
 800ce70:	3314      	adds	r3, #20
 800ce72:	0092      	lsls	r2, r2, #2
 800ce74:	4008      	ands	r0, r1
 800ce76:	4684      	mov	ip, r0
 800ce78:	189a      	adds	r2, r3, r2
 800ce7a:	420f      	tst	r7, r1
 800ce7c:	d02a      	beq.n	800ced4 <__lshift+0xc8>
 800ce7e:	3101      	adds	r1, #1
 800ce80:	1a09      	subs	r1, r1, r0
 800ce82:	9105      	str	r1, [sp, #20]
 800ce84:	2100      	movs	r1, #0
 800ce86:	9503      	str	r5, [sp, #12]
 800ce88:	4667      	mov	r7, ip
 800ce8a:	6818      	ldr	r0, [r3, #0]
 800ce8c:	40b8      	lsls	r0, r7
 800ce8e:	4301      	orrs	r1, r0
 800ce90:	9803      	ldr	r0, [sp, #12]
 800ce92:	c002      	stmia	r0!, {r1}
 800ce94:	cb02      	ldmia	r3!, {r1}
 800ce96:	9003      	str	r0, [sp, #12]
 800ce98:	9805      	ldr	r0, [sp, #20]
 800ce9a:	40c1      	lsrs	r1, r0
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d8f3      	bhi.n	800ce88 <__lshift+0x7c>
 800cea0:	0020      	movs	r0, r4
 800cea2:	3015      	adds	r0, #21
 800cea4:	2304      	movs	r3, #4
 800cea6:	4282      	cmp	r2, r0
 800cea8:	d304      	bcc.n	800ceb4 <__lshift+0xa8>
 800ceaa:	1b13      	subs	r3, r2, r4
 800ceac:	3b15      	subs	r3, #21
 800ceae:	089b      	lsrs	r3, r3, #2
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	009b      	lsls	r3, r3, #2
 800ceb4:	50e9      	str	r1, [r5, r3]
 800ceb6:	2900      	cmp	r1, #0
 800ceb8:	d002      	beq.n	800cec0 <__lshift+0xb4>
 800ceba:	9b02      	ldr	r3, [sp, #8]
 800cebc:	3302      	adds	r3, #2
 800cebe:	9301      	str	r3, [sp, #4]
 800cec0:	9b01      	ldr	r3, [sp, #4]
 800cec2:	9804      	ldr	r0, [sp, #16]
 800cec4:	3b01      	subs	r3, #1
 800cec6:	0021      	movs	r1, r4
 800cec8:	6133      	str	r3, [r6, #16]
 800ceca:	f7ff fdcd 	bl	800ca68 <_Bfree>
 800cece:	0030      	movs	r0, r6
 800ced0:	b007      	add	sp, #28
 800ced2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ced4:	cb02      	ldmia	r3!, {r1}
 800ced6:	c502      	stmia	r5!, {r1}
 800ced8:	429a      	cmp	r2, r3
 800ceda:	d8fb      	bhi.n	800ced4 <__lshift+0xc8>
 800cedc:	e7f0      	b.n	800cec0 <__lshift+0xb4>
 800cede:	46c0      	nop			; (mov r8, r8)
 800cee0:	08010b68 	.word	0x08010b68
 800cee4:	08010b0c 	.word	0x08010b0c

0800cee8 <__mcmp>:
 800cee8:	6902      	ldr	r2, [r0, #16]
 800ceea:	690b      	ldr	r3, [r1, #16]
 800ceec:	b530      	push	{r4, r5, lr}
 800ceee:	0004      	movs	r4, r0
 800cef0:	1ad0      	subs	r0, r2, r3
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d10d      	bne.n	800cf12 <__mcmp+0x2a>
 800cef6:	009b      	lsls	r3, r3, #2
 800cef8:	3414      	adds	r4, #20
 800cefa:	3114      	adds	r1, #20
 800cefc:	18e2      	adds	r2, r4, r3
 800cefe:	18c9      	adds	r1, r1, r3
 800cf00:	3a04      	subs	r2, #4
 800cf02:	3904      	subs	r1, #4
 800cf04:	6815      	ldr	r5, [r2, #0]
 800cf06:	680b      	ldr	r3, [r1, #0]
 800cf08:	429d      	cmp	r5, r3
 800cf0a:	d003      	beq.n	800cf14 <__mcmp+0x2c>
 800cf0c:	2001      	movs	r0, #1
 800cf0e:	429d      	cmp	r5, r3
 800cf10:	d303      	bcc.n	800cf1a <__mcmp+0x32>
 800cf12:	bd30      	pop	{r4, r5, pc}
 800cf14:	4294      	cmp	r4, r2
 800cf16:	d3f3      	bcc.n	800cf00 <__mcmp+0x18>
 800cf18:	e7fb      	b.n	800cf12 <__mcmp+0x2a>
 800cf1a:	4240      	negs	r0, r0
 800cf1c:	e7f9      	b.n	800cf12 <__mcmp+0x2a>
	...

0800cf20 <__mdiff>:
 800cf20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf22:	000e      	movs	r6, r1
 800cf24:	0007      	movs	r7, r0
 800cf26:	0011      	movs	r1, r2
 800cf28:	0030      	movs	r0, r6
 800cf2a:	b087      	sub	sp, #28
 800cf2c:	0014      	movs	r4, r2
 800cf2e:	f7ff ffdb 	bl	800cee8 <__mcmp>
 800cf32:	1e05      	subs	r5, r0, #0
 800cf34:	d110      	bne.n	800cf58 <__mdiff+0x38>
 800cf36:	0001      	movs	r1, r0
 800cf38:	0038      	movs	r0, r7
 800cf3a:	f7ff fd51 	bl	800c9e0 <_Balloc>
 800cf3e:	1e02      	subs	r2, r0, #0
 800cf40:	d104      	bne.n	800cf4c <__mdiff+0x2c>
 800cf42:	4b40      	ldr	r3, [pc, #256]	; (800d044 <__mdiff+0x124>)
 800cf44:	4940      	ldr	r1, [pc, #256]	; (800d048 <__mdiff+0x128>)
 800cf46:	4841      	ldr	r0, [pc, #260]	; (800d04c <__mdiff+0x12c>)
 800cf48:	f000 fcea 	bl	800d920 <__assert_func>
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	6145      	str	r5, [r0, #20]
 800cf50:	6103      	str	r3, [r0, #16]
 800cf52:	0010      	movs	r0, r2
 800cf54:	b007      	add	sp, #28
 800cf56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf58:	2301      	movs	r3, #1
 800cf5a:	9301      	str	r3, [sp, #4]
 800cf5c:	2800      	cmp	r0, #0
 800cf5e:	db04      	blt.n	800cf6a <__mdiff+0x4a>
 800cf60:	0023      	movs	r3, r4
 800cf62:	0034      	movs	r4, r6
 800cf64:	001e      	movs	r6, r3
 800cf66:	2300      	movs	r3, #0
 800cf68:	9301      	str	r3, [sp, #4]
 800cf6a:	0038      	movs	r0, r7
 800cf6c:	6861      	ldr	r1, [r4, #4]
 800cf6e:	f7ff fd37 	bl	800c9e0 <_Balloc>
 800cf72:	1e02      	subs	r2, r0, #0
 800cf74:	d103      	bne.n	800cf7e <__mdiff+0x5e>
 800cf76:	2190      	movs	r1, #144	; 0x90
 800cf78:	4b32      	ldr	r3, [pc, #200]	; (800d044 <__mdiff+0x124>)
 800cf7a:	0089      	lsls	r1, r1, #2
 800cf7c:	e7e3      	b.n	800cf46 <__mdiff+0x26>
 800cf7e:	9b01      	ldr	r3, [sp, #4]
 800cf80:	2700      	movs	r7, #0
 800cf82:	60c3      	str	r3, [r0, #12]
 800cf84:	6920      	ldr	r0, [r4, #16]
 800cf86:	3414      	adds	r4, #20
 800cf88:	9401      	str	r4, [sp, #4]
 800cf8a:	9b01      	ldr	r3, [sp, #4]
 800cf8c:	0084      	lsls	r4, r0, #2
 800cf8e:	191b      	adds	r3, r3, r4
 800cf90:	0034      	movs	r4, r6
 800cf92:	9302      	str	r3, [sp, #8]
 800cf94:	6933      	ldr	r3, [r6, #16]
 800cf96:	3414      	adds	r4, #20
 800cf98:	0099      	lsls	r1, r3, #2
 800cf9a:	1863      	adds	r3, r4, r1
 800cf9c:	9303      	str	r3, [sp, #12]
 800cf9e:	0013      	movs	r3, r2
 800cfa0:	3314      	adds	r3, #20
 800cfa2:	469c      	mov	ip, r3
 800cfa4:	9305      	str	r3, [sp, #20]
 800cfa6:	9b01      	ldr	r3, [sp, #4]
 800cfa8:	9304      	str	r3, [sp, #16]
 800cfaa:	9b04      	ldr	r3, [sp, #16]
 800cfac:	cc02      	ldmia	r4!, {r1}
 800cfae:	cb20      	ldmia	r3!, {r5}
 800cfb0:	9304      	str	r3, [sp, #16]
 800cfb2:	b2ab      	uxth	r3, r5
 800cfb4:	19df      	adds	r7, r3, r7
 800cfb6:	b28b      	uxth	r3, r1
 800cfb8:	1afb      	subs	r3, r7, r3
 800cfba:	0c09      	lsrs	r1, r1, #16
 800cfbc:	0c2d      	lsrs	r5, r5, #16
 800cfbe:	1a6d      	subs	r5, r5, r1
 800cfc0:	1419      	asrs	r1, r3, #16
 800cfc2:	186d      	adds	r5, r5, r1
 800cfc4:	4661      	mov	r1, ip
 800cfc6:	142f      	asrs	r7, r5, #16
 800cfc8:	b29b      	uxth	r3, r3
 800cfca:	042d      	lsls	r5, r5, #16
 800cfcc:	432b      	orrs	r3, r5
 800cfce:	c108      	stmia	r1!, {r3}
 800cfd0:	9b03      	ldr	r3, [sp, #12]
 800cfd2:	468c      	mov	ip, r1
 800cfd4:	42a3      	cmp	r3, r4
 800cfd6:	d8e8      	bhi.n	800cfaa <__mdiff+0x8a>
 800cfd8:	0031      	movs	r1, r6
 800cfda:	9c03      	ldr	r4, [sp, #12]
 800cfdc:	3115      	adds	r1, #21
 800cfde:	2304      	movs	r3, #4
 800cfe0:	428c      	cmp	r4, r1
 800cfe2:	d304      	bcc.n	800cfee <__mdiff+0xce>
 800cfe4:	1ba3      	subs	r3, r4, r6
 800cfe6:	3b15      	subs	r3, #21
 800cfe8:	089b      	lsrs	r3, r3, #2
 800cfea:	3301      	adds	r3, #1
 800cfec:	009b      	lsls	r3, r3, #2
 800cfee:	9901      	ldr	r1, [sp, #4]
 800cff0:	18cc      	adds	r4, r1, r3
 800cff2:	9905      	ldr	r1, [sp, #20]
 800cff4:	0026      	movs	r6, r4
 800cff6:	18cb      	adds	r3, r1, r3
 800cff8:	469c      	mov	ip, r3
 800cffa:	9902      	ldr	r1, [sp, #8]
 800cffc:	428e      	cmp	r6, r1
 800cffe:	d310      	bcc.n	800d022 <__mdiff+0x102>
 800d000:	9e02      	ldr	r6, [sp, #8]
 800d002:	1ee1      	subs	r1, r4, #3
 800d004:	2500      	movs	r5, #0
 800d006:	428e      	cmp	r6, r1
 800d008:	d304      	bcc.n	800d014 <__mdiff+0xf4>
 800d00a:	0031      	movs	r1, r6
 800d00c:	3103      	adds	r1, #3
 800d00e:	1b0c      	subs	r4, r1, r4
 800d010:	08a4      	lsrs	r4, r4, #2
 800d012:	00a5      	lsls	r5, r4, #2
 800d014:	195b      	adds	r3, r3, r5
 800d016:	3b04      	subs	r3, #4
 800d018:	6819      	ldr	r1, [r3, #0]
 800d01a:	2900      	cmp	r1, #0
 800d01c:	d00f      	beq.n	800d03e <__mdiff+0x11e>
 800d01e:	6110      	str	r0, [r2, #16]
 800d020:	e797      	b.n	800cf52 <__mdiff+0x32>
 800d022:	ce02      	ldmia	r6!, {r1}
 800d024:	b28d      	uxth	r5, r1
 800d026:	19ed      	adds	r5, r5, r7
 800d028:	0c0f      	lsrs	r7, r1, #16
 800d02a:	1429      	asrs	r1, r5, #16
 800d02c:	1879      	adds	r1, r7, r1
 800d02e:	140f      	asrs	r7, r1, #16
 800d030:	b2ad      	uxth	r5, r5
 800d032:	0409      	lsls	r1, r1, #16
 800d034:	430d      	orrs	r5, r1
 800d036:	4661      	mov	r1, ip
 800d038:	c120      	stmia	r1!, {r5}
 800d03a:	468c      	mov	ip, r1
 800d03c:	e7dd      	b.n	800cffa <__mdiff+0xda>
 800d03e:	3801      	subs	r0, #1
 800d040:	e7e9      	b.n	800d016 <__mdiff+0xf6>
 800d042:	46c0      	nop			; (mov r8, r8)
 800d044:	08010b68 	.word	0x08010b68
 800d048:	00000232 	.word	0x00000232
 800d04c:	08010b0c 	.word	0x08010b0c

0800d050 <__d2b>:
 800d050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d052:	2101      	movs	r1, #1
 800d054:	0014      	movs	r4, r2
 800d056:	001e      	movs	r6, r3
 800d058:	9f08      	ldr	r7, [sp, #32]
 800d05a:	f7ff fcc1 	bl	800c9e0 <_Balloc>
 800d05e:	1e05      	subs	r5, r0, #0
 800d060:	d105      	bne.n	800d06e <__d2b+0x1e>
 800d062:	0002      	movs	r2, r0
 800d064:	4b26      	ldr	r3, [pc, #152]	; (800d100 <__d2b+0xb0>)
 800d066:	4927      	ldr	r1, [pc, #156]	; (800d104 <__d2b+0xb4>)
 800d068:	4827      	ldr	r0, [pc, #156]	; (800d108 <__d2b+0xb8>)
 800d06a:	f000 fc59 	bl	800d920 <__assert_func>
 800d06e:	0333      	lsls	r3, r6, #12
 800d070:	0076      	lsls	r6, r6, #1
 800d072:	0b1b      	lsrs	r3, r3, #12
 800d074:	0d76      	lsrs	r6, r6, #21
 800d076:	d124      	bne.n	800d0c2 <__d2b+0x72>
 800d078:	9301      	str	r3, [sp, #4]
 800d07a:	2c00      	cmp	r4, #0
 800d07c:	d027      	beq.n	800d0ce <__d2b+0x7e>
 800d07e:	4668      	mov	r0, sp
 800d080:	9400      	str	r4, [sp, #0]
 800d082:	f7ff fd73 	bl	800cb6c <__lo0bits>
 800d086:	9c00      	ldr	r4, [sp, #0]
 800d088:	2800      	cmp	r0, #0
 800d08a:	d01e      	beq.n	800d0ca <__d2b+0x7a>
 800d08c:	9b01      	ldr	r3, [sp, #4]
 800d08e:	2120      	movs	r1, #32
 800d090:	001a      	movs	r2, r3
 800d092:	1a09      	subs	r1, r1, r0
 800d094:	408a      	lsls	r2, r1
 800d096:	40c3      	lsrs	r3, r0
 800d098:	4322      	orrs	r2, r4
 800d09a:	616a      	str	r2, [r5, #20]
 800d09c:	9301      	str	r3, [sp, #4]
 800d09e:	9c01      	ldr	r4, [sp, #4]
 800d0a0:	61ac      	str	r4, [r5, #24]
 800d0a2:	1e63      	subs	r3, r4, #1
 800d0a4:	419c      	sbcs	r4, r3
 800d0a6:	3401      	adds	r4, #1
 800d0a8:	612c      	str	r4, [r5, #16]
 800d0aa:	2e00      	cmp	r6, #0
 800d0ac:	d018      	beq.n	800d0e0 <__d2b+0x90>
 800d0ae:	4b17      	ldr	r3, [pc, #92]	; (800d10c <__d2b+0xbc>)
 800d0b0:	18f6      	adds	r6, r6, r3
 800d0b2:	2335      	movs	r3, #53	; 0x35
 800d0b4:	1836      	adds	r6, r6, r0
 800d0b6:	1a18      	subs	r0, r3, r0
 800d0b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0ba:	603e      	str	r6, [r7, #0]
 800d0bc:	6018      	str	r0, [r3, #0]
 800d0be:	0028      	movs	r0, r5
 800d0c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d0c2:	2280      	movs	r2, #128	; 0x80
 800d0c4:	0352      	lsls	r2, r2, #13
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	e7d6      	b.n	800d078 <__d2b+0x28>
 800d0ca:	616c      	str	r4, [r5, #20]
 800d0cc:	e7e7      	b.n	800d09e <__d2b+0x4e>
 800d0ce:	a801      	add	r0, sp, #4
 800d0d0:	f7ff fd4c 	bl	800cb6c <__lo0bits>
 800d0d4:	2401      	movs	r4, #1
 800d0d6:	9b01      	ldr	r3, [sp, #4]
 800d0d8:	612c      	str	r4, [r5, #16]
 800d0da:	616b      	str	r3, [r5, #20]
 800d0dc:	3020      	adds	r0, #32
 800d0de:	e7e4      	b.n	800d0aa <__d2b+0x5a>
 800d0e0:	4b0b      	ldr	r3, [pc, #44]	; (800d110 <__d2b+0xc0>)
 800d0e2:	18c0      	adds	r0, r0, r3
 800d0e4:	4b0b      	ldr	r3, [pc, #44]	; (800d114 <__d2b+0xc4>)
 800d0e6:	6038      	str	r0, [r7, #0]
 800d0e8:	18e3      	adds	r3, r4, r3
 800d0ea:	009b      	lsls	r3, r3, #2
 800d0ec:	18eb      	adds	r3, r5, r3
 800d0ee:	6958      	ldr	r0, [r3, #20]
 800d0f0:	f7ff fd22 	bl	800cb38 <__hi0bits>
 800d0f4:	0164      	lsls	r4, r4, #5
 800d0f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0f8:	1a24      	subs	r4, r4, r0
 800d0fa:	601c      	str	r4, [r3, #0]
 800d0fc:	e7df      	b.n	800d0be <__d2b+0x6e>
 800d0fe:	46c0      	nop			; (mov r8, r8)
 800d100:	08010b68 	.word	0x08010b68
 800d104:	0000030a 	.word	0x0000030a
 800d108:	08010b0c 	.word	0x08010b0c
 800d10c:	fffffbcd 	.word	0xfffffbcd
 800d110:	fffffbce 	.word	0xfffffbce
 800d114:	3fffffff 	.word	0x3fffffff

0800d118 <_mprec_log10>:
 800d118:	b510      	push	{r4, lr}
 800d11a:	0004      	movs	r4, r0
 800d11c:	2817      	cmp	r0, #23
 800d11e:	dc05      	bgt.n	800d12c <_mprec_log10+0x14>
 800d120:	4c07      	ldr	r4, [pc, #28]	; (800d140 <_mprec_log10+0x28>)
 800d122:	00c0      	lsls	r0, r0, #3
 800d124:	1824      	adds	r4, r4, r0
 800d126:	6820      	ldr	r0, [r4, #0]
 800d128:	6861      	ldr	r1, [r4, #4]
 800d12a:	bd10      	pop	{r4, pc}
 800d12c:	2000      	movs	r0, #0
 800d12e:	4905      	ldr	r1, [pc, #20]	; (800d144 <_mprec_log10+0x2c>)
 800d130:	2200      	movs	r2, #0
 800d132:	4b05      	ldr	r3, [pc, #20]	; (800d148 <_mprec_log10+0x30>)
 800d134:	3c01      	subs	r4, #1
 800d136:	f7f4 fed3 	bl	8001ee0 <__aeabi_dmul>
 800d13a:	2c00      	cmp	r4, #0
 800d13c:	d1f8      	bne.n	800d130 <_mprec_log10+0x18>
 800d13e:	e7f4      	b.n	800d12a <_mprec_log10+0x12>
 800d140:	08010ba8 	.word	0x08010ba8
 800d144:	3ff00000 	.word	0x3ff00000
 800d148:	40240000 	.word	0x40240000

0800d14c <_calloc_r>:
 800d14c:	b570      	push	{r4, r5, r6, lr}
 800d14e:	0c13      	lsrs	r3, r2, #16
 800d150:	0c0d      	lsrs	r5, r1, #16
 800d152:	d11e      	bne.n	800d192 <_calloc_r+0x46>
 800d154:	2b00      	cmp	r3, #0
 800d156:	d10c      	bne.n	800d172 <_calloc_r+0x26>
 800d158:	b289      	uxth	r1, r1
 800d15a:	b294      	uxth	r4, r2
 800d15c:	434c      	muls	r4, r1
 800d15e:	0021      	movs	r1, r4
 800d160:	f000 f842 	bl	800d1e8 <_malloc_r>
 800d164:	1e05      	subs	r5, r0, #0
 800d166:	d01b      	beq.n	800d1a0 <_calloc_r+0x54>
 800d168:	0022      	movs	r2, r4
 800d16a:	2100      	movs	r1, #0
 800d16c:	f7ff f9fb 	bl	800c566 <memset>
 800d170:	e016      	b.n	800d1a0 <_calloc_r+0x54>
 800d172:	1c1d      	adds	r5, r3, #0
 800d174:	1c0b      	adds	r3, r1, #0
 800d176:	b292      	uxth	r2, r2
 800d178:	b289      	uxth	r1, r1
 800d17a:	b29c      	uxth	r4, r3
 800d17c:	4351      	muls	r1, r2
 800d17e:	b2ab      	uxth	r3, r5
 800d180:	4363      	muls	r3, r4
 800d182:	0c0c      	lsrs	r4, r1, #16
 800d184:	191c      	adds	r4, r3, r4
 800d186:	0c22      	lsrs	r2, r4, #16
 800d188:	d107      	bne.n	800d19a <_calloc_r+0x4e>
 800d18a:	0424      	lsls	r4, r4, #16
 800d18c:	b289      	uxth	r1, r1
 800d18e:	430c      	orrs	r4, r1
 800d190:	e7e5      	b.n	800d15e <_calloc_r+0x12>
 800d192:	2b00      	cmp	r3, #0
 800d194:	d101      	bne.n	800d19a <_calloc_r+0x4e>
 800d196:	1c13      	adds	r3, r2, #0
 800d198:	e7ed      	b.n	800d176 <_calloc_r+0x2a>
 800d19a:	230c      	movs	r3, #12
 800d19c:	2500      	movs	r5, #0
 800d19e:	6003      	str	r3, [r0, #0]
 800d1a0:	0028      	movs	r0, r5
 800d1a2:	bd70      	pop	{r4, r5, r6, pc}

0800d1a4 <sbrk_aligned>:
 800d1a4:	b570      	push	{r4, r5, r6, lr}
 800d1a6:	4e0f      	ldr	r6, [pc, #60]	; (800d1e4 <sbrk_aligned+0x40>)
 800d1a8:	000d      	movs	r5, r1
 800d1aa:	6831      	ldr	r1, [r6, #0]
 800d1ac:	0004      	movs	r4, r0
 800d1ae:	2900      	cmp	r1, #0
 800d1b0:	d102      	bne.n	800d1b8 <sbrk_aligned+0x14>
 800d1b2:	f000 fba3 	bl	800d8fc <_sbrk_r>
 800d1b6:	6030      	str	r0, [r6, #0]
 800d1b8:	0029      	movs	r1, r5
 800d1ba:	0020      	movs	r0, r4
 800d1bc:	f000 fb9e 	bl	800d8fc <_sbrk_r>
 800d1c0:	1c43      	adds	r3, r0, #1
 800d1c2:	d00a      	beq.n	800d1da <sbrk_aligned+0x36>
 800d1c4:	2303      	movs	r3, #3
 800d1c6:	1cc5      	adds	r5, r0, #3
 800d1c8:	439d      	bics	r5, r3
 800d1ca:	42a8      	cmp	r0, r5
 800d1cc:	d007      	beq.n	800d1de <sbrk_aligned+0x3a>
 800d1ce:	1a29      	subs	r1, r5, r0
 800d1d0:	0020      	movs	r0, r4
 800d1d2:	f000 fb93 	bl	800d8fc <_sbrk_r>
 800d1d6:	1c43      	adds	r3, r0, #1
 800d1d8:	d101      	bne.n	800d1de <sbrk_aligned+0x3a>
 800d1da:	2501      	movs	r5, #1
 800d1dc:	426d      	negs	r5, r5
 800d1de:	0028      	movs	r0, r5
 800d1e0:	bd70      	pop	{r4, r5, r6, pc}
 800d1e2:	46c0      	nop			; (mov r8, r8)
 800d1e4:	200016a0 	.word	0x200016a0

0800d1e8 <_malloc_r>:
 800d1e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1ea:	2203      	movs	r2, #3
 800d1ec:	1ccb      	adds	r3, r1, #3
 800d1ee:	4393      	bics	r3, r2
 800d1f0:	3308      	adds	r3, #8
 800d1f2:	0006      	movs	r6, r0
 800d1f4:	001f      	movs	r7, r3
 800d1f6:	2b0c      	cmp	r3, #12
 800d1f8:	d232      	bcs.n	800d260 <_malloc_r+0x78>
 800d1fa:	270c      	movs	r7, #12
 800d1fc:	42b9      	cmp	r1, r7
 800d1fe:	d831      	bhi.n	800d264 <_malloc_r+0x7c>
 800d200:	0030      	movs	r0, r6
 800d202:	f001 fa89 	bl	800e718 <__malloc_lock>
 800d206:	4d32      	ldr	r5, [pc, #200]	; (800d2d0 <_malloc_r+0xe8>)
 800d208:	682b      	ldr	r3, [r5, #0]
 800d20a:	001c      	movs	r4, r3
 800d20c:	2c00      	cmp	r4, #0
 800d20e:	d12e      	bne.n	800d26e <_malloc_r+0x86>
 800d210:	0039      	movs	r1, r7
 800d212:	0030      	movs	r0, r6
 800d214:	f7ff ffc6 	bl	800d1a4 <sbrk_aligned>
 800d218:	0004      	movs	r4, r0
 800d21a:	1c43      	adds	r3, r0, #1
 800d21c:	d11e      	bne.n	800d25c <_malloc_r+0x74>
 800d21e:	682c      	ldr	r4, [r5, #0]
 800d220:	0025      	movs	r5, r4
 800d222:	2d00      	cmp	r5, #0
 800d224:	d14a      	bne.n	800d2bc <_malloc_r+0xd4>
 800d226:	6823      	ldr	r3, [r4, #0]
 800d228:	0029      	movs	r1, r5
 800d22a:	18e3      	adds	r3, r4, r3
 800d22c:	0030      	movs	r0, r6
 800d22e:	9301      	str	r3, [sp, #4]
 800d230:	f000 fb64 	bl	800d8fc <_sbrk_r>
 800d234:	9b01      	ldr	r3, [sp, #4]
 800d236:	4283      	cmp	r3, r0
 800d238:	d143      	bne.n	800d2c2 <_malloc_r+0xda>
 800d23a:	6823      	ldr	r3, [r4, #0]
 800d23c:	3703      	adds	r7, #3
 800d23e:	1aff      	subs	r7, r7, r3
 800d240:	2303      	movs	r3, #3
 800d242:	439f      	bics	r7, r3
 800d244:	3708      	adds	r7, #8
 800d246:	2f0c      	cmp	r7, #12
 800d248:	d200      	bcs.n	800d24c <_malloc_r+0x64>
 800d24a:	270c      	movs	r7, #12
 800d24c:	0039      	movs	r1, r7
 800d24e:	0030      	movs	r0, r6
 800d250:	f7ff ffa8 	bl	800d1a4 <sbrk_aligned>
 800d254:	1c43      	adds	r3, r0, #1
 800d256:	d034      	beq.n	800d2c2 <_malloc_r+0xda>
 800d258:	6823      	ldr	r3, [r4, #0]
 800d25a:	19df      	adds	r7, r3, r7
 800d25c:	6027      	str	r7, [r4, #0]
 800d25e:	e013      	b.n	800d288 <_malloc_r+0xa0>
 800d260:	2b00      	cmp	r3, #0
 800d262:	dacb      	bge.n	800d1fc <_malloc_r+0x14>
 800d264:	230c      	movs	r3, #12
 800d266:	2500      	movs	r5, #0
 800d268:	6033      	str	r3, [r6, #0]
 800d26a:	0028      	movs	r0, r5
 800d26c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d26e:	6822      	ldr	r2, [r4, #0]
 800d270:	1bd1      	subs	r1, r2, r7
 800d272:	d420      	bmi.n	800d2b6 <_malloc_r+0xce>
 800d274:	290b      	cmp	r1, #11
 800d276:	d917      	bls.n	800d2a8 <_malloc_r+0xc0>
 800d278:	19e2      	adds	r2, r4, r7
 800d27a:	6027      	str	r7, [r4, #0]
 800d27c:	42a3      	cmp	r3, r4
 800d27e:	d111      	bne.n	800d2a4 <_malloc_r+0xbc>
 800d280:	602a      	str	r2, [r5, #0]
 800d282:	6863      	ldr	r3, [r4, #4]
 800d284:	6011      	str	r1, [r2, #0]
 800d286:	6053      	str	r3, [r2, #4]
 800d288:	0030      	movs	r0, r6
 800d28a:	0025      	movs	r5, r4
 800d28c:	f001 fa4c 	bl	800e728 <__malloc_unlock>
 800d290:	2207      	movs	r2, #7
 800d292:	350b      	adds	r5, #11
 800d294:	1d23      	adds	r3, r4, #4
 800d296:	4395      	bics	r5, r2
 800d298:	1aea      	subs	r2, r5, r3
 800d29a:	429d      	cmp	r5, r3
 800d29c:	d0e5      	beq.n	800d26a <_malloc_r+0x82>
 800d29e:	1b5b      	subs	r3, r3, r5
 800d2a0:	50a3      	str	r3, [r4, r2]
 800d2a2:	e7e2      	b.n	800d26a <_malloc_r+0x82>
 800d2a4:	605a      	str	r2, [r3, #4]
 800d2a6:	e7ec      	b.n	800d282 <_malloc_r+0x9a>
 800d2a8:	6862      	ldr	r2, [r4, #4]
 800d2aa:	42a3      	cmp	r3, r4
 800d2ac:	d101      	bne.n	800d2b2 <_malloc_r+0xca>
 800d2ae:	602a      	str	r2, [r5, #0]
 800d2b0:	e7ea      	b.n	800d288 <_malloc_r+0xa0>
 800d2b2:	605a      	str	r2, [r3, #4]
 800d2b4:	e7e8      	b.n	800d288 <_malloc_r+0xa0>
 800d2b6:	0023      	movs	r3, r4
 800d2b8:	6864      	ldr	r4, [r4, #4]
 800d2ba:	e7a7      	b.n	800d20c <_malloc_r+0x24>
 800d2bc:	002c      	movs	r4, r5
 800d2be:	686d      	ldr	r5, [r5, #4]
 800d2c0:	e7af      	b.n	800d222 <_malloc_r+0x3a>
 800d2c2:	230c      	movs	r3, #12
 800d2c4:	0030      	movs	r0, r6
 800d2c6:	6033      	str	r3, [r6, #0]
 800d2c8:	f001 fa2e 	bl	800e728 <__malloc_unlock>
 800d2cc:	e7cd      	b.n	800d26a <_malloc_r+0x82>
 800d2ce:	46c0      	nop			; (mov r8, r8)
 800d2d0:	2000169c 	.word	0x2000169c

0800d2d4 <_realloc_r>:
 800d2d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d2d6:	0007      	movs	r7, r0
 800d2d8:	000e      	movs	r6, r1
 800d2da:	0014      	movs	r4, r2
 800d2dc:	2900      	cmp	r1, #0
 800d2de:	d105      	bne.n	800d2ec <_realloc_r+0x18>
 800d2e0:	0011      	movs	r1, r2
 800d2e2:	f7ff ff81 	bl	800d1e8 <_malloc_r>
 800d2e6:	0005      	movs	r5, r0
 800d2e8:	0028      	movs	r0, r5
 800d2ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d2ec:	2a00      	cmp	r2, #0
 800d2ee:	d103      	bne.n	800d2f8 <_realloc_r+0x24>
 800d2f0:	f001 fa22 	bl	800e738 <_free_r>
 800d2f4:	0025      	movs	r5, r4
 800d2f6:	e7f7      	b.n	800d2e8 <_realloc_r+0x14>
 800d2f8:	f001 fa68 	bl	800e7cc <_malloc_usable_size_r>
 800d2fc:	9001      	str	r0, [sp, #4]
 800d2fe:	4284      	cmp	r4, r0
 800d300:	d803      	bhi.n	800d30a <_realloc_r+0x36>
 800d302:	0035      	movs	r5, r6
 800d304:	0843      	lsrs	r3, r0, #1
 800d306:	42a3      	cmp	r3, r4
 800d308:	d3ee      	bcc.n	800d2e8 <_realloc_r+0x14>
 800d30a:	0021      	movs	r1, r4
 800d30c:	0038      	movs	r0, r7
 800d30e:	f7ff ff6b 	bl	800d1e8 <_malloc_r>
 800d312:	1e05      	subs	r5, r0, #0
 800d314:	d0e8      	beq.n	800d2e8 <_realloc_r+0x14>
 800d316:	9b01      	ldr	r3, [sp, #4]
 800d318:	0022      	movs	r2, r4
 800d31a:	429c      	cmp	r4, r3
 800d31c:	d900      	bls.n	800d320 <_realloc_r+0x4c>
 800d31e:	001a      	movs	r2, r3
 800d320:	0031      	movs	r1, r6
 800d322:	0028      	movs	r0, r5
 800d324:	f7ff f916 	bl	800c554 <memcpy>
 800d328:	0031      	movs	r1, r6
 800d32a:	0038      	movs	r0, r7
 800d32c:	f001 fa04 	bl	800e738 <_free_r>
 800d330:	e7da      	b.n	800d2e8 <_realloc_r+0x14>
	...

0800d334 <__ssputs_r>:
 800d334:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d336:	688e      	ldr	r6, [r1, #8]
 800d338:	b085      	sub	sp, #20
 800d33a:	0007      	movs	r7, r0
 800d33c:	000c      	movs	r4, r1
 800d33e:	9203      	str	r2, [sp, #12]
 800d340:	9301      	str	r3, [sp, #4]
 800d342:	429e      	cmp	r6, r3
 800d344:	d83c      	bhi.n	800d3c0 <__ssputs_r+0x8c>
 800d346:	2390      	movs	r3, #144	; 0x90
 800d348:	898a      	ldrh	r2, [r1, #12]
 800d34a:	00db      	lsls	r3, r3, #3
 800d34c:	421a      	tst	r2, r3
 800d34e:	d034      	beq.n	800d3ba <__ssputs_r+0x86>
 800d350:	6909      	ldr	r1, [r1, #16]
 800d352:	6823      	ldr	r3, [r4, #0]
 800d354:	6960      	ldr	r0, [r4, #20]
 800d356:	1a5b      	subs	r3, r3, r1
 800d358:	9302      	str	r3, [sp, #8]
 800d35a:	2303      	movs	r3, #3
 800d35c:	4343      	muls	r3, r0
 800d35e:	0fdd      	lsrs	r5, r3, #31
 800d360:	18ed      	adds	r5, r5, r3
 800d362:	9b01      	ldr	r3, [sp, #4]
 800d364:	9802      	ldr	r0, [sp, #8]
 800d366:	3301      	adds	r3, #1
 800d368:	181b      	adds	r3, r3, r0
 800d36a:	106d      	asrs	r5, r5, #1
 800d36c:	42ab      	cmp	r3, r5
 800d36e:	d900      	bls.n	800d372 <__ssputs_r+0x3e>
 800d370:	001d      	movs	r5, r3
 800d372:	0553      	lsls	r3, r2, #21
 800d374:	d532      	bpl.n	800d3dc <__ssputs_r+0xa8>
 800d376:	0029      	movs	r1, r5
 800d378:	0038      	movs	r0, r7
 800d37a:	f7ff ff35 	bl	800d1e8 <_malloc_r>
 800d37e:	1e06      	subs	r6, r0, #0
 800d380:	d109      	bne.n	800d396 <__ssputs_r+0x62>
 800d382:	230c      	movs	r3, #12
 800d384:	603b      	str	r3, [r7, #0]
 800d386:	2340      	movs	r3, #64	; 0x40
 800d388:	2001      	movs	r0, #1
 800d38a:	89a2      	ldrh	r2, [r4, #12]
 800d38c:	4240      	negs	r0, r0
 800d38e:	4313      	orrs	r3, r2
 800d390:	81a3      	strh	r3, [r4, #12]
 800d392:	b005      	add	sp, #20
 800d394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d396:	9a02      	ldr	r2, [sp, #8]
 800d398:	6921      	ldr	r1, [r4, #16]
 800d39a:	f7ff f8db 	bl	800c554 <memcpy>
 800d39e:	89a3      	ldrh	r3, [r4, #12]
 800d3a0:	4a14      	ldr	r2, [pc, #80]	; (800d3f4 <__ssputs_r+0xc0>)
 800d3a2:	401a      	ands	r2, r3
 800d3a4:	2380      	movs	r3, #128	; 0x80
 800d3a6:	4313      	orrs	r3, r2
 800d3a8:	81a3      	strh	r3, [r4, #12]
 800d3aa:	9b02      	ldr	r3, [sp, #8]
 800d3ac:	6126      	str	r6, [r4, #16]
 800d3ae:	18f6      	adds	r6, r6, r3
 800d3b0:	6026      	str	r6, [r4, #0]
 800d3b2:	6165      	str	r5, [r4, #20]
 800d3b4:	9e01      	ldr	r6, [sp, #4]
 800d3b6:	1aed      	subs	r5, r5, r3
 800d3b8:	60a5      	str	r5, [r4, #8]
 800d3ba:	9b01      	ldr	r3, [sp, #4]
 800d3bc:	429e      	cmp	r6, r3
 800d3be:	d900      	bls.n	800d3c2 <__ssputs_r+0x8e>
 800d3c0:	9e01      	ldr	r6, [sp, #4]
 800d3c2:	0032      	movs	r2, r6
 800d3c4:	9903      	ldr	r1, [sp, #12]
 800d3c6:	6820      	ldr	r0, [r4, #0]
 800d3c8:	f001 f993 	bl	800e6f2 <memmove>
 800d3cc:	68a3      	ldr	r3, [r4, #8]
 800d3ce:	2000      	movs	r0, #0
 800d3d0:	1b9b      	subs	r3, r3, r6
 800d3d2:	60a3      	str	r3, [r4, #8]
 800d3d4:	6823      	ldr	r3, [r4, #0]
 800d3d6:	199e      	adds	r6, r3, r6
 800d3d8:	6026      	str	r6, [r4, #0]
 800d3da:	e7da      	b.n	800d392 <__ssputs_r+0x5e>
 800d3dc:	002a      	movs	r2, r5
 800d3de:	0038      	movs	r0, r7
 800d3e0:	f7ff ff78 	bl	800d2d4 <_realloc_r>
 800d3e4:	1e06      	subs	r6, r0, #0
 800d3e6:	d1e0      	bne.n	800d3aa <__ssputs_r+0x76>
 800d3e8:	0038      	movs	r0, r7
 800d3ea:	6921      	ldr	r1, [r4, #16]
 800d3ec:	f001 f9a4 	bl	800e738 <_free_r>
 800d3f0:	e7c7      	b.n	800d382 <__ssputs_r+0x4e>
 800d3f2:	46c0      	nop			; (mov r8, r8)
 800d3f4:	fffffb7f 	.word	0xfffffb7f

0800d3f8 <_svfiprintf_r>:
 800d3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3fa:	b0a1      	sub	sp, #132	; 0x84
 800d3fc:	9003      	str	r0, [sp, #12]
 800d3fe:	001d      	movs	r5, r3
 800d400:	898b      	ldrh	r3, [r1, #12]
 800d402:	000f      	movs	r7, r1
 800d404:	0016      	movs	r6, r2
 800d406:	061b      	lsls	r3, r3, #24
 800d408:	d511      	bpl.n	800d42e <_svfiprintf_r+0x36>
 800d40a:	690b      	ldr	r3, [r1, #16]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d10e      	bne.n	800d42e <_svfiprintf_r+0x36>
 800d410:	2140      	movs	r1, #64	; 0x40
 800d412:	f7ff fee9 	bl	800d1e8 <_malloc_r>
 800d416:	6038      	str	r0, [r7, #0]
 800d418:	6138      	str	r0, [r7, #16]
 800d41a:	2800      	cmp	r0, #0
 800d41c:	d105      	bne.n	800d42a <_svfiprintf_r+0x32>
 800d41e:	230c      	movs	r3, #12
 800d420:	9a03      	ldr	r2, [sp, #12]
 800d422:	3801      	subs	r0, #1
 800d424:	6013      	str	r3, [r2, #0]
 800d426:	b021      	add	sp, #132	; 0x84
 800d428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d42a:	2340      	movs	r3, #64	; 0x40
 800d42c:	617b      	str	r3, [r7, #20]
 800d42e:	2300      	movs	r3, #0
 800d430:	ac08      	add	r4, sp, #32
 800d432:	6163      	str	r3, [r4, #20]
 800d434:	3320      	adds	r3, #32
 800d436:	7663      	strb	r3, [r4, #25]
 800d438:	3310      	adds	r3, #16
 800d43a:	76a3      	strb	r3, [r4, #26]
 800d43c:	9507      	str	r5, [sp, #28]
 800d43e:	0035      	movs	r5, r6
 800d440:	782b      	ldrb	r3, [r5, #0]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d001      	beq.n	800d44a <_svfiprintf_r+0x52>
 800d446:	2b25      	cmp	r3, #37	; 0x25
 800d448:	d147      	bne.n	800d4da <_svfiprintf_r+0xe2>
 800d44a:	1bab      	subs	r3, r5, r6
 800d44c:	9305      	str	r3, [sp, #20]
 800d44e:	42b5      	cmp	r5, r6
 800d450:	d00c      	beq.n	800d46c <_svfiprintf_r+0x74>
 800d452:	0032      	movs	r2, r6
 800d454:	0039      	movs	r1, r7
 800d456:	9803      	ldr	r0, [sp, #12]
 800d458:	f7ff ff6c 	bl	800d334 <__ssputs_r>
 800d45c:	1c43      	adds	r3, r0, #1
 800d45e:	d100      	bne.n	800d462 <_svfiprintf_r+0x6a>
 800d460:	e0ae      	b.n	800d5c0 <_svfiprintf_r+0x1c8>
 800d462:	6962      	ldr	r2, [r4, #20]
 800d464:	9b05      	ldr	r3, [sp, #20]
 800d466:	4694      	mov	ip, r2
 800d468:	4463      	add	r3, ip
 800d46a:	6163      	str	r3, [r4, #20]
 800d46c:	782b      	ldrb	r3, [r5, #0]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d100      	bne.n	800d474 <_svfiprintf_r+0x7c>
 800d472:	e0a5      	b.n	800d5c0 <_svfiprintf_r+0x1c8>
 800d474:	2201      	movs	r2, #1
 800d476:	2300      	movs	r3, #0
 800d478:	4252      	negs	r2, r2
 800d47a:	6062      	str	r2, [r4, #4]
 800d47c:	a904      	add	r1, sp, #16
 800d47e:	3254      	adds	r2, #84	; 0x54
 800d480:	1852      	adds	r2, r2, r1
 800d482:	1c6e      	adds	r6, r5, #1
 800d484:	6023      	str	r3, [r4, #0]
 800d486:	60e3      	str	r3, [r4, #12]
 800d488:	60a3      	str	r3, [r4, #8]
 800d48a:	7013      	strb	r3, [r2, #0]
 800d48c:	65a3      	str	r3, [r4, #88]	; 0x58
 800d48e:	2205      	movs	r2, #5
 800d490:	7831      	ldrb	r1, [r6, #0]
 800d492:	4854      	ldr	r0, [pc, #336]	; (800d5e4 <_svfiprintf_r+0x1ec>)
 800d494:	f001 f922 	bl	800e6dc <memchr>
 800d498:	1c75      	adds	r5, r6, #1
 800d49a:	2800      	cmp	r0, #0
 800d49c:	d11f      	bne.n	800d4de <_svfiprintf_r+0xe6>
 800d49e:	6822      	ldr	r2, [r4, #0]
 800d4a0:	06d3      	lsls	r3, r2, #27
 800d4a2:	d504      	bpl.n	800d4ae <_svfiprintf_r+0xb6>
 800d4a4:	2353      	movs	r3, #83	; 0x53
 800d4a6:	a904      	add	r1, sp, #16
 800d4a8:	185b      	adds	r3, r3, r1
 800d4aa:	2120      	movs	r1, #32
 800d4ac:	7019      	strb	r1, [r3, #0]
 800d4ae:	0713      	lsls	r3, r2, #28
 800d4b0:	d504      	bpl.n	800d4bc <_svfiprintf_r+0xc4>
 800d4b2:	2353      	movs	r3, #83	; 0x53
 800d4b4:	a904      	add	r1, sp, #16
 800d4b6:	185b      	adds	r3, r3, r1
 800d4b8:	212b      	movs	r1, #43	; 0x2b
 800d4ba:	7019      	strb	r1, [r3, #0]
 800d4bc:	7833      	ldrb	r3, [r6, #0]
 800d4be:	2b2a      	cmp	r3, #42	; 0x2a
 800d4c0:	d016      	beq.n	800d4f0 <_svfiprintf_r+0xf8>
 800d4c2:	0035      	movs	r5, r6
 800d4c4:	2100      	movs	r1, #0
 800d4c6:	200a      	movs	r0, #10
 800d4c8:	68e3      	ldr	r3, [r4, #12]
 800d4ca:	782a      	ldrb	r2, [r5, #0]
 800d4cc:	1c6e      	adds	r6, r5, #1
 800d4ce:	3a30      	subs	r2, #48	; 0x30
 800d4d0:	2a09      	cmp	r2, #9
 800d4d2:	d94e      	bls.n	800d572 <_svfiprintf_r+0x17a>
 800d4d4:	2900      	cmp	r1, #0
 800d4d6:	d111      	bne.n	800d4fc <_svfiprintf_r+0x104>
 800d4d8:	e017      	b.n	800d50a <_svfiprintf_r+0x112>
 800d4da:	3501      	adds	r5, #1
 800d4dc:	e7b0      	b.n	800d440 <_svfiprintf_r+0x48>
 800d4de:	4b41      	ldr	r3, [pc, #260]	; (800d5e4 <_svfiprintf_r+0x1ec>)
 800d4e0:	6822      	ldr	r2, [r4, #0]
 800d4e2:	1ac0      	subs	r0, r0, r3
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	4083      	lsls	r3, r0
 800d4e8:	4313      	orrs	r3, r2
 800d4ea:	002e      	movs	r6, r5
 800d4ec:	6023      	str	r3, [r4, #0]
 800d4ee:	e7ce      	b.n	800d48e <_svfiprintf_r+0x96>
 800d4f0:	9b07      	ldr	r3, [sp, #28]
 800d4f2:	1d19      	adds	r1, r3, #4
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	9107      	str	r1, [sp, #28]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	db01      	blt.n	800d500 <_svfiprintf_r+0x108>
 800d4fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800d4fe:	e004      	b.n	800d50a <_svfiprintf_r+0x112>
 800d500:	425b      	negs	r3, r3
 800d502:	60e3      	str	r3, [r4, #12]
 800d504:	2302      	movs	r3, #2
 800d506:	4313      	orrs	r3, r2
 800d508:	6023      	str	r3, [r4, #0]
 800d50a:	782b      	ldrb	r3, [r5, #0]
 800d50c:	2b2e      	cmp	r3, #46	; 0x2e
 800d50e:	d10a      	bne.n	800d526 <_svfiprintf_r+0x12e>
 800d510:	786b      	ldrb	r3, [r5, #1]
 800d512:	2b2a      	cmp	r3, #42	; 0x2a
 800d514:	d135      	bne.n	800d582 <_svfiprintf_r+0x18a>
 800d516:	9b07      	ldr	r3, [sp, #28]
 800d518:	3502      	adds	r5, #2
 800d51a:	1d1a      	adds	r2, r3, #4
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	9207      	str	r2, [sp, #28]
 800d520:	2b00      	cmp	r3, #0
 800d522:	db2b      	blt.n	800d57c <_svfiprintf_r+0x184>
 800d524:	9309      	str	r3, [sp, #36]	; 0x24
 800d526:	4e30      	ldr	r6, [pc, #192]	; (800d5e8 <_svfiprintf_r+0x1f0>)
 800d528:	2203      	movs	r2, #3
 800d52a:	0030      	movs	r0, r6
 800d52c:	7829      	ldrb	r1, [r5, #0]
 800d52e:	f001 f8d5 	bl	800e6dc <memchr>
 800d532:	2800      	cmp	r0, #0
 800d534:	d006      	beq.n	800d544 <_svfiprintf_r+0x14c>
 800d536:	2340      	movs	r3, #64	; 0x40
 800d538:	1b80      	subs	r0, r0, r6
 800d53a:	4083      	lsls	r3, r0
 800d53c:	6822      	ldr	r2, [r4, #0]
 800d53e:	3501      	adds	r5, #1
 800d540:	4313      	orrs	r3, r2
 800d542:	6023      	str	r3, [r4, #0]
 800d544:	7829      	ldrb	r1, [r5, #0]
 800d546:	2206      	movs	r2, #6
 800d548:	4828      	ldr	r0, [pc, #160]	; (800d5ec <_svfiprintf_r+0x1f4>)
 800d54a:	1c6e      	adds	r6, r5, #1
 800d54c:	7621      	strb	r1, [r4, #24]
 800d54e:	f001 f8c5 	bl	800e6dc <memchr>
 800d552:	2800      	cmp	r0, #0
 800d554:	d03c      	beq.n	800d5d0 <_svfiprintf_r+0x1d8>
 800d556:	4b26      	ldr	r3, [pc, #152]	; (800d5f0 <_svfiprintf_r+0x1f8>)
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d125      	bne.n	800d5a8 <_svfiprintf_r+0x1b0>
 800d55c:	2207      	movs	r2, #7
 800d55e:	9b07      	ldr	r3, [sp, #28]
 800d560:	3307      	adds	r3, #7
 800d562:	4393      	bics	r3, r2
 800d564:	3308      	adds	r3, #8
 800d566:	9307      	str	r3, [sp, #28]
 800d568:	6963      	ldr	r3, [r4, #20]
 800d56a:	9a04      	ldr	r2, [sp, #16]
 800d56c:	189b      	adds	r3, r3, r2
 800d56e:	6163      	str	r3, [r4, #20]
 800d570:	e765      	b.n	800d43e <_svfiprintf_r+0x46>
 800d572:	4343      	muls	r3, r0
 800d574:	0035      	movs	r5, r6
 800d576:	2101      	movs	r1, #1
 800d578:	189b      	adds	r3, r3, r2
 800d57a:	e7a6      	b.n	800d4ca <_svfiprintf_r+0xd2>
 800d57c:	2301      	movs	r3, #1
 800d57e:	425b      	negs	r3, r3
 800d580:	e7d0      	b.n	800d524 <_svfiprintf_r+0x12c>
 800d582:	2300      	movs	r3, #0
 800d584:	200a      	movs	r0, #10
 800d586:	001a      	movs	r2, r3
 800d588:	3501      	adds	r5, #1
 800d58a:	6063      	str	r3, [r4, #4]
 800d58c:	7829      	ldrb	r1, [r5, #0]
 800d58e:	1c6e      	adds	r6, r5, #1
 800d590:	3930      	subs	r1, #48	; 0x30
 800d592:	2909      	cmp	r1, #9
 800d594:	d903      	bls.n	800d59e <_svfiprintf_r+0x1a6>
 800d596:	2b00      	cmp	r3, #0
 800d598:	d0c5      	beq.n	800d526 <_svfiprintf_r+0x12e>
 800d59a:	9209      	str	r2, [sp, #36]	; 0x24
 800d59c:	e7c3      	b.n	800d526 <_svfiprintf_r+0x12e>
 800d59e:	4342      	muls	r2, r0
 800d5a0:	0035      	movs	r5, r6
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	1852      	adds	r2, r2, r1
 800d5a6:	e7f1      	b.n	800d58c <_svfiprintf_r+0x194>
 800d5a8:	ab07      	add	r3, sp, #28
 800d5aa:	9300      	str	r3, [sp, #0]
 800d5ac:	003a      	movs	r2, r7
 800d5ae:	0021      	movs	r1, r4
 800d5b0:	4b10      	ldr	r3, [pc, #64]	; (800d5f4 <_svfiprintf_r+0x1fc>)
 800d5b2:	9803      	ldr	r0, [sp, #12]
 800d5b4:	e000      	b.n	800d5b8 <_svfiprintf_r+0x1c0>
 800d5b6:	bf00      	nop
 800d5b8:	9004      	str	r0, [sp, #16]
 800d5ba:	9b04      	ldr	r3, [sp, #16]
 800d5bc:	3301      	adds	r3, #1
 800d5be:	d1d3      	bne.n	800d568 <_svfiprintf_r+0x170>
 800d5c0:	89bb      	ldrh	r3, [r7, #12]
 800d5c2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d5c4:	065b      	lsls	r3, r3, #25
 800d5c6:	d400      	bmi.n	800d5ca <_svfiprintf_r+0x1d2>
 800d5c8:	e72d      	b.n	800d426 <_svfiprintf_r+0x2e>
 800d5ca:	2001      	movs	r0, #1
 800d5cc:	4240      	negs	r0, r0
 800d5ce:	e72a      	b.n	800d426 <_svfiprintf_r+0x2e>
 800d5d0:	ab07      	add	r3, sp, #28
 800d5d2:	9300      	str	r3, [sp, #0]
 800d5d4:	003a      	movs	r2, r7
 800d5d6:	0021      	movs	r1, r4
 800d5d8:	4b06      	ldr	r3, [pc, #24]	; (800d5f4 <_svfiprintf_r+0x1fc>)
 800d5da:	9803      	ldr	r0, [sp, #12]
 800d5dc:	f000 f87c 	bl	800d6d8 <_printf_i>
 800d5e0:	e7ea      	b.n	800d5b8 <_svfiprintf_r+0x1c0>
 800d5e2:	46c0      	nop			; (mov r8, r8)
 800d5e4:	08010c7c 	.word	0x08010c7c
 800d5e8:	08010c82 	.word	0x08010c82
 800d5ec:	08010c86 	.word	0x08010c86
 800d5f0:	00000000 	.word	0x00000000
 800d5f4:	0800d335 	.word	0x0800d335

0800d5f8 <_printf_common>:
 800d5f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5fa:	0015      	movs	r5, r2
 800d5fc:	9301      	str	r3, [sp, #4]
 800d5fe:	688a      	ldr	r2, [r1, #8]
 800d600:	690b      	ldr	r3, [r1, #16]
 800d602:	000c      	movs	r4, r1
 800d604:	9000      	str	r0, [sp, #0]
 800d606:	4293      	cmp	r3, r2
 800d608:	da00      	bge.n	800d60c <_printf_common+0x14>
 800d60a:	0013      	movs	r3, r2
 800d60c:	0022      	movs	r2, r4
 800d60e:	602b      	str	r3, [r5, #0]
 800d610:	3243      	adds	r2, #67	; 0x43
 800d612:	7812      	ldrb	r2, [r2, #0]
 800d614:	2a00      	cmp	r2, #0
 800d616:	d001      	beq.n	800d61c <_printf_common+0x24>
 800d618:	3301      	adds	r3, #1
 800d61a:	602b      	str	r3, [r5, #0]
 800d61c:	6823      	ldr	r3, [r4, #0]
 800d61e:	069b      	lsls	r3, r3, #26
 800d620:	d502      	bpl.n	800d628 <_printf_common+0x30>
 800d622:	682b      	ldr	r3, [r5, #0]
 800d624:	3302      	adds	r3, #2
 800d626:	602b      	str	r3, [r5, #0]
 800d628:	6822      	ldr	r2, [r4, #0]
 800d62a:	2306      	movs	r3, #6
 800d62c:	0017      	movs	r7, r2
 800d62e:	401f      	ands	r7, r3
 800d630:	421a      	tst	r2, r3
 800d632:	d027      	beq.n	800d684 <_printf_common+0x8c>
 800d634:	0023      	movs	r3, r4
 800d636:	3343      	adds	r3, #67	; 0x43
 800d638:	781b      	ldrb	r3, [r3, #0]
 800d63a:	1e5a      	subs	r2, r3, #1
 800d63c:	4193      	sbcs	r3, r2
 800d63e:	6822      	ldr	r2, [r4, #0]
 800d640:	0692      	lsls	r2, r2, #26
 800d642:	d430      	bmi.n	800d6a6 <_printf_common+0xae>
 800d644:	0022      	movs	r2, r4
 800d646:	9901      	ldr	r1, [sp, #4]
 800d648:	9800      	ldr	r0, [sp, #0]
 800d64a:	9e08      	ldr	r6, [sp, #32]
 800d64c:	3243      	adds	r2, #67	; 0x43
 800d64e:	47b0      	blx	r6
 800d650:	1c43      	adds	r3, r0, #1
 800d652:	d025      	beq.n	800d6a0 <_printf_common+0xa8>
 800d654:	2306      	movs	r3, #6
 800d656:	6820      	ldr	r0, [r4, #0]
 800d658:	682a      	ldr	r2, [r5, #0]
 800d65a:	68e1      	ldr	r1, [r4, #12]
 800d65c:	2500      	movs	r5, #0
 800d65e:	4003      	ands	r3, r0
 800d660:	2b04      	cmp	r3, #4
 800d662:	d103      	bne.n	800d66c <_printf_common+0x74>
 800d664:	1a8d      	subs	r5, r1, r2
 800d666:	43eb      	mvns	r3, r5
 800d668:	17db      	asrs	r3, r3, #31
 800d66a:	401d      	ands	r5, r3
 800d66c:	68a3      	ldr	r3, [r4, #8]
 800d66e:	6922      	ldr	r2, [r4, #16]
 800d670:	4293      	cmp	r3, r2
 800d672:	dd01      	ble.n	800d678 <_printf_common+0x80>
 800d674:	1a9b      	subs	r3, r3, r2
 800d676:	18ed      	adds	r5, r5, r3
 800d678:	2700      	movs	r7, #0
 800d67a:	42bd      	cmp	r5, r7
 800d67c:	d120      	bne.n	800d6c0 <_printf_common+0xc8>
 800d67e:	2000      	movs	r0, #0
 800d680:	e010      	b.n	800d6a4 <_printf_common+0xac>
 800d682:	3701      	adds	r7, #1
 800d684:	68e3      	ldr	r3, [r4, #12]
 800d686:	682a      	ldr	r2, [r5, #0]
 800d688:	1a9b      	subs	r3, r3, r2
 800d68a:	42bb      	cmp	r3, r7
 800d68c:	ddd2      	ble.n	800d634 <_printf_common+0x3c>
 800d68e:	0022      	movs	r2, r4
 800d690:	2301      	movs	r3, #1
 800d692:	9901      	ldr	r1, [sp, #4]
 800d694:	9800      	ldr	r0, [sp, #0]
 800d696:	9e08      	ldr	r6, [sp, #32]
 800d698:	3219      	adds	r2, #25
 800d69a:	47b0      	blx	r6
 800d69c:	1c43      	adds	r3, r0, #1
 800d69e:	d1f0      	bne.n	800d682 <_printf_common+0x8a>
 800d6a0:	2001      	movs	r0, #1
 800d6a2:	4240      	negs	r0, r0
 800d6a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d6a6:	2030      	movs	r0, #48	; 0x30
 800d6a8:	18e1      	adds	r1, r4, r3
 800d6aa:	3143      	adds	r1, #67	; 0x43
 800d6ac:	7008      	strb	r0, [r1, #0]
 800d6ae:	0021      	movs	r1, r4
 800d6b0:	1c5a      	adds	r2, r3, #1
 800d6b2:	3145      	adds	r1, #69	; 0x45
 800d6b4:	7809      	ldrb	r1, [r1, #0]
 800d6b6:	18a2      	adds	r2, r4, r2
 800d6b8:	3243      	adds	r2, #67	; 0x43
 800d6ba:	3302      	adds	r3, #2
 800d6bc:	7011      	strb	r1, [r2, #0]
 800d6be:	e7c1      	b.n	800d644 <_printf_common+0x4c>
 800d6c0:	0022      	movs	r2, r4
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	9901      	ldr	r1, [sp, #4]
 800d6c6:	9800      	ldr	r0, [sp, #0]
 800d6c8:	9e08      	ldr	r6, [sp, #32]
 800d6ca:	321a      	adds	r2, #26
 800d6cc:	47b0      	blx	r6
 800d6ce:	1c43      	adds	r3, r0, #1
 800d6d0:	d0e6      	beq.n	800d6a0 <_printf_common+0xa8>
 800d6d2:	3701      	adds	r7, #1
 800d6d4:	e7d1      	b.n	800d67a <_printf_common+0x82>
	...

0800d6d8 <_printf_i>:
 800d6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6da:	b08b      	sub	sp, #44	; 0x2c
 800d6dc:	9206      	str	r2, [sp, #24]
 800d6de:	000a      	movs	r2, r1
 800d6e0:	3243      	adds	r2, #67	; 0x43
 800d6e2:	9307      	str	r3, [sp, #28]
 800d6e4:	9005      	str	r0, [sp, #20]
 800d6e6:	9204      	str	r2, [sp, #16]
 800d6e8:	7e0a      	ldrb	r2, [r1, #24]
 800d6ea:	000c      	movs	r4, r1
 800d6ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d6ee:	2a78      	cmp	r2, #120	; 0x78
 800d6f0:	d807      	bhi.n	800d702 <_printf_i+0x2a>
 800d6f2:	2a62      	cmp	r2, #98	; 0x62
 800d6f4:	d809      	bhi.n	800d70a <_printf_i+0x32>
 800d6f6:	2a00      	cmp	r2, #0
 800d6f8:	d100      	bne.n	800d6fc <_printf_i+0x24>
 800d6fa:	e0c1      	b.n	800d880 <_printf_i+0x1a8>
 800d6fc:	2a58      	cmp	r2, #88	; 0x58
 800d6fe:	d100      	bne.n	800d702 <_printf_i+0x2a>
 800d700:	e08c      	b.n	800d81c <_printf_i+0x144>
 800d702:	0026      	movs	r6, r4
 800d704:	3642      	adds	r6, #66	; 0x42
 800d706:	7032      	strb	r2, [r6, #0]
 800d708:	e022      	b.n	800d750 <_printf_i+0x78>
 800d70a:	0010      	movs	r0, r2
 800d70c:	3863      	subs	r0, #99	; 0x63
 800d70e:	2815      	cmp	r0, #21
 800d710:	d8f7      	bhi.n	800d702 <_printf_i+0x2a>
 800d712:	f7f2 fd15 	bl	8000140 <__gnu_thumb1_case_shi>
 800d716:	0016      	.short	0x0016
 800d718:	fff6001f 	.word	0xfff6001f
 800d71c:	fff6fff6 	.word	0xfff6fff6
 800d720:	001ffff6 	.word	0x001ffff6
 800d724:	fff6fff6 	.word	0xfff6fff6
 800d728:	fff6fff6 	.word	0xfff6fff6
 800d72c:	003600a8 	.word	0x003600a8
 800d730:	fff6009a 	.word	0xfff6009a
 800d734:	00b9fff6 	.word	0x00b9fff6
 800d738:	0036fff6 	.word	0x0036fff6
 800d73c:	fff6fff6 	.word	0xfff6fff6
 800d740:	009e      	.short	0x009e
 800d742:	0026      	movs	r6, r4
 800d744:	681a      	ldr	r2, [r3, #0]
 800d746:	3642      	adds	r6, #66	; 0x42
 800d748:	1d11      	adds	r1, r2, #4
 800d74a:	6019      	str	r1, [r3, #0]
 800d74c:	6813      	ldr	r3, [r2, #0]
 800d74e:	7033      	strb	r3, [r6, #0]
 800d750:	2301      	movs	r3, #1
 800d752:	e0a7      	b.n	800d8a4 <_printf_i+0x1cc>
 800d754:	6808      	ldr	r0, [r1, #0]
 800d756:	6819      	ldr	r1, [r3, #0]
 800d758:	1d0a      	adds	r2, r1, #4
 800d75a:	0605      	lsls	r5, r0, #24
 800d75c:	d50b      	bpl.n	800d776 <_printf_i+0x9e>
 800d75e:	680d      	ldr	r5, [r1, #0]
 800d760:	601a      	str	r2, [r3, #0]
 800d762:	2d00      	cmp	r5, #0
 800d764:	da03      	bge.n	800d76e <_printf_i+0x96>
 800d766:	232d      	movs	r3, #45	; 0x2d
 800d768:	9a04      	ldr	r2, [sp, #16]
 800d76a:	426d      	negs	r5, r5
 800d76c:	7013      	strb	r3, [r2, #0]
 800d76e:	4b61      	ldr	r3, [pc, #388]	; (800d8f4 <_printf_i+0x21c>)
 800d770:	270a      	movs	r7, #10
 800d772:	9303      	str	r3, [sp, #12]
 800d774:	e01b      	b.n	800d7ae <_printf_i+0xd6>
 800d776:	680d      	ldr	r5, [r1, #0]
 800d778:	601a      	str	r2, [r3, #0]
 800d77a:	0641      	lsls	r1, r0, #25
 800d77c:	d5f1      	bpl.n	800d762 <_printf_i+0x8a>
 800d77e:	b22d      	sxth	r5, r5
 800d780:	e7ef      	b.n	800d762 <_printf_i+0x8a>
 800d782:	680d      	ldr	r5, [r1, #0]
 800d784:	6819      	ldr	r1, [r3, #0]
 800d786:	1d08      	adds	r0, r1, #4
 800d788:	6018      	str	r0, [r3, #0]
 800d78a:	062e      	lsls	r6, r5, #24
 800d78c:	d501      	bpl.n	800d792 <_printf_i+0xba>
 800d78e:	680d      	ldr	r5, [r1, #0]
 800d790:	e003      	b.n	800d79a <_printf_i+0xc2>
 800d792:	066d      	lsls	r5, r5, #25
 800d794:	d5fb      	bpl.n	800d78e <_printf_i+0xb6>
 800d796:	680d      	ldr	r5, [r1, #0]
 800d798:	b2ad      	uxth	r5, r5
 800d79a:	4b56      	ldr	r3, [pc, #344]	; (800d8f4 <_printf_i+0x21c>)
 800d79c:	2708      	movs	r7, #8
 800d79e:	9303      	str	r3, [sp, #12]
 800d7a0:	2a6f      	cmp	r2, #111	; 0x6f
 800d7a2:	d000      	beq.n	800d7a6 <_printf_i+0xce>
 800d7a4:	3702      	adds	r7, #2
 800d7a6:	0023      	movs	r3, r4
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	3343      	adds	r3, #67	; 0x43
 800d7ac:	701a      	strb	r2, [r3, #0]
 800d7ae:	6863      	ldr	r3, [r4, #4]
 800d7b0:	60a3      	str	r3, [r4, #8]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	db03      	blt.n	800d7be <_printf_i+0xe6>
 800d7b6:	2204      	movs	r2, #4
 800d7b8:	6821      	ldr	r1, [r4, #0]
 800d7ba:	4391      	bics	r1, r2
 800d7bc:	6021      	str	r1, [r4, #0]
 800d7be:	2d00      	cmp	r5, #0
 800d7c0:	d102      	bne.n	800d7c8 <_printf_i+0xf0>
 800d7c2:	9e04      	ldr	r6, [sp, #16]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d00c      	beq.n	800d7e2 <_printf_i+0x10a>
 800d7c8:	9e04      	ldr	r6, [sp, #16]
 800d7ca:	0028      	movs	r0, r5
 800d7cc:	0039      	movs	r1, r7
 800d7ce:	f7f2 fd47 	bl	8000260 <__aeabi_uidivmod>
 800d7d2:	9b03      	ldr	r3, [sp, #12]
 800d7d4:	3e01      	subs	r6, #1
 800d7d6:	5c5b      	ldrb	r3, [r3, r1]
 800d7d8:	7033      	strb	r3, [r6, #0]
 800d7da:	002b      	movs	r3, r5
 800d7dc:	0005      	movs	r5, r0
 800d7de:	429f      	cmp	r7, r3
 800d7e0:	d9f3      	bls.n	800d7ca <_printf_i+0xf2>
 800d7e2:	2f08      	cmp	r7, #8
 800d7e4:	d109      	bne.n	800d7fa <_printf_i+0x122>
 800d7e6:	6823      	ldr	r3, [r4, #0]
 800d7e8:	07db      	lsls	r3, r3, #31
 800d7ea:	d506      	bpl.n	800d7fa <_printf_i+0x122>
 800d7ec:	6863      	ldr	r3, [r4, #4]
 800d7ee:	6922      	ldr	r2, [r4, #16]
 800d7f0:	4293      	cmp	r3, r2
 800d7f2:	dc02      	bgt.n	800d7fa <_printf_i+0x122>
 800d7f4:	2330      	movs	r3, #48	; 0x30
 800d7f6:	3e01      	subs	r6, #1
 800d7f8:	7033      	strb	r3, [r6, #0]
 800d7fa:	9b04      	ldr	r3, [sp, #16]
 800d7fc:	1b9b      	subs	r3, r3, r6
 800d7fe:	6123      	str	r3, [r4, #16]
 800d800:	9b07      	ldr	r3, [sp, #28]
 800d802:	0021      	movs	r1, r4
 800d804:	9300      	str	r3, [sp, #0]
 800d806:	9805      	ldr	r0, [sp, #20]
 800d808:	9b06      	ldr	r3, [sp, #24]
 800d80a:	aa09      	add	r2, sp, #36	; 0x24
 800d80c:	f7ff fef4 	bl	800d5f8 <_printf_common>
 800d810:	1c43      	adds	r3, r0, #1
 800d812:	d14c      	bne.n	800d8ae <_printf_i+0x1d6>
 800d814:	2001      	movs	r0, #1
 800d816:	4240      	negs	r0, r0
 800d818:	b00b      	add	sp, #44	; 0x2c
 800d81a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d81c:	3145      	adds	r1, #69	; 0x45
 800d81e:	700a      	strb	r2, [r1, #0]
 800d820:	4a34      	ldr	r2, [pc, #208]	; (800d8f4 <_printf_i+0x21c>)
 800d822:	9203      	str	r2, [sp, #12]
 800d824:	681a      	ldr	r2, [r3, #0]
 800d826:	6821      	ldr	r1, [r4, #0]
 800d828:	ca20      	ldmia	r2!, {r5}
 800d82a:	601a      	str	r2, [r3, #0]
 800d82c:	0608      	lsls	r0, r1, #24
 800d82e:	d516      	bpl.n	800d85e <_printf_i+0x186>
 800d830:	07cb      	lsls	r3, r1, #31
 800d832:	d502      	bpl.n	800d83a <_printf_i+0x162>
 800d834:	2320      	movs	r3, #32
 800d836:	4319      	orrs	r1, r3
 800d838:	6021      	str	r1, [r4, #0]
 800d83a:	2710      	movs	r7, #16
 800d83c:	2d00      	cmp	r5, #0
 800d83e:	d1b2      	bne.n	800d7a6 <_printf_i+0xce>
 800d840:	2320      	movs	r3, #32
 800d842:	6822      	ldr	r2, [r4, #0]
 800d844:	439a      	bics	r2, r3
 800d846:	6022      	str	r2, [r4, #0]
 800d848:	e7ad      	b.n	800d7a6 <_printf_i+0xce>
 800d84a:	2220      	movs	r2, #32
 800d84c:	6809      	ldr	r1, [r1, #0]
 800d84e:	430a      	orrs	r2, r1
 800d850:	6022      	str	r2, [r4, #0]
 800d852:	0022      	movs	r2, r4
 800d854:	2178      	movs	r1, #120	; 0x78
 800d856:	3245      	adds	r2, #69	; 0x45
 800d858:	7011      	strb	r1, [r2, #0]
 800d85a:	4a27      	ldr	r2, [pc, #156]	; (800d8f8 <_printf_i+0x220>)
 800d85c:	e7e1      	b.n	800d822 <_printf_i+0x14a>
 800d85e:	0648      	lsls	r0, r1, #25
 800d860:	d5e6      	bpl.n	800d830 <_printf_i+0x158>
 800d862:	b2ad      	uxth	r5, r5
 800d864:	e7e4      	b.n	800d830 <_printf_i+0x158>
 800d866:	681a      	ldr	r2, [r3, #0]
 800d868:	680d      	ldr	r5, [r1, #0]
 800d86a:	1d10      	adds	r0, r2, #4
 800d86c:	6949      	ldr	r1, [r1, #20]
 800d86e:	6018      	str	r0, [r3, #0]
 800d870:	6813      	ldr	r3, [r2, #0]
 800d872:	062e      	lsls	r6, r5, #24
 800d874:	d501      	bpl.n	800d87a <_printf_i+0x1a2>
 800d876:	6019      	str	r1, [r3, #0]
 800d878:	e002      	b.n	800d880 <_printf_i+0x1a8>
 800d87a:	066d      	lsls	r5, r5, #25
 800d87c:	d5fb      	bpl.n	800d876 <_printf_i+0x19e>
 800d87e:	8019      	strh	r1, [r3, #0]
 800d880:	2300      	movs	r3, #0
 800d882:	9e04      	ldr	r6, [sp, #16]
 800d884:	6123      	str	r3, [r4, #16]
 800d886:	e7bb      	b.n	800d800 <_printf_i+0x128>
 800d888:	681a      	ldr	r2, [r3, #0]
 800d88a:	1d11      	adds	r1, r2, #4
 800d88c:	6019      	str	r1, [r3, #0]
 800d88e:	6816      	ldr	r6, [r2, #0]
 800d890:	2100      	movs	r1, #0
 800d892:	0030      	movs	r0, r6
 800d894:	6862      	ldr	r2, [r4, #4]
 800d896:	f000 ff21 	bl	800e6dc <memchr>
 800d89a:	2800      	cmp	r0, #0
 800d89c:	d001      	beq.n	800d8a2 <_printf_i+0x1ca>
 800d89e:	1b80      	subs	r0, r0, r6
 800d8a0:	6060      	str	r0, [r4, #4]
 800d8a2:	6863      	ldr	r3, [r4, #4]
 800d8a4:	6123      	str	r3, [r4, #16]
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	9a04      	ldr	r2, [sp, #16]
 800d8aa:	7013      	strb	r3, [r2, #0]
 800d8ac:	e7a8      	b.n	800d800 <_printf_i+0x128>
 800d8ae:	6923      	ldr	r3, [r4, #16]
 800d8b0:	0032      	movs	r2, r6
 800d8b2:	9906      	ldr	r1, [sp, #24]
 800d8b4:	9805      	ldr	r0, [sp, #20]
 800d8b6:	9d07      	ldr	r5, [sp, #28]
 800d8b8:	47a8      	blx	r5
 800d8ba:	1c43      	adds	r3, r0, #1
 800d8bc:	d0aa      	beq.n	800d814 <_printf_i+0x13c>
 800d8be:	6823      	ldr	r3, [r4, #0]
 800d8c0:	079b      	lsls	r3, r3, #30
 800d8c2:	d415      	bmi.n	800d8f0 <_printf_i+0x218>
 800d8c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8c6:	68e0      	ldr	r0, [r4, #12]
 800d8c8:	4298      	cmp	r0, r3
 800d8ca:	daa5      	bge.n	800d818 <_printf_i+0x140>
 800d8cc:	0018      	movs	r0, r3
 800d8ce:	e7a3      	b.n	800d818 <_printf_i+0x140>
 800d8d0:	0022      	movs	r2, r4
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	9906      	ldr	r1, [sp, #24]
 800d8d6:	9805      	ldr	r0, [sp, #20]
 800d8d8:	9e07      	ldr	r6, [sp, #28]
 800d8da:	3219      	adds	r2, #25
 800d8dc:	47b0      	blx	r6
 800d8de:	1c43      	adds	r3, r0, #1
 800d8e0:	d098      	beq.n	800d814 <_printf_i+0x13c>
 800d8e2:	3501      	adds	r5, #1
 800d8e4:	68e3      	ldr	r3, [r4, #12]
 800d8e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8e8:	1a9b      	subs	r3, r3, r2
 800d8ea:	42ab      	cmp	r3, r5
 800d8ec:	dcf0      	bgt.n	800d8d0 <_printf_i+0x1f8>
 800d8ee:	e7e9      	b.n	800d8c4 <_printf_i+0x1ec>
 800d8f0:	2500      	movs	r5, #0
 800d8f2:	e7f7      	b.n	800d8e4 <_printf_i+0x20c>
 800d8f4:	08010c8d 	.word	0x08010c8d
 800d8f8:	08010c9e 	.word	0x08010c9e

0800d8fc <_sbrk_r>:
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	b570      	push	{r4, r5, r6, lr}
 800d900:	4d06      	ldr	r5, [pc, #24]	; (800d91c <_sbrk_r+0x20>)
 800d902:	0004      	movs	r4, r0
 800d904:	0008      	movs	r0, r1
 800d906:	602b      	str	r3, [r5, #0]
 800d908:	f7f9 f9f4 	bl	8006cf4 <_sbrk>
 800d90c:	1c43      	adds	r3, r0, #1
 800d90e:	d103      	bne.n	800d918 <_sbrk_r+0x1c>
 800d910:	682b      	ldr	r3, [r5, #0]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d000      	beq.n	800d918 <_sbrk_r+0x1c>
 800d916:	6023      	str	r3, [r4, #0]
 800d918:	bd70      	pop	{r4, r5, r6, pc}
 800d91a:	46c0      	nop			; (mov r8, r8)
 800d91c:	200016a4 	.word	0x200016a4

0800d920 <__assert_func>:
 800d920:	b530      	push	{r4, r5, lr}
 800d922:	0014      	movs	r4, r2
 800d924:	001a      	movs	r2, r3
 800d926:	4b09      	ldr	r3, [pc, #36]	; (800d94c <__assert_func+0x2c>)
 800d928:	0005      	movs	r5, r0
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	b085      	sub	sp, #20
 800d92e:	68d8      	ldr	r0, [r3, #12]
 800d930:	4b07      	ldr	r3, [pc, #28]	; (800d950 <__assert_func+0x30>)
 800d932:	2c00      	cmp	r4, #0
 800d934:	d101      	bne.n	800d93a <__assert_func+0x1a>
 800d936:	4b07      	ldr	r3, [pc, #28]	; (800d954 <__assert_func+0x34>)
 800d938:	001c      	movs	r4, r3
 800d93a:	9301      	str	r3, [sp, #4]
 800d93c:	9100      	str	r1, [sp, #0]
 800d93e:	002b      	movs	r3, r5
 800d940:	4905      	ldr	r1, [pc, #20]	; (800d958 <__assert_func+0x38>)
 800d942:	9402      	str	r4, [sp, #8]
 800d944:	f000 feb0 	bl	800e6a8 <fiprintf>
 800d948:	f001 f978 	bl	800ec3c <abort>
 800d94c:	2000001c 	.word	0x2000001c
 800d950:	08010caf 	.word	0x08010caf
 800d954:	08010cea 	.word	0x08010cea
 800d958:	08010cbc 	.word	0x08010cbc

0800d95c <quorem>:
 800d95c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d95e:	0006      	movs	r6, r0
 800d960:	690b      	ldr	r3, [r1, #16]
 800d962:	6932      	ldr	r2, [r6, #16]
 800d964:	b087      	sub	sp, #28
 800d966:	2000      	movs	r0, #0
 800d968:	9103      	str	r1, [sp, #12]
 800d96a:	429a      	cmp	r2, r3
 800d96c:	db65      	blt.n	800da3a <quorem+0xde>
 800d96e:	3b01      	subs	r3, #1
 800d970:	009c      	lsls	r4, r3, #2
 800d972:	9300      	str	r3, [sp, #0]
 800d974:	000b      	movs	r3, r1
 800d976:	3314      	adds	r3, #20
 800d978:	9305      	str	r3, [sp, #20]
 800d97a:	191b      	adds	r3, r3, r4
 800d97c:	9304      	str	r3, [sp, #16]
 800d97e:	0033      	movs	r3, r6
 800d980:	3314      	adds	r3, #20
 800d982:	9302      	str	r3, [sp, #8]
 800d984:	191c      	adds	r4, r3, r4
 800d986:	9b04      	ldr	r3, [sp, #16]
 800d988:	6827      	ldr	r7, [r4, #0]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	0038      	movs	r0, r7
 800d98e:	1c5d      	adds	r5, r3, #1
 800d990:	0029      	movs	r1, r5
 800d992:	9301      	str	r3, [sp, #4]
 800d994:	f7f2 fbde 	bl	8000154 <__udivsi3>
 800d998:	9001      	str	r0, [sp, #4]
 800d99a:	42af      	cmp	r7, r5
 800d99c:	d324      	bcc.n	800d9e8 <quorem+0x8c>
 800d99e:	2500      	movs	r5, #0
 800d9a0:	46ac      	mov	ip, r5
 800d9a2:	9802      	ldr	r0, [sp, #8]
 800d9a4:	9f05      	ldr	r7, [sp, #20]
 800d9a6:	cf08      	ldmia	r7!, {r3}
 800d9a8:	9a01      	ldr	r2, [sp, #4]
 800d9aa:	b299      	uxth	r1, r3
 800d9ac:	4351      	muls	r1, r2
 800d9ae:	0c1b      	lsrs	r3, r3, #16
 800d9b0:	4353      	muls	r3, r2
 800d9b2:	1949      	adds	r1, r1, r5
 800d9b4:	0c0a      	lsrs	r2, r1, #16
 800d9b6:	189b      	adds	r3, r3, r2
 800d9b8:	6802      	ldr	r2, [r0, #0]
 800d9ba:	b289      	uxth	r1, r1
 800d9bc:	b292      	uxth	r2, r2
 800d9be:	4462      	add	r2, ip
 800d9c0:	1a52      	subs	r2, r2, r1
 800d9c2:	6801      	ldr	r1, [r0, #0]
 800d9c4:	0c1d      	lsrs	r5, r3, #16
 800d9c6:	0c09      	lsrs	r1, r1, #16
 800d9c8:	b29b      	uxth	r3, r3
 800d9ca:	1acb      	subs	r3, r1, r3
 800d9cc:	1411      	asrs	r1, r2, #16
 800d9ce:	185b      	adds	r3, r3, r1
 800d9d0:	1419      	asrs	r1, r3, #16
 800d9d2:	b292      	uxth	r2, r2
 800d9d4:	041b      	lsls	r3, r3, #16
 800d9d6:	431a      	orrs	r2, r3
 800d9d8:	9b04      	ldr	r3, [sp, #16]
 800d9da:	468c      	mov	ip, r1
 800d9dc:	c004      	stmia	r0!, {r2}
 800d9de:	42bb      	cmp	r3, r7
 800d9e0:	d2e1      	bcs.n	800d9a6 <quorem+0x4a>
 800d9e2:	6823      	ldr	r3, [r4, #0]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d030      	beq.n	800da4a <quorem+0xee>
 800d9e8:	0030      	movs	r0, r6
 800d9ea:	9903      	ldr	r1, [sp, #12]
 800d9ec:	f7ff fa7c 	bl	800cee8 <__mcmp>
 800d9f0:	2800      	cmp	r0, #0
 800d9f2:	db21      	blt.n	800da38 <quorem+0xdc>
 800d9f4:	0030      	movs	r0, r6
 800d9f6:	2400      	movs	r4, #0
 800d9f8:	9b01      	ldr	r3, [sp, #4]
 800d9fa:	9903      	ldr	r1, [sp, #12]
 800d9fc:	3301      	adds	r3, #1
 800d9fe:	9301      	str	r3, [sp, #4]
 800da00:	3014      	adds	r0, #20
 800da02:	3114      	adds	r1, #20
 800da04:	6803      	ldr	r3, [r0, #0]
 800da06:	c920      	ldmia	r1!, {r5}
 800da08:	b29a      	uxth	r2, r3
 800da0a:	1914      	adds	r4, r2, r4
 800da0c:	b2aa      	uxth	r2, r5
 800da0e:	1aa2      	subs	r2, r4, r2
 800da10:	0c1b      	lsrs	r3, r3, #16
 800da12:	0c2d      	lsrs	r5, r5, #16
 800da14:	1414      	asrs	r4, r2, #16
 800da16:	1b5b      	subs	r3, r3, r5
 800da18:	191b      	adds	r3, r3, r4
 800da1a:	141c      	asrs	r4, r3, #16
 800da1c:	b292      	uxth	r2, r2
 800da1e:	041b      	lsls	r3, r3, #16
 800da20:	4313      	orrs	r3, r2
 800da22:	c008      	stmia	r0!, {r3}
 800da24:	9b04      	ldr	r3, [sp, #16]
 800da26:	428b      	cmp	r3, r1
 800da28:	d2ec      	bcs.n	800da04 <quorem+0xa8>
 800da2a:	9b00      	ldr	r3, [sp, #0]
 800da2c:	9a02      	ldr	r2, [sp, #8]
 800da2e:	009b      	lsls	r3, r3, #2
 800da30:	18d3      	adds	r3, r2, r3
 800da32:	681a      	ldr	r2, [r3, #0]
 800da34:	2a00      	cmp	r2, #0
 800da36:	d015      	beq.n	800da64 <quorem+0x108>
 800da38:	9801      	ldr	r0, [sp, #4]
 800da3a:	b007      	add	sp, #28
 800da3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da3e:	6823      	ldr	r3, [r4, #0]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d106      	bne.n	800da52 <quorem+0xf6>
 800da44:	9b00      	ldr	r3, [sp, #0]
 800da46:	3b01      	subs	r3, #1
 800da48:	9300      	str	r3, [sp, #0]
 800da4a:	9b02      	ldr	r3, [sp, #8]
 800da4c:	3c04      	subs	r4, #4
 800da4e:	42a3      	cmp	r3, r4
 800da50:	d3f5      	bcc.n	800da3e <quorem+0xe2>
 800da52:	9b00      	ldr	r3, [sp, #0]
 800da54:	6133      	str	r3, [r6, #16]
 800da56:	e7c7      	b.n	800d9e8 <quorem+0x8c>
 800da58:	681a      	ldr	r2, [r3, #0]
 800da5a:	2a00      	cmp	r2, #0
 800da5c:	d106      	bne.n	800da6c <quorem+0x110>
 800da5e:	9a00      	ldr	r2, [sp, #0]
 800da60:	3a01      	subs	r2, #1
 800da62:	9200      	str	r2, [sp, #0]
 800da64:	9a02      	ldr	r2, [sp, #8]
 800da66:	3b04      	subs	r3, #4
 800da68:	429a      	cmp	r2, r3
 800da6a:	d3f5      	bcc.n	800da58 <quorem+0xfc>
 800da6c:	9b00      	ldr	r3, [sp, #0]
 800da6e:	6133      	str	r3, [r6, #16]
 800da70:	e7e2      	b.n	800da38 <quorem+0xdc>
	...

0800da74 <_dtoa_r>:
 800da74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da76:	b09d      	sub	sp, #116	; 0x74
 800da78:	9202      	str	r2, [sp, #8]
 800da7a:	9303      	str	r3, [sp, #12]
 800da7c:	9b02      	ldr	r3, [sp, #8]
 800da7e:	9c03      	ldr	r4, [sp, #12]
 800da80:	9308      	str	r3, [sp, #32]
 800da82:	9409      	str	r4, [sp, #36]	; 0x24
 800da84:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800da86:	0007      	movs	r7, r0
 800da88:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800da8a:	2c00      	cmp	r4, #0
 800da8c:	d10e      	bne.n	800daac <_dtoa_r+0x38>
 800da8e:	2010      	movs	r0, #16
 800da90:	f000 fe1a 	bl	800e6c8 <malloc>
 800da94:	1e02      	subs	r2, r0, #0
 800da96:	6278      	str	r0, [r7, #36]	; 0x24
 800da98:	d104      	bne.n	800daa4 <_dtoa_r+0x30>
 800da9a:	21ea      	movs	r1, #234	; 0xea
 800da9c:	4bc7      	ldr	r3, [pc, #796]	; (800ddbc <_dtoa_r+0x348>)
 800da9e:	48c8      	ldr	r0, [pc, #800]	; (800ddc0 <_dtoa_r+0x34c>)
 800daa0:	f7ff ff3e 	bl	800d920 <__assert_func>
 800daa4:	6044      	str	r4, [r0, #4]
 800daa6:	6084      	str	r4, [r0, #8]
 800daa8:	6004      	str	r4, [r0, #0]
 800daaa:	60c4      	str	r4, [r0, #12]
 800daac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daae:	6819      	ldr	r1, [r3, #0]
 800dab0:	2900      	cmp	r1, #0
 800dab2:	d00a      	beq.n	800daca <_dtoa_r+0x56>
 800dab4:	685a      	ldr	r2, [r3, #4]
 800dab6:	2301      	movs	r3, #1
 800dab8:	4093      	lsls	r3, r2
 800daba:	604a      	str	r2, [r1, #4]
 800dabc:	608b      	str	r3, [r1, #8]
 800dabe:	0038      	movs	r0, r7
 800dac0:	f7fe ffd2 	bl	800ca68 <_Bfree>
 800dac4:	2200      	movs	r2, #0
 800dac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac8:	601a      	str	r2, [r3, #0]
 800daca:	9b03      	ldr	r3, [sp, #12]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	da20      	bge.n	800db12 <_dtoa_r+0x9e>
 800dad0:	2301      	movs	r3, #1
 800dad2:	602b      	str	r3, [r5, #0]
 800dad4:	9b03      	ldr	r3, [sp, #12]
 800dad6:	005b      	lsls	r3, r3, #1
 800dad8:	085b      	lsrs	r3, r3, #1
 800dada:	9309      	str	r3, [sp, #36]	; 0x24
 800dadc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dade:	4bb9      	ldr	r3, [pc, #740]	; (800ddc4 <_dtoa_r+0x350>)
 800dae0:	4ab8      	ldr	r2, [pc, #736]	; (800ddc4 <_dtoa_r+0x350>)
 800dae2:	402b      	ands	r3, r5
 800dae4:	4293      	cmp	r3, r2
 800dae6:	d117      	bne.n	800db18 <_dtoa_r+0xa4>
 800dae8:	4bb7      	ldr	r3, [pc, #732]	; (800ddc8 <_dtoa_r+0x354>)
 800daea:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800daec:	0328      	lsls	r0, r5, #12
 800daee:	6013      	str	r3, [r2, #0]
 800daf0:	9b02      	ldr	r3, [sp, #8]
 800daf2:	0b00      	lsrs	r0, r0, #12
 800daf4:	4318      	orrs	r0, r3
 800daf6:	d101      	bne.n	800dafc <_dtoa_r+0x88>
 800daf8:	f000 fdbf 	bl	800e67a <_dtoa_r+0xc06>
 800dafc:	48b3      	ldr	r0, [pc, #716]	; (800ddcc <_dtoa_r+0x358>)
 800dafe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800db00:	9006      	str	r0, [sp, #24]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d002      	beq.n	800db0c <_dtoa_r+0x98>
 800db06:	4bb2      	ldr	r3, [pc, #712]	; (800ddd0 <_dtoa_r+0x35c>)
 800db08:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800db0a:	6013      	str	r3, [r2, #0]
 800db0c:	9806      	ldr	r0, [sp, #24]
 800db0e:	b01d      	add	sp, #116	; 0x74
 800db10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db12:	2300      	movs	r3, #0
 800db14:	602b      	str	r3, [r5, #0]
 800db16:	e7e1      	b.n	800dadc <_dtoa_r+0x68>
 800db18:	9b08      	ldr	r3, [sp, #32]
 800db1a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800db1c:	9312      	str	r3, [sp, #72]	; 0x48
 800db1e:	9413      	str	r4, [sp, #76]	; 0x4c
 800db20:	9812      	ldr	r0, [sp, #72]	; 0x48
 800db22:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800db24:	2200      	movs	r2, #0
 800db26:	2300      	movs	r3, #0
 800db28:	f7f2 fc9a 	bl	8000460 <__aeabi_dcmpeq>
 800db2c:	1e04      	subs	r4, r0, #0
 800db2e:	d009      	beq.n	800db44 <_dtoa_r+0xd0>
 800db30:	2301      	movs	r3, #1
 800db32:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800db34:	6013      	str	r3, [r2, #0]
 800db36:	4ba7      	ldr	r3, [pc, #668]	; (800ddd4 <_dtoa_r+0x360>)
 800db38:	9306      	str	r3, [sp, #24]
 800db3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d0e5      	beq.n	800db0c <_dtoa_r+0x98>
 800db40:	4ba5      	ldr	r3, [pc, #660]	; (800ddd8 <_dtoa_r+0x364>)
 800db42:	e7e1      	b.n	800db08 <_dtoa_r+0x94>
 800db44:	ab1a      	add	r3, sp, #104	; 0x68
 800db46:	9301      	str	r3, [sp, #4]
 800db48:	ab1b      	add	r3, sp, #108	; 0x6c
 800db4a:	9300      	str	r3, [sp, #0]
 800db4c:	0038      	movs	r0, r7
 800db4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800db50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800db52:	f7ff fa7d 	bl	800d050 <__d2b>
 800db56:	006e      	lsls	r6, r5, #1
 800db58:	9005      	str	r0, [sp, #20]
 800db5a:	0d76      	lsrs	r6, r6, #21
 800db5c:	d100      	bne.n	800db60 <_dtoa_r+0xec>
 800db5e:	e07c      	b.n	800dc5a <_dtoa_r+0x1e6>
 800db60:	9812      	ldr	r0, [sp, #72]	; 0x48
 800db62:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800db64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800db66:	4a9d      	ldr	r2, [pc, #628]	; (800dddc <_dtoa_r+0x368>)
 800db68:	031b      	lsls	r3, r3, #12
 800db6a:	0b1b      	lsrs	r3, r3, #12
 800db6c:	431a      	orrs	r2, r3
 800db6e:	0011      	movs	r1, r2
 800db70:	4b9b      	ldr	r3, [pc, #620]	; (800dde0 <_dtoa_r+0x36c>)
 800db72:	9418      	str	r4, [sp, #96]	; 0x60
 800db74:	18f6      	adds	r6, r6, r3
 800db76:	2200      	movs	r2, #0
 800db78:	4b9a      	ldr	r3, [pc, #616]	; (800dde4 <_dtoa_r+0x370>)
 800db7a:	f7f4 fc1d 	bl	80023b8 <__aeabi_dsub>
 800db7e:	4a9a      	ldr	r2, [pc, #616]	; (800dde8 <_dtoa_r+0x374>)
 800db80:	4b9a      	ldr	r3, [pc, #616]	; (800ddec <_dtoa_r+0x378>)
 800db82:	f7f4 f9ad 	bl	8001ee0 <__aeabi_dmul>
 800db86:	4a9a      	ldr	r2, [pc, #616]	; (800ddf0 <_dtoa_r+0x37c>)
 800db88:	4b9a      	ldr	r3, [pc, #616]	; (800ddf4 <_dtoa_r+0x380>)
 800db8a:	f7f3 fa6b 	bl	8001064 <__aeabi_dadd>
 800db8e:	0004      	movs	r4, r0
 800db90:	0030      	movs	r0, r6
 800db92:	000d      	movs	r5, r1
 800db94:	f7f4 ffd8 	bl	8002b48 <__aeabi_i2d>
 800db98:	4a97      	ldr	r2, [pc, #604]	; (800ddf8 <_dtoa_r+0x384>)
 800db9a:	4b98      	ldr	r3, [pc, #608]	; (800ddfc <_dtoa_r+0x388>)
 800db9c:	f7f4 f9a0 	bl	8001ee0 <__aeabi_dmul>
 800dba0:	0002      	movs	r2, r0
 800dba2:	000b      	movs	r3, r1
 800dba4:	0020      	movs	r0, r4
 800dba6:	0029      	movs	r1, r5
 800dba8:	f7f3 fa5c 	bl	8001064 <__aeabi_dadd>
 800dbac:	0004      	movs	r4, r0
 800dbae:	000d      	movs	r5, r1
 800dbb0:	f7f4 ff94 	bl	8002adc <__aeabi_d2iz>
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	9002      	str	r0, [sp, #8]
 800dbb8:	2300      	movs	r3, #0
 800dbba:	0020      	movs	r0, r4
 800dbbc:	0029      	movs	r1, r5
 800dbbe:	f7f2 fc55 	bl	800046c <__aeabi_dcmplt>
 800dbc2:	2800      	cmp	r0, #0
 800dbc4:	d00b      	beq.n	800dbde <_dtoa_r+0x16a>
 800dbc6:	9802      	ldr	r0, [sp, #8]
 800dbc8:	f7f4 ffbe 	bl	8002b48 <__aeabi_i2d>
 800dbcc:	002b      	movs	r3, r5
 800dbce:	0022      	movs	r2, r4
 800dbd0:	f7f2 fc46 	bl	8000460 <__aeabi_dcmpeq>
 800dbd4:	4243      	negs	r3, r0
 800dbd6:	4158      	adcs	r0, r3
 800dbd8:	9b02      	ldr	r3, [sp, #8]
 800dbda:	1a1b      	subs	r3, r3, r0
 800dbdc:	9302      	str	r3, [sp, #8]
 800dbde:	2301      	movs	r3, #1
 800dbe0:	9316      	str	r3, [sp, #88]	; 0x58
 800dbe2:	9b02      	ldr	r3, [sp, #8]
 800dbe4:	2b16      	cmp	r3, #22
 800dbe6:	d80f      	bhi.n	800dc08 <_dtoa_r+0x194>
 800dbe8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800dbea:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800dbec:	00da      	lsls	r2, r3, #3
 800dbee:	4b84      	ldr	r3, [pc, #528]	; (800de00 <_dtoa_r+0x38c>)
 800dbf0:	189b      	adds	r3, r3, r2
 800dbf2:	681a      	ldr	r2, [r3, #0]
 800dbf4:	685b      	ldr	r3, [r3, #4]
 800dbf6:	f7f2 fc39 	bl	800046c <__aeabi_dcmplt>
 800dbfa:	2800      	cmp	r0, #0
 800dbfc:	d049      	beq.n	800dc92 <_dtoa_r+0x21e>
 800dbfe:	9b02      	ldr	r3, [sp, #8]
 800dc00:	3b01      	subs	r3, #1
 800dc02:	9302      	str	r3, [sp, #8]
 800dc04:	2300      	movs	r3, #0
 800dc06:	9316      	str	r3, [sp, #88]	; 0x58
 800dc08:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800dc0a:	1b9e      	subs	r6, r3, r6
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	930a      	str	r3, [sp, #40]	; 0x28
 800dc10:	0033      	movs	r3, r6
 800dc12:	3b01      	subs	r3, #1
 800dc14:	930d      	str	r3, [sp, #52]	; 0x34
 800dc16:	d504      	bpl.n	800dc22 <_dtoa_r+0x1ae>
 800dc18:	2301      	movs	r3, #1
 800dc1a:	1b9b      	subs	r3, r3, r6
 800dc1c:	930a      	str	r3, [sp, #40]	; 0x28
 800dc1e:	2300      	movs	r3, #0
 800dc20:	930d      	str	r3, [sp, #52]	; 0x34
 800dc22:	9b02      	ldr	r3, [sp, #8]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	db36      	blt.n	800dc96 <_dtoa_r+0x222>
 800dc28:	9a02      	ldr	r2, [sp, #8]
 800dc2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc2c:	4694      	mov	ip, r2
 800dc2e:	4463      	add	r3, ip
 800dc30:	930d      	str	r3, [sp, #52]	; 0x34
 800dc32:	2300      	movs	r3, #0
 800dc34:	9215      	str	r2, [sp, #84]	; 0x54
 800dc36:	930e      	str	r3, [sp, #56]	; 0x38
 800dc38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dc3a:	2401      	movs	r4, #1
 800dc3c:	2b09      	cmp	r3, #9
 800dc3e:	d864      	bhi.n	800dd0a <_dtoa_r+0x296>
 800dc40:	2b05      	cmp	r3, #5
 800dc42:	dd02      	ble.n	800dc4a <_dtoa_r+0x1d6>
 800dc44:	2400      	movs	r4, #0
 800dc46:	3b04      	subs	r3, #4
 800dc48:	9322      	str	r3, [sp, #136]	; 0x88
 800dc4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dc4c:	1e98      	subs	r0, r3, #2
 800dc4e:	2803      	cmp	r0, #3
 800dc50:	d864      	bhi.n	800dd1c <_dtoa_r+0x2a8>
 800dc52:	f7f2 fa6b 	bl	800012c <__gnu_thumb1_case_uqi>
 800dc56:	3829      	.short	0x3829
 800dc58:	5836      	.short	0x5836
 800dc5a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800dc5c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800dc5e:	189e      	adds	r6, r3, r2
 800dc60:	4b68      	ldr	r3, [pc, #416]	; (800de04 <_dtoa_r+0x390>)
 800dc62:	18f2      	adds	r2, r6, r3
 800dc64:	2a20      	cmp	r2, #32
 800dc66:	dd0f      	ble.n	800dc88 <_dtoa_r+0x214>
 800dc68:	2340      	movs	r3, #64	; 0x40
 800dc6a:	1a9b      	subs	r3, r3, r2
 800dc6c:	409d      	lsls	r5, r3
 800dc6e:	4b66      	ldr	r3, [pc, #408]	; (800de08 <_dtoa_r+0x394>)
 800dc70:	9802      	ldr	r0, [sp, #8]
 800dc72:	18f3      	adds	r3, r6, r3
 800dc74:	40d8      	lsrs	r0, r3
 800dc76:	4328      	orrs	r0, r5
 800dc78:	f7f4 ff96 	bl	8002ba8 <__aeabi_ui2d>
 800dc7c:	2301      	movs	r3, #1
 800dc7e:	4c63      	ldr	r4, [pc, #396]	; (800de0c <_dtoa_r+0x398>)
 800dc80:	3e01      	subs	r6, #1
 800dc82:	1909      	adds	r1, r1, r4
 800dc84:	9318      	str	r3, [sp, #96]	; 0x60
 800dc86:	e776      	b.n	800db76 <_dtoa_r+0x102>
 800dc88:	2320      	movs	r3, #32
 800dc8a:	9802      	ldr	r0, [sp, #8]
 800dc8c:	1a9b      	subs	r3, r3, r2
 800dc8e:	4098      	lsls	r0, r3
 800dc90:	e7f2      	b.n	800dc78 <_dtoa_r+0x204>
 800dc92:	9016      	str	r0, [sp, #88]	; 0x58
 800dc94:	e7b8      	b.n	800dc08 <_dtoa_r+0x194>
 800dc96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc98:	9a02      	ldr	r2, [sp, #8]
 800dc9a:	1a9b      	subs	r3, r3, r2
 800dc9c:	930a      	str	r3, [sp, #40]	; 0x28
 800dc9e:	4253      	negs	r3, r2
 800dca0:	930e      	str	r3, [sp, #56]	; 0x38
 800dca2:	2300      	movs	r3, #0
 800dca4:	9315      	str	r3, [sp, #84]	; 0x54
 800dca6:	e7c7      	b.n	800dc38 <_dtoa_r+0x1c4>
 800dca8:	2300      	movs	r3, #0
 800dcaa:	930f      	str	r3, [sp, #60]	; 0x3c
 800dcac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dcae:	930c      	str	r3, [sp, #48]	; 0x30
 800dcb0:	9307      	str	r3, [sp, #28]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	dc13      	bgt.n	800dcde <_dtoa_r+0x26a>
 800dcb6:	2301      	movs	r3, #1
 800dcb8:	001a      	movs	r2, r3
 800dcba:	930c      	str	r3, [sp, #48]	; 0x30
 800dcbc:	9307      	str	r3, [sp, #28]
 800dcbe:	9223      	str	r2, [sp, #140]	; 0x8c
 800dcc0:	e00d      	b.n	800dcde <_dtoa_r+0x26a>
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	e7f1      	b.n	800dcaa <_dtoa_r+0x236>
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800dcca:	930f      	str	r3, [sp, #60]	; 0x3c
 800dccc:	4694      	mov	ip, r2
 800dcce:	9b02      	ldr	r3, [sp, #8]
 800dcd0:	4463      	add	r3, ip
 800dcd2:	930c      	str	r3, [sp, #48]	; 0x30
 800dcd4:	3301      	adds	r3, #1
 800dcd6:	9307      	str	r3, [sp, #28]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	dc00      	bgt.n	800dcde <_dtoa_r+0x26a>
 800dcdc:	2301      	movs	r3, #1
 800dcde:	2200      	movs	r2, #0
 800dce0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dce2:	6042      	str	r2, [r0, #4]
 800dce4:	3204      	adds	r2, #4
 800dce6:	0015      	movs	r5, r2
 800dce8:	3514      	adds	r5, #20
 800dcea:	6841      	ldr	r1, [r0, #4]
 800dcec:	429d      	cmp	r5, r3
 800dcee:	d919      	bls.n	800dd24 <_dtoa_r+0x2b0>
 800dcf0:	0038      	movs	r0, r7
 800dcf2:	f7fe fe75 	bl	800c9e0 <_Balloc>
 800dcf6:	9006      	str	r0, [sp, #24]
 800dcf8:	2800      	cmp	r0, #0
 800dcfa:	d117      	bne.n	800dd2c <_dtoa_r+0x2b8>
 800dcfc:	21d5      	movs	r1, #213	; 0xd5
 800dcfe:	0002      	movs	r2, r0
 800dd00:	4b43      	ldr	r3, [pc, #268]	; (800de10 <_dtoa_r+0x39c>)
 800dd02:	0049      	lsls	r1, r1, #1
 800dd04:	e6cb      	b.n	800da9e <_dtoa_r+0x2a>
 800dd06:	2301      	movs	r3, #1
 800dd08:	e7de      	b.n	800dcc8 <_dtoa_r+0x254>
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	940f      	str	r4, [sp, #60]	; 0x3c
 800dd0e:	9322      	str	r3, [sp, #136]	; 0x88
 800dd10:	3b01      	subs	r3, #1
 800dd12:	930c      	str	r3, [sp, #48]	; 0x30
 800dd14:	9307      	str	r3, [sp, #28]
 800dd16:	2200      	movs	r2, #0
 800dd18:	3313      	adds	r3, #19
 800dd1a:	e7d0      	b.n	800dcbe <_dtoa_r+0x24a>
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd20:	3b02      	subs	r3, #2
 800dd22:	e7f6      	b.n	800dd12 <_dtoa_r+0x29e>
 800dd24:	3101      	adds	r1, #1
 800dd26:	6041      	str	r1, [r0, #4]
 800dd28:	0052      	lsls	r2, r2, #1
 800dd2a:	e7dc      	b.n	800dce6 <_dtoa_r+0x272>
 800dd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2e:	9a06      	ldr	r2, [sp, #24]
 800dd30:	601a      	str	r2, [r3, #0]
 800dd32:	9b07      	ldr	r3, [sp, #28]
 800dd34:	2b0e      	cmp	r3, #14
 800dd36:	d900      	bls.n	800dd3a <_dtoa_r+0x2c6>
 800dd38:	e0eb      	b.n	800df12 <_dtoa_r+0x49e>
 800dd3a:	2c00      	cmp	r4, #0
 800dd3c:	d100      	bne.n	800dd40 <_dtoa_r+0x2cc>
 800dd3e:	e0e8      	b.n	800df12 <_dtoa_r+0x49e>
 800dd40:	9b02      	ldr	r3, [sp, #8]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	dd68      	ble.n	800de18 <_dtoa_r+0x3a4>
 800dd46:	001a      	movs	r2, r3
 800dd48:	210f      	movs	r1, #15
 800dd4a:	4b2d      	ldr	r3, [pc, #180]	; (800de00 <_dtoa_r+0x38c>)
 800dd4c:	400a      	ands	r2, r1
 800dd4e:	00d2      	lsls	r2, r2, #3
 800dd50:	189b      	adds	r3, r3, r2
 800dd52:	681d      	ldr	r5, [r3, #0]
 800dd54:	685e      	ldr	r6, [r3, #4]
 800dd56:	9b02      	ldr	r3, [sp, #8]
 800dd58:	111c      	asrs	r4, r3, #4
 800dd5a:	2302      	movs	r3, #2
 800dd5c:	9310      	str	r3, [sp, #64]	; 0x40
 800dd5e:	9b02      	ldr	r3, [sp, #8]
 800dd60:	05db      	lsls	r3, r3, #23
 800dd62:	d50b      	bpl.n	800dd7c <_dtoa_r+0x308>
 800dd64:	4b2b      	ldr	r3, [pc, #172]	; (800de14 <_dtoa_r+0x3a0>)
 800dd66:	400c      	ands	r4, r1
 800dd68:	6a1a      	ldr	r2, [r3, #32]
 800dd6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd6c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800dd6e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800dd70:	f7f3 fcb4 	bl	80016dc <__aeabi_ddiv>
 800dd74:	2303      	movs	r3, #3
 800dd76:	9008      	str	r0, [sp, #32]
 800dd78:	9109      	str	r1, [sp, #36]	; 0x24
 800dd7a:	9310      	str	r3, [sp, #64]	; 0x40
 800dd7c:	4b25      	ldr	r3, [pc, #148]	; (800de14 <_dtoa_r+0x3a0>)
 800dd7e:	9314      	str	r3, [sp, #80]	; 0x50
 800dd80:	2c00      	cmp	r4, #0
 800dd82:	d108      	bne.n	800dd96 <_dtoa_r+0x322>
 800dd84:	9808      	ldr	r0, [sp, #32]
 800dd86:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd88:	002a      	movs	r2, r5
 800dd8a:	0033      	movs	r3, r6
 800dd8c:	f7f3 fca6 	bl	80016dc <__aeabi_ddiv>
 800dd90:	9008      	str	r0, [sp, #32]
 800dd92:	9109      	str	r1, [sp, #36]	; 0x24
 800dd94:	e05c      	b.n	800de50 <_dtoa_r+0x3dc>
 800dd96:	2301      	movs	r3, #1
 800dd98:	421c      	tst	r4, r3
 800dd9a:	d00b      	beq.n	800ddb4 <_dtoa_r+0x340>
 800dd9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd9e:	0028      	movs	r0, r5
 800dda0:	3301      	adds	r3, #1
 800dda2:	9310      	str	r3, [sp, #64]	; 0x40
 800dda4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dda6:	0031      	movs	r1, r6
 800dda8:	681a      	ldr	r2, [r3, #0]
 800ddaa:	685b      	ldr	r3, [r3, #4]
 800ddac:	f7f4 f898 	bl	8001ee0 <__aeabi_dmul>
 800ddb0:	0005      	movs	r5, r0
 800ddb2:	000e      	movs	r6, r1
 800ddb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ddb6:	1064      	asrs	r4, r4, #1
 800ddb8:	3308      	adds	r3, #8
 800ddba:	e7e0      	b.n	800dd7e <_dtoa_r+0x30a>
 800ddbc:	08010af5 	.word	0x08010af5
 800ddc0:	08010cfa 	.word	0x08010cfa
 800ddc4:	7ff00000 	.word	0x7ff00000
 800ddc8:	0000270f 	.word	0x0000270f
 800ddcc:	08010cf4 	.word	0x08010cf4
 800ddd0:	08010cf7 	.word	0x08010cf7
 800ddd4:	08010cf8 	.word	0x08010cf8
 800ddd8:	08010cf9 	.word	0x08010cf9
 800dddc:	3ff00000 	.word	0x3ff00000
 800dde0:	fffffc01 	.word	0xfffffc01
 800dde4:	3ff80000 	.word	0x3ff80000
 800dde8:	636f4361 	.word	0x636f4361
 800ddec:	3fd287a7 	.word	0x3fd287a7
 800ddf0:	8b60c8b3 	.word	0x8b60c8b3
 800ddf4:	3fc68a28 	.word	0x3fc68a28
 800ddf8:	509f79fb 	.word	0x509f79fb
 800ddfc:	3fd34413 	.word	0x3fd34413
 800de00:	08010ba8 	.word	0x08010ba8
 800de04:	00000432 	.word	0x00000432
 800de08:	00000412 	.word	0x00000412
 800de0c:	fe100000 	.word	0xfe100000
 800de10:	08010b68 	.word	0x08010b68
 800de14:	08010b80 	.word	0x08010b80
 800de18:	2302      	movs	r3, #2
 800de1a:	9310      	str	r3, [sp, #64]	; 0x40
 800de1c:	9b02      	ldr	r3, [sp, #8]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d016      	beq.n	800de50 <_dtoa_r+0x3dc>
 800de22:	9812      	ldr	r0, [sp, #72]	; 0x48
 800de24:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800de26:	425c      	negs	r4, r3
 800de28:	230f      	movs	r3, #15
 800de2a:	4ab6      	ldr	r2, [pc, #728]	; (800e104 <_dtoa_r+0x690>)
 800de2c:	4023      	ands	r3, r4
 800de2e:	00db      	lsls	r3, r3, #3
 800de30:	18d3      	adds	r3, r2, r3
 800de32:	681a      	ldr	r2, [r3, #0]
 800de34:	685b      	ldr	r3, [r3, #4]
 800de36:	f7f4 f853 	bl	8001ee0 <__aeabi_dmul>
 800de3a:	2601      	movs	r6, #1
 800de3c:	2300      	movs	r3, #0
 800de3e:	9008      	str	r0, [sp, #32]
 800de40:	9109      	str	r1, [sp, #36]	; 0x24
 800de42:	4db1      	ldr	r5, [pc, #708]	; (800e108 <_dtoa_r+0x694>)
 800de44:	1124      	asrs	r4, r4, #4
 800de46:	2c00      	cmp	r4, #0
 800de48:	d000      	beq.n	800de4c <_dtoa_r+0x3d8>
 800de4a:	e094      	b.n	800df76 <_dtoa_r+0x502>
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d19f      	bne.n	800dd90 <_dtoa_r+0x31c>
 800de50:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800de52:	2b00      	cmp	r3, #0
 800de54:	d100      	bne.n	800de58 <_dtoa_r+0x3e4>
 800de56:	e09b      	b.n	800df90 <_dtoa_r+0x51c>
 800de58:	9c08      	ldr	r4, [sp, #32]
 800de5a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800de5c:	2200      	movs	r2, #0
 800de5e:	0020      	movs	r0, r4
 800de60:	0029      	movs	r1, r5
 800de62:	4baa      	ldr	r3, [pc, #680]	; (800e10c <_dtoa_r+0x698>)
 800de64:	f7f2 fb02 	bl	800046c <__aeabi_dcmplt>
 800de68:	2800      	cmp	r0, #0
 800de6a:	d100      	bne.n	800de6e <_dtoa_r+0x3fa>
 800de6c:	e090      	b.n	800df90 <_dtoa_r+0x51c>
 800de6e:	9b07      	ldr	r3, [sp, #28]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d100      	bne.n	800de76 <_dtoa_r+0x402>
 800de74:	e08c      	b.n	800df90 <_dtoa_r+0x51c>
 800de76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de78:	2b00      	cmp	r3, #0
 800de7a:	dd46      	ble.n	800df0a <_dtoa_r+0x496>
 800de7c:	9b02      	ldr	r3, [sp, #8]
 800de7e:	2200      	movs	r2, #0
 800de80:	0020      	movs	r0, r4
 800de82:	0029      	movs	r1, r5
 800de84:	1e5e      	subs	r6, r3, #1
 800de86:	4ba2      	ldr	r3, [pc, #648]	; (800e110 <_dtoa_r+0x69c>)
 800de88:	f7f4 f82a 	bl	8001ee0 <__aeabi_dmul>
 800de8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de8e:	9008      	str	r0, [sp, #32]
 800de90:	9109      	str	r1, [sp, #36]	; 0x24
 800de92:	3301      	adds	r3, #1
 800de94:	9310      	str	r3, [sp, #64]	; 0x40
 800de96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de98:	9810      	ldr	r0, [sp, #64]	; 0x40
 800de9a:	9c08      	ldr	r4, [sp, #32]
 800de9c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800de9e:	9314      	str	r3, [sp, #80]	; 0x50
 800dea0:	f7f4 fe52 	bl	8002b48 <__aeabi_i2d>
 800dea4:	0022      	movs	r2, r4
 800dea6:	002b      	movs	r3, r5
 800dea8:	f7f4 f81a 	bl	8001ee0 <__aeabi_dmul>
 800deac:	2200      	movs	r2, #0
 800deae:	4b99      	ldr	r3, [pc, #612]	; (800e114 <_dtoa_r+0x6a0>)
 800deb0:	f7f3 f8d8 	bl	8001064 <__aeabi_dadd>
 800deb4:	9010      	str	r0, [sp, #64]	; 0x40
 800deb6:	9111      	str	r1, [sp, #68]	; 0x44
 800deb8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800deba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800debc:	9208      	str	r2, [sp, #32]
 800debe:	9309      	str	r3, [sp, #36]	; 0x24
 800dec0:	4a95      	ldr	r2, [pc, #596]	; (800e118 <_dtoa_r+0x6a4>)
 800dec2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dec4:	4694      	mov	ip, r2
 800dec6:	4463      	add	r3, ip
 800dec8:	9317      	str	r3, [sp, #92]	; 0x5c
 800deca:	9309      	str	r3, [sp, #36]	; 0x24
 800decc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d161      	bne.n	800df96 <_dtoa_r+0x522>
 800ded2:	2200      	movs	r2, #0
 800ded4:	0020      	movs	r0, r4
 800ded6:	0029      	movs	r1, r5
 800ded8:	4b90      	ldr	r3, [pc, #576]	; (800e11c <_dtoa_r+0x6a8>)
 800deda:	f7f4 fa6d 	bl	80023b8 <__aeabi_dsub>
 800dede:	9a08      	ldr	r2, [sp, #32]
 800dee0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dee2:	0004      	movs	r4, r0
 800dee4:	000d      	movs	r5, r1
 800dee6:	f7f2 fad5 	bl	8000494 <__aeabi_dcmpgt>
 800deea:	2800      	cmp	r0, #0
 800deec:	d000      	beq.n	800def0 <_dtoa_r+0x47c>
 800deee:	e2af      	b.n	800e450 <_dtoa_r+0x9dc>
 800def0:	488b      	ldr	r0, [pc, #556]	; (800e120 <_dtoa_r+0x6ac>)
 800def2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800def4:	4684      	mov	ip, r0
 800def6:	4461      	add	r1, ip
 800def8:	000b      	movs	r3, r1
 800defa:	0020      	movs	r0, r4
 800defc:	0029      	movs	r1, r5
 800defe:	9a08      	ldr	r2, [sp, #32]
 800df00:	f7f2 fab4 	bl	800046c <__aeabi_dcmplt>
 800df04:	2800      	cmp	r0, #0
 800df06:	d000      	beq.n	800df0a <_dtoa_r+0x496>
 800df08:	e29f      	b.n	800e44a <_dtoa_r+0x9d6>
 800df0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800df0c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800df0e:	9308      	str	r3, [sp, #32]
 800df10:	9409      	str	r4, [sp, #36]	; 0x24
 800df12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800df14:	2b00      	cmp	r3, #0
 800df16:	da00      	bge.n	800df1a <_dtoa_r+0x4a6>
 800df18:	e172      	b.n	800e200 <_dtoa_r+0x78c>
 800df1a:	9a02      	ldr	r2, [sp, #8]
 800df1c:	2a0e      	cmp	r2, #14
 800df1e:	dd00      	ble.n	800df22 <_dtoa_r+0x4ae>
 800df20:	e16e      	b.n	800e200 <_dtoa_r+0x78c>
 800df22:	4b78      	ldr	r3, [pc, #480]	; (800e104 <_dtoa_r+0x690>)
 800df24:	00d2      	lsls	r2, r2, #3
 800df26:	189b      	adds	r3, r3, r2
 800df28:	685c      	ldr	r4, [r3, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	930a      	str	r3, [sp, #40]	; 0x28
 800df2e:	940b      	str	r4, [sp, #44]	; 0x2c
 800df30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800df32:	2b00      	cmp	r3, #0
 800df34:	db00      	blt.n	800df38 <_dtoa_r+0x4c4>
 800df36:	e0f7      	b.n	800e128 <_dtoa_r+0x6b4>
 800df38:	9b07      	ldr	r3, [sp, #28]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	dd00      	ble.n	800df40 <_dtoa_r+0x4cc>
 800df3e:	e0f3      	b.n	800e128 <_dtoa_r+0x6b4>
 800df40:	d000      	beq.n	800df44 <_dtoa_r+0x4d0>
 800df42:	e282      	b.n	800e44a <_dtoa_r+0x9d6>
 800df44:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df48:	2200      	movs	r2, #0
 800df4a:	4b74      	ldr	r3, [pc, #464]	; (800e11c <_dtoa_r+0x6a8>)
 800df4c:	f7f3 ffc8 	bl	8001ee0 <__aeabi_dmul>
 800df50:	9a08      	ldr	r2, [sp, #32]
 800df52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df54:	f7f2 faa8 	bl	80004a8 <__aeabi_dcmpge>
 800df58:	9e07      	ldr	r6, [sp, #28]
 800df5a:	0035      	movs	r5, r6
 800df5c:	2800      	cmp	r0, #0
 800df5e:	d000      	beq.n	800df62 <_dtoa_r+0x4ee>
 800df60:	e259      	b.n	800e416 <_dtoa_r+0x9a2>
 800df62:	9b06      	ldr	r3, [sp, #24]
 800df64:	9a06      	ldr	r2, [sp, #24]
 800df66:	3301      	adds	r3, #1
 800df68:	9308      	str	r3, [sp, #32]
 800df6a:	2331      	movs	r3, #49	; 0x31
 800df6c:	7013      	strb	r3, [r2, #0]
 800df6e:	9b02      	ldr	r3, [sp, #8]
 800df70:	3301      	adds	r3, #1
 800df72:	9302      	str	r3, [sp, #8]
 800df74:	e254      	b.n	800e420 <_dtoa_r+0x9ac>
 800df76:	4234      	tst	r4, r6
 800df78:	d007      	beq.n	800df8a <_dtoa_r+0x516>
 800df7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df7c:	3301      	adds	r3, #1
 800df7e:	9310      	str	r3, [sp, #64]	; 0x40
 800df80:	682a      	ldr	r2, [r5, #0]
 800df82:	686b      	ldr	r3, [r5, #4]
 800df84:	f7f3 ffac 	bl	8001ee0 <__aeabi_dmul>
 800df88:	0033      	movs	r3, r6
 800df8a:	1064      	asrs	r4, r4, #1
 800df8c:	3508      	adds	r5, #8
 800df8e:	e75a      	b.n	800de46 <_dtoa_r+0x3d2>
 800df90:	9e02      	ldr	r6, [sp, #8]
 800df92:	9b07      	ldr	r3, [sp, #28]
 800df94:	e780      	b.n	800de98 <_dtoa_r+0x424>
 800df96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800df98:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800df9a:	1e5a      	subs	r2, r3, #1
 800df9c:	4b59      	ldr	r3, [pc, #356]	; (800e104 <_dtoa_r+0x690>)
 800df9e:	00d2      	lsls	r2, r2, #3
 800dfa0:	189b      	adds	r3, r3, r2
 800dfa2:	681a      	ldr	r2, [r3, #0]
 800dfa4:	685b      	ldr	r3, [r3, #4]
 800dfa6:	2900      	cmp	r1, #0
 800dfa8:	d051      	beq.n	800e04e <_dtoa_r+0x5da>
 800dfaa:	2000      	movs	r0, #0
 800dfac:	495d      	ldr	r1, [pc, #372]	; (800e124 <_dtoa_r+0x6b0>)
 800dfae:	f7f3 fb95 	bl	80016dc <__aeabi_ddiv>
 800dfb2:	9a08      	ldr	r2, [sp, #32]
 800dfb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfb6:	f7f4 f9ff 	bl	80023b8 <__aeabi_dsub>
 800dfba:	9a06      	ldr	r2, [sp, #24]
 800dfbc:	9b06      	ldr	r3, [sp, #24]
 800dfbe:	4694      	mov	ip, r2
 800dfc0:	9317      	str	r3, [sp, #92]	; 0x5c
 800dfc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dfc4:	9010      	str	r0, [sp, #64]	; 0x40
 800dfc6:	9111      	str	r1, [sp, #68]	; 0x44
 800dfc8:	4463      	add	r3, ip
 800dfca:	9319      	str	r3, [sp, #100]	; 0x64
 800dfcc:	0029      	movs	r1, r5
 800dfce:	0020      	movs	r0, r4
 800dfd0:	f7f4 fd84 	bl	8002adc <__aeabi_d2iz>
 800dfd4:	9014      	str	r0, [sp, #80]	; 0x50
 800dfd6:	f7f4 fdb7 	bl	8002b48 <__aeabi_i2d>
 800dfda:	0002      	movs	r2, r0
 800dfdc:	000b      	movs	r3, r1
 800dfde:	0020      	movs	r0, r4
 800dfe0:	0029      	movs	r1, r5
 800dfe2:	f7f4 f9e9 	bl	80023b8 <__aeabi_dsub>
 800dfe6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dfe8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dfea:	3301      	adds	r3, #1
 800dfec:	9308      	str	r3, [sp, #32]
 800dfee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dff0:	0004      	movs	r4, r0
 800dff2:	3330      	adds	r3, #48	; 0x30
 800dff4:	7013      	strb	r3, [r2, #0]
 800dff6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dff8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dffa:	000d      	movs	r5, r1
 800dffc:	f7f2 fa36 	bl	800046c <__aeabi_dcmplt>
 800e000:	2800      	cmp	r0, #0
 800e002:	d175      	bne.n	800e0f0 <_dtoa_r+0x67c>
 800e004:	0022      	movs	r2, r4
 800e006:	002b      	movs	r3, r5
 800e008:	2000      	movs	r0, #0
 800e00a:	4940      	ldr	r1, [pc, #256]	; (800e10c <_dtoa_r+0x698>)
 800e00c:	f7f4 f9d4 	bl	80023b8 <__aeabi_dsub>
 800e010:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e012:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e014:	f7f2 fa2a 	bl	800046c <__aeabi_dcmplt>
 800e018:	2800      	cmp	r0, #0
 800e01a:	d000      	beq.n	800e01e <_dtoa_r+0x5aa>
 800e01c:	e0d2      	b.n	800e1c4 <_dtoa_r+0x750>
 800e01e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e020:	9a08      	ldr	r2, [sp, #32]
 800e022:	4293      	cmp	r3, r2
 800e024:	d100      	bne.n	800e028 <_dtoa_r+0x5b4>
 800e026:	e770      	b.n	800df0a <_dtoa_r+0x496>
 800e028:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e02a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e02c:	2200      	movs	r2, #0
 800e02e:	4b38      	ldr	r3, [pc, #224]	; (800e110 <_dtoa_r+0x69c>)
 800e030:	f7f3 ff56 	bl	8001ee0 <__aeabi_dmul>
 800e034:	4b36      	ldr	r3, [pc, #216]	; (800e110 <_dtoa_r+0x69c>)
 800e036:	9010      	str	r0, [sp, #64]	; 0x40
 800e038:	9111      	str	r1, [sp, #68]	; 0x44
 800e03a:	2200      	movs	r2, #0
 800e03c:	0020      	movs	r0, r4
 800e03e:	0029      	movs	r1, r5
 800e040:	f7f3 ff4e 	bl	8001ee0 <__aeabi_dmul>
 800e044:	9b08      	ldr	r3, [sp, #32]
 800e046:	0004      	movs	r4, r0
 800e048:	000d      	movs	r5, r1
 800e04a:	9317      	str	r3, [sp, #92]	; 0x5c
 800e04c:	e7be      	b.n	800dfcc <_dtoa_r+0x558>
 800e04e:	9808      	ldr	r0, [sp, #32]
 800e050:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e052:	f7f3 ff45 	bl	8001ee0 <__aeabi_dmul>
 800e056:	9a06      	ldr	r2, [sp, #24]
 800e058:	9b06      	ldr	r3, [sp, #24]
 800e05a:	4694      	mov	ip, r2
 800e05c:	9308      	str	r3, [sp, #32]
 800e05e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e060:	9010      	str	r0, [sp, #64]	; 0x40
 800e062:	9111      	str	r1, [sp, #68]	; 0x44
 800e064:	4463      	add	r3, ip
 800e066:	9319      	str	r3, [sp, #100]	; 0x64
 800e068:	0029      	movs	r1, r5
 800e06a:	0020      	movs	r0, r4
 800e06c:	f7f4 fd36 	bl	8002adc <__aeabi_d2iz>
 800e070:	9017      	str	r0, [sp, #92]	; 0x5c
 800e072:	f7f4 fd69 	bl	8002b48 <__aeabi_i2d>
 800e076:	0002      	movs	r2, r0
 800e078:	000b      	movs	r3, r1
 800e07a:	0020      	movs	r0, r4
 800e07c:	0029      	movs	r1, r5
 800e07e:	f7f4 f99b 	bl	80023b8 <__aeabi_dsub>
 800e082:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e084:	9a08      	ldr	r2, [sp, #32]
 800e086:	3330      	adds	r3, #48	; 0x30
 800e088:	7013      	strb	r3, [r2, #0]
 800e08a:	0013      	movs	r3, r2
 800e08c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e08e:	3301      	adds	r3, #1
 800e090:	0004      	movs	r4, r0
 800e092:	000d      	movs	r5, r1
 800e094:	9308      	str	r3, [sp, #32]
 800e096:	4293      	cmp	r3, r2
 800e098:	d12c      	bne.n	800e0f4 <_dtoa_r+0x680>
 800e09a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e09c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e09e:	9a06      	ldr	r2, [sp, #24]
 800e0a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e0a2:	4694      	mov	ip, r2
 800e0a4:	4463      	add	r3, ip
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	9308      	str	r3, [sp, #32]
 800e0aa:	4b1e      	ldr	r3, [pc, #120]	; (800e124 <_dtoa_r+0x6b0>)
 800e0ac:	f7f2 ffda 	bl	8001064 <__aeabi_dadd>
 800e0b0:	0002      	movs	r2, r0
 800e0b2:	000b      	movs	r3, r1
 800e0b4:	0020      	movs	r0, r4
 800e0b6:	0029      	movs	r1, r5
 800e0b8:	f7f2 f9ec 	bl	8000494 <__aeabi_dcmpgt>
 800e0bc:	2800      	cmp	r0, #0
 800e0be:	d000      	beq.n	800e0c2 <_dtoa_r+0x64e>
 800e0c0:	e080      	b.n	800e1c4 <_dtoa_r+0x750>
 800e0c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e0c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e0c6:	2000      	movs	r0, #0
 800e0c8:	4916      	ldr	r1, [pc, #88]	; (800e124 <_dtoa_r+0x6b0>)
 800e0ca:	f7f4 f975 	bl	80023b8 <__aeabi_dsub>
 800e0ce:	0002      	movs	r2, r0
 800e0d0:	000b      	movs	r3, r1
 800e0d2:	0020      	movs	r0, r4
 800e0d4:	0029      	movs	r1, r5
 800e0d6:	f7f2 f9c9 	bl	800046c <__aeabi_dcmplt>
 800e0da:	2800      	cmp	r0, #0
 800e0dc:	d100      	bne.n	800e0e0 <_dtoa_r+0x66c>
 800e0de:	e714      	b.n	800df0a <_dtoa_r+0x496>
 800e0e0:	9b08      	ldr	r3, [sp, #32]
 800e0e2:	001a      	movs	r2, r3
 800e0e4:	3a01      	subs	r2, #1
 800e0e6:	9208      	str	r2, [sp, #32]
 800e0e8:	7812      	ldrb	r2, [r2, #0]
 800e0ea:	2a30      	cmp	r2, #48	; 0x30
 800e0ec:	d0f8      	beq.n	800e0e0 <_dtoa_r+0x66c>
 800e0ee:	9308      	str	r3, [sp, #32]
 800e0f0:	9602      	str	r6, [sp, #8]
 800e0f2:	e055      	b.n	800e1a0 <_dtoa_r+0x72c>
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	4b06      	ldr	r3, [pc, #24]	; (800e110 <_dtoa_r+0x69c>)
 800e0f8:	f7f3 fef2 	bl	8001ee0 <__aeabi_dmul>
 800e0fc:	0004      	movs	r4, r0
 800e0fe:	000d      	movs	r5, r1
 800e100:	e7b2      	b.n	800e068 <_dtoa_r+0x5f4>
 800e102:	46c0      	nop			; (mov r8, r8)
 800e104:	08010ba8 	.word	0x08010ba8
 800e108:	08010b80 	.word	0x08010b80
 800e10c:	3ff00000 	.word	0x3ff00000
 800e110:	40240000 	.word	0x40240000
 800e114:	401c0000 	.word	0x401c0000
 800e118:	fcc00000 	.word	0xfcc00000
 800e11c:	40140000 	.word	0x40140000
 800e120:	7cc00000 	.word	0x7cc00000
 800e124:	3fe00000 	.word	0x3fe00000
 800e128:	9b07      	ldr	r3, [sp, #28]
 800e12a:	9e06      	ldr	r6, [sp, #24]
 800e12c:	3b01      	subs	r3, #1
 800e12e:	199b      	adds	r3, r3, r6
 800e130:	930c      	str	r3, [sp, #48]	; 0x30
 800e132:	9c08      	ldr	r4, [sp, #32]
 800e134:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e136:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e13a:	0020      	movs	r0, r4
 800e13c:	0029      	movs	r1, r5
 800e13e:	f7f3 facd 	bl	80016dc <__aeabi_ddiv>
 800e142:	f7f4 fccb 	bl	8002adc <__aeabi_d2iz>
 800e146:	9007      	str	r0, [sp, #28]
 800e148:	f7f4 fcfe 	bl	8002b48 <__aeabi_i2d>
 800e14c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e14e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e150:	f7f3 fec6 	bl	8001ee0 <__aeabi_dmul>
 800e154:	0002      	movs	r2, r0
 800e156:	000b      	movs	r3, r1
 800e158:	0020      	movs	r0, r4
 800e15a:	0029      	movs	r1, r5
 800e15c:	f7f4 f92c 	bl	80023b8 <__aeabi_dsub>
 800e160:	0033      	movs	r3, r6
 800e162:	9a07      	ldr	r2, [sp, #28]
 800e164:	3601      	adds	r6, #1
 800e166:	3230      	adds	r2, #48	; 0x30
 800e168:	701a      	strb	r2, [r3, #0]
 800e16a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e16c:	9608      	str	r6, [sp, #32]
 800e16e:	429a      	cmp	r2, r3
 800e170:	d139      	bne.n	800e1e6 <_dtoa_r+0x772>
 800e172:	0002      	movs	r2, r0
 800e174:	000b      	movs	r3, r1
 800e176:	f7f2 ff75 	bl	8001064 <__aeabi_dadd>
 800e17a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e17c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e17e:	0004      	movs	r4, r0
 800e180:	000d      	movs	r5, r1
 800e182:	f7f2 f987 	bl	8000494 <__aeabi_dcmpgt>
 800e186:	2800      	cmp	r0, #0
 800e188:	d11b      	bne.n	800e1c2 <_dtoa_r+0x74e>
 800e18a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e18c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e18e:	0020      	movs	r0, r4
 800e190:	0029      	movs	r1, r5
 800e192:	f7f2 f965 	bl	8000460 <__aeabi_dcmpeq>
 800e196:	2800      	cmp	r0, #0
 800e198:	d002      	beq.n	800e1a0 <_dtoa_r+0x72c>
 800e19a:	9b07      	ldr	r3, [sp, #28]
 800e19c:	07db      	lsls	r3, r3, #31
 800e19e:	d410      	bmi.n	800e1c2 <_dtoa_r+0x74e>
 800e1a0:	0038      	movs	r0, r7
 800e1a2:	9905      	ldr	r1, [sp, #20]
 800e1a4:	f7fe fc60 	bl	800ca68 <_Bfree>
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	9a08      	ldr	r2, [sp, #32]
 800e1ac:	9802      	ldr	r0, [sp, #8]
 800e1ae:	7013      	strb	r3, [r2, #0]
 800e1b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e1b2:	3001      	adds	r0, #1
 800e1b4:	6018      	str	r0, [r3, #0]
 800e1b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d100      	bne.n	800e1be <_dtoa_r+0x74a>
 800e1bc:	e4a6      	b.n	800db0c <_dtoa_r+0x98>
 800e1be:	601a      	str	r2, [r3, #0]
 800e1c0:	e4a4      	b.n	800db0c <_dtoa_r+0x98>
 800e1c2:	9e02      	ldr	r6, [sp, #8]
 800e1c4:	9b08      	ldr	r3, [sp, #32]
 800e1c6:	9308      	str	r3, [sp, #32]
 800e1c8:	3b01      	subs	r3, #1
 800e1ca:	781a      	ldrb	r2, [r3, #0]
 800e1cc:	2a39      	cmp	r2, #57	; 0x39
 800e1ce:	d106      	bne.n	800e1de <_dtoa_r+0x76a>
 800e1d0:	9a06      	ldr	r2, [sp, #24]
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	d1f7      	bne.n	800e1c6 <_dtoa_r+0x752>
 800e1d6:	2230      	movs	r2, #48	; 0x30
 800e1d8:	9906      	ldr	r1, [sp, #24]
 800e1da:	3601      	adds	r6, #1
 800e1dc:	700a      	strb	r2, [r1, #0]
 800e1de:	781a      	ldrb	r2, [r3, #0]
 800e1e0:	3201      	adds	r2, #1
 800e1e2:	701a      	strb	r2, [r3, #0]
 800e1e4:	e784      	b.n	800e0f0 <_dtoa_r+0x67c>
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	4baa      	ldr	r3, [pc, #680]	; (800e494 <_dtoa_r+0xa20>)
 800e1ea:	f7f3 fe79 	bl	8001ee0 <__aeabi_dmul>
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	0004      	movs	r4, r0
 800e1f4:	000d      	movs	r5, r1
 800e1f6:	f7f2 f933 	bl	8000460 <__aeabi_dcmpeq>
 800e1fa:	2800      	cmp	r0, #0
 800e1fc:	d09b      	beq.n	800e136 <_dtoa_r+0x6c2>
 800e1fe:	e7cf      	b.n	800e1a0 <_dtoa_r+0x72c>
 800e200:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e202:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800e204:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e206:	2d00      	cmp	r5, #0
 800e208:	d012      	beq.n	800e230 <_dtoa_r+0x7bc>
 800e20a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e20c:	2a01      	cmp	r2, #1
 800e20e:	dc66      	bgt.n	800e2de <_dtoa_r+0x86a>
 800e210:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e212:	2a00      	cmp	r2, #0
 800e214:	d05d      	beq.n	800e2d2 <_dtoa_r+0x85e>
 800e216:	4aa0      	ldr	r2, [pc, #640]	; (800e498 <_dtoa_r+0xa24>)
 800e218:	189b      	adds	r3, r3, r2
 800e21a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e21c:	2101      	movs	r1, #1
 800e21e:	18d2      	adds	r2, r2, r3
 800e220:	920a      	str	r2, [sp, #40]	; 0x28
 800e222:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e224:	0038      	movs	r0, r7
 800e226:	18d3      	adds	r3, r2, r3
 800e228:	930d      	str	r3, [sp, #52]	; 0x34
 800e22a:	f7fe fccd 	bl	800cbc8 <__i2b>
 800e22e:	0005      	movs	r5, r0
 800e230:	2c00      	cmp	r4, #0
 800e232:	dd0e      	ble.n	800e252 <_dtoa_r+0x7de>
 800e234:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e236:	2b00      	cmp	r3, #0
 800e238:	dd0b      	ble.n	800e252 <_dtoa_r+0x7de>
 800e23a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e23c:	0023      	movs	r3, r4
 800e23e:	4294      	cmp	r4, r2
 800e240:	dd00      	ble.n	800e244 <_dtoa_r+0x7d0>
 800e242:	0013      	movs	r3, r2
 800e244:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e246:	1ae4      	subs	r4, r4, r3
 800e248:	1ad2      	subs	r2, r2, r3
 800e24a:	920a      	str	r2, [sp, #40]	; 0x28
 800e24c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e24e:	1ad3      	subs	r3, r2, r3
 800e250:	930d      	str	r3, [sp, #52]	; 0x34
 800e252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e254:	2b00      	cmp	r3, #0
 800e256:	d01f      	beq.n	800e298 <_dtoa_r+0x824>
 800e258:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d054      	beq.n	800e308 <_dtoa_r+0x894>
 800e25e:	2e00      	cmp	r6, #0
 800e260:	dd11      	ble.n	800e286 <_dtoa_r+0x812>
 800e262:	0029      	movs	r1, r5
 800e264:	0032      	movs	r2, r6
 800e266:	0038      	movs	r0, r7
 800e268:	f7fe fd74 	bl	800cd54 <__pow5mult>
 800e26c:	9a05      	ldr	r2, [sp, #20]
 800e26e:	0001      	movs	r1, r0
 800e270:	0005      	movs	r5, r0
 800e272:	0038      	movs	r0, r7
 800e274:	f7fe fcbe 	bl	800cbf4 <__multiply>
 800e278:	9905      	ldr	r1, [sp, #20]
 800e27a:	9014      	str	r0, [sp, #80]	; 0x50
 800e27c:	0038      	movs	r0, r7
 800e27e:	f7fe fbf3 	bl	800ca68 <_Bfree>
 800e282:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e284:	9305      	str	r3, [sp, #20]
 800e286:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e288:	1b9a      	subs	r2, r3, r6
 800e28a:	42b3      	cmp	r3, r6
 800e28c:	d004      	beq.n	800e298 <_dtoa_r+0x824>
 800e28e:	0038      	movs	r0, r7
 800e290:	9905      	ldr	r1, [sp, #20]
 800e292:	f7fe fd5f 	bl	800cd54 <__pow5mult>
 800e296:	9005      	str	r0, [sp, #20]
 800e298:	2101      	movs	r1, #1
 800e29a:	0038      	movs	r0, r7
 800e29c:	f7fe fc94 	bl	800cbc8 <__i2b>
 800e2a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e2a2:	0006      	movs	r6, r0
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	dd31      	ble.n	800e30c <_dtoa_r+0x898>
 800e2a8:	001a      	movs	r2, r3
 800e2aa:	0001      	movs	r1, r0
 800e2ac:	0038      	movs	r0, r7
 800e2ae:	f7fe fd51 	bl	800cd54 <__pow5mult>
 800e2b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e2b4:	0006      	movs	r6, r0
 800e2b6:	2b01      	cmp	r3, #1
 800e2b8:	dd2d      	ble.n	800e316 <_dtoa_r+0x8a2>
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	930e      	str	r3, [sp, #56]	; 0x38
 800e2be:	6933      	ldr	r3, [r6, #16]
 800e2c0:	3303      	adds	r3, #3
 800e2c2:	009b      	lsls	r3, r3, #2
 800e2c4:	18f3      	adds	r3, r6, r3
 800e2c6:	6858      	ldr	r0, [r3, #4]
 800e2c8:	f7fe fc36 	bl	800cb38 <__hi0bits>
 800e2cc:	2320      	movs	r3, #32
 800e2ce:	1a18      	subs	r0, r3, r0
 800e2d0:	e039      	b.n	800e346 <_dtoa_r+0x8d2>
 800e2d2:	2336      	movs	r3, #54	; 0x36
 800e2d4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e2d6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800e2d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e2da:	1a9b      	subs	r3, r3, r2
 800e2dc:	e79d      	b.n	800e21a <_dtoa_r+0x7a6>
 800e2de:	9b07      	ldr	r3, [sp, #28]
 800e2e0:	1e5e      	subs	r6, r3, #1
 800e2e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2e4:	42b3      	cmp	r3, r6
 800e2e6:	db07      	blt.n	800e2f8 <_dtoa_r+0x884>
 800e2e8:	1b9e      	subs	r6, r3, r6
 800e2ea:	9b07      	ldr	r3, [sp, #28]
 800e2ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	da93      	bge.n	800e21a <_dtoa_r+0x7a6>
 800e2f2:	1ae4      	subs	r4, r4, r3
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	e790      	b.n	800e21a <_dtoa_r+0x7a6>
 800e2f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e2fc:	1af3      	subs	r3, r6, r3
 800e2fe:	18d3      	adds	r3, r2, r3
 800e300:	960e      	str	r6, [sp, #56]	; 0x38
 800e302:	9315      	str	r3, [sp, #84]	; 0x54
 800e304:	2600      	movs	r6, #0
 800e306:	e7f0      	b.n	800e2ea <_dtoa_r+0x876>
 800e308:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e30a:	e7c0      	b.n	800e28e <_dtoa_r+0x81a>
 800e30c:	2300      	movs	r3, #0
 800e30e:	930e      	str	r3, [sp, #56]	; 0x38
 800e310:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e312:	2b01      	cmp	r3, #1
 800e314:	dc13      	bgt.n	800e33e <_dtoa_r+0x8ca>
 800e316:	2300      	movs	r3, #0
 800e318:	930e      	str	r3, [sp, #56]	; 0x38
 800e31a:	9b08      	ldr	r3, [sp, #32]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d10e      	bne.n	800e33e <_dtoa_r+0x8ca>
 800e320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e322:	031b      	lsls	r3, r3, #12
 800e324:	d10b      	bne.n	800e33e <_dtoa_r+0x8ca>
 800e326:	4b5d      	ldr	r3, [pc, #372]	; (800e49c <_dtoa_r+0xa28>)
 800e328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e32a:	4213      	tst	r3, r2
 800e32c:	d007      	beq.n	800e33e <_dtoa_r+0x8ca>
 800e32e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e330:	3301      	adds	r3, #1
 800e332:	930a      	str	r3, [sp, #40]	; 0x28
 800e334:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e336:	3301      	adds	r3, #1
 800e338:	930d      	str	r3, [sp, #52]	; 0x34
 800e33a:	2301      	movs	r3, #1
 800e33c:	930e      	str	r3, [sp, #56]	; 0x38
 800e33e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e340:	2001      	movs	r0, #1
 800e342:	2b00      	cmp	r3, #0
 800e344:	d1bb      	bne.n	800e2be <_dtoa_r+0x84a>
 800e346:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e348:	221f      	movs	r2, #31
 800e34a:	1818      	adds	r0, r3, r0
 800e34c:	0003      	movs	r3, r0
 800e34e:	4013      	ands	r3, r2
 800e350:	4210      	tst	r0, r2
 800e352:	d046      	beq.n	800e3e2 <_dtoa_r+0x96e>
 800e354:	3201      	adds	r2, #1
 800e356:	1ad2      	subs	r2, r2, r3
 800e358:	2a04      	cmp	r2, #4
 800e35a:	dd3f      	ble.n	800e3dc <_dtoa_r+0x968>
 800e35c:	221c      	movs	r2, #28
 800e35e:	1ad3      	subs	r3, r2, r3
 800e360:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e362:	18e4      	adds	r4, r4, r3
 800e364:	18d2      	adds	r2, r2, r3
 800e366:	920a      	str	r2, [sp, #40]	; 0x28
 800e368:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e36a:	18d3      	adds	r3, r2, r3
 800e36c:	930d      	str	r3, [sp, #52]	; 0x34
 800e36e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e370:	2b00      	cmp	r3, #0
 800e372:	dd05      	ble.n	800e380 <_dtoa_r+0x90c>
 800e374:	001a      	movs	r2, r3
 800e376:	0038      	movs	r0, r7
 800e378:	9905      	ldr	r1, [sp, #20]
 800e37a:	f7fe fd47 	bl	800ce0c <__lshift>
 800e37e:	9005      	str	r0, [sp, #20]
 800e380:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e382:	2b00      	cmp	r3, #0
 800e384:	dd05      	ble.n	800e392 <_dtoa_r+0x91e>
 800e386:	0031      	movs	r1, r6
 800e388:	001a      	movs	r2, r3
 800e38a:	0038      	movs	r0, r7
 800e38c:	f7fe fd3e 	bl	800ce0c <__lshift>
 800e390:	0006      	movs	r6, r0
 800e392:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e394:	2b00      	cmp	r3, #0
 800e396:	d026      	beq.n	800e3e6 <_dtoa_r+0x972>
 800e398:	0031      	movs	r1, r6
 800e39a:	9805      	ldr	r0, [sp, #20]
 800e39c:	f7fe fda4 	bl	800cee8 <__mcmp>
 800e3a0:	2800      	cmp	r0, #0
 800e3a2:	da20      	bge.n	800e3e6 <_dtoa_r+0x972>
 800e3a4:	9b02      	ldr	r3, [sp, #8]
 800e3a6:	220a      	movs	r2, #10
 800e3a8:	3b01      	subs	r3, #1
 800e3aa:	9302      	str	r3, [sp, #8]
 800e3ac:	0038      	movs	r0, r7
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	9905      	ldr	r1, [sp, #20]
 800e3b2:	f7fe fb7d 	bl	800cab0 <__multadd>
 800e3b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e3b8:	9005      	str	r0, [sp, #20]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d100      	bne.n	800e3c0 <_dtoa_r+0x94c>
 800e3be:	e166      	b.n	800e68e <_dtoa_r+0xc1a>
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	0029      	movs	r1, r5
 800e3c4:	220a      	movs	r2, #10
 800e3c6:	0038      	movs	r0, r7
 800e3c8:	f7fe fb72 	bl	800cab0 <__multadd>
 800e3cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e3ce:	0005      	movs	r5, r0
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	dc47      	bgt.n	800e464 <_dtoa_r+0x9f0>
 800e3d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e3d6:	2b02      	cmp	r3, #2
 800e3d8:	dc0d      	bgt.n	800e3f6 <_dtoa_r+0x982>
 800e3da:	e043      	b.n	800e464 <_dtoa_r+0x9f0>
 800e3dc:	2a04      	cmp	r2, #4
 800e3de:	d0c6      	beq.n	800e36e <_dtoa_r+0x8fa>
 800e3e0:	0013      	movs	r3, r2
 800e3e2:	331c      	adds	r3, #28
 800e3e4:	e7bc      	b.n	800e360 <_dtoa_r+0x8ec>
 800e3e6:	9b07      	ldr	r3, [sp, #28]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	dc35      	bgt.n	800e458 <_dtoa_r+0x9e4>
 800e3ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e3ee:	2b02      	cmp	r3, #2
 800e3f0:	dd32      	ble.n	800e458 <_dtoa_r+0x9e4>
 800e3f2:	9b07      	ldr	r3, [sp, #28]
 800e3f4:	930c      	str	r3, [sp, #48]	; 0x30
 800e3f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d10c      	bne.n	800e416 <_dtoa_r+0x9a2>
 800e3fc:	0031      	movs	r1, r6
 800e3fe:	2205      	movs	r2, #5
 800e400:	0038      	movs	r0, r7
 800e402:	f7fe fb55 	bl	800cab0 <__multadd>
 800e406:	0006      	movs	r6, r0
 800e408:	0001      	movs	r1, r0
 800e40a:	9805      	ldr	r0, [sp, #20]
 800e40c:	f7fe fd6c 	bl	800cee8 <__mcmp>
 800e410:	2800      	cmp	r0, #0
 800e412:	dd00      	ble.n	800e416 <_dtoa_r+0x9a2>
 800e414:	e5a5      	b.n	800df62 <_dtoa_r+0x4ee>
 800e416:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e418:	43db      	mvns	r3, r3
 800e41a:	9302      	str	r3, [sp, #8]
 800e41c:	9b06      	ldr	r3, [sp, #24]
 800e41e:	9308      	str	r3, [sp, #32]
 800e420:	2400      	movs	r4, #0
 800e422:	0031      	movs	r1, r6
 800e424:	0038      	movs	r0, r7
 800e426:	f7fe fb1f 	bl	800ca68 <_Bfree>
 800e42a:	2d00      	cmp	r5, #0
 800e42c:	d100      	bne.n	800e430 <_dtoa_r+0x9bc>
 800e42e:	e6b7      	b.n	800e1a0 <_dtoa_r+0x72c>
 800e430:	2c00      	cmp	r4, #0
 800e432:	d005      	beq.n	800e440 <_dtoa_r+0x9cc>
 800e434:	42ac      	cmp	r4, r5
 800e436:	d003      	beq.n	800e440 <_dtoa_r+0x9cc>
 800e438:	0021      	movs	r1, r4
 800e43a:	0038      	movs	r0, r7
 800e43c:	f7fe fb14 	bl	800ca68 <_Bfree>
 800e440:	0029      	movs	r1, r5
 800e442:	0038      	movs	r0, r7
 800e444:	f7fe fb10 	bl	800ca68 <_Bfree>
 800e448:	e6aa      	b.n	800e1a0 <_dtoa_r+0x72c>
 800e44a:	2600      	movs	r6, #0
 800e44c:	0035      	movs	r5, r6
 800e44e:	e7e2      	b.n	800e416 <_dtoa_r+0x9a2>
 800e450:	9602      	str	r6, [sp, #8]
 800e452:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800e454:	0035      	movs	r5, r6
 800e456:	e584      	b.n	800df62 <_dtoa_r+0x4ee>
 800e458:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d100      	bne.n	800e460 <_dtoa_r+0x9ec>
 800e45e:	e0ce      	b.n	800e5fe <_dtoa_r+0xb8a>
 800e460:	9b07      	ldr	r3, [sp, #28]
 800e462:	930c      	str	r3, [sp, #48]	; 0x30
 800e464:	2c00      	cmp	r4, #0
 800e466:	dd05      	ble.n	800e474 <_dtoa_r+0xa00>
 800e468:	0029      	movs	r1, r5
 800e46a:	0022      	movs	r2, r4
 800e46c:	0038      	movs	r0, r7
 800e46e:	f7fe fccd 	bl	800ce0c <__lshift>
 800e472:	0005      	movs	r5, r0
 800e474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e476:	0028      	movs	r0, r5
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d022      	beq.n	800e4c2 <_dtoa_r+0xa4e>
 800e47c:	0038      	movs	r0, r7
 800e47e:	6869      	ldr	r1, [r5, #4]
 800e480:	f7fe faae 	bl	800c9e0 <_Balloc>
 800e484:	1e04      	subs	r4, r0, #0
 800e486:	d10f      	bne.n	800e4a8 <_dtoa_r+0xa34>
 800e488:	0002      	movs	r2, r0
 800e48a:	4b05      	ldr	r3, [pc, #20]	; (800e4a0 <_dtoa_r+0xa2c>)
 800e48c:	4905      	ldr	r1, [pc, #20]	; (800e4a4 <_dtoa_r+0xa30>)
 800e48e:	f7ff fb06 	bl	800da9e <_dtoa_r+0x2a>
 800e492:	46c0      	nop			; (mov r8, r8)
 800e494:	40240000 	.word	0x40240000
 800e498:	00000433 	.word	0x00000433
 800e49c:	7ff00000 	.word	0x7ff00000
 800e4a0:	08010b68 	.word	0x08010b68
 800e4a4:	000002ea 	.word	0x000002ea
 800e4a8:	0029      	movs	r1, r5
 800e4aa:	692b      	ldr	r3, [r5, #16]
 800e4ac:	310c      	adds	r1, #12
 800e4ae:	1c9a      	adds	r2, r3, #2
 800e4b0:	0092      	lsls	r2, r2, #2
 800e4b2:	300c      	adds	r0, #12
 800e4b4:	f7fe f84e 	bl	800c554 <memcpy>
 800e4b8:	2201      	movs	r2, #1
 800e4ba:	0021      	movs	r1, r4
 800e4bc:	0038      	movs	r0, r7
 800e4be:	f7fe fca5 	bl	800ce0c <__lshift>
 800e4c2:	9b06      	ldr	r3, [sp, #24]
 800e4c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e4c6:	930a      	str	r3, [sp, #40]	; 0x28
 800e4c8:	3b01      	subs	r3, #1
 800e4ca:	189b      	adds	r3, r3, r2
 800e4cc:	2201      	movs	r2, #1
 800e4ce:	002c      	movs	r4, r5
 800e4d0:	0005      	movs	r5, r0
 800e4d2:	9314      	str	r3, [sp, #80]	; 0x50
 800e4d4:	9b08      	ldr	r3, [sp, #32]
 800e4d6:	4013      	ands	r3, r2
 800e4d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800e4da:	0031      	movs	r1, r6
 800e4dc:	9805      	ldr	r0, [sp, #20]
 800e4de:	f7ff fa3d 	bl	800d95c <quorem>
 800e4e2:	0003      	movs	r3, r0
 800e4e4:	0021      	movs	r1, r4
 800e4e6:	3330      	adds	r3, #48	; 0x30
 800e4e8:	900d      	str	r0, [sp, #52]	; 0x34
 800e4ea:	9805      	ldr	r0, [sp, #20]
 800e4ec:	9307      	str	r3, [sp, #28]
 800e4ee:	f7fe fcfb 	bl	800cee8 <__mcmp>
 800e4f2:	002a      	movs	r2, r5
 800e4f4:	900e      	str	r0, [sp, #56]	; 0x38
 800e4f6:	0031      	movs	r1, r6
 800e4f8:	0038      	movs	r0, r7
 800e4fa:	f7fe fd11 	bl	800cf20 <__mdiff>
 800e4fe:	68c3      	ldr	r3, [r0, #12]
 800e500:	9008      	str	r0, [sp, #32]
 800e502:	9310      	str	r3, [sp, #64]	; 0x40
 800e504:	2301      	movs	r3, #1
 800e506:	930c      	str	r3, [sp, #48]	; 0x30
 800e508:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d104      	bne.n	800e518 <_dtoa_r+0xaa4>
 800e50e:	0001      	movs	r1, r0
 800e510:	9805      	ldr	r0, [sp, #20]
 800e512:	f7fe fce9 	bl	800cee8 <__mcmp>
 800e516:	900c      	str	r0, [sp, #48]	; 0x30
 800e518:	0038      	movs	r0, r7
 800e51a:	9908      	ldr	r1, [sp, #32]
 800e51c:	f7fe faa4 	bl	800ca68 <_Bfree>
 800e520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e522:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e524:	3301      	adds	r3, #1
 800e526:	9308      	str	r3, [sp, #32]
 800e528:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e52a:	4313      	orrs	r3, r2
 800e52c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e52e:	4313      	orrs	r3, r2
 800e530:	d10c      	bne.n	800e54c <_dtoa_r+0xad8>
 800e532:	9b07      	ldr	r3, [sp, #28]
 800e534:	2b39      	cmp	r3, #57	; 0x39
 800e536:	d026      	beq.n	800e586 <_dtoa_r+0xb12>
 800e538:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	dd02      	ble.n	800e544 <_dtoa_r+0xad0>
 800e53e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e540:	3331      	adds	r3, #49	; 0x31
 800e542:	9307      	str	r3, [sp, #28]
 800e544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e546:	9a07      	ldr	r2, [sp, #28]
 800e548:	701a      	strb	r2, [r3, #0]
 800e54a:	e76a      	b.n	800e422 <_dtoa_r+0x9ae>
 800e54c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e54e:	2b00      	cmp	r3, #0
 800e550:	db04      	blt.n	800e55c <_dtoa_r+0xae8>
 800e552:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e554:	4313      	orrs	r3, r2
 800e556:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e558:	4313      	orrs	r3, r2
 800e55a:	d11f      	bne.n	800e59c <_dtoa_r+0xb28>
 800e55c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e55e:	2b00      	cmp	r3, #0
 800e560:	ddf0      	ble.n	800e544 <_dtoa_r+0xad0>
 800e562:	9905      	ldr	r1, [sp, #20]
 800e564:	2201      	movs	r2, #1
 800e566:	0038      	movs	r0, r7
 800e568:	f7fe fc50 	bl	800ce0c <__lshift>
 800e56c:	0031      	movs	r1, r6
 800e56e:	9005      	str	r0, [sp, #20]
 800e570:	f7fe fcba 	bl	800cee8 <__mcmp>
 800e574:	2800      	cmp	r0, #0
 800e576:	dc03      	bgt.n	800e580 <_dtoa_r+0xb0c>
 800e578:	d1e4      	bne.n	800e544 <_dtoa_r+0xad0>
 800e57a:	9b07      	ldr	r3, [sp, #28]
 800e57c:	07db      	lsls	r3, r3, #31
 800e57e:	d5e1      	bpl.n	800e544 <_dtoa_r+0xad0>
 800e580:	9b07      	ldr	r3, [sp, #28]
 800e582:	2b39      	cmp	r3, #57	; 0x39
 800e584:	d1db      	bne.n	800e53e <_dtoa_r+0xaca>
 800e586:	2339      	movs	r3, #57	; 0x39
 800e588:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e58a:	7013      	strb	r3, [r2, #0]
 800e58c:	9b08      	ldr	r3, [sp, #32]
 800e58e:	9308      	str	r3, [sp, #32]
 800e590:	3b01      	subs	r3, #1
 800e592:	781a      	ldrb	r2, [r3, #0]
 800e594:	2a39      	cmp	r2, #57	; 0x39
 800e596:	d068      	beq.n	800e66a <_dtoa_r+0xbf6>
 800e598:	3201      	adds	r2, #1
 800e59a:	e7d5      	b.n	800e548 <_dtoa_r+0xad4>
 800e59c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	dd07      	ble.n	800e5b2 <_dtoa_r+0xb3e>
 800e5a2:	9b07      	ldr	r3, [sp, #28]
 800e5a4:	2b39      	cmp	r3, #57	; 0x39
 800e5a6:	d0ee      	beq.n	800e586 <_dtoa_r+0xb12>
 800e5a8:	9b07      	ldr	r3, [sp, #28]
 800e5aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e5ac:	3301      	adds	r3, #1
 800e5ae:	7013      	strb	r3, [r2, #0]
 800e5b0:	e737      	b.n	800e422 <_dtoa_r+0x9ae>
 800e5b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5b4:	9a07      	ldr	r2, [sp, #28]
 800e5b6:	701a      	strb	r2, [r3, #0]
 800e5b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e5ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e5bc:	4293      	cmp	r3, r2
 800e5be:	d03e      	beq.n	800e63e <_dtoa_r+0xbca>
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	220a      	movs	r2, #10
 800e5c4:	9905      	ldr	r1, [sp, #20]
 800e5c6:	0038      	movs	r0, r7
 800e5c8:	f7fe fa72 	bl	800cab0 <__multadd>
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	9005      	str	r0, [sp, #20]
 800e5d0:	220a      	movs	r2, #10
 800e5d2:	0021      	movs	r1, r4
 800e5d4:	0038      	movs	r0, r7
 800e5d6:	42ac      	cmp	r4, r5
 800e5d8:	d106      	bne.n	800e5e8 <_dtoa_r+0xb74>
 800e5da:	f7fe fa69 	bl	800cab0 <__multadd>
 800e5de:	0004      	movs	r4, r0
 800e5e0:	0005      	movs	r5, r0
 800e5e2:	9b08      	ldr	r3, [sp, #32]
 800e5e4:	930a      	str	r3, [sp, #40]	; 0x28
 800e5e6:	e778      	b.n	800e4da <_dtoa_r+0xa66>
 800e5e8:	f7fe fa62 	bl	800cab0 <__multadd>
 800e5ec:	0029      	movs	r1, r5
 800e5ee:	0004      	movs	r4, r0
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	220a      	movs	r2, #10
 800e5f4:	0038      	movs	r0, r7
 800e5f6:	f7fe fa5b 	bl	800cab0 <__multadd>
 800e5fa:	0005      	movs	r5, r0
 800e5fc:	e7f1      	b.n	800e5e2 <_dtoa_r+0xb6e>
 800e5fe:	9b07      	ldr	r3, [sp, #28]
 800e600:	930c      	str	r3, [sp, #48]	; 0x30
 800e602:	2400      	movs	r4, #0
 800e604:	0031      	movs	r1, r6
 800e606:	9805      	ldr	r0, [sp, #20]
 800e608:	f7ff f9a8 	bl	800d95c <quorem>
 800e60c:	9b06      	ldr	r3, [sp, #24]
 800e60e:	3030      	adds	r0, #48	; 0x30
 800e610:	5518      	strb	r0, [r3, r4]
 800e612:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e614:	3401      	adds	r4, #1
 800e616:	9007      	str	r0, [sp, #28]
 800e618:	42a3      	cmp	r3, r4
 800e61a:	dd07      	ble.n	800e62c <_dtoa_r+0xbb8>
 800e61c:	2300      	movs	r3, #0
 800e61e:	220a      	movs	r2, #10
 800e620:	0038      	movs	r0, r7
 800e622:	9905      	ldr	r1, [sp, #20]
 800e624:	f7fe fa44 	bl	800cab0 <__multadd>
 800e628:	9005      	str	r0, [sp, #20]
 800e62a:	e7eb      	b.n	800e604 <_dtoa_r+0xb90>
 800e62c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e62e:	2001      	movs	r0, #1
 800e630:	2b00      	cmp	r3, #0
 800e632:	dd00      	ble.n	800e636 <_dtoa_r+0xbc2>
 800e634:	0018      	movs	r0, r3
 800e636:	2400      	movs	r4, #0
 800e638:	9b06      	ldr	r3, [sp, #24]
 800e63a:	181b      	adds	r3, r3, r0
 800e63c:	9308      	str	r3, [sp, #32]
 800e63e:	9905      	ldr	r1, [sp, #20]
 800e640:	2201      	movs	r2, #1
 800e642:	0038      	movs	r0, r7
 800e644:	f7fe fbe2 	bl	800ce0c <__lshift>
 800e648:	0031      	movs	r1, r6
 800e64a:	9005      	str	r0, [sp, #20]
 800e64c:	f7fe fc4c 	bl	800cee8 <__mcmp>
 800e650:	2800      	cmp	r0, #0
 800e652:	dc9b      	bgt.n	800e58c <_dtoa_r+0xb18>
 800e654:	d102      	bne.n	800e65c <_dtoa_r+0xbe8>
 800e656:	9b07      	ldr	r3, [sp, #28]
 800e658:	07db      	lsls	r3, r3, #31
 800e65a:	d497      	bmi.n	800e58c <_dtoa_r+0xb18>
 800e65c:	9b08      	ldr	r3, [sp, #32]
 800e65e:	9308      	str	r3, [sp, #32]
 800e660:	3b01      	subs	r3, #1
 800e662:	781a      	ldrb	r2, [r3, #0]
 800e664:	2a30      	cmp	r2, #48	; 0x30
 800e666:	d0fa      	beq.n	800e65e <_dtoa_r+0xbea>
 800e668:	e6db      	b.n	800e422 <_dtoa_r+0x9ae>
 800e66a:	9a06      	ldr	r2, [sp, #24]
 800e66c:	429a      	cmp	r2, r3
 800e66e:	d18e      	bne.n	800e58e <_dtoa_r+0xb1a>
 800e670:	9b02      	ldr	r3, [sp, #8]
 800e672:	3301      	adds	r3, #1
 800e674:	9302      	str	r3, [sp, #8]
 800e676:	2331      	movs	r3, #49	; 0x31
 800e678:	e799      	b.n	800e5ae <_dtoa_r+0xb3a>
 800e67a:	4b09      	ldr	r3, [pc, #36]	; (800e6a0 <_dtoa_r+0xc2c>)
 800e67c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e67e:	9306      	str	r3, [sp, #24]
 800e680:	4b08      	ldr	r3, [pc, #32]	; (800e6a4 <_dtoa_r+0xc30>)
 800e682:	2a00      	cmp	r2, #0
 800e684:	d001      	beq.n	800e68a <_dtoa_r+0xc16>
 800e686:	f7ff fa3f 	bl	800db08 <_dtoa_r+0x94>
 800e68a:	f7ff fa3f 	bl	800db0c <_dtoa_r+0x98>
 800e68e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e690:	2b00      	cmp	r3, #0
 800e692:	dcb6      	bgt.n	800e602 <_dtoa_r+0xb8e>
 800e694:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e696:	2b02      	cmp	r3, #2
 800e698:	dd00      	ble.n	800e69c <_dtoa_r+0xc28>
 800e69a:	e6ac      	b.n	800e3f6 <_dtoa_r+0x982>
 800e69c:	e7b1      	b.n	800e602 <_dtoa_r+0xb8e>
 800e69e:	46c0      	nop			; (mov r8, r8)
 800e6a0:	08010ceb 	.word	0x08010ceb
 800e6a4:	08010cf3 	.word	0x08010cf3

0800e6a8 <fiprintf>:
 800e6a8:	b40e      	push	{r1, r2, r3}
 800e6aa:	b503      	push	{r0, r1, lr}
 800e6ac:	0001      	movs	r1, r0
 800e6ae:	ab03      	add	r3, sp, #12
 800e6b0:	4804      	ldr	r0, [pc, #16]	; (800e6c4 <fiprintf+0x1c>)
 800e6b2:	cb04      	ldmia	r3!, {r2}
 800e6b4:	6800      	ldr	r0, [r0, #0]
 800e6b6:	9301      	str	r3, [sp, #4]
 800e6b8:	f000 f8b8 	bl	800e82c <_vfiprintf_r>
 800e6bc:	b002      	add	sp, #8
 800e6be:	bc08      	pop	{r3}
 800e6c0:	b003      	add	sp, #12
 800e6c2:	4718      	bx	r3
 800e6c4:	2000001c 	.word	0x2000001c

0800e6c8 <malloc>:
 800e6c8:	b510      	push	{r4, lr}
 800e6ca:	4b03      	ldr	r3, [pc, #12]	; (800e6d8 <malloc+0x10>)
 800e6cc:	0001      	movs	r1, r0
 800e6ce:	6818      	ldr	r0, [r3, #0]
 800e6d0:	f7fe fd8a 	bl	800d1e8 <_malloc_r>
 800e6d4:	bd10      	pop	{r4, pc}
 800e6d6:	46c0      	nop			; (mov r8, r8)
 800e6d8:	2000001c 	.word	0x2000001c

0800e6dc <memchr>:
 800e6dc:	b2c9      	uxtb	r1, r1
 800e6de:	1882      	adds	r2, r0, r2
 800e6e0:	4290      	cmp	r0, r2
 800e6e2:	d101      	bne.n	800e6e8 <memchr+0xc>
 800e6e4:	2000      	movs	r0, #0
 800e6e6:	4770      	bx	lr
 800e6e8:	7803      	ldrb	r3, [r0, #0]
 800e6ea:	428b      	cmp	r3, r1
 800e6ec:	d0fb      	beq.n	800e6e6 <memchr+0xa>
 800e6ee:	3001      	adds	r0, #1
 800e6f0:	e7f6      	b.n	800e6e0 <memchr+0x4>

0800e6f2 <memmove>:
 800e6f2:	b510      	push	{r4, lr}
 800e6f4:	4288      	cmp	r0, r1
 800e6f6:	d902      	bls.n	800e6fe <memmove+0xc>
 800e6f8:	188b      	adds	r3, r1, r2
 800e6fa:	4298      	cmp	r0, r3
 800e6fc:	d303      	bcc.n	800e706 <memmove+0x14>
 800e6fe:	2300      	movs	r3, #0
 800e700:	e007      	b.n	800e712 <memmove+0x20>
 800e702:	5c8b      	ldrb	r3, [r1, r2]
 800e704:	5483      	strb	r3, [r0, r2]
 800e706:	3a01      	subs	r2, #1
 800e708:	d2fb      	bcs.n	800e702 <memmove+0x10>
 800e70a:	bd10      	pop	{r4, pc}
 800e70c:	5ccc      	ldrb	r4, [r1, r3]
 800e70e:	54c4      	strb	r4, [r0, r3]
 800e710:	3301      	adds	r3, #1
 800e712:	429a      	cmp	r2, r3
 800e714:	d1fa      	bne.n	800e70c <memmove+0x1a>
 800e716:	e7f8      	b.n	800e70a <memmove+0x18>

0800e718 <__malloc_lock>:
 800e718:	b510      	push	{r4, lr}
 800e71a:	4802      	ldr	r0, [pc, #8]	; (800e724 <__malloc_lock+0xc>)
 800e71c:	f000 fc65 	bl	800efea <__retarget_lock_acquire_recursive>
 800e720:	bd10      	pop	{r4, pc}
 800e722:	46c0      	nop			; (mov r8, r8)
 800e724:	200016a8 	.word	0x200016a8

0800e728 <__malloc_unlock>:
 800e728:	b510      	push	{r4, lr}
 800e72a:	4802      	ldr	r0, [pc, #8]	; (800e734 <__malloc_unlock+0xc>)
 800e72c:	f000 fc5e 	bl	800efec <__retarget_lock_release_recursive>
 800e730:	bd10      	pop	{r4, pc}
 800e732:	46c0      	nop			; (mov r8, r8)
 800e734:	200016a8 	.word	0x200016a8

0800e738 <_free_r>:
 800e738:	b570      	push	{r4, r5, r6, lr}
 800e73a:	0005      	movs	r5, r0
 800e73c:	2900      	cmp	r1, #0
 800e73e:	d010      	beq.n	800e762 <_free_r+0x2a>
 800e740:	1f0c      	subs	r4, r1, #4
 800e742:	6823      	ldr	r3, [r4, #0]
 800e744:	2b00      	cmp	r3, #0
 800e746:	da00      	bge.n	800e74a <_free_r+0x12>
 800e748:	18e4      	adds	r4, r4, r3
 800e74a:	0028      	movs	r0, r5
 800e74c:	f7ff ffe4 	bl	800e718 <__malloc_lock>
 800e750:	4a1d      	ldr	r2, [pc, #116]	; (800e7c8 <_free_r+0x90>)
 800e752:	6813      	ldr	r3, [r2, #0]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d105      	bne.n	800e764 <_free_r+0x2c>
 800e758:	6063      	str	r3, [r4, #4]
 800e75a:	6014      	str	r4, [r2, #0]
 800e75c:	0028      	movs	r0, r5
 800e75e:	f7ff ffe3 	bl	800e728 <__malloc_unlock>
 800e762:	bd70      	pop	{r4, r5, r6, pc}
 800e764:	42a3      	cmp	r3, r4
 800e766:	d908      	bls.n	800e77a <_free_r+0x42>
 800e768:	6821      	ldr	r1, [r4, #0]
 800e76a:	1860      	adds	r0, r4, r1
 800e76c:	4283      	cmp	r3, r0
 800e76e:	d1f3      	bne.n	800e758 <_free_r+0x20>
 800e770:	6818      	ldr	r0, [r3, #0]
 800e772:	685b      	ldr	r3, [r3, #4]
 800e774:	1841      	adds	r1, r0, r1
 800e776:	6021      	str	r1, [r4, #0]
 800e778:	e7ee      	b.n	800e758 <_free_r+0x20>
 800e77a:	001a      	movs	r2, r3
 800e77c:	685b      	ldr	r3, [r3, #4]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d001      	beq.n	800e786 <_free_r+0x4e>
 800e782:	42a3      	cmp	r3, r4
 800e784:	d9f9      	bls.n	800e77a <_free_r+0x42>
 800e786:	6811      	ldr	r1, [r2, #0]
 800e788:	1850      	adds	r0, r2, r1
 800e78a:	42a0      	cmp	r0, r4
 800e78c:	d10b      	bne.n	800e7a6 <_free_r+0x6e>
 800e78e:	6820      	ldr	r0, [r4, #0]
 800e790:	1809      	adds	r1, r1, r0
 800e792:	1850      	adds	r0, r2, r1
 800e794:	6011      	str	r1, [r2, #0]
 800e796:	4283      	cmp	r3, r0
 800e798:	d1e0      	bne.n	800e75c <_free_r+0x24>
 800e79a:	6818      	ldr	r0, [r3, #0]
 800e79c:	685b      	ldr	r3, [r3, #4]
 800e79e:	1841      	adds	r1, r0, r1
 800e7a0:	6011      	str	r1, [r2, #0]
 800e7a2:	6053      	str	r3, [r2, #4]
 800e7a4:	e7da      	b.n	800e75c <_free_r+0x24>
 800e7a6:	42a0      	cmp	r0, r4
 800e7a8:	d902      	bls.n	800e7b0 <_free_r+0x78>
 800e7aa:	230c      	movs	r3, #12
 800e7ac:	602b      	str	r3, [r5, #0]
 800e7ae:	e7d5      	b.n	800e75c <_free_r+0x24>
 800e7b0:	6821      	ldr	r1, [r4, #0]
 800e7b2:	1860      	adds	r0, r4, r1
 800e7b4:	4283      	cmp	r3, r0
 800e7b6:	d103      	bne.n	800e7c0 <_free_r+0x88>
 800e7b8:	6818      	ldr	r0, [r3, #0]
 800e7ba:	685b      	ldr	r3, [r3, #4]
 800e7bc:	1841      	adds	r1, r0, r1
 800e7be:	6021      	str	r1, [r4, #0]
 800e7c0:	6063      	str	r3, [r4, #4]
 800e7c2:	6054      	str	r4, [r2, #4]
 800e7c4:	e7ca      	b.n	800e75c <_free_r+0x24>
 800e7c6:	46c0      	nop			; (mov r8, r8)
 800e7c8:	2000169c 	.word	0x2000169c

0800e7cc <_malloc_usable_size_r>:
 800e7cc:	1f0b      	subs	r3, r1, #4
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	1f18      	subs	r0, r3, #4
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	da01      	bge.n	800e7da <_malloc_usable_size_r+0xe>
 800e7d6:	580b      	ldr	r3, [r1, r0]
 800e7d8:	18c0      	adds	r0, r0, r3
 800e7da:	4770      	bx	lr

0800e7dc <__sfputc_r>:
 800e7dc:	6893      	ldr	r3, [r2, #8]
 800e7de:	b510      	push	{r4, lr}
 800e7e0:	3b01      	subs	r3, #1
 800e7e2:	6093      	str	r3, [r2, #8]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	da04      	bge.n	800e7f2 <__sfputc_r+0x16>
 800e7e8:	6994      	ldr	r4, [r2, #24]
 800e7ea:	42a3      	cmp	r3, r4
 800e7ec:	db07      	blt.n	800e7fe <__sfputc_r+0x22>
 800e7ee:	290a      	cmp	r1, #10
 800e7f0:	d005      	beq.n	800e7fe <__sfputc_r+0x22>
 800e7f2:	6813      	ldr	r3, [r2, #0]
 800e7f4:	1c58      	adds	r0, r3, #1
 800e7f6:	6010      	str	r0, [r2, #0]
 800e7f8:	7019      	strb	r1, [r3, #0]
 800e7fa:	0008      	movs	r0, r1
 800e7fc:	bd10      	pop	{r4, pc}
 800e7fe:	f000 f94f 	bl	800eaa0 <__swbuf_r>
 800e802:	0001      	movs	r1, r0
 800e804:	e7f9      	b.n	800e7fa <__sfputc_r+0x1e>

0800e806 <__sfputs_r>:
 800e806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e808:	0006      	movs	r6, r0
 800e80a:	000f      	movs	r7, r1
 800e80c:	0014      	movs	r4, r2
 800e80e:	18d5      	adds	r5, r2, r3
 800e810:	42ac      	cmp	r4, r5
 800e812:	d101      	bne.n	800e818 <__sfputs_r+0x12>
 800e814:	2000      	movs	r0, #0
 800e816:	e007      	b.n	800e828 <__sfputs_r+0x22>
 800e818:	7821      	ldrb	r1, [r4, #0]
 800e81a:	003a      	movs	r2, r7
 800e81c:	0030      	movs	r0, r6
 800e81e:	f7ff ffdd 	bl	800e7dc <__sfputc_r>
 800e822:	3401      	adds	r4, #1
 800e824:	1c43      	adds	r3, r0, #1
 800e826:	d1f3      	bne.n	800e810 <__sfputs_r+0xa>
 800e828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e82c <_vfiprintf_r>:
 800e82c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e82e:	b0a1      	sub	sp, #132	; 0x84
 800e830:	0006      	movs	r6, r0
 800e832:	000c      	movs	r4, r1
 800e834:	001f      	movs	r7, r3
 800e836:	9203      	str	r2, [sp, #12]
 800e838:	2800      	cmp	r0, #0
 800e83a:	d004      	beq.n	800e846 <_vfiprintf_r+0x1a>
 800e83c:	6983      	ldr	r3, [r0, #24]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d101      	bne.n	800e846 <_vfiprintf_r+0x1a>
 800e842:	f000 fb31 	bl	800eea8 <__sinit>
 800e846:	4b8e      	ldr	r3, [pc, #568]	; (800ea80 <_vfiprintf_r+0x254>)
 800e848:	429c      	cmp	r4, r3
 800e84a:	d11c      	bne.n	800e886 <_vfiprintf_r+0x5a>
 800e84c:	6874      	ldr	r4, [r6, #4]
 800e84e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e850:	07db      	lsls	r3, r3, #31
 800e852:	d405      	bmi.n	800e860 <_vfiprintf_r+0x34>
 800e854:	89a3      	ldrh	r3, [r4, #12]
 800e856:	059b      	lsls	r3, r3, #22
 800e858:	d402      	bmi.n	800e860 <_vfiprintf_r+0x34>
 800e85a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e85c:	f000 fbc5 	bl	800efea <__retarget_lock_acquire_recursive>
 800e860:	89a3      	ldrh	r3, [r4, #12]
 800e862:	071b      	lsls	r3, r3, #28
 800e864:	d502      	bpl.n	800e86c <_vfiprintf_r+0x40>
 800e866:	6923      	ldr	r3, [r4, #16]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d11d      	bne.n	800e8a8 <_vfiprintf_r+0x7c>
 800e86c:	0021      	movs	r1, r4
 800e86e:	0030      	movs	r0, r6
 800e870:	f000 f96c 	bl	800eb4c <__swsetup_r>
 800e874:	2800      	cmp	r0, #0
 800e876:	d017      	beq.n	800e8a8 <_vfiprintf_r+0x7c>
 800e878:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e87a:	07db      	lsls	r3, r3, #31
 800e87c:	d50d      	bpl.n	800e89a <_vfiprintf_r+0x6e>
 800e87e:	2001      	movs	r0, #1
 800e880:	4240      	negs	r0, r0
 800e882:	b021      	add	sp, #132	; 0x84
 800e884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e886:	4b7f      	ldr	r3, [pc, #508]	; (800ea84 <_vfiprintf_r+0x258>)
 800e888:	429c      	cmp	r4, r3
 800e88a:	d101      	bne.n	800e890 <_vfiprintf_r+0x64>
 800e88c:	68b4      	ldr	r4, [r6, #8]
 800e88e:	e7de      	b.n	800e84e <_vfiprintf_r+0x22>
 800e890:	4b7d      	ldr	r3, [pc, #500]	; (800ea88 <_vfiprintf_r+0x25c>)
 800e892:	429c      	cmp	r4, r3
 800e894:	d1db      	bne.n	800e84e <_vfiprintf_r+0x22>
 800e896:	68f4      	ldr	r4, [r6, #12]
 800e898:	e7d9      	b.n	800e84e <_vfiprintf_r+0x22>
 800e89a:	89a3      	ldrh	r3, [r4, #12]
 800e89c:	059b      	lsls	r3, r3, #22
 800e89e:	d4ee      	bmi.n	800e87e <_vfiprintf_r+0x52>
 800e8a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8a2:	f000 fba3 	bl	800efec <__retarget_lock_release_recursive>
 800e8a6:	e7ea      	b.n	800e87e <_vfiprintf_r+0x52>
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	ad08      	add	r5, sp, #32
 800e8ac:	616b      	str	r3, [r5, #20]
 800e8ae:	3320      	adds	r3, #32
 800e8b0:	766b      	strb	r3, [r5, #25]
 800e8b2:	3310      	adds	r3, #16
 800e8b4:	76ab      	strb	r3, [r5, #26]
 800e8b6:	9707      	str	r7, [sp, #28]
 800e8b8:	9f03      	ldr	r7, [sp, #12]
 800e8ba:	783b      	ldrb	r3, [r7, #0]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d001      	beq.n	800e8c4 <_vfiprintf_r+0x98>
 800e8c0:	2b25      	cmp	r3, #37	; 0x25
 800e8c2:	d14e      	bne.n	800e962 <_vfiprintf_r+0x136>
 800e8c4:	9b03      	ldr	r3, [sp, #12]
 800e8c6:	1afb      	subs	r3, r7, r3
 800e8c8:	9305      	str	r3, [sp, #20]
 800e8ca:	9b03      	ldr	r3, [sp, #12]
 800e8cc:	429f      	cmp	r7, r3
 800e8ce:	d00d      	beq.n	800e8ec <_vfiprintf_r+0xc0>
 800e8d0:	9b05      	ldr	r3, [sp, #20]
 800e8d2:	0021      	movs	r1, r4
 800e8d4:	0030      	movs	r0, r6
 800e8d6:	9a03      	ldr	r2, [sp, #12]
 800e8d8:	f7ff ff95 	bl	800e806 <__sfputs_r>
 800e8dc:	1c43      	adds	r3, r0, #1
 800e8de:	d100      	bne.n	800e8e2 <_vfiprintf_r+0xb6>
 800e8e0:	e0b5      	b.n	800ea4e <_vfiprintf_r+0x222>
 800e8e2:	696a      	ldr	r2, [r5, #20]
 800e8e4:	9b05      	ldr	r3, [sp, #20]
 800e8e6:	4694      	mov	ip, r2
 800e8e8:	4463      	add	r3, ip
 800e8ea:	616b      	str	r3, [r5, #20]
 800e8ec:	783b      	ldrb	r3, [r7, #0]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d100      	bne.n	800e8f4 <_vfiprintf_r+0xc8>
 800e8f2:	e0ac      	b.n	800ea4e <_vfiprintf_r+0x222>
 800e8f4:	2201      	movs	r2, #1
 800e8f6:	1c7b      	adds	r3, r7, #1
 800e8f8:	9303      	str	r3, [sp, #12]
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	4252      	negs	r2, r2
 800e8fe:	606a      	str	r2, [r5, #4]
 800e900:	a904      	add	r1, sp, #16
 800e902:	3254      	adds	r2, #84	; 0x54
 800e904:	1852      	adds	r2, r2, r1
 800e906:	602b      	str	r3, [r5, #0]
 800e908:	60eb      	str	r3, [r5, #12]
 800e90a:	60ab      	str	r3, [r5, #8]
 800e90c:	7013      	strb	r3, [r2, #0]
 800e90e:	65ab      	str	r3, [r5, #88]	; 0x58
 800e910:	9b03      	ldr	r3, [sp, #12]
 800e912:	2205      	movs	r2, #5
 800e914:	7819      	ldrb	r1, [r3, #0]
 800e916:	485d      	ldr	r0, [pc, #372]	; (800ea8c <_vfiprintf_r+0x260>)
 800e918:	f7ff fee0 	bl	800e6dc <memchr>
 800e91c:	9b03      	ldr	r3, [sp, #12]
 800e91e:	1c5f      	adds	r7, r3, #1
 800e920:	2800      	cmp	r0, #0
 800e922:	d120      	bne.n	800e966 <_vfiprintf_r+0x13a>
 800e924:	682a      	ldr	r2, [r5, #0]
 800e926:	06d3      	lsls	r3, r2, #27
 800e928:	d504      	bpl.n	800e934 <_vfiprintf_r+0x108>
 800e92a:	2353      	movs	r3, #83	; 0x53
 800e92c:	a904      	add	r1, sp, #16
 800e92e:	185b      	adds	r3, r3, r1
 800e930:	2120      	movs	r1, #32
 800e932:	7019      	strb	r1, [r3, #0]
 800e934:	0713      	lsls	r3, r2, #28
 800e936:	d504      	bpl.n	800e942 <_vfiprintf_r+0x116>
 800e938:	2353      	movs	r3, #83	; 0x53
 800e93a:	a904      	add	r1, sp, #16
 800e93c:	185b      	adds	r3, r3, r1
 800e93e:	212b      	movs	r1, #43	; 0x2b
 800e940:	7019      	strb	r1, [r3, #0]
 800e942:	9b03      	ldr	r3, [sp, #12]
 800e944:	781b      	ldrb	r3, [r3, #0]
 800e946:	2b2a      	cmp	r3, #42	; 0x2a
 800e948:	d016      	beq.n	800e978 <_vfiprintf_r+0x14c>
 800e94a:	2100      	movs	r1, #0
 800e94c:	68eb      	ldr	r3, [r5, #12]
 800e94e:	9f03      	ldr	r7, [sp, #12]
 800e950:	783a      	ldrb	r2, [r7, #0]
 800e952:	1c78      	adds	r0, r7, #1
 800e954:	3a30      	subs	r2, #48	; 0x30
 800e956:	4684      	mov	ip, r0
 800e958:	2a09      	cmp	r2, #9
 800e95a:	d94f      	bls.n	800e9fc <_vfiprintf_r+0x1d0>
 800e95c:	2900      	cmp	r1, #0
 800e95e:	d111      	bne.n	800e984 <_vfiprintf_r+0x158>
 800e960:	e017      	b.n	800e992 <_vfiprintf_r+0x166>
 800e962:	3701      	adds	r7, #1
 800e964:	e7a9      	b.n	800e8ba <_vfiprintf_r+0x8e>
 800e966:	4b49      	ldr	r3, [pc, #292]	; (800ea8c <_vfiprintf_r+0x260>)
 800e968:	682a      	ldr	r2, [r5, #0]
 800e96a:	1ac0      	subs	r0, r0, r3
 800e96c:	2301      	movs	r3, #1
 800e96e:	4083      	lsls	r3, r0
 800e970:	4313      	orrs	r3, r2
 800e972:	602b      	str	r3, [r5, #0]
 800e974:	9703      	str	r7, [sp, #12]
 800e976:	e7cb      	b.n	800e910 <_vfiprintf_r+0xe4>
 800e978:	9b07      	ldr	r3, [sp, #28]
 800e97a:	1d19      	adds	r1, r3, #4
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	9107      	str	r1, [sp, #28]
 800e980:	2b00      	cmp	r3, #0
 800e982:	db01      	blt.n	800e988 <_vfiprintf_r+0x15c>
 800e984:	930b      	str	r3, [sp, #44]	; 0x2c
 800e986:	e004      	b.n	800e992 <_vfiprintf_r+0x166>
 800e988:	425b      	negs	r3, r3
 800e98a:	60eb      	str	r3, [r5, #12]
 800e98c:	2302      	movs	r3, #2
 800e98e:	4313      	orrs	r3, r2
 800e990:	602b      	str	r3, [r5, #0]
 800e992:	783b      	ldrb	r3, [r7, #0]
 800e994:	2b2e      	cmp	r3, #46	; 0x2e
 800e996:	d10a      	bne.n	800e9ae <_vfiprintf_r+0x182>
 800e998:	787b      	ldrb	r3, [r7, #1]
 800e99a:	2b2a      	cmp	r3, #42	; 0x2a
 800e99c:	d137      	bne.n	800ea0e <_vfiprintf_r+0x1e2>
 800e99e:	9b07      	ldr	r3, [sp, #28]
 800e9a0:	3702      	adds	r7, #2
 800e9a2:	1d1a      	adds	r2, r3, #4
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	9207      	str	r2, [sp, #28]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	db2d      	blt.n	800ea08 <_vfiprintf_r+0x1dc>
 800e9ac:	9309      	str	r3, [sp, #36]	; 0x24
 800e9ae:	2203      	movs	r2, #3
 800e9b0:	7839      	ldrb	r1, [r7, #0]
 800e9b2:	4837      	ldr	r0, [pc, #220]	; (800ea90 <_vfiprintf_r+0x264>)
 800e9b4:	f7ff fe92 	bl	800e6dc <memchr>
 800e9b8:	2800      	cmp	r0, #0
 800e9ba:	d007      	beq.n	800e9cc <_vfiprintf_r+0x1a0>
 800e9bc:	4b34      	ldr	r3, [pc, #208]	; (800ea90 <_vfiprintf_r+0x264>)
 800e9be:	682a      	ldr	r2, [r5, #0]
 800e9c0:	1ac0      	subs	r0, r0, r3
 800e9c2:	2340      	movs	r3, #64	; 0x40
 800e9c4:	4083      	lsls	r3, r0
 800e9c6:	4313      	orrs	r3, r2
 800e9c8:	3701      	adds	r7, #1
 800e9ca:	602b      	str	r3, [r5, #0]
 800e9cc:	7839      	ldrb	r1, [r7, #0]
 800e9ce:	1c7b      	adds	r3, r7, #1
 800e9d0:	2206      	movs	r2, #6
 800e9d2:	4830      	ldr	r0, [pc, #192]	; (800ea94 <_vfiprintf_r+0x268>)
 800e9d4:	9303      	str	r3, [sp, #12]
 800e9d6:	7629      	strb	r1, [r5, #24]
 800e9d8:	f7ff fe80 	bl	800e6dc <memchr>
 800e9dc:	2800      	cmp	r0, #0
 800e9de:	d045      	beq.n	800ea6c <_vfiprintf_r+0x240>
 800e9e0:	4b2d      	ldr	r3, [pc, #180]	; (800ea98 <_vfiprintf_r+0x26c>)
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d127      	bne.n	800ea36 <_vfiprintf_r+0x20a>
 800e9e6:	2207      	movs	r2, #7
 800e9e8:	9b07      	ldr	r3, [sp, #28]
 800e9ea:	3307      	adds	r3, #7
 800e9ec:	4393      	bics	r3, r2
 800e9ee:	3308      	adds	r3, #8
 800e9f0:	9307      	str	r3, [sp, #28]
 800e9f2:	696b      	ldr	r3, [r5, #20]
 800e9f4:	9a04      	ldr	r2, [sp, #16]
 800e9f6:	189b      	adds	r3, r3, r2
 800e9f8:	616b      	str	r3, [r5, #20]
 800e9fa:	e75d      	b.n	800e8b8 <_vfiprintf_r+0x8c>
 800e9fc:	210a      	movs	r1, #10
 800e9fe:	434b      	muls	r3, r1
 800ea00:	4667      	mov	r7, ip
 800ea02:	189b      	adds	r3, r3, r2
 800ea04:	3909      	subs	r1, #9
 800ea06:	e7a3      	b.n	800e950 <_vfiprintf_r+0x124>
 800ea08:	2301      	movs	r3, #1
 800ea0a:	425b      	negs	r3, r3
 800ea0c:	e7ce      	b.n	800e9ac <_vfiprintf_r+0x180>
 800ea0e:	2300      	movs	r3, #0
 800ea10:	001a      	movs	r2, r3
 800ea12:	3701      	adds	r7, #1
 800ea14:	606b      	str	r3, [r5, #4]
 800ea16:	7839      	ldrb	r1, [r7, #0]
 800ea18:	1c78      	adds	r0, r7, #1
 800ea1a:	3930      	subs	r1, #48	; 0x30
 800ea1c:	4684      	mov	ip, r0
 800ea1e:	2909      	cmp	r1, #9
 800ea20:	d903      	bls.n	800ea2a <_vfiprintf_r+0x1fe>
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d0c3      	beq.n	800e9ae <_vfiprintf_r+0x182>
 800ea26:	9209      	str	r2, [sp, #36]	; 0x24
 800ea28:	e7c1      	b.n	800e9ae <_vfiprintf_r+0x182>
 800ea2a:	230a      	movs	r3, #10
 800ea2c:	435a      	muls	r2, r3
 800ea2e:	4667      	mov	r7, ip
 800ea30:	1852      	adds	r2, r2, r1
 800ea32:	3b09      	subs	r3, #9
 800ea34:	e7ef      	b.n	800ea16 <_vfiprintf_r+0x1ea>
 800ea36:	ab07      	add	r3, sp, #28
 800ea38:	9300      	str	r3, [sp, #0]
 800ea3a:	0022      	movs	r2, r4
 800ea3c:	0029      	movs	r1, r5
 800ea3e:	0030      	movs	r0, r6
 800ea40:	4b16      	ldr	r3, [pc, #88]	; (800ea9c <_vfiprintf_r+0x270>)
 800ea42:	e000      	b.n	800ea46 <_vfiprintf_r+0x21a>
 800ea44:	bf00      	nop
 800ea46:	9004      	str	r0, [sp, #16]
 800ea48:	9b04      	ldr	r3, [sp, #16]
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	d1d1      	bne.n	800e9f2 <_vfiprintf_r+0x1c6>
 800ea4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ea50:	07db      	lsls	r3, r3, #31
 800ea52:	d405      	bmi.n	800ea60 <_vfiprintf_r+0x234>
 800ea54:	89a3      	ldrh	r3, [r4, #12]
 800ea56:	059b      	lsls	r3, r3, #22
 800ea58:	d402      	bmi.n	800ea60 <_vfiprintf_r+0x234>
 800ea5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea5c:	f000 fac6 	bl	800efec <__retarget_lock_release_recursive>
 800ea60:	89a3      	ldrh	r3, [r4, #12]
 800ea62:	065b      	lsls	r3, r3, #25
 800ea64:	d500      	bpl.n	800ea68 <_vfiprintf_r+0x23c>
 800ea66:	e70a      	b.n	800e87e <_vfiprintf_r+0x52>
 800ea68:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ea6a:	e70a      	b.n	800e882 <_vfiprintf_r+0x56>
 800ea6c:	ab07      	add	r3, sp, #28
 800ea6e:	9300      	str	r3, [sp, #0]
 800ea70:	0022      	movs	r2, r4
 800ea72:	0029      	movs	r1, r5
 800ea74:	0030      	movs	r0, r6
 800ea76:	4b09      	ldr	r3, [pc, #36]	; (800ea9c <_vfiprintf_r+0x270>)
 800ea78:	f7fe fe2e 	bl	800d6d8 <_printf_i>
 800ea7c:	e7e3      	b.n	800ea46 <_vfiprintf_r+0x21a>
 800ea7e:	46c0      	nop			; (mov r8, r8)
 800ea80:	08010d78 	.word	0x08010d78
 800ea84:	08010d98 	.word	0x08010d98
 800ea88:	08010d58 	.word	0x08010d58
 800ea8c:	08010c7c 	.word	0x08010c7c
 800ea90:	08010c82 	.word	0x08010c82
 800ea94:	08010c86 	.word	0x08010c86
 800ea98:	00000000 	.word	0x00000000
 800ea9c:	0800e807 	.word	0x0800e807

0800eaa0 <__swbuf_r>:
 800eaa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaa2:	0005      	movs	r5, r0
 800eaa4:	000e      	movs	r6, r1
 800eaa6:	0014      	movs	r4, r2
 800eaa8:	2800      	cmp	r0, #0
 800eaaa:	d004      	beq.n	800eab6 <__swbuf_r+0x16>
 800eaac:	6983      	ldr	r3, [r0, #24]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d101      	bne.n	800eab6 <__swbuf_r+0x16>
 800eab2:	f000 f9f9 	bl	800eea8 <__sinit>
 800eab6:	4b22      	ldr	r3, [pc, #136]	; (800eb40 <__swbuf_r+0xa0>)
 800eab8:	429c      	cmp	r4, r3
 800eaba:	d12e      	bne.n	800eb1a <__swbuf_r+0x7a>
 800eabc:	686c      	ldr	r4, [r5, #4]
 800eabe:	69a3      	ldr	r3, [r4, #24]
 800eac0:	60a3      	str	r3, [r4, #8]
 800eac2:	89a3      	ldrh	r3, [r4, #12]
 800eac4:	071b      	lsls	r3, r3, #28
 800eac6:	d532      	bpl.n	800eb2e <__swbuf_r+0x8e>
 800eac8:	6923      	ldr	r3, [r4, #16]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d02f      	beq.n	800eb2e <__swbuf_r+0x8e>
 800eace:	6823      	ldr	r3, [r4, #0]
 800ead0:	6922      	ldr	r2, [r4, #16]
 800ead2:	b2f7      	uxtb	r7, r6
 800ead4:	1a98      	subs	r0, r3, r2
 800ead6:	6963      	ldr	r3, [r4, #20]
 800ead8:	b2f6      	uxtb	r6, r6
 800eada:	4283      	cmp	r3, r0
 800eadc:	dc05      	bgt.n	800eaea <__swbuf_r+0x4a>
 800eade:	0021      	movs	r1, r4
 800eae0:	0028      	movs	r0, r5
 800eae2:	f000 f93f 	bl	800ed64 <_fflush_r>
 800eae6:	2800      	cmp	r0, #0
 800eae8:	d127      	bne.n	800eb3a <__swbuf_r+0x9a>
 800eaea:	68a3      	ldr	r3, [r4, #8]
 800eaec:	3001      	adds	r0, #1
 800eaee:	3b01      	subs	r3, #1
 800eaf0:	60a3      	str	r3, [r4, #8]
 800eaf2:	6823      	ldr	r3, [r4, #0]
 800eaf4:	1c5a      	adds	r2, r3, #1
 800eaf6:	6022      	str	r2, [r4, #0]
 800eaf8:	701f      	strb	r7, [r3, #0]
 800eafa:	6963      	ldr	r3, [r4, #20]
 800eafc:	4283      	cmp	r3, r0
 800eafe:	d004      	beq.n	800eb0a <__swbuf_r+0x6a>
 800eb00:	89a3      	ldrh	r3, [r4, #12]
 800eb02:	07db      	lsls	r3, r3, #31
 800eb04:	d507      	bpl.n	800eb16 <__swbuf_r+0x76>
 800eb06:	2e0a      	cmp	r6, #10
 800eb08:	d105      	bne.n	800eb16 <__swbuf_r+0x76>
 800eb0a:	0021      	movs	r1, r4
 800eb0c:	0028      	movs	r0, r5
 800eb0e:	f000 f929 	bl	800ed64 <_fflush_r>
 800eb12:	2800      	cmp	r0, #0
 800eb14:	d111      	bne.n	800eb3a <__swbuf_r+0x9a>
 800eb16:	0030      	movs	r0, r6
 800eb18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb1a:	4b0a      	ldr	r3, [pc, #40]	; (800eb44 <__swbuf_r+0xa4>)
 800eb1c:	429c      	cmp	r4, r3
 800eb1e:	d101      	bne.n	800eb24 <__swbuf_r+0x84>
 800eb20:	68ac      	ldr	r4, [r5, #8]
 800eb22:	e7cc      	b.n	800eabe <__swbuf_r+0x1e>
 800eb24:	4b08      	ldr	r3, [pc, #32]	; (800eb48 <__swbuf_r+0xa8>)
 800eb26:	429c      	cmp	r4, r3
 800eb28:	d1c9      	bne.n	800eabe <__swbuf_r+0x1e>
 800eb2a:	68ec      	ldr	r4, [r5, #12]
 800eb2c:	e7c7      	b.n	800eabe <__swbuf_r+0x1e>
 800eb2e:	0021      	movs	r1, r4
 800eb30:	0028      	movs	r0, r5
 800eb32:	f000 f80b 	bl	800eb4c <__swsetup_r>
 800eb36:	2800      	cmp	r0, #0
 800eb38:	d0c9      	beq.n	800eace <__swbuf_r+0x2e>
 800eb3a:	2601      	movs	r6, #1
 800eb3c:	4276      	negs	r6, r6
 800eb3e:	e7ea      	b.n	800eb16 <__swbuf_r+0x76>
 800eb40:	08010d78 	.word	0x08010d78
 800eb44:	08010d98 	.word	0x08010d98
 800eb48:	08010d58 	.word	0x08010d58

0800eb4c <__swsetup_r>:
 800eb4c:	4b37      	ldr	r3, [pc, #220]	; (800ec2c <__swsetup_r+0xe0>)
 800eb4e:	b570      	push	{r4, r5, r6, lr}
 800eb50:	681d      	ldr	r5, [r3, #0]
 800eb52:	0006      	movs	r6, r0
 800eb54:	000c      	movs	r4, r1
 800eb56:	2d00      	cmp	r5, #0
 800eb58:	d005      	beq.n	800eb66 <__swsetup_r+0x1a>
 800eb5a:	69ab      	ldr	r3, [r5, #24]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d102      	bne.n	800eb66 <__swsetup_r+0x1a>
 800eb60:	0028      	movs	r0, r5
 800eb62:	f000 f9a1 	bl	800eea8 <__sinit>
 800eb66:	4b32      	ldr	r3, [pc, #200]	; (800ec30 <__swsetup_r+0xe4>)
 800eb68:	429c      	cmp	r4, r3
 800eb6a:	d10f      	bne.n	800eb8c <__swsetup_r+0x40>
 800eb6c:	686c      	ldr	r4, [r5, #4]
 800eb6e:	230c      	movs	r3, #12
 800eb70:	5ee2      	ldrsh	r2, [r4, r3]
 800eb72:	b293      	uxth	r3, r2
 800eb74:	0711      	lsls	r1, r2, #28
 800eb76:	d42d      	bmi.n	800ebd4 <__swsetup_r+0x88>
 800eb78:	06d9      	lsls	r1, r3, #27
 800eb7a:	d411      	bmi.n	800eba0 <__swsetup_r+0x54>
 800eb7c:	2309      	movs	r3, #9
 800eb7e:	2001      	movs	r0, #1
 800eb80:	6033      	str	r3, [r6, #0]
 800eb82:	3337      	adds	r3, #55	; 0x37
 800eb84:	4313      	orrs	r3, r2
 800eb86:	81a3      	strh	r3, [r4, #12]
 800eb88:	4240      	negs	r0, r0
 800eb8a:	bd70      	pop	{r4, r5, r6, pc}
 800eb8c:	4b29      	ldr	r3, [pc, #164]	; (800ec34 <__swsetup_r+0xe8>)
 800eb8e:	429c      	cmp	r4, r3
 800eb90:	d101      	bne.n	800eb96 <__swsetup_r+0x4a>
 800eb92:	68ac      	ldr	r4, [r5, #8]
 800eb94:	e7eb      	b.n	800eb6e <__swsetup_r+0x22>
 800eb96:	4b28      	ldr	r3, [pc, #160]	; (800ec38 <__swsetup_r+0xec>)
 800eb98:	429c      	cmp	r4, r3
 800eb9a:	d1e8      	bne.n	800eb6e <__swsetup_r+0x22>
 800eb9c:	68ec      	ldr	r4, [r5, #12]
 800eb9e:	e7e6      	b.n	800eb6e <__swsetup_r+0x22>
 800eba0:	075b      	lsls	r3, r3, #29
 800eba2:	d513      	bpl.n	800ebcc <__swsetup_r+0x80>
 800eba4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eba6:	2900      	cmp	r1, #0
 800eba8:	d008      	beq.n	800ebbc <__swsetup_r+0x70>
 800ebaa:	0023      	movs	r3, r4
 800ebac:	3344      	adds	r3, #68	; 0x44
 800ebae:	4299      	cmp	r1, r3
 800ebb0:	d002      	beq.n	800ebb8 <__swsetup_r+0x6c>
 800ebb2:	0030      	movs	r0, r6
 800ebb4:	f7ff fdc0 	bl	800e738 <_free_r>
 800ebb8:	2300      	movs	r3, #0
 800ebba:	6363      	str	r3, [r4, #52]	; 0x34
 800ebbc:	2224      	movs	r2, #36	; 0x24
 800ebbe:	89a3      	ldrh	r3, [r4, #12]
 800ebc0:	4393      	bics	r3, r2
 800ebc2:	81a3      	strh	r3, [r4, #12]
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	6063      	str	r3, [r4, #4]
 800ebc8:	6923      	ldr	r3, [r4, #16]
 800ebca:	6023      	str	r3, [r4, #0]
 800ebcc:	2308      	movs	r3, #8
 800ebce:	89a2      	ldrh	r2, [r4, #12]
 800ebd0:	4313      	orrs	r3, r2
 800ebd2:	81a3      	strh	r3, [r4, #12]
 800ebd4:	6923      	ldr	r3, [r4, #16]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d10b      	bne.n	800ebf2 <__swsetup_r+0xa6>
 800ebda:	21a0      	movs	r1, #160	; 0xa0
 800ebdc:	2280      	movs	r2, #128	; 0x80
 800ebde:	89a3      	ldrh	r3, [r4, #12]
 800ebe0:	0089      	lsls	r1, r1, #2
 800ebe2:	0092      	lsls	r2, r2, #2
 800ebe4:	400b      	ands	r3, r1
 800ebe6:	4293      	cmp	r3, r2
 800ebe8:	d003      	beq.n	800ebf2 <__swsetup_r+0xa6>
 800ebea:	0021      	movs	r1, r4
 800ebec:	0030      	movs	r0, r6
 800ebee:	f000 fa27 	bl	800f040 <__smakebuf_r>
 800ebf2:	220c      	movs	r2, #12
 800ebf4:	5ea3      	ldrsh	r3, [r4, r2]
 800ebf6:	2001      	movs	r0, #1
 800ebf8:	001a      	movs	r2, r3
 800ebfa:	b299      	uxth	r1, r3
 800ebfc:	4002      	ands	r2, r0
 800ebfe:	4203      	tst	r3, r0
 800ec00:	d00f      	beq.n	800ec22 <__swsetup_r+0xd6>
 800ec02:	2200      	movs	r2, #0
 800ec04:	60a2      	str	r2, [r4, #8]
 800ec06:	6962      	ldr	r2, [r4, #20]
 800ec08:	4252      	negs	r2, r2
 800ec0a:	61a2      	str	r2, [r4, #24]
 800ec0c:	2000      	movs	r0, #0
 800ec0e:	6922      	ldr	r2, [r4, #16]
 800ec10:	4282      	cmp	r2, r0
 800ec12:	d1ba      	bne.n	800eb8a <__swsetup_r+0x3e>
 800ec14:	060a      	lsls	r2, r1, #24
 800ec16:	d5b8      	bpl.n	800eb8a <__swsetup_r+0x3e>
 800ec18:	2240      	movs	r2, #64	; 0x40
 800ec1a:	4313      	orrs	r3, r2
 800ec1c:	81a3      	strh	r3, [r4, #12]
 800ec1e:	3801      	subs	r0, #1
 800ec20:	e7b3      	b.n	800eb8a <__swsetup_r+0x3e>
 800ec22:	0788      	lsls	r0, r1, #30
 800ec24:	d400      	bmi.n	800ec28 <__swsetup_r+0xdc>
 800ec26:	6962      	ldr	r2, [r4, #20]
 800ec28:	60a2      	str	r2, [r4, #8]
 800ec2a:	e7ef      	b.n	800ec0c <__swsetup_r+0xc0>
 800ec2c:	2000001c 	.word	0x2000001c
 800ec30:	08010d78 	.word	0x08010d78
 800ec34:	08010d98 	.word	0x08010d98
 800ec38:	08010d58 	.word	0x08010d58

0800ec3c <abort>:
 800ec3c:	2006      	movs	r0, #6
 800ec3e:	b510      	push	{r4, lr}
 800ec40:	f000 fa6c 	bl	800f11c <raise>
 800ec44:	2001      	movs	r0, #1
 800ec46:	f7f7 ffe3 	bl	8006c10 <_exit>
	...

0800ec4c <__sflush_r>:
 800ec4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec4e:	898b      	ldrh	r3, [r1, #12]
 800ec50:	0005      	movs	r5, r0
 800ec52:	000c      	movs	r4, r1
 800ec54:	071a      	lsls	r2, r3, #28
 800ec56:	d45f      	bmi.n	800ed18 <__sflush_r+0xcc>
 800ec58:	684a      	ldr	r2, [r1, #4]
 800ec5a:	2a00      	cmp	r2, #0
 800ec5c:	dc04      	bgt.n	800ec68 <__sflush_r+0x1c>
 800ec5e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800ec60:	2a00      	cmp	r2, #0
 800ec62:	dc01      	bgt.n	800ec68 <__sflush_r+0x1c>
 800ec64:	2000      	movs	r0, #0
 800ec66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ec68:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ec6a:	2f00      	cmp	r7, #0
 800ec6c:	d0fa      	beq.n	800ec64 <__sflush_r+0x18>
 800ec6e:	2200      	movs	r2, #0
 800ec70:	2180      	movs	r1, #128	; 0x80
 800ec72:	682e      	ldr	r6, [r5, #0]
 800ec74:	602a      	str	r2, [r5, #0]
 800ec76:	001a      	movs	r2, r3
 800ec78:	0149      	lsls	r1, r1, #5
 800ec7a:	400a      	ands	r2, r1
 800ec7c:	420b      	tst	r3, r1
 800ec7e:	d034      	beq.n	800ecea <__sflush_r+0x9e>
 800ec80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ec82:	89a3      	ldrh	r3, [r4, #12]
 800ec84:	075b      	lsls	r3, r3, #29
 800ec86:	d506      	bpl.n	800ec96 <__sflush_r+0x4a>
 800ec88:	6863      	ldr	r3, [r4, #4]
 800ec8a:	1ac0      	subs	r0, r0, r3
 800ec8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d001      	beq.n	800ec96 <__sflush_r+0x4a>
 800ec92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ec94:	1ac0      	subs	r0, r0, r3
 800ec96:	0002      	movs	r2, r0
 800ec98:	6a21      	ldr	r1, [r4, #32]
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	0028      	movs	r0, r5
 800ec9e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800eca0:	47b8      	blx	r7
 800eca2:	89a1      	ldrh	r1, [r4, #12]
 800eca4:	1c43      	adds	r3, r0, #1
 800eca6:	d106      	bne.n	800ecb6 <__sflush_r+0x6a>
 800eca8:	682b      	ldr	r3, [r5, #0]
 800ecaa:	2b1d      	cmp	r3, #29
 800ecac:	d831      	bhi.n	800ed12 <__sflush_r+0xc6>
 800ecae:	4a2c      	ldr	r2, [pc, #176]	; (800ed60 <__sflush_r+0x114>)
 800ecb0:	40da      	lsrs	r2, r3
 800ecb2:	07d3      	lsls	r3, r2, #31
 800ecb4:	d52d      	bpl.n	800ed12 <__sflush_r+0xc6>
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	6063      	str	r3, [r4, #4]
 800ecba:	6923      	ldr	r3, [r4, #16]
 800ecbc:	6023      	str	r3, [r4, #0]
 800ecbe:	04cb      	lsls	r3, r1, #19
 800ecc0:	d505      	bpl.n	800ecce <__sflush_r+0x82>
 800ecc2:	1c43      	adds	r3, r0, #1
 800ecc4:	d102      	bne.n	800eccc <__sflush_r+0x80>
 800ecc6:	682b      	ldr	r3, [r5, #0]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d100      	bne.n	800ecce <__sflush_r+0x82>
 800eccc:	6560      	str	r0, [r4, #84]	; 0x54
 800ecce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ecd0:	602e      	str	r6, [r5, #0]
 800ecd2:	2900      	cmp	r1, #0
 800ecd4:	d0c6      	beq.n	800ec64 <__sflush_r+0x18>
 800ecd6:	0023      	movs	r3, r4
 800ecd8:	3344      	adds	r3, #68	; 0x44
 800ecda:	4299      	cmp	r1, r3
 800ecdc:	d002      	beq.n	800ece4 <__sflush_r+0x98>
 800ecde:	0028      	movs	r0, r5
 800ece0:	f7ff fd2a 	bl	800e738 <_free_r>
 800ece4:	2000      	movs	r0, #0
 800ece6:	6360      	str	r0, [r4, #52]	; 0x34
 800ece8:	e7bd      	b.n	800ec66 <__sflush_r+0x1a>
 800ecea:	2301      	movs	r3, #1
 800ecec:	0028      	movs	r0, r5
 800ecee:	6a21      	ldr	r1, [r4, #32]
 800ecf0:	47b8      	blx	r7
 800ecf2:	1c43      	adds	r3, r0, #1
 800ecf4:	d1c5      	bne.n	800ec82 <__sflush_r+0x36>
 800ecf6:	682b      	ldr	r3, [r5, #0]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d0c2      	beq.n	800ec82 <__sflush_r+0x36>
 800ecfc:	2b1d      	cmp	r3, #29
 800ecfe:	d001      	beq.n	800ed04 <__sflush_r+0xb8>
 800ed00:	2b16      	cmp	r3, #22
 800ed02:	d101      	bne.n	800ed08 <__sflush_r+0xbc>
 800ed04:	602e      	str	r6, [r5, #0]
 800ed06:	e7ad      	b.n	800ec64 <__sflush_r+0x18>
 800ed08:	2340      	movs	r3, #64	; 0x40
 800ed0a:	89a2      	ldrh	r2, [r4, #12]
 800ed0c:	4313      	orrs	r3, r2
 800ed0e:	81a3      	strh	r3, [r4, #12]
 800ed10:	e7a9      	b.n	800ec66 <__sflush_r+0x1a>
 800ed12:	2340      	movs	r3, #64	; 0x40
 800ed14:	430b      	orrs	r3, r1
 800ed16:	e7fa      	b.n	800ed0e <__sflush_r+0xc2>
 800ed18:	690f      	ldr	r7, [r1, #16]
 800ed1a:	2f00      	cmp	r7, #0
 800ed1c:	d0a2      	beq.n	800ec64 <__sflush_r+0x18>
 800ed1e:	680a      	ldr	r2, [r1, #0]
 800ed20:	600f      	str	r7, [r1, #0]
 800ed22:	1bd2      	subs	r2, r2, r7
 800ed24:	9201      	str	r2, [sp, #4]
 800ed26:	2200      	movs	r2, #0
 800ed28:	079b      	lsls	r3, r3, #30
 800ed2a:	d100      	bne.n	800ed2e <__sflush_r+0xe2>
 800ed2c:	694a      	ldr	r2, [r1, #20]
 800ed2e:	60a2      	str	r2, [r4, #8]
 800ed30:	9b01      	ldr	r3, [sp, #4]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	dc00      	bgt.n	800ed38 <__sflush_r+0xec>
 800ed36:	e795      	b.n	800ec64 <__sflush_r+0x18>
 800ed38:	003a      	movs	r2, r7
 800ed3a:	0028      	movs	r0, r5
 800ed3c:	9b01      	ldr	r3, [sp, #4]
 800ed3e:	6a21      	ldr	r1, [r4, #32]
 800ed40:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ed42:	47b0      	blx	r6
 800ed44:	2800      	cmp	r0, #0
 800ed46:	dc06      	bgt.n	800ed56 <__sflush_r+0x10a>
 800ed48:	2340      	movs	r3, #64	; 0x40
 800ed4a:	2001      	movs	r0, #1
 800ed4c:	89a2      	ldrh	r2, [r4, #12]
 800ed4e:	4240      	negs	r0, r0
 800ed50:	4313      	orrs	r3, r2
 800ed52:	81a3      	strh	r3, [r4, #12]
 800ed54:	e787      	b.n	800ec66 <__sflush_r+0x1a>
 800ed56:	9b01      	ldr	r3, [sp, #4]
 800ed58:	183f      	adds	r7, r7, r0
 800ed5a:	1a1b      	subs	r3, r3, r0
 800ed5c:	9301      	str	r3, [sp, #4]
 800ed5e:	e7e7      	b.n	800ed30 <__sflush_r+0xe4>
 800ed60:	20400001 	.word	0x20400001

0800ed64 <_fflush_r>:
 800ed64:	690b      	ldr	r3, [r1, #16]
 800ed66:	b570      	push	{r4, r5, r6, lr}
 800ed68:	0005      	movs	r5, r0
 800ed6a:	000c      	movs	r4, r1
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d102      	bne.n	800ed76 <_fflush_r+0x12>
 800ed70:	2500      	movs	r5, #0
 800ed72:	0028      	movs	r0, r5
 800ed74:	bd70      	pop	{r4, r5, r6, pc}
 800ed76:	2800      	cmp	r0, #0
 800ed78:	d004      	beq.n	800ed84 <_fflush_r+0x20>
 800ed7a:	6983      	ldr	r3, [r0, #24]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d101      	bne.n	800ed84 <_fflush_r+0x20>
 800ed80:	f000 f892 	bl	800eea8 <__sinit>
 800ed84:	4b14      	ldr	r3, [pc, #80]	; (800edd8 <_fflush_r+0x74>)
 800ed86:	429c      	cmp	r4, r3
 800ed88:	d11b      	bne.n	800edc2 <_fflush_r+0x5e>
 800ed8a:	686c      	ldr	r4, [r5, #4]
 800ed8c:	220c      	movs	r2, #12
 800ed8e:	5ea3      	ldrsh	r3, [r4, r2]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d0ed      	beq.n	800ed70 <_fflush_r+0xc>
 800ed94:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ed96:	07d2      	lsls	r2, r2, #31
 800ed98:	d404      	bmi.n	800eda4 <_fflush_r+0x40>
 800ed9a:	059b      	lsls	r3, r3, #22
 800ed9c:	d402      	bmi.n	800eda4 <_fflush_r+0x40>
 800ed9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eda0:	f000 f923 	bl	800efea <__retarget_lock_acquire_recursive>
 800eda4:	0028      	movs	r0, r5
 800eda6:	0021      	movs	r1, r4
 800eda8:	f7ff ff50 	bl	800ec4c <__sflush_r>
 800edac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800edae:	0005      	movs	r5, r0
 800edb0:	07db      	lsls	r3, r3, #31
 800edb2:	d4de      	bmi.n	800ed72 <_fflush_r+0xe>
 800edb4:	89a3      	ldrh	r3, [r4, #12]
 800edb6:	059b      	lsls	r3, r3, #22
 800edb8:	d4db      	bmi.n	800ed72 <_fflush_r+0xe>
 800edba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800edbc:	f000 f916 	bl	800efec <__retarget_lock_release_recursive>
 800edc0:	e7d7      	b.n	800ed72 <_fflush_r+0xe>
 800edc2:	4b06      	ldr	r3, [pc, #24]	; (800eddc <_fflush_r+0x78>)
 800edc4:	429c      	cmp	r4, r3
 800edc6:	d101      	bne.n	800edcc <_fflush_r+0x68>
 800edc8:	68ac      	ldr	r4, [r5, #8]
 800edca:	e7df      	b.n	800ed8c <_fflush_r+0x28>
 800edcc:	4b04      	ldr	r3, [pc, #16]	; (800ede0 <_fflush_r+0x7c>)
 800edce:	429c      	cmp	r4, r3
 800edd0:	d1dc      	bne.n	800ed8c <_fflush_r+0x28>
 800edd2:	68ec      	ldr	r4, [r5, #12]
 800edd4:	e7da      	b.n	800ed8c <_fflush_r+0x28>
 800edd6:	46c0      	nop			; (mov r8, r8)
 800edd8:	08010d78 	.word	0x08010d78
 800eddc:	08010d98 	.word	0x08010d98
 800ede0:	08010d58 	.word	0x08010d58

0800ede4 <std>:
 800ede4:	2300      	movs	r3, #0
 800ede6:	b510      	push	{r4, lr}
 800ede8:	0004      	movs	r4, r0
 800edea:	6003      	str	r3, [r0, #0]
 800edec:	6043      	str	r3, [r0, #4]
 800edee:	6083      	str	r3, [r0, #8]
 800edf0:	8181      	strh	r1, [r0, #12]
 800edf2:	6643      	str	r3, [r0, #100]	; 0x64
 800edf4:	0019      	movs	r1, r3
 800edf6:	81c2      	strh	r2, [r0, #14]
 800edf8:	6103      	str	r3, [r0, #16]
 800edfa:	6143      	str	r3, [r0, #20]
 800edfc:	6183      	str	r3, [r0, #24]
 800edfe:	2208      	movs	r2, #8
 800ee00:	305c      	adds	r0, #92	; 0x5c
 800ee02:	f7fd fbb0 	bl	800c566 <memset>
 800ee06:	4b05      	ldr	r3, [pc, #20]	; (800ee1c <std+0x38>)
 800ee08:	6224      	str	r4, [r4, #32]
 800ee0a:	6263      	str	r3, [r4, #36]	; 0x24
 800ee0c:	4b04      	ldr	r3, [pc, #16]	; (800ee20 <std+0x3c>)
 800ee0e:	62a3      	str	r3, [r4, #40]	; 0x28
 800ee10:	4b04      	ldr	r3, [pc, #16]	; (800ee24 <std+0x40>)
 800ee12:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ee14:	4b04      	ldr	r3, [pc, #16]	; (800ee28 <std+0x44>)
 800ee16:	6323      	str	r3, [r4, #48]	; 0x30
 800ee18:	bd10      	pop	{r4, pc}
 800ee1a:	46c0      	nop			; (mov r8, r8)
 800ee1c:	0800f15d 	.word	0x0800f15d
 800ee20:	0800f185 	.word	0x0800f185
 800ee24:	0800f1bd 	.word	0x0800f1bd
 800ee28:	0800f1e9 	.word	0x0800f1e9

0800ee2c <_cleanup_r>:
 800ee2c:	b510      	push	{r4, lr}
 800ee2e:	4902      	ldr	r1, [pc, #8]	; (800ee38 <_cleanup_r+0xc>)
 800ee30:	f000 f8ba 	bl	800efa8 <_fwalk_reent>
 800ee34:	bd10      	pop	{r4, pc}
 800ee36:	46c0      	nop			; (mov r8, r8)
 800ee38:	0800ed65 	.word	0x0800ed65

0800ee3c <__sfmoreglue>:
 800ee3c:	b570      	push	{r4, r5, r6, lr}
 800ee3e:	2568      	movs	r5, #104	; 0x68
 800ee40:	1e4a      	subs	r2, r1, #1
 800ee42:	4355      	muls	r5, r2
 800ee44:	000e      	movs	r6, r1
 800ee46:	0029      	movs	r1, r5
 800ee48:	3174      	adds	r1, #116	; 0x74
 800ee4a:	f7fe f9cd 	bl	800d1e8 <_malloc_r>
 800ee4e:	1e04      	subs	r4, r0, #0
 800ee50:	d008      	beq.n	800ee64 <__sfmoreglue+0x28>
 800ee52:	2100      	movs	r1, #0
 800ee54:	002a      	movs	r2, r5
 800ee56:	6001      	str	r1, [r0, #0]
 800ee58:	6046      	str	r6, [r0, #4]
 800ee5a:	300c      	adds	r0, #12
 800ee5c:	60a0      	str	r0, [r4, #8]
 800ee5e:	3268      	adds	r2, #104	; 0x68
 800ee60:	f7fd fb81 	bl	800c566 <memset>
 800ee64:	0020      	movs	r0, r4
 800ee66:	bd70      	pop	{r4, r5, r6, pc}

0800ee68 <__sfp_lock_acquire>:
 800ee68:	b510      	push	{r4, lr}
 800ee6a:	4802      	ldr	r0, [pc, #8]	; (800ee74 <__sfp_lock_acquire+0xc>)
 800ee6c:	f000 f8bd 	bl	800efea <__retarget_lock_acquire_recursive>
 800ee70:	bd10      	pop	{r4, pc}
 800ee72:	46c0      	nop			; (mov r8, r8)
 800ee74:	200016a9 	.word	0x200016a9

0800ee78 <__sfp_lock_release>:
 800ee78:	b510      	push	{r4, lr}
 800ee7a:	4802      	ldr	r0, [pc, #8]	; (800ee84 <__sfp_lock_release+0xc>)
 800ee7c:	f000 f8b6 	bl	800efec <__retarget_lock_release_recursive>
 800ee80:	bd10      	pop	{r4, pc}
 800ee82:	46c0      	nop			; (mov r8, r8)
 800ee84:	200016a9 	.word	0x200016a9

0800ee88 <__sinit_lock_acquire>:
 800ee88:	b510      	push	{r4, lr}
 800ee8a:	4802      	ldr	r0, [pc, #8]	; (800ee94 <__sinit_lock_acquire+0xc>)
 800ee8c:	f000 f8ad 	bl	800efea <__retarget_lock_acquire_recursive>
 800ee90:	bd10      	pop	{r4, pc}
 800ee92:	46c0      	nop			; (mov r8, r8)
 800ee94:	200016aa 	.word	0x200016aa

0800ee98 <__sinit_lock_release>:
 800ee98:	b510      	push	{r4, lr}
 800ee9a:	4802      	ldr	r0, [pc, #8]	; (800eea4 <__sinit_lock_release+0xc>)
 800ee9c:	f000 f8a6 	bl	800efec <__retarget_lock_release_recursive>
 800eea0:	bd10      	pop	{r4, pc}
 800eea2:	46c0      	nop			; (mov r8, r8)
 800eea4:	200016aa 	.word	0x200016aa

0800eea8 <__sinit>:
 800eea8:	b513      	push	{r0, r1, r4, lr}
 800eeaa:	0004      	movs	r4, r0
 800eeac:	f7ff ffec 	bl	800ee88 <__sinit_lock_acquire>
 800eeb0:	69a3      	ldr	r3, [r4, #24]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d002      	beq.n	800eebc <__sinit+0x14>
 800eeb6:	f7ff ffef 	bl	800ee98 <__sinit_lock_release>
 800eeba:	bd13      	pop	{r0, r1, r4, pc}
 800eebc:	64a3      	str	r3, [r4, #72]	; 0x48
 800eebe:	64e3      	str	r3, [r4, #76]	; 0x4c
 800eec0:	6523      	str	r3, [r4, #80]	; 0x50
 800eec2:	4b13      	ldr	r3, [pc, #76]	; (800ef10 <__sinit+0x68>)
 800eec4:	4a13      	ldr	r2, [pc, #76]	; (800ef14 <__sinit+0x6c>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	62a2      	str	r2, [r4, #40]	; 0x28
 800eeca:	9301      	str	r3, [sp, #4]
 800eecc:	42a3      	cmp	r3, r4
 800eece:	d101      	bne.n	800eed4 <__sinit+0x2c>
 800eed0:	2301      	movs	r3, #1
 800eed2:	61a3      	str	r3, [r4, #24]
 800eed4:	0020      	movs	r0, r4
 800eed6:	f000 f81f 	bl	800ef18 <__sfp>
 800eeda:	6060      	str	r0, [r4, #4]
 800eedc:	0020      	movs	r0, r4
 800eede:	f000 f81b 	bl	800ef18 <__sfp>
 800eee2:	60a0      	str	r0, [r4, #8]
 800eee4:	0020      	movs	r0, r4
 800eee6:	f000 f817 	bl	800ef18 <__sfp>
 800eeea:	2200      	movs	r2, #0
 800eeec:	2104      	movs	r1, #4
 800eeee:	60e0      	str	r0, [r4, #12]
 800eef0:	6860      	ldr	r0, [r4, #4]
 800eef2:	f7ff ff77 	bl	800ede4 <std>
 800eef6:	2201      	movs	r2, #1
 800eef8:	2109      	movs	r1, #9
 800eefa:	68a0      	ldr	r0, [r4, #8]
 800eefc:	f7ff ff72 	bl	800ede4 <std>
 800ef00:	2202      	movs	r2, #2
 800ef02:	2112      	movs	r1, #18
 800ef04:	68e0      	ldr	r0, [r4, #12]
 800ef06:	f7ff ff6d 	bl	800ede4 <std>
 800ef0a:	2301      	movs	r3, #1
 800ef0c:	61a3      	str	r3, [r4, #24]
 800ef0e:	e7d2      	b.n	800eeb6 <__sinit+0xe>
 800ef10:	080109f0 	.word	0x080109f0
 800ef14:	0800ee2d 	.word	0x0800ee2d

0800ef18 <__sfp>:
 800ef18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef1a:	0007      	movs	r7, r0
 800ef1c:	f7ff ffa4 	bl	800ee68 <__sfp_lock_acquire>
 800ef20:	4b1f      	ldr	r3, [pc, #124]	; (800efa0 <__sfp+0x88>)
 800ef22:	681e      	ldr	r6, [r3, #0]
 800ef24:	69b3      	ldr	r3, [r6, #24]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d102      	bne.n	800ef30 <__sfp+0x18>
 800ef2a:	0030      	movs	r0, r6
 800ef2c:	f7ff ffbc 	bl	800eea8 <__sinit>
 800ef30:	3648      	adds	r6, #72	; 0x48
 800ef32:	68b4      	ldr	r4, [r6, #8]
 800ef34:	6873      	ldr	r3, [r6, #4]
 800ef36:	3b01      	subs	r3, #1
 800ef38:	d504      	bpl.n	800ef44 <__sfp+0x2c>
 800ef3a:	6833      	ldr	r3, [r6, #0]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d022      	beq.n	800ef86 <__sfp+0x6e>
 800ef40:	6836      	ldr	r6, [r6, #0]
 800ef42:	e7f6      	b.n	800ef32 <__sfp+0x1a>
 800ef44:	220c      	movs	r2, #12
 800ef46:	5ea5      	ldrsh	r5, [r4, r2]
 800ef48:	2d00      	cmp	r5, #0
 800ef4a:	d11a      	bne.n	800ef82 <__sfp+0x6a>
 800ef4c:	0020      	movs	r0, r4
 800ef4e:	4b15      	ldr	r3, [pc, #84]	; (800efa4 <__sfp+0x8c>)
 800ef50:	3058      	adds	r0, #88	; 0x58
 800ef52:	60e3      	str	r3, [r4, #12]
 800ef54:	6665      	str	r5, [r4, #100]	; 0x64
 800ef56:	f000 f847 	bl	800efe8 <__retarget_lock_init_recursive>
 800ef5a:	f7ff ff8d 	bl	800ee78 <__sfp_lock_release>
 800ef5e:	0020      	movs	r0, r4
 800ef60:	2208      	movs	r2, #8
 800ef62:	0029      	movs	r1, r5
 800ef64:	6025      	str	r5, [r4, #0]
 800ef66:	60a5      	str	r5, [r4, #8]
 800ef68:	6065      	str	r5, [r4, #4]
 800ef6a:	6125      	str	r5, [r4, #16]
 800ef6c:	6165      	str	r5, [r4, #20]
 800ef6e:	61a5      	str	r5, [r4, #24]
 800ef70:	305c      	adds	r0, #92	; 0x5c
 800ef72:	f7fd faf8 	bl	800c566 <memset>
 800ef76:	6365      	str	r5, [r4, #52]	; 0x34
 800ef78:	63a5      	str	r5, [r4, #56]	; 0x38
 800ef7a:	64a5      	str	r5, [r4, #72]	; 0x48
 800ef7c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800ef7e:	0020      	movs	r0, r4
 800ef80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef82:	3468      	adds	r4, #104	; 0x68
 800ef84:	e7d7      	b.n	800ef36 <__sfp+0x1e>
 800ef86:	2104      	movs	r1, #4
 800ef88:	0038      	movs	r0, r7
 800ef8a:	f7ff ff57 	bl	800ee3c <__sfmoreglue>
 800ef8e:	1e04      	subs	r4, r0, #0
 800ef90:	6030      	str	r0, [r6, #0]
 800ef92:	d1d5      	bne.n	800ef40 <__sfp+0x28>
 800ef94:	f7ff ff70 	bl	800ee78 <__sfp_lock_release>
 800ef98:	230c      	movs	r3, #12
 800ef9a:	603b      	str	r3, [r7, #0]
 800ef9c:	e7ef      	b.n	800ef7e <__sfp+0x66>
 800ef9e:	46c0      	nop			; (mov r8, r8)
 800efa0:	080109f0 	.word	0x080109f0
 800efa4:	ffff0001 	.word	0xffff0001

0800efa8 <_fwalk_reent>:
 800efa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800efaa:	0004      	movs	r4, r0
 800efac:	0006      	movs	r6, r0
 800efae:	2700      	movs	r7, #0
 800efb0:	9101      	str	r1, [sp, #4]
 800efb2:	3448      	adds	r4, #72	; 0x48
 800efb4:	6863      	ldr	r3, [r4, #4]
 800efb6:	68a5      	ldr	r5, [r4, #8]
 800efb8:	9300      	str	r3, [sp, #0]
 800efba:	9b00      	ldr	r3, [sp, #0]
 800efbc:	3b01      	subs	r3, #1
 800efbe:	9300      	str	r3, [sp, #0]
 800efc0:	d504      	bpl.n	800efcc <_fwalk_reent+0x24>
 800efc2:	6824      	ldr	r4, [r4, #0]
 800efc4:	2c00      	cmp	r4, #0
 800efc6:	d1f5      	bne.n	800efb4 <_fwalk_reent+0xc>
 800efc8:	0038      	movs	r0, r7
 800efca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800efcc:	89ab      	ldrh	r3, [r5, #12]
 800efce:	2b01      	cmp	r3, #1
 800efd0:	d908      	bls.n	800efe4 <_fwalk_reent+0x3c>
 800efd2:	220e      	movs	r2, #14
 800efd4:	5eab      	ldrsh	r3, [r5, r2]
 800efd6:	3301      	adds	r3, #1
 800efd8:	d004      	beq.n	800efe4 <_fwalk_reent+0x3c>
 800efda:	0029      	movs	r1, r5
 800efdc:	0030      	movs	r0, r6
 800efde:	9b01      	ldr	r3, [sp, #4]
 800efe0:	4798      	blx	r3
 800efe2:	4307      	orrs	r7, r0
 800efe4:	3568      	adds	r5, #104	; 0x68
 800efe6:	e7e8      	b.n	800efba <_fwalk_reent+0x12>

0800efe8 <__retarget_lock_init_recursive>:
 800efe8:	4770      	bx	lr

0800efea <__retarget_lock_acquire_recursive>:
 800efea:	4770      	bx	lr

0800efec <__retarget_lock_release_recursive>:
 800efec:	4770      	bx	lr
	...

0800eff0 <__swhatbuf_r>:
 800eff0:	b570      	push	{r4, r5, r6, lr}
 800eff2:	000e      	movs	r6, r1
 800eff4:	001d      	movs	r5, r3
 800eff6:	230e      	movs	r3, #14
 800eff8:	5ec9      	ldrsh	r1, [r1, r3]
 800effa:	0014      	movs	r4, r2
 800effc:	b096      	sub	sp, #88	; 0x58
 800effe:	2900      	cmp	r1, #0
 800f000:	da08      	bge.n	800f014 <__swhatbuf_r+0x24>
 800f002:	220c      	movs	r2, #12
 800f004:	5eb3      	ldrsh	r3, [r6, r2]
 800f006:	2200      	movs	r2, #0
 800f008:	602a      	str	r2, [r5, #0]
 800f00a:	061b      	lsls	r3, r3, #24
 800f00c:	d411      	bmi.n	800f032 <__swhatbuf_r+0x42>
 800f00e:	2380      	movs	r3, #128	; 0x80
 800f010:	00db      	lsls	r3, r3, #3
 800f012:	e00f      	b.n	800f034 <__swhatbuf_r+0x44>
 800f014:	466a      	mov	r2, sp
 800f016:	f000 f913 	bl	800f240 <_fstat_r>
 800f01a:	2800      	cmp	r0, #0
 800f01c:	dbf1      	blt.n	800f002 <__swhatbuf_r+0x12>
 800f01e:	23f0      	movs	r3, #240	; 0xf0
 800f020:	9901      	ldr	r1, [sp, #4]
 800f022:	021b      	lsls	r3, r3, #8
 800f024:	4019      	ands	r1, r3
 800f026:	4b05      	ldr	r3, [pc, #20]	; (800f03c <__swhatbuf_r+0x4c>)
 800f028:	18c9      	adds	r1, r1, r3
 800f02a:	424b      	negs	r3, r1
 800f02c:	4159      	adcs	r1, r3
 800f02e:	6029      	str	r1, [r5, #0]
 800f030:	e7ed      	b.n	800f00e <__swhatbuf_r+0x1e>
 800f032:	2340      	movs	r3, #64	; 0x40
 800f034:	2000      	movs	r0, #0
 800f036:	6023      	str	r3, [r4, #0]
 800f038:	b016      	add	sp, #88	; 0x58
 800f03a:	bd70      	pop	{r4, r5, r6, pc}
 800f03c:	ffffe000 	.word	0xffffe000

0800f040 <__smakebuf_r>:
 800f040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f042:	2602      	movs	r6, #2
 800f044:	898b      	ldrh	r3, [r1, #12]
 800f046:	0005      	movs	r5, r0
 800f048:	000c      	movs	r4, r1
 800f04a:	4233      	tst	r3, r6
 800f04c:	d006      	beq.n	800f05c <__smakebuf_r+0x1c>
 800f04e:	0023      	movs	r3, r4
 800f050:	3347      	adds	r3, #71	; 0x47
 800f052:	6023      	str	r3, [r4, #0]
 800f054:	6123      	str	r3, [r4, #16]
 800f056:	2301      	movs	r3, #1
 800f058:	6163      	str	r3, [r4, #20]
 800f05a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800f05c:	466a      	mov	r2, sp
 800f05e:	ab01      	add	r3, sp, #4
 800f060:	f7ff ffc6 	bl	800eff0 <__swhatbuf_r>
 800f064:	9900      	ldr	r1, [sp, #0]
 800f066:	0007      	movs	r7, r0
 800f068:	0028      	movs	r0, r5
 800f06a:	f7fe f8bd 	bl	800d1e8 <_malloc_r>
 800f06e:	2800      	cmp	r0, #0
 800f070:	d108      	bne.n	800f084 <__smakebuf_r+0x44>
 800f072:	220c      	movs	r2, #12
 800f074:	5ea3      	ldrsh	r3, [r4, r2]
 800f076:	059a      	lsls	r2, r3, #22
 800f078:	d4ef      	bmi.n	800f05a <__smakebuf_r+0x1a>
 800f07a:	2203      	movs	r2, #3
 800f07c:	4393      	bics	r3, r2
 800f07e:	431e      	orrs	r6, r3
 800f080:	81a6      	strh	r6, [r4, #12]
 800f082:	e7e4      	b.n	800f04e <__smakebuf_r+0xe>
 800f084:	4b0f      	ldr	r3, [pc, #60]	; (800f0c4 <__smakebuf_r+0x84>)
 800f086:	62ab      	str	r3, [r5, #40]	; 0x28
 800f088:	2380      	movs	r3, #128	; 0x80
 800f08a:	89a2      	ldrh	r2, [r4, #12]
 800f08c:	6020      	str	r0, [r4, #0]
 800f08e:	4313      	orrs	r3, r2
 800f090:	81a3      	strh	r3, [r4, #12]
 800f092:	9b00      	ldr	r3, [sp, #0]
 800f094:	6120      	str	r0, [r4, #16]
 800f096:	6163      	str	r3, [r4, #20]
 800f098:	9b01      	ldr	r3, [sp, #4]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d00d      	beq.n	800f0ba <__smakebuf_r+0x7a>
 800f09e:	0028      	movs	r0, r5
 800f0a0:	230e      	movs	r3, #14
 800f0a2:	5ee1      	ldrsh	r1, [r4, r3]
 800f0a4:	f000 f8de 	bl	800f264 <_isatty_r>
 800f0a8:	2800      	cmp	r0, #0
 800f0aa:	d006      	beq.n	800f0ba <__smakebuf_r+0x7a>
 800f0ac:	2203      	movs	r2, #3
 800f0ae:	89a3      	ldrh	r3, [r4, #12]
 800f0b0:	4393      	bics	r3, r2
 800f0b2:	001a      	movs	r2, r3
 800f0b4:	2301      	movs	r3, #1
 800f0b6:	4313      	orrs	r3, r2
 800f0b8:	81a3      	strh	r3, [r4, #12]
 800f0ba:	89a0      	ldrh	r0, [r4, #12]
 800f0bc:	4307      	orrs	r7, r0
 800f0be:	81a7      	strh	r7, [r4, #12]
 800f0c0:	e7cb      	b.n	800f05a <__smakebuf_r+0x1a>
 800f0c2:	46c0      	nop			; (mov r8, r8)
 800f0c4:	0800ee2d 	.word	0x0800ee2d

0800f0c8 <_raise_r>:
 800f0c8:	b570      	push	{r4, r5, r6, lr}
 800f0ca:	0004      	movs	r4, r0
 800f0cc:	000d      	movs	r5, r1
 800f0ce:	291f      	cmp	r1, #31
 800f0d0:	d904      	bls.n	800f0dc <_raise_r+0x14>
 800f0d2:	2316      	movs	r3, #22
 800f0d4:	6003      	str	r3, [r0, #0]
 800f0d6:	2001      	movs	r0, #1
 800f0d8:	4240      	negs	r0, r0
 800f0da:	bd70      	pop	{r4, r5, r6, pc}
 800f0dc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d004      	beq.n	800f0ec <_raise_r+0x24>
 800f0e2:	008a      	lsls	r2, r1, #2
 800f0e4:	189b      	adds	r3, r3, r2
 800f0e6:	681a      	ldr	r2, [r3, #0]
 800f0e8:	2a00      	cmp	r2, #0
 800f0ea:	d108      	bne.n	800f0fe <_raise_r+0x36>
 800f0ec:	0020      	movs	r0, r4
 800f0ee:	f000 f831 	bl	800f154 <_getpid_r>
 800f0f2:	002a      	movs	r2, r5
 800f0f4:	0001      	movs	r1, r0
 800f0f6:	0020      	movs	r0, r4
 800f0f8:	f000 f81a 	bl	800f130 <_kill_r>
 800f0fc:	e7ed      	b.n	800f0da <_raise_r+0x12>
 800f0fe:	2000      	movs	r0, #0
 800f100:	2a01      	cmp	r2, #1
 800f102:	d0ea      	beq.n	800f0da <_raise_r+0x12>
 800f104:	1c51      	adds	r1, r2, #1
 800f106:	d103      	bne.n	800f110 <_raise_r+0x48>
 800f108:	2316      	movs	r3, #22
 800f10a:	3001      	adds	r0, #1
 800f10c:	6023      	str	r3, [r4, #0]
 800f10e:	e7e4      	b.n	800f0da <_raise_r+0x12>
 800f110:	2400      	movs	r4, #0
 800f112:	0028      	movs	r0, r5
 800f114:	601c      	str	r4, [r3, #0]
 800f116:	4790      	blx	r2
 800f118:	0020      	movs	r0, r4
 800f11a:	e7de      	b.n	800f0da <_raise_r+0x12>

0800f11c <raise>:
 800f11c:	b510      	push	{r4, lr}
 800f11e:	4b03      	ldr	r3, [pc, #12]	; (800f12c <raise+0x10>)
 800f120:	0001      	movs	r1, r0
 800f122:	6818      	ldr	r0, [r3, #0]
 800f124:	f7ff ffd0 	bl	800f0c8 <_raise_r>
 800f128:	bd10      	pop	{r4, pc}
 800f12a:	46c0      	nop			; (mov r8, r8)
 800f12c:	2000001c 	.word	0x2000001c

0800f130 <_kill_r>:
 800f130:	2300      	movs	r3, #0
 800f132:	b570      	push	{r4, r5, r6, lr}
 800f134:	4d06      	ldr	r5, [pc, #24]	; (800f150 <_kill_r+0x20>)
 800f136:	0004      	movs	r4, r0
 800f138:	0008      	movs	r0, r1
 800f13a:	0011      	movs	r1, r2
 800f13c:	602b      	str	r3, [r5, #0]
 800f13e:	f7f7 fd57 	bl	8006bf0 <_kill>
 800f142:	1c43      	adds	r3, r0, #1
 800f144:	d103      	bne.n	800f14e <_kill_r+0x1e>
 800f146:	682b      	ldr	r3, [r5, #0]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d000      	beq.n	800f14e <_kill_r+0x1e>
 800f14c:	6023      	str	r3, [r4, #0]
 800f14e:	bd70      	pop	{r4, r5, r6, pc}
 800f150:	200016a4 	.word	0x200016a4

0800f154 <_getpid_r>:
 800f154:	b510      	push	{r4, lr}
 800f156:	f7f7 fd45 	bl	8006be4 <_getpid>
 800f15a:	bd10      	pop	{r4, pc}

0800f15c <__sread>:
 800f15c:	b570      	push	{r4, r5, r6, lr}
 800f15e:	000c      	movs	r4, r1
 800f160:	250e      	movs	r5, #14
 800f162:	5f49      	ldrsh	r1, [r1, r5]
 800f164:	f000 f8a4 	bl	800f2b0 <_read_r>
 800f168:	2800      	cmp	r0, #0
 800f16a:	db03      	blt.n	800f174 <__sread+0x18>
 800f16c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f16e:	181b      	adds	r3, r3, r0
 800f170:	6563      	str	r3, [r4, #84]	; 0x54
 800f172:	bd70      	pop	{r4, r5, r6, pc}
 800f174:	89a3      	ldrh	r3, [r4, #12]
 800f176:	4a02      	ldr	r2, [pc, #8]	; (800f180 <__sread+0x24>)
 800f178:	4013      	ands	r3, r2
 800f17a:	81a3      	strh	r3, [r4, #12]
 800f17c:	e7f9      	b.n	800f172 <__sread+0x16>
 800f17e:	46c0      	nop			; (mov r8, r8)
 800f180:	ffffefff 	.word	0xffffefff

0800f184 <__swrite>:
 800f184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f186:	001f      	movs	r7, r3
 800f188:	898b      	ldrh	r3, [r1, #12]
 800f18a:	0005      	movs	r5, r0
 800f18c:	000c      	movs	r4, r1
 800f18e:	0016      	movs	r6, r2
 800f190:	05db      	lsls	r3, r3, #23
 800f192:	d505      	bpl.n	800f1a0 <__swrite+0x1c>
 800f194:	230e      	movs	r3, #14
 800f196:	5ec9      	ldrsh	r1, [r1, r3]
 800f198:	2200      	movs	r2, #0
 800f19a:	2302      	movs	r3, #2
 800f19c:	f000 f874 	bl	800f288 <_lseek_r>
 800f1a0:	89a3      	ldrh	r3, [r4, #12]
 800f1a2:	4a05      	ldr	r2, [pc, #20]	; (800f1b8 <__swrite+0x34>)
 800f1a4:	0028      	movs	r0, r5
 800f1a6:	4013      	ands	r3, r2
 800f1a8:	81a3      	strh	r3, [r4, #12]
 800f1aa:	0032      	movs	r2, r6
 800f1ac:	230e      	movs	r3, #14
 800f1ae:	5ee1      	ldrsh	r1, [r4, r3]
 800f1b0:	003b      	movs	r3, r7
 800f1b2:	f000 f81f 	bl	800f1f4 <_write_r>
 800f1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1b8:	ffffefff 	.word	0xffffefff

0800f1bc <__sseek>:
 800f1bc:	b570      	push	{r4, r5, r6, lr}
 800f1be:	000c      	movs	r4, r1
 800f1c0:	250e      	movs	r5, #14
 800f1c2:	5f49      	ldrsh	r1, [r1, r5]
 800f1c4:	f000 f860 	bl	800f288 <_lseek_r>
 800f1c8:	89a3      	ldrh	r3, [r4, #12]
 800f1ca:	1c42      	adds	r2, r0, #1
 800f1cc:	d103      	bne.n	800f1d6 <__sseek+0x1a>
 800f1ce:	4a05      	ldr	r2, [pc, #20]	; (800f1e4 <__sseek+0x28>)
 800f1d0:	4013      	ands	r3, r2
 800f1d2:	81a3      	strh	r3, [r4, #12]
 800f1d4:	bd70      	pop	{r4, r5, r6, pc}
 800f1d6:	2280      	movs	r2, #128	; 0x80
 800f1d8:	0152      	lsls	r2, r2, #5
 800f1da:	4313      	orrs	r3, r2
 800f1dc:	81a3      	strh	r3, [r4, #12]
 800f1de:	6560      	str	r0, [r4, #84]	; 0x54
 800f1e0:	e7f8      	b.n	800f1d4 <__sseek+0x18>
 800f1e2:	46c0      	nop			; (mov r8, r8)
 800f1e4:	ffffefff 	.word	0xffffefff

0800f1e8 <__sclose>:
 800f1e8:	b510      	push	{r4, lr}
 800f1ea:	230e      	movs	r3, #14
 800f1ec:	5ec9      	ldrsh	r1, [r1, r3]
 800f1ee:	f000 f815 	bl	800f21c <_close_r>
 800f1f2:	bd10      	pop	{r4, pc}

0800f1f4 <_write_r>:
 800f1f4:	b570      	push	{r4, r5, r6, lr}
 800f1f6:	0004      	movs	r4, r0
 800f1f8:	0008      	movs	r0, r1
 800f1fa:	0011      	movs	r1, r2
 800f1fc:	001a      	movs	r2, r3
 800f1fe:	2300      	movs	r3, #0
 800f200:	4d05      	ldr	r5, [pc, #20]	; (800f218 <_write_r+0x24>)
 800f202:	602b      	str	r3, [r5, #0]
 800f204:	f7f7 fd2d 	bl	8006c62 <_write>
 800f208:	1c43      	adds	r3, r0, #1
 800f20a:	d103      	bne.n	800f214 <_write_r+0x20>
 800f20c:	682b      	ldr	r3, [r5, #0]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d000      	beq.n	800f214 <_write_r+0x20>
 800f212:	6023      	str	r3, [r4, #0]
 800f214:	bd70      	pop	{r4, r5, r6, pc}
 800f216:	46c0      	nop			; (mov r8, r8)
 800f218:	200016a4 	.word	0x200016a4

0800f21c <_close_r>:
 800f21c:	2300      	movs	r3, #0
 800f21e:	b570      	push	{r4, r5, r6, lr}
 800f220:	4d06      	ldr	r5, [pc, #24]	; (800f23c <_close_r+0x20>)
 800f222:	0004      	movs	r4, r0
 800f224:	0008      	movs	r0, r1
 800f226:	602b      	str	r3, [r5, #0]
 800f228:	f7f7 fd37 	bl	8006c9a <_close>
 800f22c:	1c43      	adds	r3, r0, #1
 800f22e:	d103      	bne.n	800f238 <_close_r+0x1c>
 800f230:	682b      	ldr	r3, [r5, #0]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d000      	beq.n	800f238 <_close_r+0x1c>
 800f236:	6023      	str	r3, [r4, #0]
 800f238:	bd70      	pop	{r4, r5, r6, pc}
 800f23a:	46c0      	nop			; (mov r8, r8)
 800f23c:	200016a4 	.word	0x200016a4

0800f240 <_fstat_r>:
 800f240:	2300      	movs	r3, #0
 800f242:	b570      	push	{r4, r5, r6, lr}
 800f244:	4d06      	ldr	r5, [pc, #24]	; (800f260 <_fstat_r+0x20>)
 800f246:	0004      	movs	r4, r0
 800f248:	0008      	movs	r0, r1
 800f24a:	0011      	movs	r1, r2
 800f24c:	602b      	str	r3, [r5, #0]
 800f24e:	f7f7 fd2e 	bl	8006cae <_fstat>
 800f252:	1c43      	adds	r3, r0, #1
 800f254:	d103      	bne.n	800f25e <_fstat_r+0x1e>
 800f256:	682b      	ldr	r3, [r5, #0]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d000      	beq.n	800f25e <_fstat_r+0x1e>
 800f25c:	6023      	str	r3, [r4, #0]
 800f25e:	bd70      	pop	{r4, r5, r6, pc}
 800f260:	200016a4 	.word	0x200016a4

0800f264 <_isatty_r>:
 800f264:	2300      	movs	r3, #0
 800f266:	b570      	push	{r4, r5, r6, lr}
 800f268:	4d06      	ldr	r5, [pc, #24]	; (800f284 <_isatty_r+0x20>)
 800f26a:	0004      	movs	r4, r0
 800f26c:	0008      	movs	r0, r1
 800f26e:	602b      	str	r3, [r5, #0]
 800f270:	f7f7 fd2b 	bl	8006cca <_isatty>
 800f274:	1c43      	adds	r3, r0, #1
 800f276:	d103      	bne.n	800f280 <_isatty_r+0x1c>
 800f278:	682b      	ldr	r3, [r5, #0]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d000      	beq.n	800f280 <_isatty_r+0x1c>
 800f27e:	6023      	str	r3, [r4, #0]
 800f280:	bd70      	pop	{r4, r5, r6, pc}
 800f282:	46c0      	nop			; (mov r8, r8)
 800f284:	200016a4 	.word	0x200016a4

0800f288 <_lseek_r>:
 800f288:	b570      	push	{r4, r5, r6, lr}
 800f28a:	0004      	movs	r4, r0
 800f28c:	0008      	movs	r0, r1
 800f28e:	0011      	movs	r1, r2
 800f290:	001a      	movs	r2, r3
 800f292:	2300      	movs	r3, #0
 800f294:	4d05      	ldr	r5, [pc, #20]	; (800f2ac <_lseek_r+0x24>)
 800f296:	602b      	str	r3, [r5, #0]
 800f298:	f7f7 fd20 	bl	8006cdc <_lseek>
 800f29c:	1c43      	adds	r3, r0, #1
 800f29e:	d103      	bne.n	800f2a8 <_lseek_r+0x20>
 800f2a0:	682b      	ldr	r3, [r5, #0]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d000      	beq.n	800f2a8 <_lseek_r+0x20>
 800f2a6:	6023      	str	r3, [r4, #0]
 800f2a8:	bd70      	pop	{r4, r5, r6, pc}
 800f2aa:	46c0      	nop			; (mov r8, r8)
 800f2ac:	200016a4 	.word	0x200016a4

0800f2b0 <_read_r>:
 800f2b0:	b570      	push	{r4, r5, r6, lr}
 800f2b2:	0004      	movs	r4, r0
 800f2b4:	0008      	movs	r0, r1
 800f2b6:	0011      	movs	r1, r2
 800f2b8:	001a      	movs	r2, r3
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	4d05      	ldr	r5, [pc, #20]	; (800f2d4 <_read_r+0x24>)
 800f2be:	602b      	str	r3, [r5, #0]
 800f2c0:	f7f7 fcb2 	bl	8006c28 <_read>
 800f2c4:	1c43      	adds	r3, r0, #1
 800f2c6:	d103      	bne.n	800f2d0 <_read_r+0x20>
 800f2c8:	682b      	ldr	r3, [r5, #0]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d000      	beq.n	800f2d0 <_read_r+0x20>
 800f2ce:	6023      	str	r3, [r4, #0]
 800f2d0:	bd70      	pop	{r4, r5, r6, pc}
 800f2d2:	46c0      	nop			; (mov r8, r8)
 800f2d4:	200016a4 	.word	0x200016a4

0800f2d8 <_init>:
 800f2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2da:	46c0      	nop			; (mov r8, r8)
 800f2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2de:	bc08      	pop	{r3}
 800f2e0:	469e      	mov	lr, r3
 800f2e2:	4770      	bx	lr

0800f2e4 <_fini>:
 800f2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2e6:	46c0      	nop			; (mov r8, r8)
 800f2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2ea:	bc08      	pop	{r3}
 800f2ec:	469e      	mov	lr, r3
 800f2ee:	4770      	bx	lr
